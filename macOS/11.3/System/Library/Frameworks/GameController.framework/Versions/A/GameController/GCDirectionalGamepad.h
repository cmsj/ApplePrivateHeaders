/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:34 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/GameController.framework/Versions/A/GameController
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <GameController/GameController-Structs.h>
#import <GameController/GCMicroGamepad.h>
#import <libobjc.A.dylib/CoalescableMicroGamepad.h>
#import <libobjc.A.dylib/DigitizerValueChangedDelegate.h>
#import <libobjc.A.dylib/DirectionPadValueChangedDelegate.h>

@class GCControllerDirectionPad, NSString;

@interface GCDirectionalGamepad : GCMicroGamepad <CoalescableMicroGamepad, DigitizerValueChangedDelegate, DirectionPadValueChangedDelegate> {

	char _reportsAbsoluteDpadValues;
	float _touchpadRelativeWindowSize;
	float _touchpadRelativeOriginBufferSize;
	unsigned char _directionPadButtonsState;
	long long _touchState;
	char _leftBufferZone;
	char _beganTouchOutsideBounds;
	float _previousButtonState;
	CGPoint _absoluteWindowLocation;
	CGPoint _absolutePosition;
	CGPoint _absoluteTouchDownPosition;
	CGPoint _relativePosition;
	GCControllerDirectionPad* _cardinalDpad;
	unsigned long long _owner;
	long long _deviceType;

}

@property (assign,nonatomic) unsigned long long owner; 
@property (assign,nonatomic) long long deviceType; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (readonly) GCControllerDirectionPad * dpad; 
-(void)setOwner:(unsigned long long)arg1 ;
-(id)initWithIdentifier:(id)arg1 ;
-(unsigned long long)owner;
-(long long)deviceType;
-(void)setDeviceType:(long long)arg1 ;
-(char)ownershipClaimingElementsZero;
-(double)distanceBetweenCGPoint:(CGPoint)arg1 andCGPoint:(CGPoint)arg2 ;
-(CGPoint)mulCGPoint:(CGPoint)arg1 byScalar:(double)arg2 ;
-(CGPoint)normalizeCGPoint:(CGPoint)arg1 ;
-(CGPoint)scaleCGPoint:(CGPoint)arg1 toLength:(double)arg2 ;
-(CGPoint)addCGPoint:(CGPoint)arg1 toPoint:(CGPoint)arg2 ;
-(double)magnitudeForCGPoint:(CGPoint)arg1 ;
-(CGPoint)subCGPoint:(CGPoint)arg1 fromPoint:(CGPoint)arg2 ;
-(CGPoint)clampPoint:(CGPoint)arg1 toLength:(double)arg2 ;
-(char)determineTouchStateWithDigitizerX:(float)arg1 digitizerY:(float)arg2 touchDown:(char)arg3 ;
-(char)calculateRelativePositionWithDigitizerX:(float)arg1 digitizerY:(float)arg2 touchDown:(char)arg3 ;
-(void)reportDigitizerChange:(id)arg1 ;
-(char)reportsAbsoluteDpadValues;
-(char)allowsRotation;
-(void)setAllowsRotation:(char)arg1 ;
-(void)digitizerTouchEvent:(id)arg1 x:(double)arg2 y:(double)arg3 timestamp:(unsigned long long)arg4 forceSkipDpadRotation:(char)arg5 ;
-(void)digitizerTouchUp:(id)arg1 timestamp:(unsigned long long)arg2 forceSkipDpadRotation:(char)arg3 ;
-(void)setReportsAbsoluteDpadValues:(char)arg1 ;
-(void)reportDirectionpadChange:(id)arg1 onQueue:(id)arg2 ;
-(void)setDpad:(id)arg1 digitizerX:(double)arg2 digitizerY:(double)arg3 touchDown:(char)arg4 ;
-(id)dpadDirectionEvent:(id)arg1 direction:(unsigned long long)arg2 pressed:(char)arg3 ;
@end

