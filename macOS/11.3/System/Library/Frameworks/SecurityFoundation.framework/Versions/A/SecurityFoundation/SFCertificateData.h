/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:06 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <SecurityFoundation/SecurityFoundation-Structs.h>
@interface SFCertificateData : NSObject {

	id _reserved_SFCertificateData;

}
+(char)isOCSPStatusCode:(int)arg1 ;
+(char)isCRLStatusCode:(int)arg1 ;
+(char)isCA:(SecCertificateRef)arg1 ;
+(id)policyValuesForTrust:(SecTrustRef)arg1 ;
+(char)isRevocationStatusCode:(int)arg1 ;
+(char)isPolicySpecificStatusCode:(int)arg1 ;
+(int)createTrustWithCertificates:(id)arg1 policy:(void*)arg2 trust:(_SecTrust*)arg3 ;
+(id)statusStringForCode:(int)arg1 domain:(unsigned)arg2 ;
+(id)_sharedOidParser;
+(void)_releaseSharedOidParser;
+(unsigned)trustDomainForKeychain:(SecKeychainRef)arg1 ;
+(void)setLogLevel:(long long)arg1 ;
+(long long)logLevel;
+(id)trustPolicies;
+(char)isRoot:(SecCertificateRef)arg1 ;
-(id)oidParser;
-(id)initWithCertData:(cssm_data*)arg1 ;
-(char)isEqualToSFCertificateData:(id)arg1 ;
-(void)addFieldIndex:(int)arg1 forKey:(id)arg2 ;
-(void)parseX509Name:(const cssm_x509_name*)arg1 setTitle:(char)arg2 indent:(int)arg3 ;
-(void)parseRelativeDistinguishedName:(const cssm_data*)arg1 indent:(int)arg2 ;
-(int)parsePrintableBERSequence:(const cssm_data*)arg1 label:(id)arg2 indent:(int)arg3 ;
-(void)parseGeneralNames:(_CE_GeneralNames*)arg1 indent:(int)arg2 ;
-(void)parseDistributionPoint:(const _CE_CRLDistributionPoint*)arg1 ;
-(int)parseAccessDescription:(const cssm_data*)arg1 index:(int)arg2 ;
-(int)parseGeneralSubtree:(const cssm_data*)arg1 index:(int)arg2 ;
-(int)parsePolicyConstraints:(const cssm_data*)arg1 ;
-(int)parsePrivateKeyUsagePeriod:(const cssm_data*)arg1 ;
-(int)parseEntrustVersInfo:(const cssm_data*)arg1 ;
-(int)parseInfoAccess:(const cssm_data*)arg1 forAuthority:(char)arg2 ;
-(int)parseInhibitAnyPolicy:(const cssm_data*)arg1 ;
-(int)parseNameConstraints:(const cssm_data*)arg1 ;
-(int)parseEmbeddedSCTs:(const cssm_data*)arg1 ;
-(id)fieldDataForOid:(const cssm_data*)arg1 ;
-(void)parseKeyHeader:(const cssm_keyheader*)arg1 ;
-(int)parseExtensionCommon:(const cssm_data*)arg1 expect:(char)arg2 ;
-(void)parseKeyUsage:(const cssm_data*)arg1 ;
-(void)parseBasicConstraints:(const cssm_data*)arg1 ;
-(void)parseExtKeyUsage:(const cssm_data*)arg1 ;
-(void)parseAuthorityKeyId:(const cssm_data*)arg1 ;
-(void)parseAlternativeName:(const cssm_data*)arg1 ;
-(int)parseCrlDistributionPoints:(const cssm_data*)arg1 ;
-(void)parseCertPolicies:(const cssm_data*)arg1 ;
-(void)parseNetscapeCertType:(const cssm_data*)arg1 ;
-(id)certTitle;
-(id)fieldDataForOid:(const cssm_data*)arg1 inCert:(const cssm_data*)arg2 auxData:(id*)arg3 ;
-(long long)clHandle;
-(void)minimalParseCert:(const cssm_data*)arg1 ;
-(void)parseField:(const cssm_field*)arg1 atIndex:(unsigned)arg2 ;
-(void)parseCert:(const cssm_data*)arg1 ;
-(SecPolicyRef)copyPolicyForOid:(const cssm_data*)arg1 ;
-(id)trustValuesForDomain:(unsigned)arg1 cached:(char)arg2 ;
-(unsigned)trustDomain;
-(id)evaluateStatus;
-(char)existsInKeychain:(void*)arg1 path:(id*)arg2 ;
-(int)certStatusFromDomainTrustSettings:(unsigned)arg1 isMixed:(char*)arg2 hasBasic:(char*)arg3 names:(id*)arg4 ;
-(char)certificate:(SecCertificateRef)arg1 isEqualTo:(SecCertificateRef)arg2 ;
-(char)ignorableStatusCode:(int)arg1 ;
-(id)policyValues;
-(unsigned long long)certExpirationDateIndex;
-(long long)indentAtIndex:(unsigned long long)arg1 ;
-(void)parseGeneralNamesSequence:(const cssm_data*)arg1 indent:(int)arg2 ;
-(id)userIdentityFieldIndexes;
-(char)isLeafCertificate;
-(id)policyNames;
-(id)trustValuesForDomain:(unsigned)arg1 ;
-(id)trustValues;
-(void)setTrustValues:(id)arg1 ;
-(void)saveUserTrustValues;
-(void)setTrustDomain:(unsigned)arg1 ;
-(void)saveTrustValuesInDomain:(unsigned)arg1 ;
-(void)saveTrustValues;
-(char)trustChanged;
-(int)evalStatus;
-(id)authorityString;
-(id)expirationString;
-(id)extensionLabelString;
-(id)pemEncodedTextData;
-(void)dealloc;
-(char)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(id)init;
-(cssm_data*)data;
-(id)initWithData:(cssm_data*)arg1 ;
-(void)setData:(cssm_data*)arg1 ;
-(id)expirationDate;
-(SecCertificateRef)certificate;
-(id)initWithCertificate:(SecCertificateRef)arg1 ;
-(SecTrustRef)trust;
-(id)initWithTrust:(SecTrustRef)arg1 ;
-(void)setLeaf:(char)arg1 ;
-(id)labelAtIndex:(unsigned long long)arg1 ;
-(id)statusString;
-(cssm_x509_name*)subject;
-(cssm_data*)certData;
-(SecKeychainRef)keychain;
-(id)policies;
-(char)expired;
-(void)parseExtension:(const cssm_data*)arg1 ;
-(void)setCertificate:(SecCertificateRef)arg1 ;
-(id)contentAtIndex:(unsigned long long)arg1 ;
-(cssm_x509_name*)issuer;
-(id)initWithCertificate:(SecCertificateRef)arg1 trust:(SecTrustRef)arg2 parse:(char)arg3 ;
-(char)isRootCertificate;
-(void)setPolicies:(id)arg1 ;
-(void)setTrust:(SecTrustRef)arg1 ;
-(void)setCertData:(cssm_data*)arg1 ;
-(char)isAuthorityCertificate;
-(int)certStatus;
-(id)firstValidDate;
-(unsigned long long)numCertFields;
-(unsigned long long)certTitleIndex;
-(unsigned long long)certIssuerIndex;
-(unsigned long long)certSerialNumberIndex;
-(unsigned long long)numLines;
-(id)policyString;
-(char)existsInKeychain:(void*)arg1 ;
-(id)tabDelimitedTextData;
@end

