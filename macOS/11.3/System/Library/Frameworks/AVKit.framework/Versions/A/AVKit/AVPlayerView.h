/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:51 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/AVKit.framework/Versions/A/AVKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <AVKit/AVKit-Structs.h>
#import <AppKit/NSView.h>
#import <libobjc.A.dylib/NSSharingServicePickerDelegate.h>
#import <libobjc.A.dylib/NSSharingServiceDelegate.h>
#import <AVKit/AVTrimControlsViewControllerDelegate.h>
#import <libobjc.A.dylib/CALayerDelegate.h>
#import <AVKit/AVPictureInPictureContentSource.h>
#import <AVKit/AVPictureInPictureControllerDelegate.h>
#import <AVKit/AVVolumeControlButtonDelegate.h>

@protocol OS_dispatch_queue, AVPlayerViewSlowMotionDelegate, AVTimeDisplayDelegate, AVPlayerViewDelegate_AppStoreOnly, AVPlayerViewPictureInPictureDelegate;
@class NSWindow, NSObject, NSString, AVUnsupportedContentIndicatorView, AVAudioOnlyIndicatorView, AVExternalPlaybackIndicatorView, NSView, AVStatusOverlayView, NSArray, NSLayoutConstraint, AVLoadingIndicatorView, NSTimer, AVControlsContainerViewController, AVPlayerControlsViewController, AVTrimControlsViewController, NSTrackingArea, NSMenu, AVPictureInPictureController, AVPlayerController, AVAnimator, AVShareController, NSLayoutGuide, AVObservationController, AVPlayerLayer, AVNowPlayingInfoController, AVBehaviorStorage, AVPlaybackRate, AVPlayer;

@interface AVPlayerView : NSView <NSSharingServicePickerDelegate, NSSharingServiceDelegate, AVTrimControlsViewControllerDelegate, CALayerDelegate, AVPictureInPictureContentSource, AVPictureInPictureControllerDelegate, AVVolumeControlButtonDelegate> {

	NSObject*<OS_dispatch_queue> _dummyImageQueue;
	long long _actualControlsStyle;
	char _playerShouldAutoplay;
	NSString* _videoGravity;
	AVUnsupportedContentIndicatorView* _unsupportedContentIndicatorView;
	AVAudioOnlyIndicatorView* _audioOnlyIndicatorView;
	AVExternalPlaybackIndicatorView* _externalPlaybackIndicatorView;
	NSView* _contentOverlayView;
	AVStatusOverlayView* _statusOverlayView;
	NSArray* _statusOverlayViewLayoutConstraints;
	NSLayoutConstraint* _statusOverlayViewLeftAnchor;
	NSLayoutConstraint* _statusOverlayViewTopAnchor;
	AVLoadingIndicatorView* _loadingIndicatorView;
	NSTimer* _loadingIndicatorTimer;
	AVControlsContainerViewController* _controlsContainerViewController;
	AVPlayerControlsViewController* _initialControlsViewController;
	AVPlayerControlsViewController* _playbackControlsViewController;
	AVTrimControlsViewController* _trimControlsViewController;
	AVPlayerControlsViewController* _editControlsViewController;
	NSTrackingArea* _playerViewTrackingArea;
	NSTrackingArea* _controlsViewTrackingArea;
	long long _showControlsCount;
	NSTimer* _controlsTimer;
	NSTimer* _temporaryControlsTimer;
	NSTimer* _dimTouchBarTimer;
	char _viewHasBeenSetup;
	char _viewHasWindow;
	char _showsControlsPane;
	char _showsTimecodes;
	char _canHideControls;
	char _canRequestBecomingFirstResponder;
	char _mouseIsOverControlsView;
	char _isShowingPlaybackControlsForMouseMovingInsideView;
	char _isShowingPlaybackControlsViewForUnsupportedContent;
	char _isShowingPlaybackControlsViewForAudioOnlyContent;
	char _isShowingPlaybackControlsViewForPlayingOnExternalScreen;
	char _didPausePlaybackForSheet;
	char _hideControlsOnMouseUp;
	char _doNotMakeCurrentControlsViewControllerViewFirstResponder;
	char _showsFrameSteppingButtons;
	char _showsSharingServiceButton;
	NSMenu* _actionPopUpButtonMenu;
	char _showsFullScreenToggleButton;
	char _allowsPictureInPicturePlayback;
	AVPictureInPictureController* _pictureInPictureController;
	/*^block*/id _trimCompletionBlock;
	AVPlayerController* _playerController;
	char _isFullScreen;
	unsigned long long _savedPresentationOptions;
	NSWindow* _fullScreenWindow;
	NSWindow* _originalWindow;
	NSView* _superview;
	NSView* _placeholderView;
	CGRect _savedViewFrame;
	long long _ignoreWindowChangesCount;
	SCD_Struct_AV20 _slowMotionTimeRange;
	id<AVPlayerViewSlowMotionDelegate> _slowMotionDelegate;
	SCD_Struct_AV9 _slowMotionDelegateRespondsTo;
	long long _playerLayerLayoutMode;
	CGSize _fixedPlayerLayerSize;
	AVAnimator* _animator;
	NSEdgeInsets _floatingPlaybackControlsMargin;
	char _canZoomHorizontally;
	char _canZoomVertically;
	char _isZoomed;
	char _showsAlternateMediaTrackPreview;
	id<AVTimeDisplayDelegate> _timeDisplayDelegate;
	char _prefersReducedUserInterface;
	char _showsDurationInsteadOfRemainingTime;
	AVShareController* _shareController;
	NSObject*<OS_dispatch_queue> _nowPlayingInfoCenterInitQueue;
	char _updatesNowPlayingInfoCenter;
	long long _touchBarViewAppearCount;
	char _needsTransportControlsHeightLayoutGuideConstraints;
	NSLayoutGuide* _transportControlsHeightLayoutGuide;
	char _showsAudioOnlyIndicatorView;
	char _includesTrimAndCancelButtons;
	char _prefersCompactTouchBarScrubber;
	char _flashesControlsWhenChangingStyle;
	char _shouldInsetControlsFromVideoRect;
	NSLayoutConstraint* _controlsContainerWidthConstraint;
	NSLayoutConstraint* _controlsContainerCenterXConstraint;
	NSLayoutConstraint* _controlsContainerLeftConstraint;
	NSLayoutConstraint* _controlsContainerRightConstraint;
	/*^block*/id _playButtonHandlerForLazyPlayerLoading;
	id<AVPlayerViewDelegate_AppStoreOnly> _metricsDelegate;
	char _inlineControlsShowMinimalControlsWhenPaused;
	AVObservationController* _observationController;
	char _trimming;
	char _editing;
	char _pictureInPictureActive;
	char _shouldUnhideOnPictureInPictureStop;
	long long _controlsStyle;
	AVPlayerLayer* _playerLayer;
	AVPlayerLayer* _trimThumbnailPlayerLayer;
	AVPlayerLayer* _touchBarThumbnailPlayerLayer;
	AVNowPlayingInfoController* _nowPlayingInfoController;
	AVBehaviorStorage* __behaviorStorage;
	id<AVPlayerViewPictureInPictureDelegate> _pictureInPictureDelegate;
	NSString* _overrideParentApplicationDisplayIdentifier;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (assign) char canHideControls; 
@property (assign) char canRequestBecomingFirstResponder; 
@property (assign) char showsFrameSteppingButtons; 
@property (assign) char showsSharingServiceButton; 
@property (retain) NSMenu * actionPopUpButtonMenu; 
@property (assign) char showsFullScreenToggleButton; 
@property (assign) char showsTimecodes; 
@property (readonly) char isFullScreen; 
@property (assign) char prefersReducedUserInterface; 
@property (assign) char showsDurationInsteadOfRemainingTime; 
@property (readonly) AVPlayerLayer * trimThumbnailPlayerLayer; 
@property (readonly) AVPlayerLayer * touchBarThumbnailPlayerLayer; 
@property (readonly) AVPlayerLayer * playerLayer; 
@property (retain) AVPlayerController * playerController; 
@property (assign) long long playerLayerLayoutMode; 
@property (assign) CGSize fixedPlayerLayerSize; 
@property (readonly) CGRect playerLayerFrame; 
@property (assign,nonatomic) char shouldInsetControlsFromVideoRect; 
@property (nonatomic,readonly) char controlsHidden; 
@property (nonatomic,readonly) NSLayoutGuide * transportControlsHeightLayoutGuide; 
@property (assign,nonatomic) char showsAudioOnlyIndicatorView; 
@property (assign,nonatomic) char flashesControlsWhenChangingStyle; 
@property (assign,nonatomic) char prefersCompactTouchBarScrubber; 
@property (assign,nonatomic) char includesTrimAndCancelButtons; 
@property (readonly) char showsControlsPane; 
@property (readonly) char prefersUnobscuredContent; 
@property (assign) NSEdgeInsets floatingPlaybackControlsMargin; 
@property (assign) char canZoomHorizontally; 
@property (assign) char canZoomVertically; 
@property (getter=isZoomed) char zoomed; 
@property (assign) char showsAlternateMediaTrackPreview; 
@property (retain) AVTrimControlsViewController * trimControlsViewController; 
@property (getter=isEditing,readonly) char editing; 
@property (retain) AVPlaybackRate * defaultPlaybackRate; 
@property (readonly) AVShareController * shareController; 
@property (readonly) char canShowSharingServiceButton; 
@property (assign) SCD_Struct_AV20 slowMotionTimeRange; 
@property (__weak) id<AVPlayerViewSlowMotionDelegate> slowMotionDelegate; 
@property (readonly) char canBeginTrimming; 
@property (getter=isTrimming,readonly) char trimming; 
@property (nonatomic,copy) id playButtonHandlerForLazyPlayerLoading; 
@property (assign,nonatomic,__weak) id<AVPlayerViewDelegate_AppStoreOnly> metricsDelegate; 
@property (assign,nonatomic) char inlineControlsShowMinimalControlsWhenPaused; 
@property (nonatomic,readonly) NSArray * behaviors; 
@property (retain) AVControlsContainerViewController * controlsContainerViewController;                             //@synthesize controlsContainerViewController=_controlsContainerViewController - In the implementation block
@property (retain) AVPlayerControlsViewController * playbackControlsViewController; 
@property (retain) AVPlayerControlsViewController * editControlsViewController; 
@property (assign,getter=isTrimming,nonatomic) char trimming;                                                       //@synthesize trimming=_trimming - In the implementation block
@property (assign,getter=isEditing,nonatomic) char editing;                                                         //@synthesize editing=_editing - In the implementation block
@property (retain) AVPlayerLayer * playerLayer;                                                                     //@synthesize playerLayer=_playerLayer - In the implementation block
@property (retain) AVPlayerLayer * trimThumbnailPlayerLayer;                                                        //@synthesize trimThumbnailPlayerLayer=_trimThumbnailPlayerLayer - In the implementation block
@property (retain) AVPlayerLayer * touchBarThumbnailPlayerLayer;                                                    //@synthesize touchBarThumbnailPlayerLayer=_touchBarThumbnailPlayerLayer - In the implementation block
@property (nonatomic,retain) AVNowPlayingInfoController * nowPlayingInfoController;                                 //@synthesize nowPlayingInfoController=_nowPlayingInfoController - In the implementation block
@property (nonatomic,readonly) AVBehaviorStorage * _behaviorStorage;                                                //@synthesize _behaviorStorage=__behaviorStorage - In the implementation block
@property (assign,getter=isPictureInPictureActive,nonatomic) char pictureInPictureActive;                           //@synthesize pictureInPictureActive=_pictureInPictureActive - In the implementation block
@property (assign,nonatomic,__weak) id<AVPlayerViewPictureInPictureDelegate> pictureInPictureDelegate;              //@synthesize pictureInPictureDelegate=_pictureInPictureDelegate - In the implementation block
@property (assign,nonatomic) char shouldUnhideOnPictureInPictureStop;                                               //@synthesize shouldUnhideOnPictureInPictureStop=_shouldUnhideOnPictureInPictureStop - In the implementation block
@property (nonatomic,copy) NSString * overrideParentApplicationDisplayIdentifier;                                   //@synthesize overrideParentApplicationDisplayIdentifier=_overrideParentApplicationDisplayIdentifier - In the implementation block
@property (retain) AVPlayer * player; 
@property (assign) long long controlsStyle;                                                                         //@synthesize controlsStyle=_controlsStyle - In the implementation block
@property (copy) NSString * videoGravity; 
@property (getter=isReadyForDisplay,readonly) char readyForDisplay; 
@property (readonly) CGRect videoBounds; 
@property (readonly) NSView * contentOverlayView; 
@property (assign) char updatesNowPlayingInfoCenter; 
@property (readonly) CGRect avkit_videoRectInWindow; 
@property (readonly) char avkit_isVisible; 
@property (readonly) NSWindow * avkit_window; 
+(void)initialize;
+(id)keyPathsForValuesAffectingTouchBar;
+(id)restorableStateKeyPaths;
+(id)supportedPlaybackRates;
+(char)wantsPlayerLayerLayout;
+(id)keyPathsForValuesAffectingPlayer;
+(id)keyPathsForValuesAffectingVideoGravity;
+(id)keyPathsForValuesAffectingReadyForDisplay;
+(id)keyPathsForValuesAffectingVideoBounds;
+(id)keyPathsForValuesAffectingCanBeginTrimming;
+(char)automaticallyNotifiesObserversOfPlayerController;
+(id)keyPathsForValuesAffectingPlayerLayerFrame;
+(id)keyPathsForValuesAffectingPrefersUnobscuredContent;
+(id)keyPathsForValuesAffectingCanShowSharingServiceButton;
+(id)keyPathsForValuesAffectingControlsHidden;
-(void)dealloc;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(void)updateConstraints;
-(id)initWithFrame:(CGRect)arg1 ;
-(char)acceptsFirstResponder;
-(char)validateUserInterfaceItem:(id)arg1 ;
-(void)tabletPoint:(id)arg1 ;
-(void)viewDidMoveToWindow;
-(id)animator;
-(void)mouseDown:(id)arg1 ;
-(id)supplementalTargetForAction:(SEL)arg1 sender:(id)arg2 ;
-(void)mouseEntered:(id)arg1 ;
-(void)mouseMoved:(id)arg1 ;
-(void)mouseExited:(id)arg1 ;
-(id)touchBar;
-(void)rightMouseDown:(id)arg1 ;
-(char)isEditing;
-(void)windowWillBeginSheet:(id)arg1 ;
-(void)windowDidEndSheet:(id)arg1 ;
-(void)keyDown:(id)arg1 ;
-(char)becomeFirstResponder;
-(void)scrollWheel:(id)arg1 ;
-(void)mouseDragged:(id)arg1 ;
-(void)mouseUp:(id)arg1 ;
-(void)updateTrackingAreas;
-(void)magnifyWithEvent:(id)arg1 ;
-(void)touchesBeganWithEvent:(id)arg1 ;
-(void)touchesMovedWithEvent:(id)arg1 ;
-(void)touchesEndedWithEvent:(id)arg1 ;
-(void)touchesCancelledWithEvent:(id)arg1 ;
-(void)viewWillMoveToWindow:(id)arg1 ;
-(void)rightMouseUp:(id)arg1 ;
-(void)keyUp:(id)arg1 ;
-(id)sharingServicePicker:(id)arg1 sharingServicesForItems:(id)arg2 proposedSharingServices:(id)arg3 ;
-(id)sharingServicePicker:(id)arg1 delegateForSharingService:(id)arg2 ;
-(void)flagsChanged:(id)arg1 ;
-(void)rightMouseDragged:(id)arg1 ;
-(void)otherMouseDown:(id)arg1 ;
-(void)otherMouseDragged:(id)arg1 ;
-(void)otherMouseUp:(id)arg1 ;
-(id)sharingService:(id)arg1 sourceWindowForShareItems:(id)arg2 sharingContentScope:(long long*)arg3 ;
-(CGRect)sharingService:(id)arg1 sourceFrameOnScreenForShareItem:(id)arg2 ;
-(id)sharingService:(id)arg1 transitionImageForShareItem:(id)arg2 contentRect:(CGRect*)arg3 ;
-(void)sharingService:(id)arg1 willShareItems:(id)arg2 ;
-(void)sharingService:(id)arg1 didFailToShareItems:(id)arg2 error:(id)arg3 ;
-(void)sharingService:(id)arg1 didShareItems:(id)arg2 ;
-(void)cursorUpdate:(id)arg1 ;
-(void)layoutSublayersOfLayer:(id)arg1 ;
-(void)rotateWithEvent:(id)arg1 ;
-(void)tabletProximity:(id)arg1 ;
-(void)swipeWithEvent:(id)arg1 ;
-(void)beginGestureWithEvent:(id)arg1 ;
-(void)endGestureWithEvent:(id)arg1 ;
-(void)setEditing:(char)arg1 ;
-(void)setControlsStyle:(long long)arg1 ;
-(void)setPlayer:(AVPlayer *)arg1 ;
-(char)isZoomed;
-(NSArray *)behaviors;
-(id<AVPlayerViewDelegate_AppStoreOnly>)metricsDelegate;
-(void)setMetricsDelegate:(id<AVPlayerViewDelegate_AppStoreOnly>)arg1 ;
-(id)sharingService:(id)arg1 imageForShareItem:(id)arg2 size:(CGSize)arg3 contentRect:(CGRect*)arg4 ;
-(AVPlayer *)player;
-(NSString *)videoGravity;
-(char)isReadyForDisplay;
-(void)setVideoGravity:(NSString *)arg1 ;
-(void)setPlayerLayer:(AVPlayerLayer *)arg1 ;
-(CGRect)videoRect;
-(AVPlayerLayer *)playerLayer;
-(char)isFullScreen;
-(void)setIsFullScreen:(char)arg1 ;
-(AVPlaybackRate *)defaultPlaybackRate;
-(void)setDefaultPlaybackRate:(AVPlaybackRate *)arg1 ;
-(void)enterFullScreen:(id)arg1 ;
-(void)setShowsFullScreenToggleButton:(char)arg1 ;
-(void)setShowsAudioOnlyIndicatorView:(char)arg1 ;
-(NSView *)contentOverlayView;
-(void)setPlayerController:(AVPlayerController *)arg1 ;
-(void)exitFullScreen:(id)arg1 ;
-(void)setTrimming:(char)arg1 ;
-(void)setPictureInPictureActive:(char)arg1 ;
-(char)allowsPictureInPicturePlayback;
-(char)isPictureInPictureActive;
-(void)setAllowsPictureInPicturePlayback:(char)arg1 ;
-(void)doService:(id)arg1 withItems:(id)arg2 ;
-(id)previewThumbnailImage;
-(void)performWithService:(id)arg1 ;
-(char)canShareCompositionWithService:(id)arg1 ;
-(AVPlayerController *)playerController;
-(char)showsAlternateMediaTrackPreview;
-(void)setShowsAlternateMediaTrackPreview:(char)arg1 ;
-(AVPlayerLayer *)trimThumbnailPlayerLayer;
-(void)setTrimThumbnailPlayerLayer:(AVPlayerLayer *)arg1 ;
-(long long)controlsStyle;
-(void)volumeControlButton:(id)arg1 didShowVolumeSlider:(id)arg2 ;
-(void)volumeControlButton:(id)arg1 didHideVolumeSlider:(id)arg2 ;
-(id)volumeControlButton:(id)arg1 viewContainingVolumeSlider:(id)arg2 ;
-(void)volumeControlViewDidChangeVolume:(id)arg1 ;
-(void)volumeControlViewDidChangeMutedState:(id)arg1 ;
-(void)pictureInPictureControllerWillStartPictureInPicture:(id)arg1 ;
-(void)pictureInPictureControllerDidStartPictureInPicture:(id)arg1 ;
-(void)pictureInPictureController:(id)arg1 failedToStartPictureInPictureWithError:(id)arg2 ;
-(void)pictureInPictureControllerWillStopPictureInPicture:(id)arg1 ;
-(void)pictureInPictureControllerDidStopPictureInPicture:(id)arg1 ;
-(void)pictureInPictureController:(id)arg1 restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:(/*^block*/id)arg2 ;
-(id)avkit_makePlayerControllerIfNeeded:(id)arg1 ;
-(id)avkit_pictureInPictureViewController;
-(void)avkit_startRoutingVideoToPictureInPictureViewController:(id)arg1 ;
-(void)avkit_stopRoutingVideoToPictureInPictureViewController:(id)arg1 ;
-(void)avkit_beginReducingResourcesForPictureInPictureViewController:(id)arg1 playerController:(id)arg2 ;
-(void)avkit_endReducingResourcesForPictureInPictureViewController:(id)arg1 playerController:(id)arg2 ;
-(void)avkit_willBeginStoppingPictureInPictureForPictureInPictureViewController:(id)arg1 ;
-(CGRect)avkit_videoRectInWindow;
-(char)avkit_isVisible;
-(NSWindow *)avkit_window;
-(void)trimControlsViewControllerDidTrim:(id)arg1 ;
-(void)trimControlsViewControllerDidCancel:(id)arg1 ;
-(AVPlayerControlsViewController *)playbackControlsViewController;
-(CGRect)videoBounds;
-(char)updatesNowPlayingInfoCenter;
-(void)setUpdatesNowPlayingInfoCenter:(char)arg1 ;
-(void)setOverrideParentApplicationDisplayIdentifier:(NSString *)arg1 ;
-(void)setPlaybackControlsViewController:(AVPlayerControlsViewController *)arg1 ;
-(AVTrimControlsViewController *)trimControlsViewController;
-(void)setTrimControlsViewController:(AVTrimControlsViewController *)arg1 ;
-(AVPlayerControlsViewController *)editControlsViewController;
-(void)setEditControlsViewController:(AVPlayerControlsViewController *)arg1 ;
-(void)_ensureBehaviorStorage;
-(void)_setupPlayerLayer;
-(void)_setupStatusOverlayView;
-(void)_layoutStatusOverlayView;
-(void)_setupContentOverlayView;
-(void)_setupControlsContainerView;
-(char)_isUnsupportedContent;
-(void)_updateUnsupportedContentIndicatorView;
-(char)_isAudioOnlyContent;
-(char)_isIgnoringWindowChanges;
-(void)_updateAudioOnlyIndicatorView;
-(void)_setupExternalPlaybackIndicatorView;
-(void)_updateExternalPlaybackIndicatorView;
-(void)_setupLoadingIndicatorView;
-(void)_showControlsIfNeeded;
-(void)_hideControlsIfPossible;
-(void)_hideControlsIfPossibleAfterDelay;
-(void)_showControlsTemporarily;
-(void)_fireTemporaryControlsTimer:(id)arg1 ;
-(char)_shouldDimTouchBar;
-(void)_dimTouchBarIfNeeded;
-(void)_dimTouchBarIfNeededAfterDelay;
-(void)_updatePlaybackControlsViewVisibilityForUnsupportedContent;
-(void)_updatePlaybackControlsViewVisibilityForAudioOnlyContent;
-(void)_updatePlaybackControlsViewVisibilityForPlayingOnExternalScreen;
-(void)_updatePlaybackControlsViewControllerRetainCycle;
-(unsigned long long)timeDisplayStyle;
-(void)setTimeDisplayStyle:(unsigned long long)arg1 ;
-(void)_updateControlsTimeDisplayStyleIfPossible;
-(void)_showOrHideControls;
-(id)_currentControlsViewController;
-(void)_replaceCurrentControlsViewControllerWithViewController:(id)arg1 ;
-(id)_makeSelfFirstResponderIfCurrentFirstResponderIsDescendantOfSelfAndReturnCurrentFirstResponderInThatCase;
-(void)_restorePreviousFirstResponderOrMakeCurrentControlsViewControllersInitialFirstResponderFirstResponderIfSelfIsCurrentFirstResponder:(id)arg1 ;
-(void)_fireLoadingIndicatorTimer:(id)arg1 ;
-(void)_fireControlsTimer:(id)arg1 ;
-(void)playerControllerDidSeekChapter:(id)arg1 ;
-(void)playerControllerDidChangePlaybackStateByHandlingEvent:(id)arg1 ;
-(AVControlsContainerViewController *)controlsContainerViewController;
-(void)setControlsContainerViewController:(AVControlsContainerViewController *)arg1 ;
-(char)isTrimming;
-(AVPlayerLayer *)touchBarThumbnailPlayerLayer;
-(void)setTouchBarThumbnailPlayerLayer:(AVPlayerLayer *)arg1 ;
-(AVNowPlayingInfoController *)nowPlayingInfoController;
-(void)setNowPlayingInfoController:(AVNowPlayingInfoController *)arg1 ;
-(AVBehaviorStorage *)_behaviorStorage;
-(id<AVPlayerViewPictureInPictureDelegate>)pictureInPictureDelegate;
-(void)setPictureInPictureDelegate:(id<AVPlayerViewPictureInPictureDelegate>)arg1 ;
-(char)shouldUnhideOnPictureInPictureStop;
-(void)setShouldUnhideOnPictureInPictureStop:(char)arg1 ;
-(NSString *)overrideParentApplicationDisplayIdentifier;
-(char)showsControlsPane;
-(void)flashChapterNumber:(unsigned long long)arg1 chapterTitle:(id)arg2 ;
-(char)shouldInsetControlsFromVideoRect;
-(NSLayoutGuide *)transportControlsHeightLayoutGuide;
-(char)inlineControlsShowMinimalControlsWhenPaused;
-(char)flashesControlsWhenChangingStyle;
-(char)canHideControls;
-(NSEdgeInsets)floatingPlaybackControlsMargin;
-(id)pictureInPictureController;
-(void)_updatePictureInPictureButton;
-(char)showsFrameSteppingButtons;
-(void)setShowsFrameSteppingButtons:(char)arg1 ;
-(char)showsSharingServiceButton;
-(void)setShowsSharingServiceButton:(char)arg1 ;
-(NSMenu *)actionPopUpButtonMenu;
-(void)setActionPopUpButtonMenu:(NSMenu *)arg1 ;
-(char)showsFullScreenToggleButton;
-(char)showsTimecodes;
-(void)setShowsTimecodes:(char)arg1 ;
-(void)beginTimeDisplayInput:(id)arg1 ;
-(void)setTimeDisplayDelegate:(id)arg1 ;
-(id)timeDisplayDelegate;
-(void)beginTrimmingWithMaximumDuration:(SCD_Struct_AV19)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)_restorePlaybackControlsAfterTrimmingWithTrimControlsViewController:(id)arg1 ;
-(void)_callTrimCompletionHandlerWithResult:(long long)arg1 ;
-(char)canBeginTrimming;
-(void)beginTrimmingWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)_beginIgnoringWindowChanges;
-(void)_endIgnoringWindowChanges;
-(void)setCanHideControls:(char)arg1 ;
-(char)canRequestBecomingFirstResponder;
-(void)setCanRequestBecomingFirstResponder:(char)arg1 ;
-(char)includesTrimAndCancelButtons;
-(void)setIncludesTrimAndCancelButtons:(char)arg1 ;
-(SCD_Struct_AV20)slowMotionTimeRange;
-(void)setSlowMotionTimeRange:(SCD_Struct_AV20)arg1 ;
-(id<AVPlayerViewSlowMotionDelegate>)slowMotionDelegate;
-(void)setSlowMotionDelegate:(id<AVPlayerViewSlowMotionDelegate>)arg1 ;
-(long long)playerLayerLayoutMode;
-(CGRect)playerLayerFrameForBoundsSize:(CGSize)arg1 playerLayerLayoutMode:(long long)arg2 ;
-(CGSize)fixedPlayerLayerSize;
-(CGRect)playerLayerFrame;
-(void)setPlayerLayerLayoutMode:(long long)arg1 ;
-(void)setFixedPlayerLayerSize:(CGSize)arg1 ;
-(char)prefersReducedUserInterface;
-(void)toggleZoom:(id)arg1 ;
-(void)showEditControlsViewController:(id)arg1 shouldPausePlayback:(char)arg2 withCompletionHandler:(/*^block*/id)arg3 ;
-(void)hideEditControlsViewControllerShouldPausePlayback:(char)arg1 withCompletionHandler:(/*^block*/id)arg2 ;
-(char)prefersUnobscuredContent;
-(void)setFloatingPlaybackControlsMargin:(NSEdgeInsets)arg1 ;
-(char)canZoomHorizontally;
-(void)setCanZoomHorizontally:(char)arg1 ;
-(char)canZoomVertically;
-(void)setCanZoomVertically:(char)arg1 ;
-(void)setZoomed:(char)arg1 ;
-(void)showEditControlsViewController:(id)arg1 withCompletionHandler:(/*^block*/id)arg2 ;
-(void)hideEditControlsViewControllerWithCompletionHandler:(/*^block*/id)arg1 ;
-(id)availableTimeDisplayStyles;
-(AVShareController *)shareController;
-(void)touchBarControlsViewWillAppear;
-(void)touchBarControlsViewDidDisappear;
-(void)setPrefersReducedUserInterface:(char)arg1 ;
-(char)showsDurationInsteadOfRemainingTime;
-(void)setShowsDurationInsteadOfRemainingTime:(char)arg1 ;
-(char)canShowSharingServiceButton;
-(void)showSharingServicePickerRelativeToRect:(CGRect)arg1 ofView:(id)arg2 preferredEdge:(unsigned long long)arg3 ;
-(void)setShouldInsetControlsFromVideoRect:(char)arg1 ;
-(char)controlsHidden;
-(char)showsAudioOnlyIndicatorView;
-(void)setFlashesControlsWhenChangingStyle:(char)arg1 ;
-(char)prefersCompactTouchBarScrubber;
-(void)setPrefersCompactTouchBarScrubber:(char)arg1 ;
-(void)commitTrim:(id)arg1 ;
-(void)cancelTrim:(id)arg1 ;
-(void)setPlayButtonHandlerForLazyPlayerLoading:(id)arg1 ;
-(id)playButtonHandlerForLazyPlayerLoading;
-(void)setInlineControlsShowMinimalControlsWhenPaused:(char)arg1 ;
-(id)_pictureInPictureDelegateIfRespondsToSelector:(SEL)arg1 ;
-(void)pictureInPictureButtonTapped:(id)arg1 ;
-(void)addBehavior:(id)arg1 ;
-(void)removeBehavior:(id)arg1 ;
@end

