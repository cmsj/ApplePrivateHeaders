/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:51 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/AVKit.framework/Versions/A/AVKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <AVKit/AVKit-Structs.h>
#import <AppKit/NSResponder.h>
#import <AVKit/AVTouchBarRecordingControlsControllingInternal.h>
#import <AVKit/AVFunctionBarRecordingControlsControllingInternal.h>

@protocol OS_dispatch_source, AVCaptureControllerDelegate;
@class AVCaptureSession, AVCaptureFileOutput, NSObject, NSNumber, AVCaptureAudioPreviewOutput, NSArray, AVCaptureQualityItem, AVCaptureDeviceSelectionController, AVTouchBarCaptureInputSourceItem, NSString, AVFunctionBarCaptureInputSourceItem, AVCaptureDeviceInput, AVCaptureDeviceInputSourceItem;

@interface AVCaptureController : NSResponder <AVTouchBarRecordingControlsControllingInternal, AVFunctionBarRecordingControlsControllingInternal> {

	AVCaptureSession* _session;
	char _sessionHasBeenSet;
	AVCaptureFileOutput* _fileOutput;
	id _didStartRunningObserver;
	id _didStopRunningObserver;
	NSObject*<OS_dispatch_source> _recordingTimeAndSizeTimer;
	NSNumber* _previouslyRecordedFileSize;
	double _previouslyRecordedTime;
	char _audioPreviewMuted;
	float _audioPreviewVolume;
	NSObject*<OS_dispatch_source> _audioLevelIndicatorTimer;
	AVCaptureAudioPreviewOutput* _captureAudioPreviewOutput;
	NSArray* _captureQualityItems;
	AVCaptureQualityItem* _selectedQualityItem;
	char _shouldSelectAssociatedAudioInputSourceItems;
	long long _discoveringWirelessCaptureDevicesCount;
	long long _cameraAuthorizationStatus;
	long long _microphoneAuthorizationStatus;
	char _videoPreviewEnabled;
	char _audioPreviewEnabled;
	char _wantsDefaultConfiguration;
	char _captureSessionRunning;
	char _canStartRecording;
	id<AVCaptureControllerDelegate> _delegate;
	long long _status;
	double _recordedTime;
	NSNumber* _recordedFileSize;
	double _audioLevel;
	AVCaptureDeviceSelectionController* _captureDeviceSelectionController;

}

@property (readonly) char canAssociateAudioAndVideoDevices; 
@property (readonly) double recordedTime; 
@property (readonly) NSNumber * recordedFileSize; 
@property (getter=isRecording,readonly) char recording; 
@property (getter=isPaused,readonly) char paused; 
@property (readonly) char canStartRecording; 
@property (readonly) char canPauseRecording; 
@property (readonly) char canResumeRecording; 
@property (readonly) char canStopRecording; 
@property (readonly) NSArray * videoTouchBarInputSourceItems; 
@property (readonly) AVTouchBarCaptureInputSourceItem * selectedVideoTouchBarInputSourceItem; 
@property (readonly) NSArray * audioTouchBarInputSourceItems; 
@property (readonly) AVTouchBarCaptureInputSourceItem * selectedAudioTouchBarInputSourceItem; 
@property (readonly) NSArray * screenTouchBarInputSourceItems; 
@property (readonly) AVTouchBarCaptureInputSourceItem * selectedScreenTouchBarInputSourceItem; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (readonly) NSArray * videoFunctionBarInputSourceItems; 
@property (readonly) AVFunctionBarCaptureInputSourceItem * selectedVideoFunctionBarInputSourceItem; 
@property (readonly) NSArray * audioFunctionBarInputSourceItems; 
@property (readonly) AVFunctionBarCaptureInputSourceItem * selectedAudioFunctionBarInputSourceItem; 
@property (readonly) NSArray * screenFunctionBarInputSourceItems; 
@property (readonly) AVFunctionBarCaptureInputSourceItem * selectedScreenFunctionBarInputSourceItem; 
@property (assign) double audioLevel;                                                                             //@synthesize audioLevel=_audioLevel - In the implementation block
@property (assign) char canStartRecording;                                                                        //@synthesize canStartRecording=_canStartRecording - In the implementation block
@property (getter=isCaptureSessionRunning) char captureSessionRunning;                                            //@synthesize captureSessionRunning=_captureSessionRunning - In the implementation block
@property (assign) double recordedTime;                                                                           //@synthesize recordedTime=_recordedTime - In the implementation block
@property (retain) NSNumber * recordedFileSize;                                                                   //@synthesize recordedFileSize=_recordedFileSize - In the implementation block
@property (retain) AVCaptureDeviceSelectionController * captureDeviceSelectionController;                         //@synthesize captureDeviceSelectionController=_captureDeviceSelectionController - In the implementation block
@property (getter=isVideoPreviewEnabled) char videoPreviewEnabled;                                                //@synthesize videoPreviewEnabled=_videoPreviewEnabled - In the implementation block
@property (getter=isAudioPreviewEnabled) char audioPreviewEnabled;                                                //@synthesize audioPreviewEnabled=_audioPreviewEnabled - In the implementation block
@property (readonly) AVCaptureSession * session; 
@property (readonly) char sessionHasBeenSet; 
@property (assign) char wantsDefaultConfiguration;                                                                //@synthesize wantsDefaultConfiguration=_wantsDefaultConfiguration - In the implementation block
@property (assign,nonatomic,__weak) id<AVCaptureControllerDelegate> delegate;                                     //@synthesize delegate=_delegate - In the implementation block
@property (readonly) AVCaptureDeviceInput * videoInput; 
@property (readonly) AVCaptureDeviceInput * audioInput; 
@property (readonly) AVCaptureFileOutput * fileOutput; 
@property (readonly) long long status;                                                                            //@synthesize status=_status - In the implementation block
@property (getter=isFinishingRecording) char finishingRecording; 
@property (readonly) CGSize contentDimensions; 
@property (assign,nonatomic) float audioPreviewVolume; 
@property (assign,nonatomic) char audioPreviewMuted; 
@property (readonly) NSArray * videoInputSourceItems; 
@property (readonly) AVCaptureDeviceInputSourceItem * selectedVideoInputSourceItem; 
@property (readonly) NSArray * audioInputSourceItems; 
@property (readonly) AVCaptureDeviceInputSourceItem * selectedAudioInputSourceItem; 
@property (copy) NSArray * captureQualityItems; 
@property (retain) AVCaptureQualityItem * selectedQualityItem; 
@property (readonly) NSString * deviceDisabledDescription; 
@property (readonly) NSString * deviceErrorDescription; 
@property (readonly) long long cameraAuthorizationStatus; 
@property (readonly) long long microphoneAuthorizationStatus; 
+(id)keyPathsForValuesAffectingVideoTouchBarInputSourceItems;
+(id)keyPathsForValuesAffectingSelectedVideoTouchBarInputSourceItem;
+(id)keyPathsForValuesAffectingAudioTouchBarInputSourceItems;
+(id)keyPathsForValuesAffectingSelectedAudioTouchBarInputSourceItem;
+(id)keyPathsForValuesAffectingVideoFunctionBarInputSourceItems;
+(id)keyPathsForValuesAffectingSelectedVideoFunctionBarInputSourceItem;
+(id)keyPathsForValuesAffectingAudioFunctionBarInputSourceItems;
+(id)keyPathsForValuesAffectingSelectedAudioFunctionBarInputSourceItem;
+(id)keyPathsForValuesAffectingContentDimensions;
+(id)keyPathsForValuesAffectingRecording;
+(id)keyPathsForValuesAffectingPaused;
+(id)keyPathsForValuesAffectingCanPauseRecording;
+(id)keyPathsForValuesAffectingCanResumeRecording;
+(id)keyPathsForValuesAffectingCanStopRecording;
+(id)keyPathsForValuesAffectingFinishingRecording;
+(id)keyPathsForValuesAffectingCanAssociateAudioAndVideoDevices;
+(id)keyPathsForValuesAffectingVideoInput;
+(id)keyPathsForValuesAffectingAudioInput;
+(id)keyPathsForValuesAffectingVideoInputSourceItems;
+(id)keyPathsForValuesAffectingSelectedVideoInputSourceItem;
+(id)keyPathsForValuesAffectingAudioInputSourceItems;
+(id)keyPathsForValuesAffectingSelectedAudioInputSourceItem;
+(id)keyPathsForValuesAffectingDeviceDisabledDescription;
+(id)keyPathsForValuesAffectingDeviceErrorDescription;
-(void)dealloc;
-(id)init;
-(id<AVCaptureControllerDelegate>)delegate;
-(void)setDelegate:(id<AVCaptureControllerDelegate>)arg1 ;
-(long long)status;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(char)isPaused;
-(void)keyDown:(id)arg1 ;
-(AVCaptureSession *)session;
-(void)setStatus:(long long)arg1 ;
-(void)stopRecording;
-(char)isRecording;
-(void)startRecording;
-(void)pauseRecording;
-(void)resumeRecording;
-(NSNumber *)recordedFileSize;
-(AVCaptureDeviceInput *)videoInput;
-(CGSize)contentDimensions;
-(void)selectTouchBarInputSourceItem:(id)arg1 ;
-(NSArray *)videoTouchBarInputSourceItems;
-(AVTouchBarCaptureInputSourceItem *)selectedVideoTouchBarInputSourceItem;
-(NSArray *)audioTouchBarInputSourceItems;
-(AVTouchBarCaptureInputSourceItem *)selectedAudioTouchBarInputSourceItem;
-(NSArray *)screenTouchBarInputSourceItems;
-(AVTouchBarCaptureInputSourceItem *)selectedScreenTouchBarInputSourceItem;
-(double)recordedTime;
-(char)canStartRecording;
-(char)canPauseRecording;
-(char)canResumeRecording;
-(char)canStopRecording;
-(void)startDiscoveringWirelessCaptureDevices;
-(void)stopDiscoveringWirelessCaptureDevices;
-(char)canAssociateAudioAndVideoDevices;
-(id)_makeTouchBarCaptureInputSourceItem:(id)arg1 ;
-(AVCaptureDeviceInput *)audioInput;
-(void)selectFunctionBarInputSourceItem:(id)arg1 ;
-(NSArray *)videoFunctionBarInputSourceItems;
-(AVFunctionBarCaptureInputSourceItem *)selectedVideoFunctionBarInputSourceItem;
-(NSArray *)audioFunctionBarInputSourceItems;
-(AVFunctionBarCaptureInputSourceItem *)selectedAudioFunctionBarInputSourceItem;
-(NSArray *)screenFunctionBarInputSourceItems;
-(AVFunctionBarCaptureInputSourceItem *)selectedScreenFunctionBarInputSourceItem;
-(id)_makeFunctionBarCaptureInputSourceItem:(id)arg1 ;
-(char)canHandleSelector:(SEL)arg1 withEvent:(id)arg2 shouldIgnoreSpaceKey:(char)arg3 ;
-(id)_defaultCaptureQualityItems;
-(char)_associateItemsWithVideoInputSourceItems:(id)arg1 audioInputSourceItems:(id)arg2 outIndexOfBuiltInVideoItem:(unsigned long long*)arg3 outIndexOfBuiltInAudioItem:(unsigned long long*)arg4 outIndexOfExternalVideoItem:(unsigned long long*)arg5 outIndexOfExternalAudioItem:(unsigned long long*)arg6 ;
-(id)_inputSourceItemsForMediaType:(id)arg1 ;
-(id)_inputSourceItemsWithoutAssociatedAudioItemsForCaptureDevices:(id)arg1 mediaType:(id)arg2 ;
-(id)_firstDeviceInputWithConnectionOfMediaType:(id)arg1 fromSession:(id)arg2 ;
-(void)_updateAudioInputForSession:(id)arg1 ;
-(void)_updateVideoInputForSession:(id)arg1 ;
-(void)createDefaultSessionAndFileOutputAsynchronously;
-(void)_createDefaultSessionAndFileOutputAsynchronously:(char)arg1 ;
-(char)sessionHasBeenSet;
-(void)setSession:(id)arg1 videoPreviewEnabled:(char)arg2 audioPreviewEnabled:(char)arg3 ;
-(AVCaptureFileOutput *)fileOutput;
-(void)setFileOutput:(AVCaptureFileOutput *)arg1 ;
-(char)isFinishingRecording;
-(void)setFinishingRecording:(char)arg1 ;
-(void)updateRecordingTimeAndSize;
-(void)startRecordingTimeAndSizeTimer;
-(void)stopRecordingTimeAndSizeTimer;
-(void)recordingTimeAndSizeTimerTask;
-(void)updateCaptureSessionRunning;
-(float)audioPreviewVolume;
-(void)setAudioPreviewVolume:(float)arg1 ;
-(char)audioPreviewMuted;
-(void)setAudioPreviewMuted:(char)arg1 ;
-(void)increaseAudioPreviewVolume;
-(void)decreaseAudioPreviewVolume;
-(void)changeAudioPreviewVolumeToMaximum;
-(void)changeAudioPreviewVolumeToMinimum;
-(void)startAudioLevelIndicatorTimer;
-(void)stopAudioLevelIndicatorTimer;
-(void)audioLevelIndicatorTimerTask;
-(void)_updateAudioPreviewVolumeIfNeeded;
-(void)_setWirelessDeviceDiscoveryEnabled:(char)arg1 ;
-(NSArray *)videoInputSourceItems;
-(AVCaptureDeviceInputSourceItem *)selectedVideoInputSourceItem;
-(NSArray *)audioInputSourceItems;
-(AVCaptureDeviceInputSourceItem *)selectedAudioInputSourceItem;
-(void)selectInputSourceItem:(id)arg1 ;
-(NSArray *)captureQualityItems;
-(void)setCaptureQualityItems:(NSArray *)arg1 ;
-(AVCaptureQualityItem *)selectedQualityItem;
-(void)setSelectedQualityItem:(AVCaptureQualityItem *)arg1 ;
-(NSString *)deviceDisabledDescription;
-(long long)cameraAuthorizationStatus;
-(long long)microphoneAuthorizationStatus;
-(id)videoDeviceErrorDescription;
-(id)audioDeviceErrorDescription;
-(NSString *)deviceErrorDescription;
-(void)updateCanStartRecording;
-(char)isVideoPreviewEnabled;
-(void)setVideoPreviewEnabled:(char)arg1 ;
-(char)isAudioPreviewEnabled;
-(void)setAudioPreviewEnabled:(char)arg1 ;
-(char)wantsDefaultConfiguration;
-(void)setWantsDefaultConfiguration:(char)arg1 ;
-(void)setRecordedTime:(double)arg1 ;
-(void)setRecordedFileSize:(NSNumber *)arg1 ;
-(char)isCaptureSessionRunning;
-(void)setCaptureSessionRunning:(char)arg1 ;
-(double)audioLevel;
-(void)setAudioLevel:(double)arg1 ;
-(void)setCanStartRecording:(char)arg1 ;
-(AVCaptureDeviceSelectionController *)captureDeviceSelectionController;
-(void)setCaptureDeviceSelectionController:(AVCaptureDeviceSelectionController *)arg1 ;
-(void)_handleSpaceKeyWithEvent:(id)arg1 ;
@end

