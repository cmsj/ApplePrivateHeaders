/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:06 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/MetalPerformanceShaders.framework/Versions/A/Frameworks/MPSNeuralNetwork.framework/Versions/A/MPSNeuralNetwork
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <MPSNeuralNetwork/MPSNeuralNetwork-Structs.h>
#import <MPSCore/MPSKernel.h>
#import <libobjc.A.dylib/NSCopying.h>
#import <libobjc.A.dylib/NSSecureCoding.h>

@protocol MPSImageAllocator;
@class NSArray;

@interface MPSNNGraph : MPSKernel <NSCopying, NSSecureCoding> {

	Graph* _graph;
	id<MPSImageAllocator> _destinationImageAllocator;
	unsigned long long _format;
	char _resultIsNeeded;
	char _outputStateIsTemporary;

}

@property (nonatomic,copy,readonly) NSArray * sourceImageHandles; 
@property (nonatomic,copy,readonly) NSArray * sourceStateHandles; 
@property (nonatomic,copy,readonly) NSArray * intermediateImageHandles; 
@property (nonatomic,copy,readonly) NSArray * resultStateHandles; 
@property (nonatomic,readonly) id<MPSHandle> resultHandle; 
@property (assign,nonatomic) char outputStateIsTemporary;                                  //@synthesize outputStateIsTemporary=_outputStateIsTemporary - In the implementation block
@property (nonatomic,retain) id<MPSImageAllocator> destinationImageAllocator;              //@synthesize destinationImageAllocator=_destinationImageAllocator - In the implementation block
@property (assign,nonatomic) unsigned long long format;                                    //@synthesize format=_format - In the implementation block
@property (nonatomic,readonly) char resultImageIsNeeded; 
+(const MPSLibraryInfo*)libraryInfo:(MPSDevice*)arg1 ;
+(id)graphWithDevice:(id)arg1 resultImage:(id)arg2 resultImageIsNeeded:(char)arg3 ;
+(id)graphWithDevice:(id)arg1 resultImage:(id)arg2 ;
+(id)graphWithDevice:(id)arg1 resultImages:(id)arg2 resultsAreNeeded:(char*)arg3 ;
-(void)dealloc;
-(id)debugDescription;
-(void)encodeWithCoder:(id)arg1 ;
-(void)setOptions:(unsigned long long)arg1 ;
-(unsigned long long)format;
-(void)setFormat:(unsigned long long)arg1 ;
-(id)copyWithZone:(NSZone*)arg1 device:(id)arg2 ;
-(id)initWithCoder:(id)arg1 device:(id)arg2 ;
-(void)setDestinationImageAllocator:(id<MPSImageAllocator>)arg1 ;
-(id<MPSImageAllocator>)destinationImageAllocator;
-(id)initWithDevice:(id)arg1 resultImage:(id)arg2 resultImageIsNeeded:(char)arg3 ;
-(id)initWithDevice:(id)arg1 resultImage:(id)arg2 ;
-(id)initWithDevice:(id)arg1 resultImages:(id)arg2 resultsAreNeeded:(char*)arg3 ;
-(id)encodeToCommandBuffer:(id)arg1 sourceImages:(id)arg2 sourceStates:(id)arg3 intermediateImages:(id)arg4 destinationStates:(id)arg5 ;
-(id)encodeBatchToCommandBuffer:(id)arg1 sourceImages:(id)arg2 sourceStates:(id)arg3 intermediateImages:(id)arg4 destinationStates:(id)arg5 ;
-(id)encodeToCommandBuffer:(id)arg1 sourceImages:(id)arg2 ;
-(char)resultImageIsNeeded;
-(NSArray *)sourceImageHandles;
-(NSArray *)sourceStateHandles;
-(NSArray *)intermediateImageHandles;
-(NSArray *)resultStateHandles;
-(id<MPSHandle>)resultHandle;
-(id)encodeBatchToCommandBuffer:(id)arg1 sourceImages:(id)arg2 sourceStates:(id)arg3 ;
-(id)executeAsyncWithSourceImages:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)reloadFromDataSources;
-(unsigned long long)readCountForSourceImageAtIndex:(unsigned long long)arg1 ;
-(unsigned long long)readCountForSourceStateAtIndex:(unsigned long long)arg1 ;
-(char)outputStateIsTemporary;
-(void)setOutputStateIsTemporary:(char)arg1 ;
@end

