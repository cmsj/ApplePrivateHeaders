/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:16 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/MapKit.framework/Versions/A/MapKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <MapKit/MapKit-Structs.h>
#import <AppKit/NSView.h>
#import <libobjc.A.dylib/MKLocationManagerObserver.h>
#import <libobjc.A.dylib/MKMapGestureControllerDelegate.h>
#import <libobjc.A.dylib/NSGestureRecognizerDelegate.h>
#import <libobjc.A.dylib/MKOverlayContainerViewDelegate.h>
#import <libobjc.A.dylib/MKMouseOverLabelRecognizerDelegate.h>
#import <libobjc.A.dylib/MKMouseOverLabelTarget.h>
#import <libobjc.A.dylib/VKMapViewDelegate.h>
#import <libobjc.A.dylib/VKMapViewCameraDelegate.h>
#import <libobjc.A.dylib/MKAnnotationMarkerContainer.h>
#import <libobjc.A.dylib/MKAnnotationManagerDelegate.h>
#import <libobjc.A.dylib/GEOLogContextDelegate.h>
#import <libobjc.A.dylib/MKRotationFilterDelegate.h>
#import <libobjc.A.dylib/GEOConfigChangeListenerDelegate.h>
#import <libobjc.A.dylib/CALayerDelegate.h>
#import <libobjc.A.dylib/GEOResourceManifestTileGroupObserver.h>
#import <libobjc.A.dylib/MKAnnotationContainerViewDelegate.h>
#import <libobjc.A.dylib/NSCoding.h>

@protocol MKMapViewDelegateMKMapViewDelegatePrivate, MKCompassView, OS_dispatch_queue, OS_dispatch_group;
@class NSMutableArray, NSMutableSet, NSMutableDictionary, MKUsageCounter, NSArray, NSAppearance, MKMapViewInternal, MKAnnotationManager, MKAnnotationContainerView, MKAttributionLabel, NSImageView, _MKEnvironmentLabel, NSClickGestureRecognizer, _MKAnnotationDragGestureRecognizer, MKMapGestureController, MKOverlayContainerView, VKMapView, MKScaleView, NSView, MKPitchControl, MKLocationManager, MKUserLocation, VKRouteContext, VKNavContext, MKMapCamera, NSOrderedSet, MKAccessibilityItem, NSObject, MKRotationFilter, MKAnnotationView, NSLayoutGuide, NSLayoutConstraint, _MKCustomFeatureStore, MKMapCameraZoomRange, MKMapCameraBoundary, MKPointOfInterestFilter, NSTimer, CLLocation, NSString, CALayer, NSDictionary, GEOMapRegion, VKLabelMarker, VKVenueFeatureMarker, VKVenueBuildingFeatureMarker;

@interface MKMapView : NSView <MKLocationManagerObserver, MKMapGestureControllerDelegate, NSGestureRecognizerDelegate, MKOverlayContainerViewDelegate, MKMouseOverLabelRecognizerDelegate, MKMouseOverLabelTarget, VKMapViewDelegate, VKMapViewCameraDelegate, MKAnnotationMarkerContainer, MKAnnotationManagerDelegate, GEOLogContextDelegate, MKRotationFilterDelegate, GEOConfigChangeListenerDelegate, CALayerDelegate, GEOResourceManifestTileGroupObserver, MKAnnotationContainerViewDelegate, NSCoding> {

	NSMutableArray* _whenSizedBlocks;
	NSMutableSet* _annotationViewEventSet;
	NSMutableDictionary* _overlayRendererEventDictionary;
	MKUsageCounter* _usageCounter;
	NSArray* _mouseOverLabelRecognizers;
	long long _mouseOverFeedbackState;
	NSAppearance* _cachedMapsAppearance;
	MKMapViewInternal* _internal;
	MKAnnotationManager* _annotationManager;
	MKAnnotationContainerView* _annotationContainer;
	MKAttributionLabel* _attributionLabel;
	/*^block*/id _annotationRectTest;
	/*^block*/id _annotationCoordinateTest;
	NSImageView* _attributionBadgeView;
	id<MKMapViewDelegate><MKMapViewDelegatePrivate> _safeDelegate;
	id<MKMapViewDelegate><MKMapViewDelegatePrivate> _unsafeDelegate;
	unsigned long long _suspendedEffectsCount;
	unsigned long long _mapType;
	_MKEnvironmentLabel* _debugCurrentEnvironmentLabel;
	NSClickGestureRecognizer* _selectingClickGestureRecognizer;
	NSClickGestureRecognizer* _nonselectingClickGestureRecognizer;
	_MKAnnotationDragGestureRecognizer* _longClickRecognizer;
	NSClickGestureRecognizer* _compassClickGestureRecognizer;
	MKMapGestureController* _gestureController;
	MKOverlayContainerView* _overlayContainer;
	long long _userTrackingMode;
	char _userTrackingModeShouldAnimate;
	VKMapView* _mapView;
	MKScaleView* _scaleView;
	NSView*<MKCompassView> _compassView;
	MKPitchControl* _pitchSliderView;
	char _scaleVisible;
	char _compassVisible;
	char _pitchSliderVisible;
	long long _scaleVisibility;
	char _showsCompass;
	char _showsPitchControl;
	MKLocationManager* _locationManager;
	MKUserLocation* _userLocation;
	VKRouteContext* _routeContext;
	VKNavContext* _navContext;
	MKMapCamera* _camera;
	char _isObservingContentLayoutRect;
	/*^block*/id _showCalloutAfterRegionChangeBlock;
	/*^block*/id _selectAnnotationViewAfterRedrawBlock;
	NSEdgeInsets _edgeInsets;
	double _verticalYawOverride;
	int _attributionCorner;
	long long _originalLoopRate;
	long long _preGesturingLoopRate;
	SCD_Struct_MK52 _annotationTrackingBehavior;
	CGPoint _pointInMapOnMouseDown;
	long long _overlaysWritingDirection;
	char _isInitializing;
	char _canChangeZoomingSpeed;
	char _canShowMouseOverFeedback;
	CLLocationCoordinate2D _smartAimingCachedCoordinate;
	NSOrderedSet* _storedAccessibilityItems;
	char _willUpdateAccessibilityItems;
	char _wantsAccessibilityUpdates;
	MKAccessibilityItem* _focusedAccessibilityItem;
	NSView* _settingsView;
	char _showsAboutMapInContextualMenu;
	double _mapModeStartTime;
	char _continueToRenderWhenOccluded;
	VKMapView* _mapLayer;
	char _hidesAllUIOnMap;
	char _showsZoomControls;
	char _zoomVisible;
	NSView* _zoomButtons;
	NSObject*<OS_dispatch_queue> _lastEffectiveAppearanceIsolationQueue;
	NSAppearance* _lastEffectiveAppearance;
	MKRotationFilter* _rotationFilter;
	MKAnnotationView* _longPressedAnnotationView;
	struct {
		unsigned changingRegion : 1;
		unsigned draggingInterrupted : 1;
		unsigned didStartSmoothScrolling : 1;
		unsigned hasRenderedSomething : 1;
		unsigned hasSignaledWillStartRendering : 1;
		unsigned ignoreLocationUpdates : 1;
		unsigned longPressing : 1;
		unsigned regionChangeIsAnimated : 1;
		unsigned scrollEnabled : 1;
		unsigned scrolling : 1;
		unsigned showsUserLocation : 1;
		unsigned zoomEnabled : 1;
		unsigned zoomIsAnimated : 1;
		unsigned zooming : 1;
		unsigned isChangingViewSize : 1;
		unsigned isChangingEdgeInsets : 1;
		unsigned showsAttribution : 1;
		unsigned canShowAttributionBadge : 1;
		unsigned showsVenues : 1;
		unsigned rotating : 1;
		unsigned pitching : 1;
		unsigned rotateEnabled : 1;
		unsigned pitchEnabled : 1;
		unsigned showsBuildings : 1;
		unsigned showsPointsOfInterest : 1;
		unsigned showsTraffic : 1;
		unsigned hasPendingCameraChange : 1;
		unsigned currentRegionChangeShouldUpdateAnnotationsMidstream : 1;
		unsigned canSelectPOIs : 1;
		unsigned canSelectAllLabels : 1;
		unsigned edgeInsetsAreExplicit : 1;
		unsigned locationPropagationEnabled : 1;
		unsigned userInteractionPausesLocationUpdates : 1;
		unsigned locationPulseEnabled : 1;
		unsigned shouldSplitRouteLine : 1;
		unsigned shouldAnimatePositionWithRouteMatch : 1;
		unsigned clearUserLocationOnLocationReset : 1;
		unsigned showsCurrentEnvironmentName : 1;
		unsigned processingUserLocationUpdate : 1;
		unsigned changingMapType : 1;
		unsigned userRotatedAwayFromVerticalYaw : 1;
		unsigned goingToDefaultLocation : 1;
		unsigned isDraggingAnnotationView : 1;
		unsigned shouldLoadFallbackTiles : 1;
		unsigned iconPixelAlignmentExplicitlyDisabled : 1;
		unsigned userDidRotateDuringCurrentRegionChange : 1;
		unsigned delegateDidChangeUserTrackingMode : 1;
	}  _flags;
	char _hasSetLayoutMargins;
	NSLayoutGuide* _edgeInsetsGuide;
	NSLayoutConstraint* _edgeInsetsTopConstraint;
	NSLayoutConstraint* _edgeInsetsLeftConstraint;
	NSLayoutConstraint* _edgeInsetsRightConstraint;
	NSLayoutConstraint* _edgeInsetsBottomConstraint;
	unsigned long long _suspendPropagatingEdgeInsetsCount;
	char _automaticallySnapsToNorth;
	long long _cachedMuninAvailability;
	char _forceLayoutOnBoundsChange;
	char _hasPendingEdgeInsetsChange;
	NSObject*<OS_dispatch_group> _calloutShowAnimationGroup;
	id _appearanceNotificationListener;
	_MKCustomFeatureStore* _annotationsCustomFeatureStore;
	double _lastYaw;
	char _lastPossiblyVisible;
	unsigned long long _cachedVenueIDWithFocus;
	short _cachedDisplayedFloorOrdinalForVenueWithFocus;
	CLLocationCoordinate2D _oldCenterCoordinate;
	double _oldHeading;
	double _oldPitch;
	double _oldAltitude;
	char _attributionBadgeClickable;
	char willUpdateAccessibilityItems;
	char wantsAccessibilityUpdates;
	char _canRotateForHeading;
	char _suspended;
	MKAccessibilityItem* focusedAccessibilityItem;
	long long _interactionMode;
	unsigned long long _currentFlyoverAnimationID;
	MKMapCameraZoomRange* _cameraZoomRange;
	MKMapCameraBoundary* _cameraBoundary;
	MKPointOfInterestFilter* _pointOfInterestFilter;
	NSTimer* __startEffectsTimer;
	/*^block*/id _labelsDidLayoutCallback;

}

@property (nonatomic,retain) CLLocation * predictedUserLocation; 
@property (assign,nonatomic) char ignoreLocationUpdates; 
@property (nonatomic,retain,readonly) MKAnnotationView * userLocationView; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (getter=_isChangingRegionForGesture,nonatomic,readonly) char changingRegionForGesture; 
@property (assign,setter=_setSelectedFeatureID:,getter=_selectedFeatureID,nonatomic) unsigned long long selectedFeatureID; 
@property (assign,setter=_setRotationSnappingEnabled:,getter=_rotationSnappingEnabled,nonatomic) char rotationSnappingEnabled; 
@property (assign,nonatomic) char markersEnabled; 
@property (assign,nonatomic) char trafficEnabled; 
@property (nonatomic,readonly) CALayer * annotationsContainerLayer; 
@property (getter=_visibleTileSets,nonatomic,readonly) NSArray * visibleTileSets; 
@property (getter=_detailedDescription,nonatomic,readonly) NSString * detailedDescription; 
@property (getter=_detailedDescriptionDictionaryRepresentation,nonatomic,readonly) NSDictionary * detailedDescriptionDictionaryRepresentation; 
@property (nonatomic,readonly) NSArray * overlays; 
@property (retain,readonly) NSOrderedSet * accessibilityItems; 
@property (retain) NSOrderedSet * storedAccessibilityItems; 
@property (nonatomic,retain) MKAccessibilityItem * focusedAccessibilityItem; 
@property (assign) char willUpdateAccessibilityItems; 
@property (assign) char wantsAccessibilityUpdates; 
@property (assign,nonatomic) char canShowMouseOverFeedback; 
@property (getter=_transitLineMarkersInCurrentViewport,nonatomic,readonly) NSArray * transitLineMarkersInCurrentViewport; 
@property (getter=_locationManager,nonatomic,readonly) MKLocationManager * locationManager;                                                                                        //@synthesize locationManager=_locationManager - In the implementation block
@property (nonatomic,retain) NSOrderedSet * storedAccessibilityItems;                                                                                                              //@synthesize storedAccessibilityItems=_storedAccessibilityItems - In the implementation block
@property (assign,nonatomic) char willUpdateAccessibilityItems; 
@property (assign,nonatomic) char wantsAccessibilityUpdates; 
@property (nonatomic,retain) NSView * zoomButtons;                                                                                                                                 //@synthesize zoomButtons=_zoomButtons - In the implementation block
@property (getter=_canShowControls,nonatomic,readonly) char canShowControls; 
@property (nonatomic,readonly) CGSize _centerMapPoint; 
@property (nonatomic,readonly) char canRotateForHeading;                                                                                                                           //@synthesize canRotateForHeading=_canRotateForHeading - In the implementation block
@property (nonatomic,readonly) char hasRenderedSomething; 
@property (nonatomic,readonly) char effectsEnabled; 
@property (assign,getter=isSuspended,nonatomic) char suspended;                                                                                                                    //@synthesize suspended=_suspended - In the implementation block
@property (nonatomic,retain) NSTimer * _startEffectsTimer;                                                                                                                         //@synthesize _startEffectsTimer=__startEffectsTimer - In the implementation block
@property (assign,setter=_setSafeDelegate:,getter=_safeDelegate,nonatomic,__weak) id<MKMapViewDelegate> _safeDelegate; 
@property (assign,setter=_setAttributionBadgeClickable:,getter=_isAttributionBadgeClickable,nonatomic) char attributionBadgeClickable;                                             //@synthesize attributionBadgeClickable=_attributionBadgeClickable - In the implementation block
@property (getter=_calloutShowAnimationGroup,nonatomic,readonly) NSObject*<OS_dispatch_group> calloutShowAnimationGroup;                                                           //@synthesize calloutShowAnimationGroup=_calloutShowAnimationGroup - In the implementation block
@property (assign,setter=_setCurrentFlyoverAnimationID:,getter=_currentFlyoverAnimationID,nonatomic) unsigned long long currentFlyoverAnimationID;                                 //@synthesize currentFlyoverAnimationID=_currentFlyoverAnimationID - In the implementation block
@property (nonatomic,readonly) double _zoomScale; 
@property (nonatomic,readonly) double _zoomLevel; 
@property (getter=_minimumZoomLevel,nonatomic,readonly) double minimumZoomLevel; 
@property (getter=_maximumZoomLevel,nonatomic,readonly) double maximumZoomLevel; 
@property (assign,setter=_setShowsScaleDuringZoom:,getter=_showsScaleDuringZoom,nonatomic) char showsScaleDuringZoom; 
@property (assign,setter=_setScaleVisibility:,getter=_scaleVisibility,nonatomic) long long scaleVisibility; 
@property (assign,setter=_setShowsVenues:,getter=_showsVenues,nonatomic) char showsVenues; 
@property (assign,setter=_setInteractionMode:,getter=_interactionMode,nonatomic) long long interactionMode;                                                                        //@synthesize interactionMode=_interactionMode - In the implementation block
@property (getter=isRegionChanging,nonatomic,readonly) char regionChanging; 
@property (assign,nonatomic) char _annotationViewsAreAddedImmediately; 
@property (nonatomic,readonly) char hasUserLocation; 
@property (getter=_mapRegion,nonatomic,readonly) GEOMapRegion * mapRegion; 
@property (assign,nonatomic) int attributionCorner; 
@property (assign,nonatomic) char showsAttribution; 
@property (assign,nonatomic) char canShowAttributionBadge; 
@property (getter=_isShowingAttributionBadge,nonatomic,readonly) char showingAttributionBadge; 
@property (nonatomic,readonly) CGRect attributionBadgeBounds; 
@property (nonatomic,readonly) char canShowCompass; 
@property (nonatomic,readonly) char canShowPitch; 
@property (nonatomic,readonly) char canShowZoom; 
@property (getter=_compassDiameter,nonatomic,readonly) double compassDiameter; 
@property (assign,setter=_setShowsTrafficIncidents:,getter=_showsTrafficIncidents,nonatomic) char showsTrafficIncidents; 
@property (assign,setter=_setCanSelectPOIs:,getter=_canSelectPOIs,nonatomic) char canSelectPOIs; 
@property (assign,setter=_setUseBalloonCalloutsForLabels:,getter=_useBalloonCalloutsForLabels,nonatomic) char useBalloonCalloutsForLabels; 
@property (assign,setter=_setCanSelectAllLabels:,getter=_canSelectAllLabels,nonatomic) char canSelectAllLabels; 
@property (getter=_selectedLabelMarker,nonatomic,readonly) VKLabelMarker * selectedLabelMarker; 
@property (getter=_isShowingFlyover,nonatomic,readonly) char showingFlyover; 
@property (getter=_canShowFlyover,nonatomic,readonly) char canShowFlyover; 
@property (assign,setter=_setAutomaticallySnapsToNorth:,getter=_automaticallySnapsToNorth,nonatomic) char automaticallySnapsToNorth; 
@property (getter=_isPitched,nonatomic,readonly) char pitched; 
@property (getter=_canEnter3DMode,nonatomic,readonly) char canEnter3DMode; 
@property (getter=_canEnter3DModeFlyover,nonatomic,readonly) char canEnter3DModeFlyover; 
@property (getter=_canEnterNightMode,nonatomic,readonly) char canEnterNightMode; 
@property (getter=_muninAvailability,nonatomic,readonly) long long muninAvailability; 
@property (assign,setter=_setLoadMuninAvailability:,getter=_loadMuninAvailability,nonatomic) char loadMuninAvailability; 
@property (assign,setter=_setUserTrackingBehavior:,getter=_userTrackingBehavior,nonatomic) SCD_Struct_MK52 userTrackingBehavior; 
@property (assign,setter=_setApplicationState:,getter=_applicationState,nonatomic) int applicationState; 
@property (assign,setter=_setDisplayedSearchResultsType:,getter=_displayedSearchResultsType,nonatomic) long long displayedSearchResultsType; 
@property (getter=_mapLayer,nonatomic,readonly) VKMapView * mapLayer; 
@property (getter=_annotationViews,nonatomic,readonly) NSArray * annotationViews; 
@property (assign,setter=_setLocalizeLabels:,getter=_localizeLabels,nonatomic) char localizeLabels; 
@property (assign,setter=_setEdgeInsets:,getter=_edgeInsets,nonatomic) NSEdgeInsets edgeInsets;                                                                                    //@synthesize edgeInsets=_edgeInsets - In the implementation block
@property (assign,setter=_setLabelEdgeInsets:,getter=_labelEdgeInsets,nonatomic) NSEdgeInsets labelEdgeInsets; 
@property (assign,setter=_setUserInteractionPausesLocationUpdates:,getter=_userInteractionPausesLocationUpdates,nonatomic) char userInteractionPausesLocationUpdates; 
@property (assign,setter=_setLocationPulseEnabled:,getter=_isLocationPulseEnabled,nonatomic) char locationPulseEnabled; 
@property (assign,setter=_setShouldSplitRouteLine:,getter=_shouldSplitRouteLine,nonatomic) char shouldSplitRouteLine; 
@property (assign,setter=_setShouldAnimatePositionWithRouteMatch:,getter=_shouldAnimatePositionWithRouteMatch,nonatomic) char shouldAnimatePositionWithRouteMatch; 
@property (assign,setter=_setShouldLoadFallbackTiles:,getter=_shouldLoadFallbackTiles,nonatomic) char shouldLoadFallbackTiles; 
@property (getter=isCalloutLeftAnchored,nonatomic,readonly) char calloutLeftAnchored; 
@property (getter=isCalloutVisible,nonatomic,readonly) char calloutVisible; 
@property (nonatomic,retain,readonly) NSView * calloutView; 
@property (getter=_selectingClickGestureRecognizer,nonatomic,readonly) NSClickGestureRecognizer * selectingClickGestureRecognizer; 
@property (getter=_nonselectingClickGestureRecognizer,nonatomic,readonly) NSClickGestureRecognizer * nonselectingClickGestureRecognizer; 
@property (assign,nonatomic) char continueToRenderWhenOccluded; 
@property (assign,setter=_setShowsNightMode:,getter=_showsNightMode,nonatomic) char showsNightMode; 
@property (assign,setter=_setShowsCurrentEnvironmentName:,getter=_showsCurrentEnvironmentName,nonatomic) char showsCurrentEnvironmentName; 
@property (getter=_currentEnvironmentLabelFrame,nonatomic,readonly) CGRect currentEnvironmentLabelFrame; 
@property (assign,nonatomic) long long labelTextSize; 
@property (assign,nonatomic) long long overlaysWritingDirection;                                                                                                                   //@synthesize overlaysWritingDirection=_overlaysWritingDirection - In the implementation block
@property (assign,nonatomic) char showsAboutMapInContextualMenu;                                                                                                                   //@synthesize showsAboutMapInContextualMenu=_showsAboutMapInContextualMenu - In the implementation block
@property (nonatomic,retain) NSView * settingsView; 
@property (assign,nonatomic) NSView * nextKeyViewAfterSubtree; 
@property (assign,nonatomic) char hidesAllUIOnMap; 
@property (getter=_isAnimating,nonatomic,readonly) char animating; 
@property (getter=_edgeInsetsLayoutGuide,nonatomic,readonly) NSLayoutGuide * edgeInsetsLayoutGuide; 
@property (nonatomic,readonly) VKVenueFeatureMarker * venueWithFocus; 
@property (nonatomic,readonly) VKVenueBuildingFeatureMarker * venueBuildingWithFocus; 
@property (assign,getter=_isDimmingOutsideVenueWithFocus,nonatomic) char dimmingOutsideVenueWithFocus; 
@property (setter=_setLabelsDidLayoutCallback:,getter=_labelsDidLayoutCallback,nonatomic,copy) id labelsDidLayoutCallback;                                                         //@synthesize labelsDidLayoutCallback=_labelsDidLayoutCallback - In the implementation block
@property (assign,nonatomic,__weak) id<MKMapViewDelegate> delegate; 
@property (assign,nonatomic) unsigned long long mapType; 
@property (assign,nonatomic) SCD_Struct_MK34 region; 
@property (assign,nonatomic) CLLocationCoordinate2D centerCoordinate; 
@property (assign,nonatomic) SCD_Struct_MK7 visibleMapRect; 
@property (nonatomic,copy) MKMapCamera * camera; 
@property (nonatomic,copy) MKMapCameraZoomRange * cameraZoomRange;                                                                                                                 //@synthesize cameraZoomRange=_cameraZoomRange - In the implementation block
@property (nonatomic,copy) MKMapCameraBoundary * cameraBoundary;                                                                                                                   //@synthesize cameraBoundary=_cameraBoundary - In the implementation block
@property (assign,getter=isZoomEnabled,nonatomic) char zoomEnabled; 
@property (assign,getter=isScrollEnabled,nonatomic) char scrollEnabled; 
@property (assign,getter=isRotateEnabled,nonatomic) char rotateEnabled; 
@property (assign,getter=isPitchEnabled,nonatomic) char pitchEnabled; 
@property (assign,nonatomic) char showsPitchControl; 
@property (assign,nonatomic) char showsZoomControls; 
@property (assign,nonatomic) char showsCompass; 
@property (assign,nonatomic) char showsScale; 
@property (nonatomic,copy) MKPointOfInterestFilter * pointOfInterestFilter;                                                                                                        //@synthesize pointOfInterestFilter=_pointOfInterestFilter - In the implementation block
@property (assign,nonatomic) char showsPointsOfInterest; 
@property (assign,nonatomic) char showsBuildings; 
@property (assign,nonatomic) char showsTraffic; 
@property (assign,nonatomic) char showsUserLocation; 
@property (nonatomic,readonly) MKUserLocation * userLocation; 
@property (assign,nonatomic) long long userTrackingMode; 
@property (getter=isUserLocationVisible,nonatomic,readonly) char userLocationVisible; 
@property (nonatomic,readonly) NSArray * annotations; 
@property (nonatomic,copy) NSArray * selectedAnnotations; 
@property (nonatomic,readonly) CGRect annotationVisibleRect; 
+(unsigned long long)minZoomLevelForMapType:(unsigned long long)arg1 viewSize:(CGSize)arg2 ;
+(SCD_Struct_MK34)_regionThatFitsMapType:(unsigned long long)arg1 viewSize:(CGSize)arg2 viewInsets:(NSEdgeInsets)arg3 edgePadding:(NSEdgeInsets)arg4 region:(SCD_Struct_MK34)arg5 minZoomLevel:(double)arg6 maxZoomLevel:(double)arg7 snapToZoomLevel:(char)arg8 ;
+(SCD_Struct_MK34)regionThatFitsMapType:(unsigned long long)arg1 viewSize:(CGSize)arg2 edgeInsets:(NSEdgeInsets)arg3 region:(SCD_Struct_MK34)arg4 ;
+(SCD_Struct_MK7)_mapRectThatFitsViewBounds:(CGRect)arg1 mapRect:(SCD_Struct_MK7)arg2 viewInsets:(NSEdgeInsets)arg3 edgePadding:(NSEdgeInsets)arg4 minZoomLevel:(double)arg5 maxZoomLevel:(double)arg6 snapToZoomLevel:(char)arg7 ;
+(SCD_Struct_MK34)regionThatFitsMapType:(unsigned long long)arg1 viewSize:(CGSize)arg2 region:(SCD_Struct_MK34)arg3 ;
-(void)dealloc;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(id<MKMapViewDelegate>)delegate;
-(void)setDelegate:(id<MKMapViewDelegate>)arg1 ;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(id<MKMapViewDelegate>)_safeDelegate;
-(void)setSuspended:(char)arg1 ;
-(char)isSuspended;
-(void)setFrame:(CGRect)arg1 ;
-(char)isFlipped;
-(char)allowsVibrancy;
-(char)isOpaque;
-(void)setFrameOrigin:(CGPoint)arg1 ;
-(id)initWithFrame:(CGRect)arg1 ;
-(id)accessibilityAttributeNames;
-(void)viewDidChangeEffectiveAppearance;
-(void)viewDidMoveToWindow;
-(char)gestureRecognizerShouldBegin:(id)arg1 ;
-(char)gestureRecognizer:(id)arg1 shouldRequireFailureOfGestureRecognizer:(id)arg2 ;
-(id)_preferredAppearance;
-(id)accessibilityChildren;
-(id)accessibilityFocusedUIElement;
-(id)accessibilityHitTest:(CGPoint)arg1 ;
-(char)accessibilityIsIgnored;
-(id)accessibilityAttributeValue:(id)arg1 ;
-(char)performKeyEquivalent:(id)arg1 ;
-(id)accessibilityVisibleChildren;
-(char)accessibilityIsAttributeSettable:(id)arg1 ;
-(char)mouseDownCanMoveWindow;
-(char)_isAnimating;
-(void)applicationDidBecomeActive:(id)arg1 ;
-(void)windowDidChangeOcclusionState:(id)arg1 ;
-(void)keyDown:(id)arg1 ;
-(char)acceptsFirstMouse:(id)arg1 ;
-(void)scrollWheel:(id)arg1 ;
-(id)menuForEvent:(id)arg1 ;
-(void)cancelOperation:(id)arg1 ;
-(void)prepareMenu:(id)arg1 withEvent:(id)arg2 ;
-(void)updateTrackingAreas;
-(void)viewDidChangeBackingProperties;
-(void)magnifyWithEvent:(id)arg1 ;
-(void)viewWillMoveToWindow:(id)arg1 ;
-(void)keyUp:(id)arg1 ;
-(void)flagsChanged:(id)arg1 ;
-(void)cursorUpdate:(id)arg1 ;
-(id)actionForLayer:(id)arg1 forKey:(id)arg2 ;
-(void)rotateWithEvent:(id)arg1 ;
-(void)setRegion:(SCD_Struct_MK34)arg1 ;
-(void)smartMagnifyWithEvent:(id)arg1 ;
-(char)layer:(id)arg1 shouldInheritContentsScale:(double)arg2 fromWindow:(id)arg3 ;
-(void)resizeSubviewsWithOldSize:(CGSize)arg1 ;
-(void)setGestureRecognizers:(id)arg1 ;
-(void)removeAnnotation:(id)arg1 ;
-(char)_gestureRecognizer:(id)arg1 shouldAttemptToRecognizeWithEvent:(id)arg2 ;
-(NSEdgeInsets)_edgeInsets;
-(id)_locationManager;
-(void)locationManagerDidPauseLocationUpdates:(id)arg1 ;
-(void)locationManagerDidResumeLocationUpdates:(id)arg1 ;
-(SCD_Struct_MK34)region;
-(CLLocationCoordinate2D)centerCoordinate;
-(void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1 ;
-(void)resourceManifestManagerDidChangeActiveTileGroup:(id)arg1 ;
-(CGPoint)_centerPoint;
-(double)zoomLevel;
-(id)_mapRegion;
-(double)_zoomLevel;
-(MKUserLocation *)userLocation;
-(char)hasUserLocation;
-(void)valueChangedForGEOConfigKey:(SCD_Struct_MK51*)arg1 ;
-(void)setMapType:(unsigned long long)arg1 ;
-(void)setCamera:(MKMapCamera *)arg1 ;
-(unsigned long long)mapType;
-(MKMapCamera *)camera;
-(double)pitch;
-(id)_visibleTileSets;
-(id)_camera;
-(void)setUserTrackingMode:(long long)arg1 ;
-(long long)userTrackingMode;
-(double)yaw;
-(void)setTrafficEnabled:(char)arg1 ;
-(void)setCenterCoordinate:(CLLocationCoordinate2D)arg1 ;
-(char)trafficEnabled;
-(void)_addSetRegionBlock:(/*^block*/id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_addDependentSetRegionBlock:(/*^block*/id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_addSetRegionBlock:(/*^block*/id)arg1 ;
-(void)_addDependentSetRegionBlock:(/*^block*/id)arg1 ;
-(void)_addDependentAuxiliaryBlock:(/*^block*/id)arg1 ;
-(void)_performWhenSizedBlocks;
-(char)shouldRecognizeMouseOverSelectablePartsOnly;
-(void)mouseOverLabelRecognizer:(id)arg1 stateChangedWithEvent:(id)arg2 ;
-(void)_withEffectiveAppearance:(/*^block*/id)arg1 ;
-(id)_mapLayer;
-(void)gestureControllerWillStartUserInteraction:(id)arg1 ;
-(void)gestureControllerDidStopUserInteraction:(id)arg1 ;
-(void)gestureControllerWillStartPanning:(id)arg1 ;
-(void)gestureControllerDidStopPanning:(id)arg1 willDecelerate:(char)arg2 ;
-(void)gestureControllerDidStopPanningDecelerating:(id)arg1 ;
-(void)gestureControllerWillStartRotating:(id)arg1 ;
-(void)gestureControllerDidStopRotatingDecelerating:(id)arg1 ;
-(void)gestureControllerDidStopRotating:(id)arg1 willDecelerate:(char)arg2 ;
-(CGPoint)gestureController:(id)arg1 focusPointForPoint:(CGPoint)arg2 gestureKind:(long long)arg3 ;
-(void)gestureControllerWillStartZooming:(id)arg1 animated:(char)arg2 ;
-(void)gestureControllerDidStopZooming:(id)arg1 direction:(long long)arg2 willDecelerate:(char)arg3 ;
-(void)gestureControllerDidStopZoomingDecelerating:(id)arg1 direction:(long long)arg2 ;
-(char)isZoomEnabled;
-(void)gestureControllerDidStopTilting:(id)arg1 willDecelerate:(char)arg2 tiltDirection:(long long)arg3 ;
-(char)isScrollEnabled;
-(void)gestureControllerWillStartTilting:(id)arg1 ;
-(void)gestureControllerDidStopTiltingDecelerating:(id)arg1 ;
-(char)gestureController:(id)arg1 shouldAttemptToRecognizeWithEvent:(id)arg2 ;
-(id)_viewsToIgnoreForGestures;
-(void)setScrollEnabled:(char)arg1 ;
-(void)setZoomEnabled:(char)arg1 ;
-(void)zoomIn:(id)arg1 ;
-(void)zoomOut:(id)arg1 ;
-(id)scaleView;
-(id)compassView;
-(char)_rotationSnappingEnabled;
-(NSArray *)annotations;
-(void)addAnnotations:(id)arg1 ;
-(void)removeAnnotations:(id)arg1 ;
-(void)addAnnotation:(id)arg1 ;
-(CGPoint)convertCoordinate:(CLLocationCoordinate2D)arg1 toPointToView:(id)arg2 ;
-(CGRect)visibleRectInView:(id)arg1 ;
-(char)annotationContainerShouldAlignToPixels:(id)arg1 ;
-(char)annotationContainerIsRotated:(id)arg1 ;
-(id)annotationContainer:(id)arg1 requestAddingClusterForAnnotationViews:(id)arg2 ;
-(void)annotationContainer:(id)arg1 requestRemovingClusterAnnotationView:(id)arg2 updateVisible:(char)arg3 ;
-(void)annotationContainer:(id)arg1 calloutPrimaryActionTriggeredForAnnotationView:(id)arg2 ;
-(void)annotationContainer:(id)arg1 scrollToRevealCalloutWithOffset:(CGPoint)arg2 annotationCoordinate:(CLLocationCoordinate2D)arg3 completionHandler:(/*^block*/id)arg4 ;
-(double)annotationContainer:(id)arg1 pinDropDistanceForCoordinate:(CLLocationCoordinate2D)arg2 maxDistance:(double*)arg3 ;
-(void)annotationContainerWillAnimateBubble:(id)arg1 ;
-(void)annotationContainerDidAnimateBubble:(id)arg1 ;
-(void)annotationContainerWillDropPins:(id)arg1 ;
-(void)annotationContainerDidDropPins:(id)arg1 ;
-(CGRect)visibleCenteringRectInView:(id)arg1 ;
-(CLLocationCoordinate2D)convertPoint:(CGPoint)arg1 toCoordinateFromView:(id)arg2 ;
-(CGRect)annotationContainerVisibleRect:(id)arg1 ;
-(char)annotationContainer:(id)arg1 isAnnotationView:(id)arg2 validForDisplayAtPoint:(CGPoint)arg3 ;
-(void)annotationContainerDidFinishMapsTransitionExpanding:(id)arg1 ;
-(/*^block*/id)annotationRectTest;
-(/*^block*/id)annotationCoordinateTest;
-(char)shouldHideOffscreenSelectedAnnotation;
-(void)addAnnotationRepresentation:(id)arg1 allowAnimation:(char)arg2 ;
-(void)removeAnnotationRepresentation:(id)arg1 ;
-(void)selectAnnotationRepresentation:(id)arg1 animated:(char)arg2 ;
-(void)deselectAnnotationRepresentation:(id)arg1 animated:(char)arg2 ;
-(void)moveAnnotationRepresentation:(id)arg1 fromCoordinate:(CLLocationCoordinate2D)arg2 animated:(char)arg3 duration:(double)arg4 ;
-(void)annotationManager:(id)arg1 didAddAnnotationRepresentations:(id)arg2 ;
-(void)annotationManager:(id)arg1 didRemoveAnnotationRepresentations:(id)arg2 ;
-(void)annotationManagerDidChangeVisibleAnnotationRepresentations:(id)arg1 ;
-(id)annotationManager:(id)arg1 representationForAnnotation:(id)arg2 ;
-(void)annotationManager:(id)arg1 didSelectAnnotationRepresentation:(id)arg2 ;
-(void)annotationManager:(id)arg1 didDeselectAnnotationRepresentation:(id)arg2 ;
-(void)annotationManager:(id)arg1 willDeselectAnnotationRepresentation:(id)arg2 ;
-(char)annotationManager:(id)arg1 shouldAnimateDeselectionOfAnnotation:(id)arg2 forSelectionOfAnnotation:(id)arg3 ;
-(char)annotationManager:(id)arg1 canSelectAnnotationRepresentation:(id)arg2 ;
-(void)locationManagerUpdatedLocation:(id)arg1 ;
-(void)locationManagerFailedToUpdateLocation:(id)arg1 withError:(id)arg2 ;
-(void)locationManagerDidReset:(id)arg1 ;
-(char)locationManagerShouldPauseLocationUpdates:(id)arg1 ;
-(SCD_Struct_MK7)visibleMapRect;
-(void)setVisibleMapRect:(SCD_Struct_MK7)arg1 ;
-(void)setShowsUserLocation:(char)arg1 ;
-(char)showsUserLocation;
-(void)rotationFilter:(id)arg1 didChangeSnapping:(char)arg2 ;
-(void)_setMapDisplayStyle:(SCD_Struct_MK28)arg1 ;
-(char)isCalloutLeftAnchored;
-(MKAnnotationView *)userLocationView;
-(SCD_Struct_MK7)_mapRectWithFraction:(double)arg1 ofVisible:(SCD_Struct_MK7)arg2 ;
-(id)_annotationViews;
-(SCD_Struct_MK28)_mapDisplayStyle;
-(id)annotationsInMapRect:(SCD_Struct_MK7)arg1 ;
-(void)_snapToTrueNorthAndCallBack:(char)arg1 ;
-(char)effectsEnabled;
-(void)_updateAttribution;
-(void)startLinearZoomIn:(char)arg1 withEvent:(id)arg2 ;
-(void)stopZoomingWithInertia;
-(void)_setCamera:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)_setCamera:(id)arg1 duration:(double)arg2 timingFunction:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)_setCamera:(id)arg1 duration:(double)arg2 timing:(/*^block*/id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(double)_cameraAltitudeClampedToZoomRange:(id)arg1 ;
-(MKMapCameraBoundary *)cameraBoundary;
-(MKMapCameraZoomRange *)cameraZoomRange;
-(void)_setCamera:(id)arg1 animated:(char)arg2 completionHandler:(/*^block*/id)arg3 ;
-(double)_durationForCamera:(id)arg1 ;
-(/*^block*/id)_vkTimingFunctionForCAMediaTimingFunction:(id)arg1 ;
-(void)_updateFromCamera:(id)arg1 duration:(double)arg2 timing:(/*^block*/id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)_setCamera:(id)arg1 duration:(double)arg2 springMass:(float)arg3 springStiffness:(float)arg4 springDamping:(float)arg5 springVelocity:(float)arg6 completionHandler:(/*^block*/id)arg7 ;
-(double)_animationDurationWhenSettingCameraBoundary:(id)arg1 ;
-(id)vk_mapLayer;
-(void)snapToNorth:(id)arg1 ;
-(void)_setCamera:(id)arg1 ;
-(void)_setCamera:(id)arg1 animated:(char)arg2 ;
-(void)_setCamera:(id)arg1 springMass:(float)arg2 springStiffness:(float)arg3 springDamping:(float)arg4 springVelocity:(float)arg5 ;
-(void)_setCameraZoomRange:(id)arg1 animated:(char)arg2 ;
-(void)_setCameraBoundary:(id)arg1 animated:(char)arg2 ;
-(void)_updateFromCamera:(id)arg1 ;
-(void)_updateCameraState;
-(void)_snapToNorthIfNecessary;
-(int)currentUITargetForAnalytics;
-(int)currentMapViewTargetForAnalytics;
-(void)setPointOfInterestFilter:(MKPointOfInterestFilter *)arg1 ;
-(MKPointOfInterestFilter *)pointOfInterestFilter;
-(void)_setSafeDelegate:(id)arg1 ;
-(id)viewForAnnotation:(id)arg1 ;
-(id)_flattenedAnnotationsForAnnotationViews:(id)arg1 maxDisplayPriority:(float*)arg2 ;
-(void)locationManagerApprovalDidChange:(id)arg1 ;
-(void)removeUserLocation;
-(char)_isPoint:(CGPoint)arg1 nearUserLocationView:(double)arg2 ;
-(void)setIgnoreLocationUpdates:(char)arg1 ;
-(void)_updateUserLocation:(id)arg1 routeMatch:(id)arg2 ;
-(void)setPredictedUserLocation:(CLLocation *)arg1 ;
-(void)_updateUserLocationViewWithLocation:(id)arg1 hadUserLocation:(char)arg2 ;
-(void)_updateShowHeadingIndicator;
-(void)startUpdatingUserLocation;
-(void)stopUpdatingUserLocation;
-(char)_isLocationPropagationEnabled;
-(void)_setLocationPropagationEnabled:(char)arg1 ;
-(char)_clearUserLocationOnLocationReset;
-(void)_setClearUserLocationOnLocationReset:(char)arg1 ;
-(char)_isUserLocationInView:(char)arg1 ;
-(char)_isUserLocationViewCentered:(double)arg1 ;
-(char)_userLocationWithinVisibleMapBounds;
-(CLLocation *)predictedUserLocation;
-(char)ignoreLocationUpdates;
-(void)_pauseUserLocationUpdates;
-(void)_resumeUserLocationUpdates:(char)arg1 ;
-(void)locationManager:(id)arg1 didUpdateVehicleSpeed:(double)arg2 timestamp:(id)arg3 ;
-(void)_createAnnotationViewSetIfNeeded;
-(void)_countUsageOfTypeIfNeeded:(unsigned long long)arg1 forAnnotationView:(id)arg2 countedEventTypes:(id)arg3 ;
-(void)_createOverlayRendererDictionaryIfNeeded;
-(void)_countUsageForAnnotationViewsIfNeeded:(id)arg1 ;
-(void)_countUsageForRendererIfNeeded:(id)arg1 ;
-(void)_handleSelectGestureToSelect:(id)arg1 ;
-(void)_handleSelectGestureToDeselect:(id)arg1 ;
-(void)_handleLongPressGesture:(id)arg1 ;
-(void)_updateScrollingAndGestures;
-(char)_isAttributionBadgeClickable;
-(id)_labelMarkerAtPoint:(CGPoint)arg1 ;
-(id)_annotationAtPoint:(CGPoint)arg1 avoidCurrent:(char)arg2 ;
-(char)_gesturesShouldAttemptToRecognizeWithEvent:(id)arg1 ;
-(void)_dropDraggingAnnotationView:(char)arg1 ;
-(void)selectAnnotation:(id)arg1 animated:(char)arg2 ;
-(void)deselectAnnotation:(id)arg1 animated:(char)arg2 ;
-(void)_annotationViewDragStateChanged:(id)arg1 ;
-(void)_handleSelectionAtPoint:(CGPoint)arg1 ;
-(void)pauseUserLocationUpdates;
-(void)_updateIconsShouldAlignToPixels;
-(void)resumeUserLocationUpdates;
-(double)currentZoomLevel;
-(void)_willStartZoom:(char)arg1 ;
-(void)gestureControllerDidStopZooming:(id)arg1 direction:(long long)arg2 type:(long long)arg3 willDecelerate:(char)arg4 ;
-(void)_didEndZoom;
-(void)gestureControllerDidStopZoomingDecelerating:(id)arg1 direction:(long long)arg2 type:(long long)arg3 ;
-(CGPoint)zoomPointInMapViewFromPoint:(CGPoint)arg1 smartAiming:(char)arg2 lockOnPreviousTarget:(char)arg3 ;
-(void)_configureGestureRecognizers:(id)arg1 ;
-(char)_isChangingRegionForGesture;
-(void)setLocalizeLabels:(char)arg1 ;
-(void)setShowsPointsOfInterest:(char)arg1 ;
-(void)setShowsBuildings:(char)arg1 ;
-(void)_setMapType:(unsigned long long)arg1 onInit:(char)arg2 animated:(char)arg3 ;
-(void)applicationDidResignActiveOrWillTerminate:(id)arg1 ;
-(void)goToDefaultLocation;
-(void)_layoutBottomViews:(char)arg1 ;
-(id)_commonInitFromIB:(char)arg1 gestureRecognizerHostView:(id)arg2 locationManager:(id)arg3 showsAttribution:(char)arg4 showsAppleLogo:(char)arg5 ;
-(void)setPitchEnabled:(char)arg1 ;
-(void)setRotateEnabled:(char)arg1 ;
-(void)setShowsTraffic:(char)arg1 ;
-(void)setShowsCompass:(char)arg1 ;
-(void)setShowsScale:(char)arg1 ;
-(void)setShowsZoomControls:(char)arg1 ;
-(char)isPitchEnabled;
-(char)isRotateEnabled;
-(char)showsBuildings;
-(char)showsTraffic;
-(char)showsCompass;
-(char)showsScale;
-(char)showsZoomControls;
-(void)_logTimeSpentInCurrentMapMode;
-(void)_clearLayoutGuides;
-(char)_isShowingAttributionBadge;
-(void)_updateEnvironmentLabelText;
-(char)localizeLabels;
-(char)isShowingFlyover;
-(void)_setMapType:(unsigned long long)arg1 onInit:(char)arg2 animated:(char)arg3 forceSetting:(char)arg4 ;
-(char)_supportsVKMapType:(int)arg1 ;
-(void)_deselectLabelMarkerAnimated:(char)arg1 ;
-(void)_updateCompassVisibility;
-(void)_updateZoomControlsVisiblility:(char)arg1 ;
-(void)_updatePitchControlsVisiblility:(char)arg1 ;
-(void)_updateSkyglowAppearance;
-(char)_showsNightMode;
-(double)_boundedZoomLevel:(double)arg1 ;
-(void)disableMarkerPixelAlignment;
-(void)enableMarkerPixelAlignment;
-(void)disableAndRearmEnableMarkerPixelAlignment;
-(void)_updateInsetsWithForce:(char)arg1 ;
-(void)_sizeWillChange;
-(void)_sizeDidChangeWithCenterCoordinate:(CLLocationCoordinate2D)arg1 ;
-(char)_canEnter3DMode;
-(void)exit3DMode;
-(void)setUserTrackingMode:(long long)arg1 animated:(char)arg2 ;
-(void)_setUserTrackingMode:(long long)arg1 animated:(char)arg2 fromTrackingButton:(char)arg3 ;
-(void)_updateFallbackTileLoading;
-(id)urlForMapAttribution;
-(void)_startFlyoverTourAnimation:(unsigned long long)arg1 duration:(double)arg2 completion:(/*^block*/id)arg3 ;
-(void)_selectLabelMarker:(id)arg1 animated:(char)arg2 ;
-(char)_isUsingDevResourceStyleSheet;
-(char)_isHandlingUserEvent;
-(char)_iconsShouldAlignToPixels;
-(void)setMouseOverFeedbackState:(long long)arg1 ;
-(void)setNeedsUpdateAccessibilityItems:(char)arg1 ;
-(void)_showOrHideScaleIfNecessary:(char)arg1 ;
-(void)_updateScale;
-(void)_updateShouldDisplayEffects;
-(double)_minimumZoomLevel;
-(double)_maximumZoomLevel;
-(double)presentationYaw;
-(void)_updateEffects;
-(void)_stopEffects;
-(SCD_Struct_MK7)mapRectThatFits:(SCD_Struct_MK7)arg1 edgePadding:(NSEdgeInsets)arg2 ;
-(void)setVisibleMapRect:(SCD_Struct_MK7)arg1 edgePadding:(NSEdgeInsets)arg2 animated:(char)arg3 ;
-(void)_updateContentBounds;
-(void)_updateScrollContainerView:(char)arg1 forReason:(long long)arg2 ;
-(char)_roomForCompass;
-(char)_canShowControls;
-(char)canPossiblyShowCompass;
-(char)showsPitchControl;
-(void)_setScaleVisibility:(long long)arg1 ;
-(double)_compassDiameter;
-(void)_updateCompassViewPitch;
-(void)_handleCompassTap:(id)arg1 ;
-(char)canShowCompass;
-(void)_setCompassVisible:(char)arg1 animationAllowed:(char)arg2 force:(char)arg3 ;
-(void)_postDidUpdateYawNotification;
-(char)canShowPitch;
-(void)enter3DMode;
-(id)_commonVisibilityAnimation:(char)arg1 ;
-(char)canShowZoom;
-(void)makeZoomButtonsIfNeeded;
-(NSView *)zoomButtons;
-(char)showsSettingsView;
-(NSView *)settingsView;
-(void)_insertKeyView:(id)arg1 afterKeyView:(id)arg2 ;
-(id)pitchControlView;
-(unsigned long long)_currentFlyoverAnimationID;
-(void)_setCurrentFlyoverAnimationID:(unsigned long long)arg1 ;
-(char)_mapViewHasUpdatedCamera;
-(void)_didChangeRegionMidstream:(char)arg1 ;
-(void)_willChangeRegionAnimated:(char)arg1 ;
-(void)_startEffects;
-(void)_issueDatasetCheckinCall;
-(CGRect)annotationVisibleRect;
-(double)_goToCenterCoordinate:(CLLocationCoordinate2D)arg1 zoomLevel:(double)arg2 animated:(char)arg3 ;
-(void)_displayWorld;
-(void)setRegion:(SCD_Struct_MK34)arg1 animated:(char)arg2 ;
-(void)_updateMouseOverLabelRecognizers;
-(id)_selectedLabelMarker;
-(void)_selectAnnotation:(id)arg1 animated:(char)arg2 ;
-(char)_canSelectAllLabels;
-(void)navigationCameraReturnToPuck;
-(void)_addAnnotation:(id)arg1 allowAnimation:(char)arg2 ;
-(CGPoint)_convertCoordinate:(CLLocationCoordinate2D)arg1 toPointToView:(id)arg2 ;
-(CLLocationCoordinate2D)_convertPoint:(CGPoint)arg1 toCoordinateFromView:(id)arg2 ;
-(CGRect)_convertRegion:(SCD_Struct_MK34)arg1 toRectToView:(id)arg2 ;
-(SCD_Struct_MK34)_convertRect:(CGRect)arg1 toRegionFromView:(id)arg2 ;
-(SCD_Struct_MK7)_convertRect:(CGRect)arg1 toMapRectFromView:(id)arg2 ;
-(CGRect)_convertMapRect:(SCD_Struct_MK7)arg1 toRectToView:(id)arg2 ;
-(void)_updateBackgroundStateSoon;
-(void)_forceManifestUpdateIfNecessary;
-(void)containingWindowWillClose:(id)arg1 ;
-(void)updateLayoutGuides;
-(void)_updateBackgroundStateNow;
-(void)_forceMapViewLayout;
-(char)_mustWaitUntilSized;
-(void)setCenterCoordinate:(CLLocationCoordinate2D)arg1 animated:(char)arg2 ;
-(void)setCamera:(id)arg1 animated:(char)arg2 ;
-(double)_zoomLevelForRegion:(SCD_Struct_MK34)arg1 includeAccessoryPadding:(char)arg2 ;
-(void)_setZoomScale:(double)arg1 centerMapPoint:(CGSize)arg2 duration:(double)arg3 timingFunction:(id)arg4 animated:(char)arg5 ;
-(id)_mapRegionWithCenterCoordinate:(CLLocationCoordinate2D)arg1 zoomScale:(double)arg2 ;
-(void)_goToMapRegion:(id)arg1 duration:(double)arg2 timingFunction:(id)arg3 animated:(char)arg4 completionHandler:(/*^block*/id)arg5 ;
-(void)_setZoomScale:(double)arg1 centerMapPoint:(CGSize)arg2 duration:(double)arg3 animated:(char)arg4 ;
-(void)_goToMapRegion:(id)arg1 duration:(double)arg2 animated:(char)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)_clearGestureRecognizers;
-(SCD_Struct_MK53)_zoomRegionForMapRect:(SCD_Struct_MK7)arg1 edgePadding:(NSEdgeInsets)arg2 maxZoomLevel:(long long)arg3 minZoomLevel:(long long)arg4 ;
-(SCD_Struct_MK7)mapRectThatFits:(SCD_Struct_MK7)arg1 ;
-(double)_zoomLevelForMapRect:(SCD_Struct_MK7)arg1 includeAccessoryPadding:(char)arg2 ;
-(double)_zoomScale;
-(long long)_roundedZoomLevel;
-(void)_setZoomScale:(double)arg1 centerCoordinate:(CLLocationCoordinate2D)arg2 duration:(double)arg3 animated:(char)arg4 ;
-(void)_setZoomScale:(double)arg1 centerCoordinate:(CLLocationCoordinate2D)arg2 duration:(double)arg3 timingFunction:(id)arg4 animated:(char)arg5 ;
-(void)setCenterCoordinate:(CLLocationCoordinate2D)arg1 zoomLevel:(double)arg2 animated:(char)arg3 ;
-(void)_updateInsets;
-(void)_setEdgeInsets:(NSEdgeInsets)arg1 explicit:(char)arg2 ;
-(VKVenueFeatureMarker *)venueWithFocus;
-(id)venueWithID:(unsigned long long)arg1 ;
-(VKVenueBuildingFeatureMarker *)venueBuildingWithFocus;
-(double)_mapKitZoomLevelForVectorKitTileZoomLevel:(double)arg1 ;
-(short)displayedFloorOrdinalForBuildingsInVenue:(id)arg1 ;
-(void)setSelectedVenuePoiFeatureId:(unsigned long long)arg1 ;
-(void)deselectVenuePoiFeatureId;
-(void)_prepareFlyoverAnimation:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_performFlyoverAnimation:(id)arg1 animateToStart:(char)arg2 ;
-(void)_stopFlyoverAnimation;
-(void)_pauseFlyoverAnimation;
-(void)_resumeFlyoverAnimation;
-(void)setFlyoverMode:(int)arg1 ;
-(void)_setDisplayedSearchResultsType:(long long)arg1 ;
-(void)_addCustomFeatureDataSource:(id)arg1 ;
-(void)_addAnnotationsCustomFeatureStoreIfNeeded;
-(id)_labelMarkerForCustomFeatureAnnotation:(id)arg1 ;
-(void)setCamera:(id)arg1 animated:(char)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)setCamera:(id)arg1 duration:(double)arg2 springMass:(float)arg3 springStiffness:(float)arg4 springDamping:(float)arg5 springVelocity:(float)arg6 completionHandler:(/*^block*/id)arg7 ;
-(void)setCameraZoomRange:(id)arg1 animated:(char)arg2 ;
-(void)setCameraBoundary:(id)arg1 animated:(char)arg2 ;
-(void)setVehicleState:(SCD_Struct_MK54)arg1 ;
-(void)_setVisibleMapRect:(SCD_Struct_MK7)arg1 animated:(char)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)_updateAllUIOnMapVisibility;
-(id)_lastKeyViewInSubtree;
-(void)_setSettingsView:(id)arg1 ;
-(void)mapLayerDidStartLoadingTiles:(id)arg1 ;
-(void)mapLayerDidFinishLoadingTiles:(id)arg1 ;
-(void)mapLayerDidFailLoadingTiles:(id)arg1 withError:(id)arg2 ;
-(void)mapLayerDidDraw:(id)arg1 ;
-(void)mapLayerDidChangeSceneState:(id)arg1 withState:(unsigned long long)arg2 ;
-(void)mapLayerWillEnterAR:(id)arg1 ;
-(void)mapLayerDidEnterAR:(id)arg1 ;
-(void)mapLayerDidExitAR:(id)arg1 ;
-(void)mapLayer:(id)arg1 didEncounterARError:(id)arg2 ;
-(void)mapLayer:(id)arg1 arSessionWasInterrupted:(unsigned long long)arg2 ;
-(void)mapLayerARSessionInterruptionEnded:(id)arg1 ;
-(void)mapLayer:(id)arg1 arTrackingStateDidChange:(unsigned long long)arg2 reason:(unsigned long long)arg3 ;
-(void)mapLayerWillStartFlyoverTour:(id)arg1 ;
-(void)mapLayer:(id)arg1 didStopFlyoverTourCompleted:(char)arg2 ;
-(void)mapLayer:(id)arg1 flyoverTourLabelDidChange:(id)arg2 ;
-(void)mapLayer:(id)arg1 selectedLabelMarkerWillDisappear:(id)arg2 ;
-(void)mapLayerLabelsDidLayout:(id)arg1 ;
-(void)mapLayer:(id)arg1 willTransitionTo:(long long)arg2 ;
-(void)mapLayer:(id)arg1 didUpdateVerticalYawTo:(double)arg2 ;
-(void)mapLayer:(id)arg1 venueWithFocusDidChange:(id)arg2 building:(id)arg3 ;
-(void)mapLayer:(id)arg1 venueCreated:(id)arg2 venueCreatedBuilding:(id)arg3 ;
-(void)mapLayerDidChangeVisibleRegion;
-(void)mapLayerWillChangeRegionAnimated:(char)arg1 ;
-(void)mapLayerDidChangeRegionAnimated:(char)arg1 ;
-(void)mapLayerDidFinishInitialTrackingAnimation;
-(id)mapLayerPresentationForAnnotation:(id)arg1 ;
-(void)mapLayerDidBecomePitched:(char)arg1 ;
-(void)mapLayerCanEnter3DModeDidChange:(char)arg1 ;
-(void)mapLayerMuninAvailabilityDidChange:(long long)arg1 ;
-(void)mapLayerCanZoomInDidChange:(char)arg1 ;
-(void)mapLayerCanZoomOutDidChange:(char)arg1 ;
-(void)mapLayerNavigationCameraHasStartedPanning;
-(void)mapLayerNavigationCameraHasStoppedPanning;
-(void)mapLayerNavigationCameraDidLeaveDefaultZoom;
-(void)mapLayerNavigationCameraDidReturnToDefaultZoom;
-(void)_setUseBalloonCalloutsForLabels:(char)arg1 ;
-(char)_useBalloonCalloutsForLabels;
-(id)_initWithFrame:(CGRect)arg1 gestureRecognizerHostView:(id)arg2 showsAttribution:(char)arg3 showsAppleLogo:(char)arg4 ;
-(id)initWithFrame:(CGRect)arg1 locationManager:(id)arg2 ;
-(char)showsAttribution;
-(void)setShowsAttribution:(char)arg1 ;
-(char)canShowAttributionBadge;
-(void)setCanShowAttributionBadge:(char)arg1 ;
-(CGRect)attributionBadgeBounds;
-(int)attributionCorner;
-(id)_mapAttribution;
-(void)setAttributionCorner:(int)arg1 ;
-(CGRect)attributionFrame;
-(void)_removeCustomFeatureDataSource:(id)arg1 ;
-(char)_showsTrafficIncidents;
-(void)_setShowsTrafficIncidents:(char)arg1 ;
-(char)_localizeLabels;
-(void)_setLocalizeLabels:(char)arg1 ;
-(char)showsPointsOfInterest;
-(char)_showsVenues;
-(void)_setShowsVenues:(char)arg1 ;
-(char)isShowingNoDataPlaceholders;
-(id)_selectingClickGestureRecognizer;
-(id)_nonselectingClickGestureRecognizer;
-(char)_isShowingFlyover;
-(char)_canShowFlyover;
-(void)_setMapType:(unsigned long long)arg1 animated:(char)arg2 ;
-(void)_setShowsNightMode:(char)arg1 ;
-(char)userIsGesturing;
-(char)isRegionChanging;
-(double)_vectorKitTileZoomLevelForMapKitZoomLevel:(double)arg1 ;
-(void)_setTracePlaybackSpeedMultiplier:(double)arg1 ;
-(char)isUserLocationVisible;
-(char)hasRenderedSomething;
-(char)_showsCurrentEnvironmentName;
-(void)_setShowsCurrentEnvironmentName:(char)arg1 ;
-(CGRect)_currentEnvironmentLabelFrame;
-(char)_isZooming;
-(char)_userInteractionPausesLocationUpdates;
-(void)_setUserInteractionPausesLocationUpdates:(char)arg1 ;
-(char)_isLocationPulseEnabled;
-(void)_setLocationPulseEnabled:(char)arg1 ;
-(char)_shouldSplitRouteLine;
-(void)_setShouldSplitRouteLine:(char)arg1 ;
-(char)_shouldAnimatePositionWithRouteMatch;
-(void)_setShouldAnimatePositionWithRouteMatch:(char)arg1 ;
-(char)_shouldLoadFallbackTiles;
-(void)_setShouldLoadFallbackTiles:(char)arg1 ;
-(void)setLabelTextSize:(long long)arg1 ;
-(long long)labelTextSize;
-(id)beginStoppingEffects;
-(void)showAnnotations:(id)arg1 animated:(char)arg2 ;
-(char)_showsScaleDuringZoom;
-(void)_setShowsScaleDuringZoom:(char)arg1 ;
-(long long)_scaleVisibility;
-(void)setShowsPitchControl:(char)arg1 ;
-(void)_updateControl:(id)arg1 toFrame:(CGRect)arg2 animated:(char)arg3 ;
-(char)compassVisible;
-(char)_automaticallySnapsToNorth;
-(void)_setAutomaticallySnapsToNorth:(char)arg1 ;
-(void)calloutDidAppearForAnnotationView:(id)arg1 inContainer:(id)arg2 ;
-(NSArray *)selectedAnnotations;
-(void)setSelectedAnnotations:(NSArray *)arg1 ;
-(char)_canSelectPOIs;
-(void)_setCanSelectPOIs:(char)arg1 ;
-(void)_setCanSelectAllLabels:(char)arg1 ;
-(void)_addAnnotations:(id)arg1 allowAnimation:(char)arg2 ;
-(void)_replaceAnnotation:(id)arg1 withAnnotation:(id)arg2 ;
-(void)_addViewsForAnnotations:(id)arg1 ;
-(id)dequeueReusableAnnotationViewWithIdentifier:(id)arg1 ;
-(id)dequeueReusableAnnotationViewWithIdentifier:(id)arg1 forAnnotation:(id)arg2 ;
-(void)registerClass:(Class)arg1 forAnnotationViewWithReuseIdentifier:(id)arg2 ;
-(char)_annotationViewsAreAddedImmediately;
-(void)set_annotationViewsAreAddedImmediately:(char)arg1 ;
-(CGRect)convertRegion:(SCD_Struct_MK34)arg1 toRectToView:(id)arg2 ;
-(SCD_Struct_MK34)convertRect:(CGRect)arg1 toRegionFromView:(id)arg2 ;
-(SCD_Struct_MK7)convertRect:(CGRect)arg1 toMapRectFromView:(id)arg2 ;
-(CGRect)convertMapRect:(SCD_Struct_MK7)arg1 toRectToView:(id)arg2 ;
-(void)_enter3DMode;
-(void)_exit3DMode;
-(void)_enterARMode;
-(void)_enterARModeWithLocation:(id)arg1 ;
-(void)_exitARMode;
-(char)_isPitched;
-(char)_canEnter3DModeFlyover;
-(char)_canEnterNightMode;
-(long long)_muninAvailability;
-(char)_loadMuninAvailability;
-(void)_setLoadMuninAvailability:(char)arg1 ;
-(SCD_Struct_MK52)_userTrackingBehavior;
-(void)_setUserTrackingBehavior:(SCD_Struct_MK52)arg1 ;
-(int)_applicationState;
-(void)_setApplicationState:(int)arg1 ;
-(long long)_displayedSearchResultsType;
-(void)_addVectorOverlay:(id)arg1 ;
-(void)_removeVectorOverlay:(id)arg1 ;
-(void)_addPersistentVectorOverlay:(id)arg1 ;
-(void)_removePersistentVectorOverlay:(id)arg1 ;
-(char)continueToRenderWhenOccluded;
-(void)setContinueToRenderWhenOccluded:(char)arg1 ;
-(CGSize)_centerMapPoint;
-(SCD_Struct_MK34)regionThatFits:(SCD_Struct_MK34)arg1 ;
-(void)_goToMapRegion:(id)arg1 duration:(double)arg2 animated:(char)arg3 ;
-(void)_setVisibleMapRect:(SCD_Struct_MK7)arg1 duration:(double)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)setVisibleMapRect:(SCD_Struct_MK7)arg1 animated:(char)arg2 ;
-(double)_defaultAnimationDurationForMapRect:(SCD_Struct_MK7)arg1 edgePadding:(NSEdgeInsets)arg2 ;
-(double)_panDurationFromPoint:(CGPoint)arg1 toPoint:(CGPoint)arg2 ;
-(double)_zoomScaleForMapRegion:(id)arg1 ;
-(NSEdgeInsets)_labelEdgeInsets;
-(void)_setLabelEdgeInsets:(NSEdgeInsets)arg1 ;
-(id)_edgeInsetsLayoutGuide;
-(void)_suspendPropagatingEdgeInsets;
-(void)_resumePropagatingEdgeInsets;
-(void)_setEdgeInsets:(NSEdgeInsets)arg1 ;
-(void)setDimmingOutsideVenueWithFocus:(char)arg1 ;
-(char)_isDimmingOutsideVenueWithFocus;
-(double)zoomToFocusVenue:(id)arg1 ;
-(double)zoomToFocusVenueBuilding:(id)arg1 ;
-(void)setDisplayedFloorOrdinal:(short)arg1 forBuildingsInVenue:(id)arg2 ;
-(void)resetDisplayedFloorOrdinalForAllVenues;
-(char)displayedFloorIsDefaultForBuildingsInVenue:(id)arg1 ;
-(short)defaultFloorForBuildingsInVenue:(id)arg1 ;
-(void)_performFlyoverAnimation:(id)arg1 ;
-(void)setCamera:(id)arg1 duration:(double)arg2 springMass:(float)arg3 springStiffness:(float)arg4 springDamping:(float)arg5 springVelocity:(float)arg6 ;
-(void)setCamera:(id)arg1 springMass:(float)arg2 springStiffness:(float)arg3 springDamping:(float)arg4 springVelocity:(float)arg5 ;
-(void)setCameraZoomRange:(MKMapCameraZoomRange *)arg1 ;
-(void)setCameraBoundary:(MKMapCameraBoundary *)arg1 ;
-(void)startLinearZoomIn:(char)arg1 ;
-(void)_clearGesturesAndAnimations;
-(id)seamlessOpeningURLForMapItems:(id)arg1 launchOptions:(id)arg2 ;
-(CGPoint)pointInMapOnMouseDown;
-(id)compass;
-(void)setRegion:(SCD_Struct_MK34)arg1 animated:(char)arg2 completion:(/*^block*/id)arg3 ;
-(void)setCenterCoordinate:(CLLocationCoordinate2D)arg1 animated:(char)arg2 completion:(/*^block*/id)arg3 ;
-(void)deselectAllMarkersAndAnnotationViews;
-(id)viewportDictionary;
-(char)restoreViewportFromDictionary:(id)arg1 ;
-(char)hidesAllUIOnMap;
-(void)setHidesAllUIOnMap:(char)arg1 ;
-(NSView *)nextKeyViewAfterSubtree;
-(void)setNextKeyViewAfterSubtree:(NSView *)arg1 ;
-(char)isCalloutVisible;
-(NSView *)calloutView;
-(void)setSettingsView:(NSView *)arg1 ;
-(id)_calloutShowAnimationGroup;
-(NSOrderedSet *)storedAccessibilityItems;
-(void)setStoredAccessibilityItems:(NSOrderedSet *)arg1 ;
-(char)showsAboutMapInContextualMenu;
-(void)setShowsAboutMapInContextualMenu:(char)arg1 ;
-(void)_setAttributionBadgeClickable:(char)arg1 ;
-(long long)overlaysWritingDirection;
-(void)setOverlaysWritingDirection:(long long)arg1 ;
-(char)willUpdateAccessibilityItems;
-(void)setWillUpdateAccessibilityItems:(char)arg1 ;
-(char)wantsAccessibilityUpdates;
-(void)setWantsAccessibilityUpdates:(char)arg1 ;
-(MKAccessibilityItem *)focusedAccessibilityItem;
-(void)setFocusedAccessibilityItem:(MKAccessibilityItem *)arg1 ;
-(void)setZoomButtons:(NSView *)arg1 ;
-(long long)_interactionMode;
-(void)_setInteractionMode:(long long)arg1 ;
-(char)canRotateForHeading;
-(NSTimer *)_startEffectsTimer;
-(void)set_startEffectsTimer:(NSTimer *)arg1 ;
-(/*^block*/id)_labelsDidLayoutCallback;
-(void)_setLabelsDidLayoutCallback:(/*^block*/id)arg1 ;
-(double)minimumZoomLevel;
-(double)maximumZoomLevel;
-(unsigned long long)_selectedFeatureID;
-(void)_setSelectedFeatureID:(unsigned long long)arg1 ;
-(void)setZoomLevel:(double)arg1 animated:(char)arg2 ;
-(CGPoint)zoomPointInMapViewFromEvent:(id)arg1 smartAiming:(char)arg2 lockOnPreviousTarget:(char)arg3 ;
-(CALayer *)annotationsContainerLayer;
-(void)_setRotationSnappingEnabled:(char)arg1 ;
-(char)markersEnabled;
-(void)setMarkersEnabled:(char)arg1 ;
-(id)_detailedDescription;
-(id)_detailedDescriptionDictionaryRepresentation;
-(id)_transitLineMarkersForSelectionAtPoint:(CGPoint)arg1 ;
-(id)overlayContainer;
-(id)createDrawableForOverlay:(id)arg1 ;
-(void)overlayContainerAddedDrawables:(id)arg1 ;
-(void)_invalidateAllOverlayRendererColors;
-(void)addOverlay:(id)arg1 ;
-(void)addOverlays:(id)arg1 ;
-(void)addOverlay:(id)arg1 level:(long long)arg2 ;
-(void)addOverlays:(id)arg1 level:(long long)arg2 ;
-(void)insertOverlay:(id)arg1 atIndex:(unsigned long long)arg2 level:(long long)arg3 ;
-(void)removeOverlay:(id)arg1 ;
-(void)removeOverlays:(id)arg1 ;
-(void)insertOverlay:(id)arg1 atIndex:(unsigned long long)arg2 ;
-(void)exchangeOverlayAtIndex:(unsigned long long)arg1 withOverlayAtIndex:(unsigned long long)arg2 ;
-(void)exchangeOverlay:(id)arg1 withOverlay:(id)arg2 ;
-(void)insertOverlay:(id)arg1 aboveOverlay:(id)arg2 ;
-(void)insertOverlay:(id)arg1 belowOverlay:(id)arg2 ;
-(NSArray *)overlays;
-(id)overlaysInLevel:(long long)arg1 ;
-(id)rendererForOverlay:(id)arg1 ;
-(id)accessibilityItemAtPoint:(CGPoint)arg1 ;
-(void)_checkIfNeedToUpdateAccessibilityItems;
-(void)_updateAccessibilityItemsNow;
-(NSOrderedSet *)accessibilityItems;
-(void)_focusAccessibilityItemWithDelta:(long long)arg1 ;
-(void)focusNextAccessibilityItem;
-(void)focusPreviousAccessibilityItem;
-(CGPoint)pointInMapViewFromEvent:(id)arg1 ;
-(void)zoomControlSegmentPressed:(id)arg1 ;
-(void)_clearMouseOverLabelRecognizers;
-(id)_labelMarkersInViewport;
-(void)startLinearZoomIn:(char)arg1 withSpeed:(double)arg2 ;
-(void)_contextualMenuAboutMaps;
-(void)_updateCachedMapsAppearance;
-(char)canShowMouseOverFeedback;
-(void)setCanShowMouseOverFeedback:(char)arg1 ;
-(void)_addOverlayButtonWithTitle:(id)arg1 target:(id)arg2 action:(SEL)arg3 ;
-(CGSize)_convertPoint:(CGPoint)arg1 toMapPointFromView:(id)arg2 ;
-(CGPoint)_convertMapPoint:(CGSize)arg1 toPointToView:(id)arg2 ;
-(double)_distanceFromPoint:(CGPoint)arg1 toPoint:(CGPoint)arg2 fromView:(id)arg3 withPrecision:(long long)arg4 ;
-(void)_setRouteContextForRoutes:(id)arg1 selectedRouteIndex:(unsigned long long)arg2 ;
-(id)_routeInfoForRoute:(id)arg1 ;
-(void)_setRouteContextForRoute:(id)arg1 ;
-(void)_setRouteContextInspectedSegmentIndex:(unsigned long long)arg1 inspectedStepIndex:(unsigned long long)arg2 ;
-(void)_clearRouteContext;
-(void)_setRouteContextAnnotationText:(id)arg1 tollCurrency:(unsigned char)arg2 forRoute:(id)arg3 ;
-(void)_setRouteContextAnnotationText:(id)arg1 advisoryStyleAttributes:(id)arg2 forRoute:(id)arg3 ;
-(void)_setRouteContextAnnotationFocus:(char)arg1 forRoute:(id)arg2 ;
-(void)_setAlternateRouteContextAnnotationETAComparison:(unsigned char)arg1 forRoute:(id)arg2 ;
-(void)_updateChargingStationTexts;
-(id)_transitLineMarkersInCurrentViewport;
-(id)_transitLineMarkerForIdentifier:(id)arg1 ;
-(void)_selectTransitLineMarker:(id)arg1 ;
-(void)_selectTransitLineMarkerWithIdentifier:(id)arg1 ;
-(void)_deselectTransitLineMarker;
-(char)_hasSelectedTransitLines;
-(id)_selectedTransitLineIDs;
@end

