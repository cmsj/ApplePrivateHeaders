/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:16 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/MapKit.framework/Versions/A/MapKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <MapKit/MapKit-Structs.h>
#import <libobjc.A.dylib/NSGestureRecognizerDelegate.h>

@protocol MKMapGestureControllerDelegate, OS_dispatch_source;
@class MKMapView, MKScaleView, MKCompassView, _MKMouseDownGestureRecognizer, NSPanGestureRecognizer, _MKDirectionalPanGestureRecognizer, NSClickGestureRecognizer, _MKMagnificationGestureRecognizer, _MKRotationGestureRecognizer, _MKDirectionalArrowRecognizer, VKTimedAnimation, NSObject, MKRotationFilter, VKCompoundAnimation, NSString;

@interface MKMapGestureController : NSObject <NSGestureRecognizerDelegate> {

	MKMapView* _mapView;
	id<MKMapGestureControllerDelegate> _delegate;
	MKScaleView* _scaleView;
	MKCompassView* _compassView;
	_MKMouseDownGestureRecognizer* _mouseDownGestureRecognizer;
	NSPanGestureRecognizer* _panGestureRecognizer;
	_MKDirectionalPanGestureRecognizer* _panRotationGestureRecognizer;
	_MKDirectionalPanGestureRecognizer* _panTiltGestureRecognizer;
	_MKDirectionalPanGestureRecognizer* _panZoomGestureRecognizer;
	_MKDirectionalPanGestureRecognizer* _otherButtonPanRotationGestureRecognizer;
	_MKDirectionalPanGestureRecognizer* _otherButtonPanTiltGestureRecognizer;
	NSClickGestureRecognizer* _doubleClickGestureRecognizer;
	_MKMagnificationGestureRecognizer* _pinchGestureRecognizer;
	_MKRotationGestureRecognizer* _rotationGestureRecognizer;
	_MKDirectionalPanGestureRecognizer* _scaleDragGestureRecognizer;
	_MKDirectionalPanGestureRecognizer* _compassDragRotationGestureRecognizer;
	_MKDirectionalPanGestureRecognizer* _compassDragTiltGestureRecognizer;
	_MKDirectionalPanGestureRecognizer* _compassDragSimultaneousRotationGestureRecognizer;
	char _compassRotateBeganInPositiveDirection;
	_MKDirectionalArrowRecognizer* _arrowPanGestureRecognizer;
	_MKDirectionalArrowRecognizer* _arrowRotateGestureRecognizer;
	_MKDirectionalArrowRecognizer* _arrowZoomGestureRecognizer;
	_MKDirectionalArrowRecognizer* _activeArrowGestureRecognizer;
	VKTimedAnimation* _currentArrowAnimation;
	char _isFullRotatingFromArrows;
	long long _gestureCount;
	double _lastScale;
	double _lastMagnification;
	double _lastRotation;
	double _pinchFactorAverageInGesture;
	double _lastPinchUpdateTimestamp;
	double _lastRotationInGestureDelta;
	double _lastRotationUpdateTimestamp;
	double _lastRotationVelocity;
	CGPoint _rotationDragStartPoint;
	CGPoint _rotationDragCursorStartPoint;
	CGPoint _tiltDragStartPoint;
	CGPoint _tiltDragCursorStartPoint;
	CGPoint _zoomDragStartPoint;
	CGPoint _zoomDragCursorStartPoint;
	double _lastZoomDragTranslation;
	char _panning;
	char _pinching;
	char _rotating;
	char _dragRotating;
	char _dragTilting;
	char _dragZooming;
	CGPoint _scrollTranslation;
	char _isScrollDecelerating;
	NSObject*<OS_dispatch_source> _scrollMomentumTimer;
	long long _scrollBehavior;
	CGPoint _lastArrowScrollTranslationDelta;
	double _arrowZoomSpeed;
	double _arrowZoomStartTimestamp;
	char _zoomEnabled;
	char _scrollEnabled;
	char _tiltEnabled;
	char _rotationEnabled;
	MKRotationFilter* _rotationFilter;
	char _rotationSnappingEnabled;
	VKCompoundAnimation* _panDecelerationAnimationGroup;
	VKTimedAnimation* _pinchDecelerationAnimation;
	VKTimedAnimation* _rotationDecelerationAnimation;
	char _handlingTrackpadScroll;

}

@property (nonatomic,retain) MKScaleView * scaleView;                                                    //@synthesize scaleView=_scaleView - In the implementation block
@property (nonatomic,retain) MKCompassView * compassView;                                                //@synthesize compassView=_compassView - In the implementation block
@property (assign,nonatomic,__weak) id<MKMapGestureControllerDelegate> delegate;                         //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,retain) MKRotationFilter * rotationFilter;                                          //@synthesize rotationFilter=_rotationFilter - In the implementation block
@property (assign,getter=isRotationSnappingEnabled,nonatomic) char rotationSnappingEnabled;              //@synthesize rotationSnappingEnabled=_rotationSnappingEnabled - In the implementation block
@property (assign,getter=isZoomEnabled,nonatomic) char zoomEnabled;                                      //@synthesize zoomEnabled=_zoomEnabled - In the implementation block
@property (assign,getter=isScrollEnabled,nonatomic) char scrollEnabled;                                  //@synthesize scrollEnabled=_scrollEnabled - In the implementation block
@property (assign,getter=isRotationEnabled,nonatomic) char rotationEnabled;                              //@synthesize rotationEnabled=_rotationEnabled - In the implementation block
@property (assign,getter=isTiltEnabled,nonatomic) char tiltEnabled;                                      //@synthesize tiltEnabled=_tiltEnabled - In the implementation block
@property (nonatomic,readonly) NSClickGestureRecognizer * doubleClickGestureRecognizer;                  //@synthesize doubleClickGestureRecognizer=_doubleClickGestureRecognizer - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id<MKMapGestureControllerDelegate>)delegate;
-(void)setDelegate:(id<MKMapGestureControllerDelegate>)arg1 ;
-(char)gestureRecognizerShouldBegin:(id)arg1 ;
-(char)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2 ;
-(char)gestureRecognizer:(id)arg1 shouldRequireFailureOfGestureRecognizer:(id)arg2 ;
-(char)keyDown:(id)arg1 ;
-(void)magnifyWithEvent:(id)arg1 ;
-(char)keyUp:(id)arg1 ;
-(void)flagsChanged:(id)arg1 ;
-(void)rotateWithEvent:(id)arg1 ;
-(void)smartMagnifyWithEvent:(id)arg1 ;
-(char)_gestureRecognizer:(id)arg1 shouldAttemptToRecognizeWithEvent:(id)arg2 ;
-(void)_handleMouseDown:(id)arg1 ;
-(void)_handleStandardPan:(id)arg1 ;
-(void)handleRotationPan:(id)arg1 ;
-(void)handleTiltPan:(id)arg1 ;
-(void)handleZoomPan:(id)arg1 ;
-(void)handleDoubleClick:(id)arg1 ;
-(void)handlePinch:(id)arg1 ;
-(void)handleRotation:(id)arg1 ;
-(void)handleArrowPan:(id)arg1 ;
-(void)handleArrowRotate:(id)arg1 ;
-(void)handleArrowZoom:(id)arg1 ;
-(void)stopDynamicAnimations;
-(void)beginGesturing;
-(void)endGesturing;
-(void)cancelZoomInOrOut;
-(char)isZoomEnabled;
-(char)isTiltEnabled;
-(char)isRotationEnabled;
-(char)isScrollEnabled;
-(id)initWithMapView:(id)arg1 gestureTargetView:(id)arg2 ;
-(void)setScaleView:(MKScaleView *)arg1 ;
-(void)setCompassView:(MKCompassView *)arg1 ;
-(void)setScrollEnabled:(char)arg1 ;
-(void)setZoomEnabled:(char)arg1 ;
-(void)setRotationEnabled:(char)arg1 ;
-(void)setTiltEnabled:(char)arg1 ;
-(void)zoomIn:(id)arg1 ;
-(void)zoomOut:(id)arg1 ;
-(void)handleScrollArrowMask:(long long)arg1 ;
-(void)handleZoomArrowMask:(long long)arg1 speed:(double)arg2 ;
-(void)scrollWithEvent:(id)arg1 ;
-(MKRotationFilter *)rotationFilter;
-(void)setRotationFilter:(MKRotationFilter *)arg1 ;
-(NSClickGestureRecognizer *)doubleClickGestureRecognizer;
-(char)isRotationSnappingEnabled;
-(void)setRotationSnappingEnabled:(char)arg1 ;
-(MKScaleView *)scaleView;
-(MKCompassView *)compassView;
@end

