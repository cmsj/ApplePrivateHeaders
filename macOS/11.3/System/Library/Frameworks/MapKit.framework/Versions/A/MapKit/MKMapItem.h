/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:16 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/MapKit.framework/Versions/A/MapKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <MapKit/MapKit-Structs.h>
#import <libobjc.A.dylib/NSSecureCoding.h>
#import <libobjc.A.dylib/GEOURLSerializable.h>

@protocol GEOMapItem, GEOMapItemTransitInfo, GEOTransitAttribution, NSObject;
@class MKMapItemIdentifier, NSDate, _MKMapItemPlaceAttribution, _MKMapItemPhotosAttribution, _MKMapItemReviewsAttribution, GEOMapItemStorageUserValues, NSString, NSNumberFormatter, NSDictionary, MKMapItemMetadata, GEOPlace, NSArray, _MKPlaceReservationInfo, GEOMapItemStorage, GEOMapRegion, GEOAddress, GEOPDFlyover, GEOBusinessHours, NSData, GEOMuninViewState, NSURL, GEOFeatureStyleAttributes, GEOPDBusinessClaim, GEOMapItemDetourInfo, GEORelatedPlaceList, NSNumber, GEOModuleLayoutEntry, NSColor, MKPlacemark, NSTimeZone;

@interface MKMapItem : NSObject <NSSecureCoding, GEOURLSerializable> {

	char _isCurrentLocation;
	char _isPlaceHolder;
	id<GEOMapItem> _geoMapItem;
	MKMapItemIdentifier* _identifier;
	char _isTransitInfoUpdated;
	NSDate* _transitInfoUpdatedDate;
	id<GEOMapItemTransitInfo> _updatedTransitInfo;
	id<GEOMapItemTransitInfo> _defaultTransitInfo;
	id<GEOTransitAttribution> _updatedTransitAttribution;
	_MKMapItemPlaceAttribution* _attribution;
	_MKMapItemPhotosAttribution* _photosAttribution;
	_MKMapItemReviewsAttribution* _reviewsAttribution;
	GEOMapItemStorageUserValues* _userValues;
	id<NSObject> _didResolveAttributionToken;
	NSString* _shortAddress;
	NSString* _firstLocalizedCategoryName;
	NSNumberFormatter* _numberFormatterForAdamId;
	NSString* _localizedSampleSizeForUserRatingScoreString;
	NSDictionary* _cachedHoursBuilder;
	char _isMapItemTypeTransit;
	MKMapItemMetadata* _metadata;
	GEOPlace* _place;
	NSString* singleLineAddress;
	NSArray* formattedAddressLinesCache;
	NSString* ABUUID;
	_MKPlaceReservationInfo* _reservationInfo;
	NSString* _pointOfInterestCategory;
	NSArray* _formattedAddressLines;

}

@property (nonatomic,readonly) NSString * formattedNumberOfReviews; 
@property (nonatomic,readonly) NSString * formattedNumberOfReviewsIncludingProvider; 
@property (getter=_transitInfoUpdatedDate,nonatomic,readonly) NSDate * transitInfoUpdatedDate; 
@property (getter=_isEmptyContactMapItem,readonly) char isEmptyContactMapItem; 
@property (assign,nonatomic) char isCurrentLocation;                                                                                                    //@synthesize isCurrentLocation=_isCurrentLocation - In the implementation block
@property (nonatomic,readonly) GEOMapItemStorageUserValues * userValues; 
@property (nonatomic,readonly) MKMapItemMetadata * metadata;                                                                                            //@synthesize metadata=_metadata - In the implementation block
@property (nonatomic,readonly) GEOPlace * place;                                                                                                        //@synthesize place=_place - In the implementation block
@property (getter=_geoMapItem,nonatomic,readonly) id<GEOMapItemPrivate> geoMapItem; 
@property (getter=_geoMapItemStorageForPersistence,nonatomic,readonly) GEOMapItemStorage * geoMapItemStorageForPersistence; 
@property (getter=_geoMapItemStorageForDragAndDrop,nonatomic,readonly) GEOMapItemStorage * geoMapItemStorageForDragAndDrop; 
@property (nonatomic,readonly) NSString * yelpID; 
@property (nonatomic,readonly) char isPlaceHolder;                                                                                                      //@synthesize isPlaceHolder=_isPlaceHolder - In the implementation block
@property (getter=_coordinate,nonatomic,readonly) CLLocationCoordinate2D coordinate; 
@property (getter=_displayMapRegion,nonatomic,readonly) GEOMapRegion * displayMapRegion; 
@property (getter=_hasDisplayMinZoom,nonatomic,readonly) char hasDisplayMinZoom; 
@property (getter=_displayMinZoom,nonatomic,readonly) float displayMinZoom; 
@property (getter=_hasDisplayMaxZoom,nonatomic,readonly) char hasDisplayMaxZoom; 
@property (getter=_displayMaxZoom,nonatomic,readonly) float displayMaxZoom; 
@property (getter=_geoFenceMapRegion,nonatomic,readonly) GEOMapRegion * geoFenceMapRegion; 
@property (getter=_hasTransit,nonatomic,readonly) char hasTransit; 
@property (getter=_hasTransitDisplayName,nonatomic,readonly) char hasTransitDisplayName; 
@property (getter=_transitDisplayName,nonatomic,readonly) NSString * transitDisplayName; 
@property (getter=_hasTransitLabels,nonatomic,readonly) char hasTransitLabels; 
@property (getter=_transitAttribution,nonatomic,readonly) id<GEOTransitAttribution> transitAttribution; 
@property (getter=_transitInfo,nonatomic,readonly) id<GEOMapItemTransitInfo> transitInfo; 
@property (getter=_geoAddress,nonatomic,readonly) GEOAddress * geoAddress; 
@property (getter=_hasFlyover,nonatomic,readonly) char hasFlyover; 
@property (getter=_flyover,nonatomic,readonly) GEOPDFlyover * flyover; 
@property (getter=_flyoverAnnouncementMessage,nonatomic,readonly) NSString * flyoverAnnouncementMessage; 
@property (getter=_identifier,nonatomic,readonly) MKMapItemIdentifier * identifier; 
@property (getter=_hasMUID,nonatomic,readonly) char hasMUID; 
@property (getter=_muid,nonatomic,readonly) unsigned long long muid; 
@property (getter=_hasResultProviderID,nonatomic,readonly) char hasResultProviderID; 
@property (getter=_resultProviderID,nonatomic,readonly) int resultProviderID; 
@property (getter=_phoneNumberOptsOutOfAds,nonatomic,readonly) char phoneNumberOptsOutOfAds; 
@property (getter=_firstLocalizedCategoryName,nonatomic,readonly) NSString * firstLocalizedCategoryName; 
@property (getter=_hasUserRatingScore,nonatomic,readonly) char hasUserRatingScore; 
@property (getter=_sampleSizeForUserRatingScore,nonatomic,readonly) unsigned sampleSizeForUserRatingScore; 
@property (getter=_localizedSampleSizeForUserRatingScoreString,nonatomic,readonly) NSString * localizedSampleSizeForUserRatingScoreString; 
@property (getter=_normalizedUserRatingScore,nonatomic,readonly) float normalizedUserRatingScore; 
@property (getter=_hasPriceDescription,nonatomic,readonly) char hasPriceDescription; 
@property (getter=_priceDescription,nonatomic,readonly) NSString * priceDescription; 
@property (getter=_hasPriceRange,nonatomic,readonly) char hasPriceRange; 
@property (getter=_priceRangeString,nonatomic,readonly) NSString * priceRangeString; 
@property (getter=_shortAddress,nonatomic,readonly) NSString * shortAddress; 
@property (getter=_hasAnyAmenities,nonatomic,readonly) char hasAnyAmenities; 
@property (getter=_hasAcceptsApplePayAmenity,nonatomic,readonly) char hasAcceptsApplePayAmenity; 
@property (getter=_acceptsApplePay,nonatomic,readonly) char acceptsApplePay; 
@property (getter=_amenities,nonatomic,readonly) NSArray * amenities; 
@property (getter=_hasResolvablePartialInformation,nonatomic,readonly) char hasResolvablePartialInformation; 
@property (getter=_responseStatusIsIncomplete,nonatomic,readonly) char responseStatusIncomplete; 
@property (getter=_hasOperatingHours,nonatomic,readonly) char hasOperatingHours; 
@property (getter=_hasLocalizedOperatingHours,nonatomic,readonly) char hasLocalizedOperatingHours; 
@property (getter=_parsecSectionType,nonatomic,readonly) int parsecSectionType; 
@property (getter=_isStandAloneBrand,nonatomic,readonly) char isStandAloneBrand; 
@property (getter=_hasBrandMUID,nonatomic,readonly) char hasBrandMUID; 
@property (getter=_brandMUID,nonatomic,readonly) unsigned long long brand; 
@property (getter=_isMapItemTypeUnknown,nonatomic,readonly) char isMapItemTypeUnknown; 
@property (getter=_isMapItemTypeBusiness,nonatomic,readonly) char isMapItemTypeBusiness; 
@property (getter=_isMapItemTypeSettlement,nonatomic,readonly) char isMapItemTypeSettlement; 
@property (getter=_isMapItemTypeAddress,nonatomic,readonly) char isMapItemTypeAddress; 
@property (assign,getter=_isMapItemTypeTransit,nonatomic) char isMapItemTypeTransit;                                                                    //@synthesize isMapItemTypeTransit=_isMapItemTypeTransit - In the implementation block
@property (getter=_isMapItemTypeBrand,nonatomic,readonly) char isMapItemTypeBrand; 
@property (getter=_localizedResponseTime,nonatomic,readonly) NSString * localizedResponseTime; 
@property (getter=_messageBusinessHours,nonatomic,readonly) GEOBusinessHours * messageBusinessHours; 
@property (getter=_hasEncyclopedicInfo,nonatomic,readonly) char hasEncyclopedicInfo; 
@property (getter=_encyclopedicInfo,nonatomic,readonly) id<GEOEncyclopedicInfo> encyclopedicInfo; 
@property (getter=_hasChargerNumberString,nonatomic,readonly) char hasChargerNumberString; 
@property (getter=_chargerNumberString,nonatomic,readonly) NSString * chargerNumberString; 
@property (getter=_openingHoursOptions,nonatomic,readonly) unsigned long long openingHoursOptions; 
@property (getter=_placeDataAsData,nonatomic,readonly) NSData * placeDataAsData; 
@property (getter=_poiSurveyURLString,nonatomic,readonly) NSString * poiSurveyURLString; 
@property (getter=_poiPinpointURLString,nonatomic,readonly) NSString * poiPinpointURLString; 
@property (getter=_hasCorrectedHomeWorkCoordinate,nonatomic,readonly) char hasCorrectedHomeWorkCoordinate; 
@property (getter=_hasCorrectedHomeWorkAddress,nonatomic,readonly) char hasCorrectedHomeWorkAddress; 
@property (getter=_hasVenueFeatureType,nonatomic,readonly) char hasVenueFeatureType; 
@property (getter=_venueFeatureType,nonatomic,readonly) long long venueFeatureType; 
@property (getter=_venueInfo,nonatomic,readonly) id<GEOMapItemVenueInfo> venueInfo; 
@property (getter=_browseCategories,nonatomic,readonly) NSArray * browseCategories; 
@property (getter=_placeDisplayStyle,nonatomic,readonly) int placeDisplayStyle; 
@property (getter=_annotatedItemList,nonatomic,readonly) id<GEOAnnotatedItemList> annotatedItemList; 
@property (getter=_hasMuninViewState,nonatomic,readonly) char hasMuninViewState; 
@property (getter=_muninViewState,nonatomic,readonly) GEOMuninViewState * muninViewState; 
@property (nonatomic,readonly) NSArray * formattedAddressLines;                                                                                         //@synthesize formattedAddressLines=_formattedAddressLines - In the implementation block
@property (nonatomic,copy) NSString * singleLineAddress; 
@property (nonatomic,retain) NSArray * formattedAddressLinesCache; 
@property (nonatomic,retain) NSString * ABUUID; 
@property (getter=_needsAttribution,nonatomic,readonly) char needsAttribution; 
@property (getter=_webURL,nonatomic,copy,readonly) NSURL * webURL; 
@property (getter=_providerURL,nonatomic,copy,readonly) NSURL * providerURL; 
@property (getter=_vendorID,nonatomic,copy,readonly) NSString * vendorID; 
@property (getter=_reviewsDisplayName,nonatomic,readonly) NSString * reviewsDisplayName; 
@property (getter=_attribution,nonatomic,readonly) _MKMapItemPlaceAttribution * attribution;                                                            //@synthesize attribution=_attribution - In the implementation block
@property (getter=_photosAttribution,nonatomic,readonly) _MKMapItemPhotosAttribution * photosAttribution;                                               //@synthesize photosAttribution=_photosAttribution - In the implementation block
@property (getter=_reviewsAttribution,nonatomic,readonly) _MKMapItemReviewsAttribution * reviewsAttribution;                                            //@synthesize reviewsAttribution=_reviewsAttribution - In the implementation block
@property (getter=_styleAttributes,nonatomic,readonly) GEOFeatureStyleAttributes * styleAttributes; 
@property (getter=_customIconID,nonatomic,readonly) unsigned long long customIconID; 
@property (getter=_reviews,nonatomic,readonly) NSArray * reviews; 
@property (getter=_tips,nonatomic,readonly) NSArray * tips; 
@property (nonatomic,readonly) NSString * reviewsProviderDisplayName; 
@property (getter=_handle,nonatomic,readonly) NSData * handle; 
@property (getter=_hasBusinessClaim,nonatomic,readonly) char hasBusinessClaim; 
@property (getter=_businessClaim,nonatomic,readonly) GEOPDBusinessClaim * businessClaim; 
@property (nonatomic,retain) _MKPlaceReservationInfo * reservationInfo;                                                                                 //@synthesize reservationInfo=_reservationInfo - In the implementation block
@property (getter=_detourInfo,nonatomic,readonly) GEOMapItemDetourInfo * detourInfo; 
@property (getter=_externalTransitStationCode,nonatomic,readonly) NSData * externalTransitStationCode; 
@property (getter=_messageID,nonatomic,readonly) NSString * messageID; 
@property (getter=_messageURLString,nonatomic,readonly) NSString * messageURLString; 
@property (getter=_isMessageIDVerified,nonatomic,readonly) char isMessageIDVerified; 
@property (getter=_quickLinks,nonatomic,readonly) NSArray * quickLinks; 
@property (getter=_secondaryQuickLinks,nonatomic,readonly) NSArray * secondaryQuickLinks; 
@property (getter=_placeCollections,nonatomic,readonly) NSArray * placeCollections; 
@property (getter=_placeCollectionIds,nonatomic,readonly) NSArray * collectionIds; 
@property (getter=_relatedPlaceList,nonatomic,readonly) GEORelatedPlaceList * relatedPlaceList; 
@property (getter=_preferedAppAdamID,nonatomic,readonly) NSNumber * preferedAppAdamID; 
@property (getter=_alternativeAppAdamIds,nonatomic,readonly) NSArray * alternativeAppAdamIds; 
@property (getter=_placecardLayout,nonatomic,readonly) GEOModuleLayoutEntry * placecardLayout; 
@property (getter=_navTintBrandColor,nonatomic,readonly) NSColor * navTintBrandColor; 
@property (getter=_navBackgroundbrandColor,nonatomic,readonly) NSColor * navBackgroundbrandColor; 
@property (getter=_secondaryName,nonatomic,readonly) NSString * secondaryName; 
@property (getter=_secondarySpokenName,nonatomic,readonly) NSString * secondarySpokenName; 
@property (getter=_hasBusinessHours,nonatomic,readonly) char hasBusinessHours; 
@property (getter=_businessHours,nonatomic,readonly) NSArray * businessHours; 
@property (getter=_hasLinkedServices,nonatomic,readonly) char hasLinkedServices; 
@property (getter=_linkedServices,nonatomic,readonly) NSArray * linkedServices; 
@property (getter=_hasMuninStorefront,nonatomic,readonly) char hasMuninStorefront; 
@property (nonatomic,readonly) MKPlacemark * placemark; 
@property (nonatomic,copy) NSString * name; 
@property (nonatomic,copy) NSString * phoneNumber; 
@property (nonatomic,retain) NSURL * url; 
@property (nonatomic,copy) NSTimeZone * timeZone; 
@property (nonatomic,copy) NSString * pointOfInterestCategory;                                                                                          //@synthesize pointOfInterestCategory=_pointOfInterestCategory - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(char)supportsSecureCoding;
+(id)_itemWithGeoMapItem:(id)arg1 ;
+(id)urlForMapItems:(id)arg1 options:(id)arg2 ;
+(id)mapItemForCurrentLocation;
+(char)openMapsWithItems:(id)arg1 launchOptions:(id)arg2 ;
+(void)openMapsWithItems:(id)arg1 launchOptions:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
+(id)mapItemsFromURL:(id)arg1 options:(id*)arg2 ;
+(void)_mapItemsFromHandleURL:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
+(id)_localizedNextOpeningHoursFormatter;
+(id)_localizedNextOpeningDayOftheWeekFormatter;
+(id)urlForMapItem:(id)arg1 options:(id)arg2 ;
+(id)_urlForMapItemHandles:(id)arg1 options:(id)arg2 ;
+(id)_deserializeResourceOptionsFromURL:(id)arg1 error:(out id*)arg2 ;
+(id)_launchOptionsFromResourceOptionsDictionary:(id)arg1 ;
+(void)_mapItemFromHandle:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
+(id)sanitizeDictionary:(id)arg1 ;
+(id)_launchOptionsWithOptions:(id)arg1 ;
+(id)standardOptionsFromPlistCompatibleDictionary:(id)arg1 ;
+(char)valueIsValid:(id)arg1 forKey:(id)arg2 ;
+(id)sanitizeArray:(id)arg1 forKey:(id)arg2 ;
+(id)sanitizeObject:(id)arg1 forKey:(id)arg2 ;
+(id)_mapItemBackedByURL:(id)arg1 ;
+(id)mapItemWithDictionary:(id)arg1 ;
+(id)plistCompatibleDictionaryFromStandardOptions:(id)arg1 ;
+(char)_openHandleInMaps:(id)arg1 withLaunchOptions:(id)arg2 ;
+(void)_openHandleInMaps:(id)arg1 withLaunchOptions:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
+(id)_sharedSessionURLForPunchoutURL:(id)arg1 ;
+(id)_sharedSessionUserInfoForPunchoutUserInfo:(id)arg1 ;
+(id)_sourceAppIdFromLaunchURL:(id)arg1 ;
+(id)_sourceAppIdFromLaunchUserInfo:(id)arg1 ;
+(id)launchOptionsFromURL:(id)arg1 ;
+(id)_urlForLocation:(id)arg1 address:(id)arg2 label:(id)arg3 options:(id)arg4 ;
+(id)mapItemWithSerializedPlaceData:(id)arg1 serializedDetourInfo:(id)arg2 currentLocation:(char)arg3 ;
+(id)mapItemWithSerializedPlaceData:(id)arg1 ;
+(void)_mapItemsWithSerializedPlaceDataResponse:(id)arg1 handler:(/*^block*/id)arg2 ;
+(id)_mapItemWithWithLocation:(id)arg1 addressDictionary:(id)arg2 name:(id)arg3 businessURL:(id)arg4 phoneNumber:(id)arg5 sessionID:(id)arg6 muid:(unsigned long long)arg7 attributionID:(id)arg8 sampleSizeForUserRatingScore:(unsigned)arg9 normalizedUserRatingScore:(float)arg10 ;
+(void)_fillOutRequest:(id)arg1 withMapsDataString:(id)arg2 ;
+(id)contactsAddressKeysForGeoAddressKeys;
+(id)contactsAddressDictionaryFromGeoAddressDictionary:(id)arg1 ;
+(id)ticketForMapsDataString:(id)arg1 name:(id)arg2 ;
-(void)dealloc;
-(char)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(NSString *)description;
-(NSString *)name;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(void)setTimeZone:(NSTimeZone *)arg1 ;
-(NSTimeZone *)timeZone;
-(void)setName:(NSString *)arg1 ;
-(id)_identifier;
-(NSURL *)url;
-(void)setUrl:(NSURL *)arg1 ;
-(id)dictionaryRepresentation;
-(NSString *)phoneNumber;
-(id)_vendorID;
-(id)_handle;
-(MKMapItemMetadata *)metadata;
-(void)setPhoneNumber:(NSString *)arg1 ;
-(id)initWithCLLocation:(id)arg1 ;
-(GEOPlace *)place;
-(unsigned long long)_muid;
-(char)hasAmenityType:(int)arg1 ;
-(char)valueForAmenityType:(int)arg1 ;
-(id)_localizedCategoryNamesForType:(unsigned)arg1 ;
-(char)_hasLocalizedCategoryNamesForType:(unsigned)arg1 ;
-(id)_bestNavbarBrandIconURLForSize:(CGSize)arg1 allowSmaller:(char)arg2 ;
-(id)_reviews;
-(id)_tips;
-(id)_placeDataAsData;
-(char)_hasResolvablePartialInformation;
-(char)_responseStatusIsIncomplete;
-(char)_hasResultProviderID;
-(int)_resultProviderID;
-(char)_hasTransit;
-(id)_transitInfo;
-(id)_transitAttribution;
-(char)_hasFlyover;
-(id)_flyover;
-(id)_flyoverAnnouncementMessage;
-(id)_muninViewState;
-(char)_hasMUID;
-(id)_priceDescription;
-(char)_hasUserRatingScore;
-(unsigned)_sampleSizeForUserRatingScore;
-(float)_normalizedUserRatingScore;
-(char)_hasPriceRange;
-(char)_hasAnyAmenities;
-(id)_amenities;
-(char)_hasEncyclopedicInfo;
-(id)_encyclopedicInfo;
-(unsigned long long)_openingHoursOptions;
-(char)_needsAttribution;
-(id)_webURL;
-(id)_providerURL;
-(id)_poiSurveyURLString;
-(id)_poiPinpointURLString;
-(id)_attribution;
-(id)_photosAttribution;
-(id)_reviewsAttribution;
-(id)_styleAttributes;
-(unsigned long long)_customIconID;
-(char)_hasBusinessClaim;
-(id)_businessClaim;
-(int)_parsecSectionType;
-(id)_quickLinks;
-(id)_secondaryQuickLinks;
-(id)_placeCollections;
-(id)_relatedPlaceList;
-(char)_hasBrandMUID;
-(unsigned long long)_brandMUID;
-(char)_hasVenueFeatureType;
-(long long)_venueFeatureType;
-(id)_venueInfo;
-(id)_browseCategories;
-(int)_placeDisplayStyle;
-(id)_annotatedItemList;
-(char)_hasOperatingHours;
-(char)_hasBusinessHours;
-(id)_businessHours;
-(char)_hasLinkedServices;
-(id)_linkedServices;
-(id)_geoMapItem;
-(id)initWithUrlRepresentation:(id)arg1 ;
-(id)urlRepresentation;
-(char)_isEquivalentURLRepresentationTo:(id)arg1 ;
-(NSArray *)formattedAddressLines;
-(CLLocationCoordinate2D)_coordinate;
-(id)_displayMapRegion;
-(id)initWithPlace:(id)arg1 ;
-(void)setIsCurrentLocation:(char)arg1 ;
-(char)isCurrentLocation;
-(id)initWithAddressDictionary:(id)arg1 ;
-(id)_secondaryName;
-(id)_secondarySpokenName;
-(id)_detourInfo;
-(id)_externalTransitStationCode;
-(GEOMapItemStorageUserValues *)userValues;
-(id)_geoAddress;
-(char)_isMapItemTypeBrand;
-(id)_messageBusinessHours;
-(char)_hasCorrectedHomeWorkCoordinate;
-(char)isPlaceHolder;
-(MKPlacemark *)placemark;
-(id)_attributionFor:(id)arg1 sourceStringFormat:(id)arg2 moreSourceStringFormat:(id)arg3 imageTintColor:(id)arg4 ;
-(id)_reviewsDisplayName;
-(id)_placeCardContact;
-(char)_canGetDirections;
-(id)_addressFormattedAsSinglelineAddress;
-(id)_placecardLayout;
-(_MKPlaceReservationInfo *)reservationInfo;
-(void)setReservationInfo:(_MKPlaceReservationInfo *)arg1 ;
-(id)initWithContact:(id)arg1 ;
-(void)openInMapsWithLaunchOptions:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(id)_firstLocalizedCategoryName;
-(int)_browseCategory_placeCardType;
-(id)_priceRangeString;
-(char)_hasPriceDescription;
-(id)initWithGeoMapItem:(id)arg1 isPlaceHolderPlace:(char)arg2 ;
-(id)_localizedSampleSizeForUserRatingScoreString;
-(id)_transitInfoUpdatedDate;
-(void)_markTransitInfoUpdated;
-(void)_updateTransitInfoWithMapItem:(id)arg1 ;
-(id)initWithPlacemark:(id)arg1 ;
-(NSString *)singleLineAddress;
-(void)_refreshAttribution;
-(id)initWithPlace:(id)arg1 isPlaceHolderPlace:(char)arg2 ;
-(id)initWithCLLocation:(id)arg1 placeType:(int)arg2 ;
-(void)setFormattedAddressLinesCache:(NSArray *)arg1 ;
-(void)setSingleLineAddress:(NSString *)arg1 ;
-(void)setABUUID:(NSString *)arg1 ;
-(char)_hasTransitDisplayName;
-(id)_transitDisplayName;
-(id)_addressFormattedAsShortenedAddress;
-(id)_chargerNumberString;
-(NSString *)pointOfInterestCategory;
-(id)_geoMapItemStorageForPersistence;
-(id)_addressFormattedAsMultilineAddress;
-(id)_addressFormattedAsWeatherDisplayName;
-(id)_addressFormattedAsWeatherLocationName;
-(id)_activityURLUsingWebPlaceCard:(char)arg1 ;
-(id)_activityURLUsingWebPlaceCard:(char)arg1 muninViewState:(id)arg2 ;
-(id)_urlExtraStorage;
-(char)_isMapItemTypeTransit;
-(id)_addressOrNil:(id)arg1 ;
-(id)_formatterForAdamId;
-(id)_attributionWithDisplayName:(id)arg1 attributionFormat:(id)arg2 logo:(id)arg3 isSnippetLogo:(char)arg4 ;
-(id)initWithGeoMapItemAsCurrentLocation:(id)arg1 ;
-(id)initWithCLLocation:(id)arg1 name:(id)arg2 address:(id)arg3 formattedAddressLinesCache:(id)arg4 singleLineAddress:(id)arg5 contactIdentifier:(id)arg6 timeZone:(id)arg7 ;
-(id)_geoMapItemStorageForDragAndDrop;
-(char)_phoneNumberOptsOutOfAds;
-(id)_getBusiness;
-(NSString *)yelpID;
-(char)_hasDisplayMinZoom;
-(float)_displayMinZoom;
-(char)_hasDisplayMaxZoom;
-(float)_displayMaxZoom;
-(id)_geoFenceMapRegion;
-(char)_hasTransitLabels;
-(char)_hasMuninViewState;
-(id)_shortAddress;
-(char)_hasAcceptsApplePayAmenity;
-(char)_acceptsApplePay;
-(char)_hasLocalizedOperatingHours;
-(id)hoursBuilderForSearchResultCellForOptions:(unsigned long long)arg1 ;
-(id)_localizedNextOpeningStringShort:(char)arg1 ;
-(id)_localizedResponseTime;
-(char)_hasChargerNumberString;
-(char)openInMapsWithLaunchOptions:(id)arg1 ;
-(id)_fullAddressWithMultiline:(char)arg1 ;
-(id)_weatherDisplayName;
-(id)_weatherLocationName;
-(id)_activityURL;
-(id)_bestBrandIconURLForSize:(CGSize)arg1 allowSmaller:(char)arg2 ;
-(id)_addressFormattedAsCity;
-(id)_addressFormattedAsStreetOnly;
-(id)_addressFormattedAsName;
-(id)_addressFormattedAsTitlesForMapRect:(SCD_Struct_MK7)arg1 ;
-(id)_cnPostalAddress;
-(id)venueLabelWithContext:(unsigned long long)arg1 ;
-(id)_preferedAppAdamID;
-(id)_alternativeAppAdamIds;
-(char)_hasMuninStorefront;
-(char)_isMapItemTypeUnknown;
-(char)_isMapItemTypeBusiness;
-(char)_isMapItemTypeSettlement;
-(char)_isMapItemTypeAddress;
-(char)_isStandAloneBrand;
-(id)_messageID;
-(id)_messageURLString;
-(char)_isMessageIDVerified;
-(id)_navBackgroundbrandColor;
-(id)_navTintBrandColor;
-(id)_placeCollectionIds;
-(NSString *)reviewsProviderDisplayName;
-(char)_hasCorrectedHomeWorkAddress;
-(NSArray *)formattedAddressLinesCache;
-(NSString *)ABUUID;
-(void)setIsMapItemTypeTransit:(char)arg1 ;
-(void)setPointOfInterestCategory:(NSString *)arg1 ;
-(id)formattedNumberOfReviewsIncludingProvider:(char)arg1 formatter:(id)arg2 ;
-(NSString *)formattedNumberOfReviews;
-(NSString *)formattedNumberOfReviewsIncludingProvider;
-(id)_reviewForIdentifier:(id)arg1 ;
-(void)_launchActivityForBrandItem;
-(char)_browseCategory_isVenueItem;
-(char)_browseCategory_canDisplayBrowseCategoriesForVenue;
-(char)_browseCategory_canDisplayBrowseCategoriesForPlace;
-(id)_restaurantLink_firstProviderIdentifier;
-(id)_restaurantLink_firstVendorID;
-(id)_restaurantLink_overridenBundleIDsForVendorIDs;
-(char)_hasRestaurantExtensionInfo;
-(char)_restaurantLink_hasFeatureType:(unsigned long long)arg1 ;
-(unsigned long long)_restaurantExtensionModeForFirstProvider;
-(id)_restaurantLink_firstProviderPlaceIdentifier;
-(id)_restaurantLink_firstProviderDisplayName;
-(id)sharingURL;
-(id)thumbnailWithSize:(CGSize)arg1 annotationView:(id)arg2 ;
-(char)_isEmptyContactMapItem;
-(id)_initWithLabelMarker:(id)arg1 ;
-(id)_mapsDataString;
@end

