/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:54 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/PencilKit.framework/Versions/A/PencilKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol PKRulerDelegate;
#import <PencilKit/PencilKit-Structs.h>
@class PKRulerView, PKRulerLayer;

@interface PKRulerController : NSObject {

	char _isInteractingWithRuler;
	char _rulerSelected;
	char _rulerIsRotating;
	char _rulerWasShownViaGesture;
	char _canRulerSnapToAngle;
	char _lastTouchWasMaskedByRuler;
	char _lastDrawingWasMaskedByRuler;
	char _lastDrawingWasSnappedToRuler;
	id<PKRulerDelegate> _delegate;
	PKRulerView* _rulerView;
	PKRulerLayer* _rulerLayer;
	SCD_Struct_PK26 _rulerState;
	SCD_Struct_PK26 _previousRulerState;
	CGAffineTransform _rulerStartTransform;
	CGAffineTransform _defaultRulerTransform;

}

@property (nonatomic,retain) PKRulerLayer * rulerLayer;                            //@synthesize rulerLayer=_rulerLayer - In the implementation block
@property (assign,nonatomic) SCD_Struct_PK26 rulerState;                           //@synthesize rulerState=_rulerState - In the implementation block
@property (assign,nonatomic) SCD_Struct_PK26 previousRulerState;                   //@synthesize previousRulerState=_previousRulerState - In the implementation block
@property (assign,nonatomic) char rulerWasShownViaGesture;                         //@synthesize rulerWasShownViaGesture=_rulerWasShownViaGesture - In the implementation block
@property (assign,nonatomic) char isInteractingWithRuler;                          //@synthesize isInteractingWithRuler=_isInteractingWithRuler - In the implementation block
@property (assign,nonatomic) char canRulerSnapToAngle;                             //@synthesize canRulerSnapToAngle=_canRulerSnapToAngle - In the implementation block
@property (assign,nonatomic) char lastTouchWasMaskedByRuler;                       //@synthesize lastTouchWasMaskedByRuler=_lastTouchWasMaskedByRuler - In the implementation block
@property (assign,nonatomic) char lastDrawingWasMaskedByRuler;                     //@synthesize lastDrawingWasMaskedByRuler=_lastDrawingWasMaskedByRuler - In the implementation block
@property (assign,nonatomic) char lastDrawingWasSnappedToRuler;                    //@synthesize lastDrawingWasSnappedToRuler=_lastDrawingWasSnappedToRuler - In the implementation block
@property (assign,nonatomic,__weak) id<PKRulerDelegate> delegate;                  //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,readonly) char rulerSelected;                                 //@synthesize rulerSelected=_rulerSelected - In the implementation block
@property (assign,nonatomic) char rulerIsRotating;                                 //@synthesize rulerIsRotating=_rulerIsRotating - In the implementation block
@property (nonatomic,retain) PKRulerView * rulerView;                              //@synthesize rulerView=_rulerView - In the implementation block
@property (assign,nonatomic) CGAffineTransform rulerStartTransform;                //@synthesize rulerStartTransform=_rulerStartTransform - In the implementation block
@property (assign,nonatomic) CGAffineTransform defaultRulerTransform;              //@synthesize defaultRulerTransform=_defaultRulerTransform - In the implementation block
+(id)sharedRulerView;
-(id<PKRulerDelegate>)delegate;
-(void)setDelegate:(id<PKRulerDelegate>)arg1 ;
-(char)hitTest:(CGPoint)arg1 ;
-(id)initWithDelegate:(id)arg1 ;
-(void)setRulerView:(PKRulerView *)arg1 ;
-(PKRulerView *)rulerView;
-(PKRulerLayer *)rulerLayer;
-(void)setRulerLayer:(PKRulerLayer *)arg1 ;
-(void)_configureRuler;
-(void)showRuler;
-(void)hideRulerAnimated:(char)arg1 ;
-(void)setRulerWasShownViaGesture:(char)arg1 ;
-(void)hideRuler;
-(CGAffineTransform)defaultRulerTransform;
-(void)setRulerState:(SCD_Struct_PK26)arg1 ;
-(void)setRulerStartTransform:(CGAffineTransform)arg1 ;
-(void)endRulerDrawing;
-(void)setLastTouchWasMaskedByRuler:(char)arg1 ;
-(void)setLastDrawingWasMaskedByRuler:(char)arg1 ;
-(void)setLastDrawingWasSnappedToRuler:(char)arg1 ;
-(CGAffineTransform)ensureRulerFullyOnscreen:(CGAffineTransform)arg1 ;
-(double)getRulerCenterTValueOnScreenForTransform:(CGAffineTransform)arg1 ;
-(CGAffineTransform)pixelSnapRulerTransform:(CGAffineTransform)arg1 ;
-(SCD_Struct_PK26)rulerState;
-(void)setCanRulerSnapToAngle:(char)arg1 ;
-(void)setPreviousRulerState:(SCD_Struct_PK26)arg1 ;
-(SCD_Struct_PK26)previousRulerState;
-(char)canRulerSnapToAngle;
-(void)resetRuler;
-(void)resetRulerTransform;
-(CGPoint)applyTransformToTouchLocation:(CGPoint)arg1 ;
-(void)drawingCancelled:(/*^block*/id)arg1 ;
-(void)startRulerDrawing;
-(void)cancelNonDrawingGestures;
-(void)setupGestures;
-(void)hideUI;
-(CGAffineTransform)canvasTransform;
-(CGAffineTransform)angleSnapRulerTransform:(CGAffineTransform)arg1 aroundOrigin:(CGPoint)arg2 ;
-(char)isInteractingWithRuler;
-(void)setIsInteractingWithRuler:(char)arg1 ;
-(char)rulerSelected;
-(char)rulerIsRotating;
-(void)setRulerIsRotating:(char)arg1 ;
-(CGAffineTransform)rulerStartTransform;
-(void)setDefaultRulerTransform:(CGAffineTransform)arg1 ;
-(char)rulerWasShownViaGesture;
-(char)lastTouchWasMaskedByRuler;
-(char)lastDrawingWasMaskedByRuler;
-(char)lastDrawingWasSnappedToRuler;
@end

