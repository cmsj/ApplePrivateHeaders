/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:54 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/PencilKit.framework/Versions/A/PencilKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol MTLDevice, MTLCommandQueueSPI, MTLTexture, MTLBuffer;
#import <PencilKit/PencilKit-Structs.h>
@class PKMetalRenderState, PKMetalFramebuffer, PKMetalResourceHandler, PKMetalShader, PKLinedPaper;

@interface PKMetalRenderer : NSObject {

	PKMetalRenderState* _currentRenderState;
	unsigned long long _currentCacheSize;
	id<MTLDevice> _device;
	id<MTLCommandQueueSPI> _commandQueue;
	PKMetalFramebuffer* _originalBackFramebuffer;
	char _shouldClearOriginalBackFramebuffer;
	PKMetalFramebuffer* _paintFramebuffer;
	PKMetalFramebuffer* _alwaysMemorylessPaintFramebuffer;
	PKMetalFramebuffer* _paintFramebufferAccumulator;
	PKMetalFramebuffer* _maskMSAAFramebuffer;
	PKMetalResourceHandler* _resourceHandler;
	PKMetalFramebuffer* _dummyPaintFramebuffer;
	PKMetalFramebuffer* _dummyColorFramebuffer;
	CGSize _drawingPixelSize;
	CGColorRef _backgroundColor;
	CGSize _actualSize;
	double _fromStrokeSpaceScale;
	CGAffineTransform _strokeTransform;
	CGRect _viewScissor;
	char _lastPointForEraserIsValid;
	PKStrokePoint _lastPointForEraser;
	vector<(anonymous namespace)::StrokeVertex, std::__1::allocator<(anonymous namespace)::StrokeVertex>>* _strokeBuffer;
	unsigned long long _strokeBufferCount;
	id<MTLTexture> _paperTexture;
	CGSize _paperTextureSize;
	unsigned long long _pixelFormat;
	unsigned long long _paintAndParticlePixelFormat;
	vector<PKMetalParticleStrokePoint, std::__1::allocator<PKMetalParticleStrokePoint>>* _particleStrokePointBuffer;
	vector<PKMetalPaintStrokePoint, std::__1::allocator<PKMetalPaintStrokePoint>>* _paintStrokePointBuffer;
	vector<PKMetalLiveStrokePaintStrokePoint, std::__1::allocator<PKMetalLiveStrokePaintStrokePoint>>* _liveStrokeStrokePointBuffer;
	vector<(anonymous namespace)::AnimatingStroke, std::__1::allocator<(anonymous namespace)::AnimatingStroke>>* _animatingStrokes;
	CGRect _paintFramebufferDirtyRect;
	PKMetalShader* _paintShader;
	PKMetalShader* _particleShader;
	PKMetalShader* _particleShaderWithAspectRatioSupport;
	id<MTLBuffer> _particleIndexBuffer;
	id<MTLBuffer> _randomNumberBuffer;
	unsigned long long _renderMaskMSAASampleCount;
	char _needRestartWorkaroundForOldIntelDrivers;
	char _useComputeRenderCaches;
	CGRect _drawableDirtyRect;
	char _solidColorBackboard;
	char _oneRenderPassForLiveRendering;
	char _fadeOutStrokesMode;
	char _liveStrokeMode;
	char _edgeMask;
	char _invertColors;
	PKLinedPaper* _linedPaper;
	CGColorRef _liveRenderingOverrideColor;
	double _backboardPaperMultiply;
	double _inputScale;
	double _eraserIndicatorAlpha;
	double _liveStrokeElapsedTime;
	CGSize _liveStrokeMaxSize;
	CGAffineTransform _paperTransform;

}

@property (nonatomic,readonly) id<MTLCommandQueue> commandQueue;                      //@synthesize commandQueue=_commandQueue - In the implementation block
@property (nonatomic,readonly) id<MTLDevice> device;                                  //@synthesize device=_device - In the implementation block
@property (nonatomic,retain) PKLinedPaper * linedPaper;                               //@synthesize linedPaper=_linedPaper - In the implementation block
@property (assign,nonatomic) CGAffineTransform paperTransform;                        //@synthesize paperTransform=_paperTransform - In the implementation block
@property (assign,nonatomic) CGColorRef backgroundColor;                              //@synthesize backgroundColor=_backgroundColor - In the implementation block
@property (assign,nonatomic) CGColorRef liveRenderingOverrideColor;                   //@synthesize liveRenderingOverrideColor=_liveRenderingOverrideColor - In the implementation block
@property (assign,nonatomic) char solidColorBackboard;                                //@synthesize solidColorBackboard=_solidColorBackboard - In the implementation block
@property (assign,nonatomic) char oneRenderPassForLiveRendering;                      //@synthesize oneRenderPassForLiveRendering=_oneRenderPassForLiveRendering - In the implementation block
@property (assign,nonatomic) CGRect viewScissor;                                      //@synthesize viewScissor=_viewScissor - In the implementation block
@property (assign,nonatomic) CGAffineTransform strokeTransform;                       //@synthesize strokeTransform=_strokeTransform - In the implementation block
@property (assign,nonatomic) CGSize actualSize;                                       //@synthesize actualSize=_actualSize - In the implementation block
@property (assign,nonatomic) double backboardPaperMultiply;                           //@synthesize backboardPaperMultiply=_backboardPaperMultiply - In the implementation block
@property (nonatomic,readonly) PKMetalResourceHandler * resourceHandler;              //@synthesize resourceHandler=_resourceHandler - In the implementation block
@property (assign,nonatomic) double inputScale;                                       //@synthesize inputScale=_inputScale - In the implementation block
@property (assign,nonatomic) double eraserIndicatorAlpha;                             //@synthesize eraserIndicatorAlpha=_eraserIndicatorAlpha - In the implementation block
@property (assign,nonatomic) char fadeOutStrokesMode;                                 //@synthesize fadeOutStrokesMode=_fadeOutStrokesMode - In the implementation block
@property (assign,nonatomic) char liveStrokeMode;                                     //@synthesize liveStrokeMode=_liveStrokeMode - In the implementation block
@property (assign,nonatomic) CGSize liveStrokeMaxSize;                                //@synthesize liveStrokeMaxSize=_liveStrokeMaxSize - In the implementation block
@property (assign,nonatomic) char edgeMask;                                           //@synthesize edgeMask=_edgeMask - In the implementation block
@property (assign,nonatomic) double liveStrokeElapsedTime;                            //@synthesize liveStrokeElapsedTime=_liveStrokeElapsedTime - In the implementation block
@property (nonatomic,readonly) char isFinishedRendering; 
@property (nonatomic,readonly) double latestTimestamp; 
@property (assign,nonatomic) char invertColors;                                       //@synthesize invertColors=_invertColors - In the implementation block
+(char)useBlitEncoder;
+(char)disableClearOriginalBackbufferWorkaround;
-(void)dealloc;
-(id<MTLDevice>)device;
-(id<MTLCommandQueue>)commandQueue;
-(void)clear;
-(void)setBackgroundColor:(CGColorRef)arg1 ;
-(CGColorRef)backgroundColor;
-(void)setup;
-(double)inputScale;
-(double)latestTimestamp;
-(CGAffineTransform)strokeTransform;
-(CGImageRef)newCGImage;
-(void)setInvertColors:(char)arg1 ;
-(char)invertColors;
-(void)setActualSize:(CGSize)arg1 ;
-(void)teardownDrawingFramebuffers;
-(char)liveStrokeMode;
-(void)renderSmartFillMask:(id)arg1 stroke:(id)arg2 ;
-(void)drawNewPointsAt:(double)arg1 ;
-(void)clearPaintFramebuffers;
-(unsigned long long)renderStroke:(PKStrokePointSlice*)arg1 animatingStroke:(AnimatingStroke*)arg2 accumulating:(char)arg3 combinedRendering:(char)arg4 renderEncoder:(id)arg5 computeEncoder:(id)arg6 renderCache:(id)arg7 ;
-(char)applyStrokeSpaceClipRect:(CGRect)arg1 strokeTransform:(CGAffineTransform)arg2 ;
-(unsigned long long)_renderStrokes:(id)arg1 clippedToStrokeSpaceRect:(CGRect)arg2 strokeTransform:(CGAffineTransform)arg3 stopBlock:(/*^block*/id)arg4 ;
-(void)disableClippingForRenderEncoder:(id)arg1 ;
-(void)setupRenderStateForRenderingStrokes:(id)arg1 ;
-(void)teardownRenderStateIfNecessary;
-(void)setupDrawingFramebuffersIfNecessaryLiveRendering:(char)arg1 ;
-(id)renderCommandEncoderForCommandBuffer:(id)arg1 backBufferLoadAction:(unsigned long long)arg2 backBufferStoreAction:(unsigned long long)arg3 paintBufferLoadAction:(unsigned long long)arg4 accumulatorBufferLoadAction:(unsigned long long)arg5 accumulatorBufferStoreAction:(unsigned long long)arg6 destinationLoadAction:(unsigned long long)arg7 ;
-(void)setupRenderStateForStrokeRenderingNeedPaintBuffer:(char)arg1 needRenderMask:(char)arg2 ;
-(char)shouldAccumulateLiveStroke;
-(void)setupRenderStateForLiveRenderingDestinationTexture:(id)arg1 destinationLoadAction:(unsigned long long)arg2 accumLoadAction:(unsigned long long)arg3 accumStoreAction:(unsigned long long)arg4 backBufferLoadAction:(unsigned long long)arg5 backBufferStoreAction:(unsigned long long)arg6 renderMask:(char)arg7 ;
-(void)renderAlternativeStroke:(id)arg1 alpha:(double)arg2 purgeableResources:(id)arg3 ;
-(void)resetPaintFramebufferAccumulate:(char)arg1 ;
-(void)renderAnimatingStrokesWithTransform:(CGAffineTransform)arg1 renderBufferSize:(CGSize)arg2 ;
-(char)oneRenderPassForLiveRendering;
-(void)renderWithTransform:(CGAffineTransform)arg1 animatingStroke:(AnimatingStroke*)arg2 mode:(long long)arg3 clipped:(char)arg4 renderBufferSize:(CGSize)arg5 renderEncoder:(id)arg6 ;
-(void)purgePaintFramebuffers;
-(void)finishRenderingClippedToStrokeSpaceRect:(CGRect)arg1 forStroke:(AnimatingStroke*)arg2 renderEncoder:(id)arg3 ;
-(void)finishStroke;
-(void)renderFullscreenQuadWithShader:(id)arg1 renderEncoder:(id)arg2 ;
-(void)renderStroke:(id)arg1 withTransform:(CGAffineTransform)arg2 mode:(long long)arg3 flipped:(char)arg4 renderBufferSize:(CGSize)arg5 renderEncoder:(id)arg6 currentClipRect:(CGRect)arg7 needRenderMask:(char)arg8 ;
-(void)copyFromFramebuffer:(id)arg1 toFramebuffer:(id)arg2 clipRect:(CGRect)arg3 renderEncoder:(id)arg4 ;
-(void)copyIntoPaintFromTexture:(id)arg1 clipRect:(CGRect)arg2 renderEncoder:(id)arg3 ;
-(void)setupForDefaultUberVertexShaderInRenderEncoder:(id)arg1 ;
-(id)renderCacheItemForStroke:(AnimatingStroke*)arg1 bsplineFilter:(PKBSplineFilter*)arg2 purgeableResources:(id)arg3 strokeRenderCache:(id)arg4 ;
-(void)renderTexture:(id)arg1 intoFramebuffer:(id)arg2 sourceRect:(CGRect)arg3 destinationRect:(CGRect)arg4 renderState:(id)arg5 ;
-(void)renderTexture:(id)arg1 intoFramebuffer:(id)arg2 sourceRect:(CGRect)arg3 destinationPosition:(CGPoint)arg4 renderState:(id)arg5 ;
-(CGImageRef)newCGImageWithClipRect:(CGRect)arg1 ;
-(char)ensureOriginalBackFramebufferHasContents;
-(CGImageRef)newCGImageWithClipRect:(CGRect)arg1 copyImage:(char)arg2 ;
-(void)setupUberVertexShaderWithTransform:(CGAffineTransform)arg1 paperTransform:(CGAffineTransform)arg2 renderEncoder:(id)arg3 ;
-(CGAffineTransform)strokeRenderTransformForFramebufferSize:(CGSize)arg1 flipped:(char)arg2 ;
-(void)clearFramebuffer:(id)arg1 waitUntilCompleted:(char)arg2 ;
-(void)setupOriginalBackFramebufferIfNecessary;
-(void)setupCachedResourcesIfNecessary;
-(void)renderEraserIndicator:(PKStrokePoint)arg1 withTransform:(CGAffineTransform)arg2 ;
-(double)eraserIndicatorAlpha;
-(void)finishRenderingNoTeardownForStroke:(AnimatingStroke*)arg1 clippedToPixelSpaceRect:(CGRect)arg2 renderEncoder:(id)arg3 ;
-(void)finishRendering;
-(char)setupClippingForStrokeClipRect:(CGRect)arg1 clippedToPixelSpaceRect:(CGRect)arg2 renderEncoder:(id)arg3 outNewClipRect:(CGRect*)arg4 ;
-(void)clearPaintFramebuffersWithRenderEncoder:(id)arg1 ;
-(PKLinedPaper *)linedPaper;
-(CGAffineTransform)paperTransform;
-(void)setPaperTextureOnRenderEncoder:(id)arg1 fragmentUniforms:(PKMetalUberFragmentUniforms*)arg2 ;
-(char)solidColorBackboard;
-(void)renderPaperTransform:(CGAffineTransform)arg1 paperTransform:(CGAffineTransform)arg2 flipped:(char)arg3 multiply:(double)arg4 renderEncoder:(id)arg5 ;
-(void)renderBackgroundColorWithRenderEncoder:(id)arg1 ;
-(void)renderLinesRenderBufferSize:(CGSize)arg1 renderEncoder:(id)arg2 ;
-(void)renderBrushIndicatorForStroke:(id)arg1 withTransform:(CGAffineTransform)arg2 mode:(long long)arg3 ;
-(void)setupRenderEncoder:(id)arg1 forParticleStroke:(AnimatingStroke*)arg2 ;
-(void)setupRenderEncoder:(id)arg1 forPenStroke:(AnimatingStroke*)arg2 alphaFactor:(double)arg3 ;
-(double)liveStrokeElapsedTime;
-(unsigned long long)renderPaintRenderCache:(id)arg1 renderEncoder:(id)arg2 computeEncoder:(id)arg3 animatingStroke:(AnimatingStroke*)arg4 ;
-(unsigned long long)renderLiveStrokePaintRenderCache:(id)arg1 renderEncoder:(id)arg2 computeEncoder:(id)arg3 animatingStroke:(AnimatingStroke*)arg4 ;
-(unsigned long long)renderStrokeRenderCache:(id)arg1 renderEncoder:(id)arg2 animatingStroke:(AnimatingStroke*)arg3 indexed:(char)arg4 ;
-(unsigned long long)renderPenStroke:(PKStrokePointSlice*)arg1 animatingStroke:(AnimatingStroke*)arg2 combinedRendering:(char)arg3 renderEncoder:(id)arg4 ;
-(unsigned long long)renderParticleRenderCache:(id)arg1 renderEncoder:(id)arg2 computeEncoder:(id)arg3 animatingStroke:(AnimatingStroke*)arg4 ;
-(unsigned long long)renderParticleStroke:(PKStrokePointSlice*)arg1 animatingStroke:(AnimatingStroke*)arg2 starts:(char)arg3 ends:(char)arg4 combinedRendering:(char)arg5 renderEncoder:(id)arg6 ;
-(void)setVertexBuffersForVertices:(const StrokeVertex*)arg1 numVertices:(unsigned long long)arg2 renderEncoder:(id)arg3 ;
-(double)alphaForStroke:(id)arg1 ;
-(CGAffineTransform)strokeRenderTransform;
-(char)fadeOutStrokesMode;
-(CGSize)liveStrokeMaxSize;
-(void)setupStrokeBufferIfNecessary;
-(_wrap_iter<const _PKStrokePoint *>*)fadeOutLimitFromPoints:(const PKStrokePointSlice*)arg1 animatingStroke:(AnimatingStroke*)arg2 ;
-(void)renderStrokeVertices:(const StrokeVertex*)arg1 numVertices:(unsigned long long)arg2 numIndices:(unsigned long long)arg3 renderEncoder:(id)arg4 ;
-(CGRect)clipRectForVertices:(const StrokeVertex*)arg1 numVertices:(unsigned long long)arg2 ;
-(void)addBufferForRenderCache:(id)arg1 strokeVertices:(StrokeVertex*)arg2 numVertices:(unsigned long long)arg3 ;
-(unsigned long long)renderVerticies:(StrokeVertex*)arg1 size:(unsigned long long)arg2 numRenderedVertices:(unsigned long long)arg3 numIndices:(unsigned long long)arg4 localClipRect:(CGRect)arg5 animatingStroke:(AnimatingStroke*)arg6 combinedRendering:(char)arg7 renderEncoder:(id)arg8 ;
-(void)generateRenderMaskForPaths:(const vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint>>, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint>>>>*)arg1 renderCache:(id)arg2 ;
-(id)dummyPaintFramebuffer;
-(id)dummyColorFramebuffer;
-(char)generateBSplineInComputeForStroke:(id)arg1 ;
-(id)generateCacheForStroke:(AnimatingStroke*)arg1 points:(PKStrokePointSlice*)arg2 segmentSteps:(const vector<int, std::__1::allocator<int>>*)arg3 ;
-(void)setupRenderState:(id)arg1 needCompute:(char)arg2 clearPaint:(char)arg3 ;
-(id)cacheForMask:(id)arg1 strokeRenderCache:(id)arg2 purgeableResources:(id)arg3 ;
-(void)setupRenderState:(id)arg1 needCompute:(char)arg2 ;
-(char)canRenderStroke:(id)arg1 combinedWith:(id)arg2 ;
-(void)clearNowWithStrokeSpaceClipRect:(CGRect)arg1 strokeTransform:(CGAffineTransform)arg2 ;
-(unsigned long long)renderStrokes:(id)arg1 clippedToStrokeSpaceRect:(CGRect)arg2 strokeTransform:(CGAffineTransform)arg3 stopBlock:(/*^block*/id)arg4 ;
-(void)setShouldClearOriginalFramebuffer;
-(void)generateLiveStrokeCachesForStrokes:(id)arg1 destinationLocations:(const vector<std::__1::vector<float __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))>>, std::__1::allocator<std::__1::vector<float __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))>>>>*)arg2 startTime:(double)arg3 duration:(double)arg4 ;
-(id)generatePaintCacheForStroke:(PKStrokePointSlice*)arg1 animatingStroke:(AnimatingStroke*)arg2 segmentSteps:(const vector<int, std::__1::allocator<int>>*)arg3 liveStrokePoints:(const 4*)arg4 liveStrokeStartTime:(double)arg5 duration:(double)arg6 ;
-(id)generateCacheForPenStroke:(AnimatingStroke*)arg1 points:(PKStrokePointSlice*)arg2 ;
-(id)generateCacheForParticleStroke:(AnimatingStroke*)arg1 points:(PKStrokePointSlice*)arg2 startPt:(char)arg3 endPt:(char)arg4 ;
-(id)generateParticleCacheForStroke:(PKStrokePointSlice*)arg1 animatingStroke:(AnimatingStroke*)arg2 starts:(char)arg3 ends:(char)arg4 ;
-(id)generateCacheForMask:(id)arg1 ;
-(void)renderMaskForStroke:(id)arg1 renderCache:(id)arg2 ;
-(id)framebufferForTile:(id)arg1 createIfNeeded:(char)arg2 ;
-(void)renderTexture:(id)arg1 intoFramebuffer:(id)arg2 clipRect:(CGRect)arg3 renderState:(id)arg4 ;
-(void)renderTile:(id)arg1 tileTransform:(CGAffineTransform)arg2 renderState:(id)arg3 ;
-(void)renderImage:(CGImageRef)arg1 andMask:(CGImageRef)arg2 clippedToStrokeSpaceRect:(CGRect)arg3 ;
-(void)renderImage:(CGImageRef)arg1 intoFramebuffer:(id)arg2 clipRect:(CGRect)arg3 ;
-(id)initWithDrawingPixelSize:(CGSize)arg1 actualSize:(CGSize)arg2 device:(id)arg3 resourceHandler:(id)arg4 ;
-(void)flushMemoryIfPossible;
-(void)setViewScissor:(CGRect)arg1 ;
-(void)drawingBeganWithStroke:(id)arg1 ;
-(void)getAndRenderNewPoints:(id)arg1 ;
-(void)drawingEnded:(id)arg1 finishStrokeBlock:(/*^block*/id)arg2 ;
-(void)setAlternativeStrokes:(id)arg1 alpha:(double)arg2 originalStrokeAlpha:(double)arg3 ;
-(void)drawingCancelled;
-(unsigned long long)renderStrokes:(id)arg1 stopBlock:(/*^block*/id)arg2 ;
-(void)renderAheadWithTransform:(CGAffineTransform)arg1 onPaper:(char)arg2 renderBufferSize:(CGSize)arg3 destinationTexture:(id)arg4 ;
-(void)renderLiveStrokeWithTransform:(CGAffineTransform)arg1 renderBufferSize:(CGSize)arg2 ;
-(void)finishLiveStrokeAndPresentDrawable:(id)arg1 waitUntilScheduled:(char)arg2 ;
-(void)cancelLiveStroke;
-(void)resetDrawableDirtyRect;
-(void)addStrokeSpaceDrawableDirtyRect:(CGRect)arg1 ;
-(CGRect)drawableDirtyRect;
-(char)isFinishedRendering;
-(unsigned long long)colorAttachmentIndexFromFramebuffer:(id)arg1 ;
-(void)setLiveRenderingOverrideColor:(CGColorRef)arg1 ;
-(void)setPaperTextureImage:(CGImageRef)arg1 ;
-(void)setLiveStrokeMode:(char)arg1 ;
-(unsigned long long)clearAndRenderStrokes:(id)arg1 clippedToStrokeSpaceRect:(CGRect)arg2 strokeTransform:(CGAffineTransform)arg3 stopBlock:(/*^block*/id)arg4 ;
-(void)buildRenderCacheForStrokes:(id)arg1 ;
-(void)purgeRenderCachesForStrokes:(id)arg1 ;
-(void)purgeOriginalBackFramebuffer;
-(void)teardownOriginalBackFramebuffer;
-(void)copyIntoTile:(id)arg1 tileTransform:(CGAffineTransform)arg2 waitUntilCompleted:(char)arg3 ;
-(void)renderTiles:(id)arg1 intoTile:(id)arg2 waitUntilCompleted:(char)arg3 ;
-(void)clearTile:(id)arg1 waitUntilCompleted:(char)arg2 ;
-(void)clearAndRenderTiles:(id)arg1 tileTransform:(CGAffineTransform)arg2 waitUntilCompleted:(char)arg3 ;
-(void)renderTexture:(id)arg1 ;
-(void)renderImage:(CGImageRef)arg1 andMask:(CGImageRef)arg2 ;
-(id)generateSmartFillMaskForStroke:(id)arg1 maskPaths:(const vector<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint>>, std::__1::allocator<std::__1::vector<ClipperLib::IntPoint, std::__1::allocator<ClipperLib::IntPoint>>>>*)arg2 ;
-(void)setLinedPaper:(PKLinedPaper *)arg1 ;
-(void)setPaperTransform:(CGAffineTransform)arg1 ;
-(CGColorRef)liveRenderingOverrideColor;
-(void)setSolidColorBackboard:(char)arg1 ;
-(void)setOneRenderPassForLiveRendering:(char)arg1 ;
-(CGRect)viewScissor;
-(void)setStrokeTransform:(CGAffineTransform)arg1 ;
-(CGSize)actualSize;
-(double)backboardPaperMultiply;
-(void)setBackboardPaperMultiply:(double)arg1 ;
-(PKMetalResourceHandler *)resourceHandler;
-(void)setInputScale:(double)arg1 ;
-(void)setEraserIndicatorAlpha:(double)arg1 ;
-(void)setFadeOutStrokesMode:(char)arg1 ;
-(void)setLiveStrokeMaxSize:(CGSize)arg1 ;
-(char)edgeMask;
-(void)setEdgeMask:(char)arg1 ;
-(void)setLiveStrokeElapsedTime:(double)arg1 ;
@end

