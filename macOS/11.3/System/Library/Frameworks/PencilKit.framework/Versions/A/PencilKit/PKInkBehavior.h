/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:54 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/PencilKit.framework/Versions/A/PencilKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <PencilKit/PencilKit-Structs.h>
@class NSMutableArray, NSString, PKInkRenderingDescriptor, PKInkSmoothingDescriptor, PKInkFeatheringDescriptor, PKInkParticleDescriptor, NSArray;

@interface PKInkBehavior : NSObject {

	char _timeDependent;
	char _usesAzimuthOrAltitude;
	char _showBrushIndicator;
	double _rulerOffsetScale;
	double _rulerOffsetConstant;
	char _variableSnappedWidth;
	NSMutableArray* _cachedRadiusFunctions;
	NSMutableArray* _cachedOpacityFunctions;
	NSMutableArray* _cachedEdgeWidthFunctions;
	NSMutableArray* _cachedAspectRatioFunctions;
	unique_ptr<PKFunction, std::__1::default_delete<PKFunction>>* _weightFunction;
	vector<PKOutputFunction, std::__1::allocator<PKOutputFunction>>* _radiusOutput;
	vector<PKOutputFunction, std::__1::allocator<PKOutputFunction>>* _opacityOutput;
	vector<PKOutputFunction, std::__1::allocator<PKOutputFunction>>* _edgeWidthOutput;
	vector<PKOutputFunction, std::__1::allocator<PKOutputFunction>>* _aspectRatioOutput;
	vector<PKOutputFunction, std::__1::allocator<PKOutputFunction>>* _brushOpacityOutput;
	NSString* _variant;
	PKInkRenderingDescriptor* _renderingDescriptor;
	double _blendAlpha;
	double _targetMultiple;
	double _baseAlpha;
	PKInkSmoothingDescriptor* _smoothingDescriptor;
	PKInkFeatheringDescriptor* _featheringDescriptor;

}

@property (nonatomic,readonly) NSString * variant;                                          //@synthesize variant=_variant - In the implementation block
@property (nonatomic,readonly) PKInkRenderingDescriptor * renderingDescriptor;              //@synthesize renderingDescriptor=_renderingDescriptor - In the implementation block
@property (nonatomic,readonly) PKInkParticleDescriptor * particleDescriptor; 
@property (nonatomic,readonly) NSArray * inkFunctions; 
@property (assign,nonatomic) double blendAlpha;                                             //@synthesize blendAlpha=_blendAlpha - In the implementation block
@property (assign,nonatomic) double targetMultiple;                                         //@synthesize targetMultiple=_targetMultiple - In the implementation block
@property (assign,nonatomic) double baseAlpha;                                              //@synthesize baseAlpha=_baseAlpha - In the implementation block
@property (nonatomic,retain) PKInkSmoothingDescriptor * smoothingDescriptor;                //@synthesize smoothingDescriptor=_smoothingDescriptor - In the implementation block
@property (nonatomic,retain) PKInkFeatheringDescriptor * featheringDescriptor;              //@synthesize featheringDescriptor=_featheringDescriptor - In the implementation block
+(id)arrayFromVector:(vector<double, std::__1::allocator<double>>*)arg1 ;
+(id)inkFunctionForProperty:(unsigned long long)arg1 outputFunctions:(vector<PKOutputFunction, std::__1::allocator<PKOutputFunction>>*)arg2 index:(unsigned long long)arg3 ;
+(double)inkRadiusOverride;
-(id)description;
-(NSString *)variant;
-(char)isEraser;
-(double)radiusForPoint:(SCD_Struct_PK35)arg1 context:(SCD_Struct_PK4*)arg2 ;
-(double)edgeWidthForPoint:(SCD_Struct_PK35)arg1 context:(SCD_Struct_PK4*)arg2 ;
-(PKInkRenderingDescriptor *)renderingDescriptor;
-(double)alphaForStrokeColor:(CGColorRef)arg1 ;
-(double)blendAlpha;
-(double)targetMultiple;
-(char)showBrushIndicator;
-(PKInkParticleDescriptor *)particleDescriptor;
-(double)alphaForStroke:(id)arg1 ;
-(id)particleTextureName;
-(double)particleSpacingForRadius:(double)arg1 ;
-(char)isTimeDependent;
-(PKStrokePoint)outputTimePoint:(PKStrokePoint)arg1 atTime:(double)arg2 stillChanging:(char*)arg3 ;
-(id)inkFunctionsForProperty:(unsigned long long)arg1 ;
-(vector<PKOutputFunction, std::__1::allocator<PKOutputFunction>>*)outputVectorForProperty:(unsigned long long)arg1 ;
-(id)functionsForProperty:(unsigned long long)arg1 ;
-(PKOutputFunction*)outputFunctionFromInkFunction:(id)arg1 ;
-(void)setUsesAzimuthOrAltitude:(char)arg1 ;
-(void)setTimeDependent:(char)arg1 ;
-(double)solve:(vector<PKOutputFunction, std::__1::allocator<PKOutputFunction>>*)arg1 forPoint:(SCD_Struct_PK35)arg2 context:(SCD_Struct_PK4*)arg3 weight:(double)arg4 ;
-(double)evaluateWeight:(double)arg1 ;
-(double)solveForTime:(vector<PKOutputFunction, std::__1::allocator<PKOutputFunction>>*)arg1 forTime:(double)arg2 stillChanging:(char*)arg3 ;
-(id)initWithRenderingDescriptor:(id)arg1 variant:(id)arg2 ;
-(void)setWeightFunction:(unique_ptr<PKFunction, std::__1::default_delete<PKFunction>>*)arg1 ;
-(NSArray *)inkFunctions;
-(void)inkFunctionDidChange:(id)arg1 ;
-(void)removeInkFunction:(id)arg1 ;
-(void)addNewInkFunction:(id)arg1 ;
-(void)setRadiusOutput:(vector<PKOutputFunction, std::__1::allocator<PKOutputFunction>>*)arg1 ;
-(void)setOpacityOutput:(vector<PKOutputFunction, std::__1::allocator<PKOutputFunction>>*)arg1 ;
-(void)setEdgeWidthOutput:(vector<PKOutputFunction, std::__1::allocator<PKOutputFunction>>*)arg1 ;
-(void)setAspectRatioOutput:(vector<PKOutputFunction, std::__1::allocator<PKOutputFunction>>*)arg1 ;
-(void)setBrushOpacityOutput:(vector<PKOutputFunction, std::__1::allocator<PKOutputFunction>>*)arg1 ;
-(double)brushOpacityForPoint:(SCD_Struct_PK35)arg1 context:(SCD_Struct_PK4*)arg2 ;
-(PKStrokePoint)outputForPoint:(SCD_Struct_PK35)arg1 context:(SCD_Struct_PK4*)arg2 ;
-(char)immutableVelocity;
-(char)usesAzimuthOrAltitude;
-(void)setShowBrushIndicator:(char)arg1 ;
-(void)setRulerOffsetScale:(double)arg1 ;
-(void)setRulerOffsetConstant:(double)arg1 ;
-(char)variableSnappedWidth;
-(void)setVariableSnappedWidth:(char)arg1 ;
-(double)rulerOffsetForBaseValues:(PKStrokePoint)arg1 inputType:(long long)arg2 inputScale:(double)arg3 ;
-(void)setBlendAlpha:(double)arg1 ;
-(void)setTargetMultiple:(double)arg1 ;
-(double)baseAlpha;
-(void)setBaseAlpha:(double)arg1 ;
-(PKInkSmoothingDescriptor *)smoothingDescriptor;
-(void)setSmoothingDescriptor:(PKInkSmoothingDescriptor *)arg1 ;
-(PKInkFeatheringDescriptor *)featheringDescriptor;
-(void)setFeatheringDescriptor:(PKInkFeatheringDescriptor *)arg1 ;
@end

