/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:36 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/EventKit.framework/Versions/A/EventKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue;
#import <EventKit/EventKit-Structs.h>
@class NSString, EKBackingStore, NSObject, NSSet, EKChangeListener, NSDate, NSTimeZone, NSArray, EKReminderStore, NSDictionary, EKCalendar;

@interface EKEventStore : NSObject {

	os_unfair_lock_s _reminderSourceMapLock;
	char _onlyNotifyForAccountedChanges;
	char _shouldSanitizeVehicleAlarms;
	int backingStoreType;
	NSString* eventStoreIdentifier;
	EKBackingStore* backingStore;
	NSObject*<OS_dispatch_queue> backgroundFetchQueue;
	NSSet* editingContextGroups;
	EKChangeListener* changeListener;
	NSDate* lastCheckpointDate;
	NSTimeZone* timeZone;
	NSArray* _calendars;
	EKReminderStore* _reminderStore;
	NSDictionary* _reminderSourceIDToEventSourceIDMapping;
	NSDictionary* _eventSourceIDToReminderSourceIDMapping;

}

@property (assign,nonatomic) char showDeclinedEvents; 
@property (nonatomic,readonly) EKReminderStore * reminderStore;                                      //@synthesize reminderStore=_reminderStore - In the implementation block
@property (nonatomic,retain) NSDictionary * reminderSourceIDToEventSourceIDMapping;                  //@synthesize reminderSourceIDToEventSourceIDMapping=_reminderSourceIDToEventSourceIDMapping - In the implementation block
@property (nonatomic,retain) NSDictionary * eventSourceIDToReminderSourceIDMapping;                  //@synthesize eventSourceIDToReminderSourceIDMapping=_eventSourceIDToReminderSourceIDMapping - In the implementation block
@property (nonatomic,readonly) os_unfair_lock_s* reminderSourceMapLock; 
@property (nonatomic,retain) EKCalendar * defaultCalendarForNewEvents; 
@property (nonatomic,readonly) NSArray * inboxRepliedSectionItems; 
@property (nonatomic,readonly) char inboxRepliedSectionHasContent; 
@property (nonatomic,readonly) EKCalendar * suggestedEventCalendar; 
@property (nonatomic,readonly) EKCalendar * naturalLanguageSuggestedEventCalendar; 
@property (nonatomic,readonly) char automaticLocationGeocodingAllowed; 
@property (nonatomic,readonly) unsigned long long lastConfirmedSplashScreenVersion; 
@property (nonatomic,readonly) char allowsBirthdayModifications; 
@property (nonatomic,copy) NSTimeZone * timeZone; 
@property (retain) NSDate * lastCheckpointDate; 
@property (assign) char onlyNotifyForAccountedChanges;                                               //@synthesize onlyNotifyForAccountedChanges=_onlyNotifyForAccountedChanges - In the implementation block
@property (nonatomic,readonly) NSSet * editingContextGroups; 
@property (nonatomic,readonly) EKChangeListener * changeListener; 
@property (nonatomic,retain) EKBackingStore * backingStore; 
@property (nonatomic,readonly) int backingStoreType; 
@property (nonatomic,readonly) NSObject*<OS_dispatch_group> backingStoreAvailableGroup; 
@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> backgroundFetchQueue; 
@property (assign,nonatomic) char shouldSanitizeVehicleAlarms;                                       //@synthesize shouldSanitizeVehicleAlarms=_shouldSanitizeVehicleAlarms - In the implementation block
@property (nonatomic,readonly) NSString * eventStoreIdentifier; 
@property (nonatomic,readonly) NSArray * delegateSources; 
@property (nonatomic,readonly) NSArray * sources; 
@property (nonatomic,readonly) NSArray * calendars;                                                  //@synthesize calendars=_calendars - In the implementation block
+(id)sg_newStore;
+(void)sg_usingSharedStoreForReadingOnly:(/*^block*/id)arg1 ;
+(long long)authorizationStatusForEntityType:(unsigned long long)arg1 ;
+(char)accessGrantedForEntityType:(unsigned long long)arg1 ;
+(long long)authorizationStatusForEntityType:(unsigned long long)arg1 intendsToAccess:(char)arg2 ;
+(char)_skipTCCAccessCheckForEntityType:(unsigned long long)arg1 accessGranted:(char*)arg2 ;
+(void)_noteGlobalAccessRequestedForEntityType:(unsigned long long)arg1 ;
+(id)dateStringFromDate:(id)arg1 ;
+(id)dateFromDateString:(id)arg1 ;
+(/*^block*/id)reminderStoreContainerTokenProvider;
+(void)setReminderStoreContainerTokenProvider:(/*^block*/id)arg1 ;
+(void)setDenyAccessToEvents:(char)arg1 ;
+(void)setDenyAccessToReminders:(char)arg1 ;
+(char)accessGrantedForCalendar:(id)arg1 ;
+(char)accessGrantedForSource:(id)arg1 ;
+(int)_liveEventStores;
-(id)_sg_fetchEKEventsForPseudoNLEvent:(id)arg1 title:(id)arg2 participants:(id)arg3 ;
-(id)sg_confirmedEKEventForSGEvent:(id)arg1 ;
-(id)eventsWithSameOpaqueKeyAsPseudoEvent:(id)arg1 harvestStore:(id)arg2 ;
-(id)eventsWithSameOpaqueKeyAsStorageEvent:(id)arg1 harvestStore:(id)arg2 ;
-(id)eventsWithSameAlternativeOpaqueKeyAsPseudoEvent:(id)arg1 harvestStore:(id)arg2 ;
-(id)eventsWithSameAlternativeOpaqueKeyAsStorageEvent:(id)arg1 harvestStore:(id)arg2 ;
-(id)eventWithExternalID:(id)arg1 ;
-(id)sg_fetchEKEventsForPseudoEventBySimilarTitleAndStartTime:(id)arg1 ;
-(id)sg_fetchEKEventsForPseudoNLEvent:(id)arg1 entity:(id)arg2 ;
-(id)sg_fetchEKEventsForPseudoNLEvent:(id)arg1 message:(id)arg2 ;
-(void)sg_bumpTimeToLiveForZeroKeywordNLEventOnInteraction:(id)arg1 ;
-(double)eventsPerWeekAroundDate:(id)arg1 ;
-(id)eventsWithSameOpaqueKeyAsDuplicateKey:(id)arg1 extraKey:(id)arg2 harvestStore:(id)arg3 ;
-(id)eventsWithSameAlternativeOpaqueKeyAsDuplicateKey:(id)arg1 harvestStore:(id)arg2 ;
-(void)dealloc;
-(id)init;
-(void)setTimeZone:(NSTimeZone *)arg1 ;
-(NSTimeZone *)timeZone;
-(id)calendarWithIdentifier:(id)arg1 ;
-(unsigned long long)options;
-(void)openURL:(id)arg1 ;
-(void)reset;
-(id)allEvents;
-(EKBackingStore *)backingStore;
-(void)resetCache;
-(id)initWithSources:(id)arg1 ;
-(void)setBackingStore:(EKBackingStore *)arg1 ;
-(NSArray *)sources;
-(void)requestAccessToEntityType:(unsigned long long)arg1 completion:(/*^block*/id)arg2 ;
-(id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 ;
-(id)eventsMatchingPredicate:(id)arg1 ;
-(id)calendarsForEntityType:(unsigned long long)arg1 ;
-(NSArray *)calendars;
-(char)saveEvent:(id)arg1 span:(long long)arg2 error:(id*)arg3 ;
-(char)removeEvent:(id)arg1 span:(long long)arg2 error:(id*)arg3 ;
-(id)localSource;
-(int)backingStoreType;
-(char)shouldPermitOrganizerEmailFromJunkChecks:(id)arg1 ;
-(char)shouldPermitOrganizerPhoneNumberFromJunkChecks:(id)arg1 ;
-(char)removeEvent:(id)arg1 span:(long long)arg2 commit:(char)arg3 error:(id*)arg4 ;
-(id)eventWithIdentifier:(id)arg1 ;
-(char)saveEvent:(id)arg1 span:(long long)arg2 commit:(char)arg3 error:(id*)arg4 ;
-(char)saveCalendar:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(void)enumerateEventsMatchingPredicate:(id)arg1 usingBlock:(/*^block*/id)arg2 ;
-(void)_setEventStoreOnObject:(id)arg1 ;
-(id)calendarItemWithIdentifier:(id)arg1 ;
-(char)returnReminderResults;
-(EKReminderStore *)reminderStore;
-(char)removeCalendar:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(id)fetchEventsMatchingPredicate:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)refreshSourcesIfNecessary;
-(id)initWithStoreType:(int)arg1 ;
-(id)importICSData:(id)arg1 intoCalendar:(id)arg2 options:(unsigned long long)arg3 ;
-(void)cacheValidationStatusForAddress:(id)arg1 status:(unsigned long long)arg2 ;
-(unsigned long long)addressValidationStatus:(id)arg1 ;
-(id)eventForUID:(id)arg1 occurrenceDate:(id)arg2 checkValid:(char)arg3 ;
-(CGColorRef)copyCGColorForNewCalendar;
-(char)deleteCalendar:(id)arg1 forEntityType:(unsigned long long)arg2 error:(id*)arg3 ;
-(id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 loadDefaultProperties:(char)arg4 ;
-(int)readWriteCalendarCountForEntityType:(unsigned long long)arg1 ;
-(char)showDeclinedEvents;
-(void)setShowDeclinedEvents:(char)arg1 ;
-(id)fetchEventsMatchingPredicate:(id)arg1 resultHandler:(/*^block*/id)arg2 ;
-(id)refreshSourcesIfNecessary:(char)arg1 ;
-(char)refreshSource:(id)arg1 userRequested:(char)arg2 ;
-(id)initWithEKOptions:(unsigned long long)arg1 path:(id)arg2 ;
-(id)initWithEKOptions:(unsigned long long)arg1 path:(id)arg2 changeTrackingClientId:(id)arg3 enablePropertyModificationLogging:(char)arg4 allowDelegateSources:(char)arg5 ;
-(id)reminderWithIdentifier:(id)arg1 ;
-(char)saveReminder:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(id)remindersWithCalendarIdentifiers:(id)arg1 ;
-(id)allReminders;
-(void)_noteAccessRequestedToEntityType:(unsigned long long)arg1 ;
-(id)initWithSourceFilters:(id)arg1 ;
-(id)initWithStoreType:(int)arg1 options:(unsigned long long)arg2 sourceFilters:(id)arg3 asyncWithCompletion:(/*^block*/id)arg4 ;
-(void)_requestAccessForMask:(unsigned long long)arg1 ;
-(id)initWithSourceFilters:(id)arg1 options:(unsigned long long)arg2 ;
-(id)initWithStoreType:(int)arg1 sourceFilters:(id)arg2 ;
-(id)initWithStoreType:(int)arg1 options:(unsigned long long)arg2 sourceFilters:(id)arg3 asyncWithCompletion:(/*^block*/id)arg4 orWithExistingStore:(id)arg5 andBackingStore:(id)arg6 ;
-(id)_newBackingStoreForType:(int)arg1 options:(unsigned long long)arg2 sourceFilters:(id)arg3 asyncWithCompletion:(/*^block*/id)arg4 ;
-(void)_setupDefaultPermissions;
-(EKChangeListener *)changeListener;
-(void)initializeEKEventStorePlusReminders;
-(id)copyForBackgroundUpdate;
-(id)initWithEventStore:(id)arg1 andNewBackingStore:(id)arg2 ;
-(id)sourceFilters;
-(unsigned long long)lastConfirmedSplashScreenVersion;
-(char)returnEventResults;
-(char)_commitObjectsWithIdentifiers:(id)arg1 error:(id*)arg2 ;
-(char)commit:(id*)arg1 ;
-(NSString *)eventStoreIdentifier;
-(char)_conditionalSave:(id)arg1 commit:(char)arg2 error:(id*)arg3 withActionBlock:(/*^block*/id)arg4 ignoreValidation:(char)arg5 ;
-(char)_conditionalSave:(id)arg1 commit:(char)arg2 error:(id*)arg3 withActionBlock:(/*^block*/id)arg4 withValidateBlock:(/*^block*/id)arg5 ;
-(char)_savePreFlight:(id)arg1 withValidateBlock:(/*^block*/id)arg2 anObject:(id*)arg3 error:(id*)arg4 ;
-(id)_newBackingStoreForType:(int)arg1 options:(unsigned long long)arg2 sourceFilters:(id)arg3 accessRequestedForEvents:(char)arg4 accessRequestedForReminders:(char)arg5 asyncWithCompletion:(/*^block*/id)arg6 ;
-(id)allCalendars;
-(void)_setEventStoreOnObjects:(id)arg1 ;
-(id)combineEventCalendars:(id)arg1 withReminderCalendars:(id)arg2 ;
-(id)allFrozenOrNewCalendars;
-(id)acquireDefaultCalendarForNewEvents;
-(id)defaultCalendarForNewReminders;
-(void)setDefaultCalendarForNewEvents:(EKCalendar *)arg1 ;
-(void)setDefaultCalendarForNewReminders:(id)arg1 ;
-(EKCalendar *)suggestedEventCalendar;
-(void)insertSuggestedEventCalendar;
-(EKCalendar *)naturalLanguageSuggestedEventCalendar;
-(id)sourceWithIdentifier:(id)arg1 ;
-(id)combinedReminderAndEventSources;
-(id)sourceErrors;
-(id)allNotificationsIncludingPast:(char)arg1 ;
-(id)eventsWithIdentifiers:(id)arg1 apiExpected:(char)arg2 ;
-(id)notificationsForEntityType:(unsigned long long)arg1 includingPast:(char)arg2 ;
-(unsigned long long)displayedNotificationCountInCalendar:(id)arg1 ;
-(id)displayableNotificationsInCalendarIdentifier:(id)arg1 ;
-(unsigned long long)displayedSuggestedEventCount;
-(id)predicateForEventsCreatedFromSuggestionsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 ;
-(id)filteredNotificationsForEntityType:(unsigned long long)arg1 notifications:(id)arg2 ;
-(char)acknowledgeNotifications:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(char)_conditionalSave:(id)arg1 commit:(char)arg2 error:(id*)arg3 withActionBlock:(/*^block*/id)arg4 ;
-(char)acknowledgeNotification:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(char)respondToInvitation:(id)arg1 withStatus:(long long)arg2 notifyOrganizer:(char)arg3 placingInCalendar:(id)arg4 commit:(char)arg5 error:(id*)arg6 ;
-(char)_respondToInvitations:(id)arg1 withStatus:(long long)arg2 exceptForDates:(id)arg3 notifyOrganizer:(char)arg4 placingInCalendar:(id)arg5 commit:(char)arg6 error:(id*)arg7 ;
-(char)saveNotifications:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(id)calendarItemWithIdentifier:(id)arg1 apiExpected:(char)arg2 ;
-(id)remindersWithExternalIdentifier:(id)arg1 ;
-(id)eventsWithExternalIdentifier:(id)arg1 ;
-(id)stringForViewOption:(int)arg1 ;
-(void)showLegacyOccurrenceIDStringInCalendar:(id)arg1 withOpenOptions:(int)arg2 inView:(int)arg3 ;
-(id)stringForOpenOption:(int)arg1 ;
-(id)eventWithExternalURI:(id)arg1 ;
-(id)reminderWithExternalURI:(id)arg1 ;
-(id)calendarItemsWithExternalIdentifier:(id)arg1 ;
-(char)_saveCalendar:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(char)_saveCalendar:(id)arg1 commit:(char)arg2 error:(id*)arg3 ignoreValidation:(char)arg4 ;
-(char)shouldSaveCalendarAsEventCalendar:(id)arg1 ;
-(char)shouldSaveCalendarAsReminderCalendar:(id)arg1 ;
-(void)notifyChangedSources:(char)arg1 changedCalendars:(char)arg2 changedEvents:(char)arg3 changedSuggestedEvents:(char)arg4 changedReminders:(char)arg5 changedNotifications:(char)arg6 sourceIdentifiers:(id)arg7 calendarIdentifiers:(id)arg8 eventIdentifiers:(id)arg9 reminderIdentifiers:(id)arg10 otherChanges:(id)arg11 ;
-(void)_notifyChangedSources:(char)arg1 sourceIdentifiers:(id)arg2 ;
-(void)_notifyChangedCalendars:(char)arg1 calendarIdentifiers:(id)arg2 ;
-(void)_notifyChangedEvents:(char)arg1 eventIdentifiers:(id)arg2 otherChanges:(id)arg3 ;
-(void)_notifyChangedReminders:(char)arg1 reminderIdentifiers:(id)arg2 otherChanges:(id)arg3 ;
-(id)remindersMatchingPredicate:(id)arg1 ;
-(id)fetchRemindersMatchingPredicate:(id)arg1 completionCallback:(/*^block*/id)arg2 cancelCallback:(/*^block*/id)arg3 ;
-(id)fetchRemindersMatchingPredicate:(id)arg1 completion:(/*^block*/id)arg2 ;
-(id)predicateForRemindersInCalendars:(id)arg1 ;
-(id)predicateForIncompleteRemindersWithDueDateStarting:(id)arg1 ending:(id)arg2 calendars:(id)arg3 ;
-(id)predicateForCompletedRemindersWithCompletionDateStarting:(id)arg1 ending:(id)arg2 calendars:(id)arg3 ;
-(id)_predicateForRemindersWithDate:(id)arg1 useAsCompletionDate:(char)arg2 calendars:(id)arg3 limitToCompletedOrIncomplete:(char)arg4 completed:(char)arg5 includeDatesBefore:(char)arg6 sortOrder:(int)arg7 ;
-(id)predicateForCompletedRemindersWithDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3 ;
-(id)predicateForRemindersWithTitle:(id)arg1 listTitle:(id)arg2 limitToCompletedOrIncomplete:(char)arg3 completed:(char)arg4 dueAfter:(id)arg5 dueBefore:(id)arg6 searchTerm:(id)arg7 sortOrder:(int)arg8 maxResults:(unsigned long long)arg9 hasContactIdentifier:(char)arg10 contactIdentifier:(id)arg11 ;
-(id)predicateForRemindersWithTitle:(id)arg1 listTitle:(id)arg2 limitToCompletedOrIncomplete:(char)arg3 completed:(char)arg4 dueAfter:(id)arg5 dueBefore:(id)arg6 searchTerm:(id)arg7 sortOrder:(int)arg8 maxResults:(unsigned long long)arg9 ;
-(id)predicateForCompletedRemindersMaxResults:(unsigned long long)arg1 calendars:(id)arg2 ;
-(id)_predicateForNumberOfCompletedRemindersInCalendars:(id)arg1 ;
-(unsigned long long)numberOfCompletedRemindersInCalendars:(id)arg1 ;
-(void)invalidateReminderSourceMaps;
-(id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendarIdentifiers:(id)arg3 exclusionOptions:(long long)arg4 ;
-(id)_nextEventWithFetchBlock:(/*^block*/id)arg1 searchBackwards:(char)arg2 steps:(id)arg3 ;
-(id)_predicateForEventsWithStructuredLocationsInCalendars:(id)arg1 ;
-(char)_eventsExistWithGeoCodedLocation;
-(char)eventsExistWithGeneralLookupPredicate:(id)arg1 ;
-(char)_saveEvent:(id)arg1 span:(long long)arg2 commit:(char)arg3 error:(id*)arg4 ignoreValidation:(char)arg5 ;
-(char)_saveEvents:(id)arg1 span:(long long)arg2 commit:(char)arg3 error:(id*)arg4 ignoreValidation:(char)arg5 ;
-(long long)_correctedSpanForEvents:(id)arg1 span:(long long)arg2 ;
-(void)_willSaveCalendarItems:(id)arg1 ;
-(void)deleteDraftOfEventWithOccurrenceID:(id)arg1 ;
-(id)eventsWithCalendarIdentifiers:(id)arg1 ;
-(id)eventCountsMatchingPredicate:(id)arg1 ;
-(id)allEventsWithUniqueId:(id)arg1 occurrenceDate:(id)arg2 ;
-(id)predicateForNaturalLanguageSuggestedEventsWithSearchString:(id)arg1 startDate:(id)arg2 ;
-(id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 timeZone:(id)arg3 calendars:(id)arg4 ;
-(id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 timeZone:(id)arg3 calendars:(id)arg4 calendarIdentifiers:(id)arg5 prefetchHint:(long long)arg6 exclusionOptions:(long long)arg7 ;
-(id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 timeZone:(id)arg3 calendars:(id)arg4 prefetchHint:(long long)arg5 ;
-(id)occurrencesForMultipleSeries:(id)arg1 inRange:(id)arg2 ;
-(NSObject*<OS_dispatch_group>)backingStoreAvailableGroup;
-(id)beginCalDAVServerSimulationWithHostname:(id)arg1 ;
-(char)_saveDraftOfEvent:(id)arg1 toDirectory:(id)arg2 ;
-(char)_saveDraftOfEvent:(id)arg1 toDirectory:(id)arg2 withVersion:(id)arg3 ;
-(id)_draftPathForEventWithOccurrenceID:(id)arg1 draftDirectory:(id)arg2 ;
-(id)_loadDraftOfEventWithOccurrenceID:(id)arg1 fromDirectory:(id)arg2 ;
-(id)_loadDraftOfEventWithOccurrenceID:(id)arg1 fromDirectory:(id)arg2 withVersion:(id)arg3 ;
-(void)_deleteDraft:(id)arg1 ;
-(void)_deleteDraftOfEventWithOccurrenceID:(id)arg1 fromDirectory:(id)arg2 ;
-(id)initAsyncWithCompletionBlock:(/*^block*/id)arg1 ;
-(id)initWithAccessToEntityTypes:(unsigned long long)arg1 ;
-(id)initWithStoreType:(int)arg1 options:(unsigned long long)arg2 ;
-(char)automaticLocationGeocodingAllowed;
-(char)allowsBirthdayModifications;
-(char)commitObjectsWithIdentifiers:(id)arg1 error:(id*)arg2 ;
-(id)allFrozenOrNewCalendarsForEntityType:(unsigned long long)arg1 ;
-(id)acquireDefaultCalendarForNewReminders;
-(EKCalendar *)defaultCalendarForNewEvents;
-(void)removeSuggestedEventCalendar;
-(id)readWriteCalendarsForEntityType:(unsigned long long)arg1 ;
-(NSArray *)delegateSources;
-(id)localSubscribedCalendarSource;
-(id)localBirthdayCalendarSource;
-(id)eventSources;
-(id)reminderSources;
-(id)sourceWithExternalID:(id)arg1 ;
-(id)sourcesEnabledForEntityType:(unsigned long long)arg1 ;
-(id)allNotifications;
-(id)notificationsForEntityType:(unsigned long long)arg1 ;
-(unsigned long long)displayedNotificationCount;
-(id)displayableNotifications;
-(char)acceptAlternateTimeProposalNotification:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(char)declineAlternateTimeProposalNotification:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(char)respondToInvitation:(id)arg1 withStatus:(long long)arg2 commit:(char)arg3 error:(id*)arg4 ;
-(char)respondToInvitations:(id)arg1 withStatus:(long long)arg2 notifyOrganizer:(char)arg3 commit:(char)arg4 error:(id*)arg5 ;
-(char)acceptInvitation:(id)arg1 exceptForDates:(id)arg2 notifyOrganizer:(char)arg3 placingInCalendar:(id)arg4 commit:(char)arg5 error:(id*)arg6 ;
-(char)respondToSharedCalendarInvitation:(id)arg1 withStatus:(unsigned long long)arg2 commit:(char)arg3 error:(id*)arg4 ;
-(char)acceptSuggestedEventNotification:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(char)ignoreSuggestedEventNotification:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(char)saveNotification:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(void)showDateInCalendar:(id)arg1 inView:(int)arg2 ;
-(void)showEventInCalendar:(id)arg1 withOpenOptions:(int)arg2 inView:(int)arg3 ;
-(void)showReminderInReminders:(id)arg1 withOpenOptions:(int)arg2 ;
-(id)calendarWithExternalURI:(id)arg1 ;
-(id)calendarItemWithExternalURI:(id)arg1 ;
-(id)_eventWithURI:(id)arg1 checkValid:(char)arg2 ;
-(char)_saveReminder:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(char)removeReminder:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(char)saveSource:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(char)removeSource:(id)arg1 commit:(char)arg2 error:(id*)arg3 ;
-(id)remindersWithIdentifiers:(id)arg1 ;
-(void)notifyChangedSources:(char)arg1 changedCalendars:(char)arg2 changedEvents:(char)arg3 changedSuggestedEvents:(char)arg4 changedReminders:(char)arg5 changedNotifications:(char)arg6 otherChanges:(id)arg7 ;
-(id)calendarItemsMatchingPredicate:(id)arg1 entityClass:(id)arg2 ;
-(void)cancelFetchRequest:(id)arg1 ;
-(id)predicateForIncompleteRemindersDueBeforeOrOnExactDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3 ;
-(id)predicateForIncompleteRemindersWithDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3 ;
-(id)predicateForIncompleteRemindersDueBeforeOrOnDueDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3 ;
-(id)predicateForCompletedRemindersWithDueDateOrCompletionDate:(id)arg1 calendars:(id)arg2 sortOrder:(int)arg3 ;
-(id)predicateForAllRemindersWithDueDate:(id)arg1 calendars:(id)arg2 ;
-(id)predicateForAllRemindersDueBeforeOrOnDueDate:(id)arg1 calendars:(id)arg2 ;
-(id)predicateForRemindersWithTitle:(id)arg1 calendars:(id)arg2 ;
-(id)predicateForCompletedRemindersWithCalendars:(id)arg1 ;
-(id)predicateForRemindersWithContactIdentifier:(id)arg1 ;
-(id)predicateForRemindersWithSearchTerm:(id)arg1 ;
-(id)predicateForRemindersWithTitle:(id)arg1 listTitle:(id)arg2 limitToCompletedOrIncomplete:(char)arg3 completed:(char)arg4 dueAfter:(id)arg5 dueBefore:(id)arg6 searchTerm:(id)arg7 sortOrder:(int)arg8 ;
-(id)predicateForAllIncompleteReminders;
-(id)predicateForCompletedRemindersMaxResults:(unsigned long long)arg1 ;
-(char)anyCompletedRemindersInCalendars:(id)arg1 ;
-(void)reminderStoreChanged;
-(os_unfair_lock_s*)reminderSourceMapLock;
-(id)nextEventWithCalendarIdentifiers:(id)arg1 exclusionOptions:(long long)arg2 ;
-(char)hasImmediatelyEligibleTravelEvents;
-(char)inboxRepliedSectionHasContent;
-(NSArray *)inboxRepliedSectionItems;
-(id)eventWithUniqueId:(id)arg1 ;
-(id)calendarItemsWithEWSIdentifier:(id)arg1 ;
-(id)eventsWithIdentifiers:(id)arg1 ;
-(id)backingEventsWithIdentifiers:(id)arg1 ;
-(void)fetchEventCountsMatchingPredicate:(id)arg1 completion:(/*^block*/id)arg2 ;
-(id)upcomingSuggestedEvents;
-(id)eventWithUniqueId:(id)arg1 occurrenceDate:(id)arg2 ;
-(id)predicateForAssistantEventSearchWithTimeZone:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 title:(id)arg4 location:(id)arg5 notes:(id)arg6 participants:(id)arg7 calendars:(id)arg8 limit:(long long)arg9 ;
-(id)predicateForNaturalLanguageSuggestedEventsWithSearchString:(id)arg1 ;
-(id)predicateForEventCreatedFromSuggestionWithOpaqueKey:(id)arg1 ;
-(id)predicateForEventsCreatedFromSuggestion;
-(id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendarIdentifiers:(id)arg3 prefetchHint:(long long)arg4 ;
-(id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendarIdentifiers:(id)arg3 prefetchHint:(long long)arg4 exclusionOptions:(long long)arg5 ;
-(id)predicateForEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 matchingContacts:(id)arg4 ;
-(id)predicateForEventsWithTitle:(id)arg1 location:(id)arg2 notes:(id)arg3 participantNames:(id)arg4 calendars:(id)arg5 ;
-(id)predicateForNonrecurringEventsWithStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 ;
-(void)eventsMatchingPredicateInTemporaryStore:(id)arg1 withActionBlock:(/*^block*/id)arg2 ;
-(void)refreshObjectIDs:(id)arg1 inContext:(id)arg2 ;
-(void)setRangeOfInterest:(id)arg1 ;
-(void)endCalDAVServerSimulation:(id)arg1 ;
-(char)saveDraftOfEvent:(id)arg1 ;
-(id)loadDraftOfEventWithOccurrenceID:(id)arg1 ;
-(NSObject*<OS_dispatch_queue>)backgroundFetchQueue;
-(NSSet *)editingContextGroups;
-(NSDate *)lastCheckpointDate;
-(void)setLastCheckpointDate:(NSDate *)arg1 ;
-(NSDictionary *)reminderSourceIDToEventSourceIDMapping;
-(void)setReminderSourceIDToEventSourceIDMapping:(NSDictionary *)arg1 ;
-(NSDictionary *)eventSourceIDToReminderSourceIDMapping;
-(void)setEventSourceIDToReminderSourceIDMapping:(NSDictionary *)arg1 ;
-(char)onlyNotifyForAccountedChanges;
-(void)setOnlyNotifyForAccountedChanges:(char)arg1 ;
-(char)shouldSanitizeVehicleAlarms;
-(void)setShouldSanitizeVehicleAlarms:(char)arg1 ;
-(id)reminderSourceForEventSource:(id)arg1 ;
-(id)_combineEventSources:(id)arg1 withReminderSources:(id)arg2 ;
-(void)performHoldingReminderSourceMapLock:(/*^block*/id)arg1 ;
-(void)_rebuildSourceMapsWithEventSources:(id)arg1 reminderSources:(id)arg2 ;
-(id)eventSourceIDForReminderSourceID:(id)arg1 ;
-(id)reminderSourceMap;
-(id)eventSourceMap;
-(void)getMapsWithReminderSourceMap:(id*)arg1 eventSourceMap:(id*)arg2 ;
-(id)eventSourceForReminderSource:(id)arg1 ;
@end

