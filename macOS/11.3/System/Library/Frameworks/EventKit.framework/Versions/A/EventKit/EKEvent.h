/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:36 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/EventKit.framework/Versions/A/EventKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <EventKit/EventKit-Structs.h>
#import <EventKit/EKCalendarItem.h>
#import <libobjc.A.dylib/EKMutableEventOccurrenceProtocol.h>
#import <libobjc.A.dylib/EKJunkInvitationProtocol_Private.h>

@class NSString, EKEventStore, NSDate, IPEventClassificationType, NSArray, IPMessageUnit, EKCalendarDate, NSURL, NSSet, EKStructuredLocation, EKSuggestedEventInfo, NSTimeZone, EKParticipant, NSNumber, NSData, NSDictionary, NSManagedObjectID;

@interface EKEvent : EKCalendarItem <EKMutableEventOccurrenceProtocol, EKJunkInvitationProtocol_Private> {

	char isYearlessBirthday;
	char isYearlessLeapMonthBirthday;
	char _isPhantom;
	unsigned long long participantsStatus;
	NSString* sliceParentID;
	NSString* nameForBirthday;
	long long _birthdayPersonID;
	NSDate* _sliceDate;
	NSString* _futureLocalUidForSliceChild;

}

@property (assign) char ipsos_isTimeApproximate; 
@property (assign) char ipsos_isEndTimeApproximate; 
@property (assign) char ipsos_usesDefaultClassificationTypeStartTime; 
@property (assign) char ipsos_isDateTimeTenseDependent; 
@property (assign) char ipsos_timeNeedsMeridianGuess; 
@property (assign) char ipsos_isEventTimeOnlyAndReferrengingToSentDate; 
@property (assign) char ipsos_isTimeOffset; 
@property (assign) char ipsos_allDayPreferred; 
@property (assign) char ipsos_disableTimeAdjustment; 
@property (assign) unsigned long long ipsos_usedBubblesCount; 
@property (assign) double ipsos_confidence; 
@property (assign) double ipsos_experimentalConfidence; 
@property (readonly) double ipsos_duration; 
@property (retain) IPEventClassificationType * ipsos_eventClassificationType; 
@property (retain) NSArray * ipsos_dataFeatures; 
@property (retain) IPMessageUnit * ipsos_messageUnit; 
@property (assign) unsigned long long ipsos_eventStatus; 
@property (assign) unsigned long long ipsos_eventAttributes; 
@property (nonatomic,readonly) char allowsPrivacyLevelModifications; 
@property (nonatomic,readonly) char canBeRespondedTo; 
@property (nonatomic,readonly) char canDetachSingleOccurrence; 
@property (nonatomic,readonly) EKCalendarDate * startCalendarDateIncludingTravelTime; 
@property (nonatomic,readonly) double durationIncludingTravel; 
@property (nonatomic,readonly) EKCalendarDate * startCalendarDate; 
@property (nonatomic,readonly) EKCalendarDate * endCalendarDate; 
@property (assign,nonatomic) unsigned long long invitationStatus; 
@property (nonatomic,readonly) char isStatusDirty; 
@property (nonatomic,readonly) char responseMustApplyToAll; 
@property (nonatomic,readonly) long long travelRoutingMode; 
@property (nonatomic,readonly) NSURL * externalURL; 
@property (nonatomic,readonly) char isAllDayDirty; 
@property (assign,nonatomic) long long participationStatus; 
@property (nonatomic,readonly) NSSet * detachedItems; 
@property (nonatomic,readonly) char isPrivateEventSharedToMe; 
@property (nonatomic,retain) NSArray * locations; 
@property (nonatomic,readonly) NSArray * locationsWithoutPrediction; 
@property (nonatomic,retain) NSDate * sliceDate;                                                                                             //@synthesize sliceDate=_sliceDate - In the implementation block
@property (assign,nonatomic) long long privacyLevel; 
@property (nonatomic,readonly) char locationIsAConferenceRoom; 
@property (nonatomic,readonly) double duration; 
@property (assign,nonatomic) double travelTime; 
@property (nonatomic,readonly) NSDate * startDateIncludingTravel; 
@property (nonatomic,readonly) char isStartDateDirty; 
@property (nonatomic,readonly) char isEndDateDirty; 
@property (nonatomic,readonly) char allowsTravelTimeModifications; 
@property (nonatomic,retain) EKStructuredLocation * travelStartLocation; 
@property (nonatomic,readonly) char automaticLocationGeocodingAllowed; 
@property (assign,nonatomic) long long travelAdvisoryBehavior; 
@property (nonatomic,readonly) char travelAdvisoryBehaviorIsEffectivelyEnabled; 
@property (nonatomic,readonly) char eligibleForTravelAdvisories; 
@property (nonatomic,retain) EKSuggestedEventInfo * suggestionInfo; 
@property (nonatomic,readonly) NSString * locationWithoutPrediction; 
@property (nonatomic,readonly) EKStructuredLocation * preferredLocationWithoutPrediction; 
@property (nonatomic,retain) NSDate * proposedStartDate; 
@property (nonatomic,readonly) char allowsProposedTimeModifications; 
@property (assign,nonatomic) char isPhantom;                                                                                                 //@synthesize isPhantom=_isPhantom - In the implementation block
@property (assign,nonatomic) unsigned long long cachedJunkStatus; 
@property (nonatomic,readonly) char isSignificantlyDetached; 
@property (nonatomic,readonly) char isSignificantlyDetachedIgnoringParticipation; 
@property (nonatomic,copy,readonly) NSArray * notifications; 
@property (nonatomic,copy,readonly) NSArray * notificationsForSeries; 
@property (getter=isPrivacySet,nonatomic,readonly) char privacySet; 
@property (getter=isPrivacySetInDelegateOrSharedToMeCalendar,nonatomic,readonly) char privacySetInDelegateOrSharedToMeCalendar; 
@property (nonatomic,readonly) char supportsParticipationStatusModificationsWithoutNotification; 
@property (nonatomic,readonly) long long participationStatus; 
@property (nonatomic,retain) EKStructuredLocation * endLocation; 
@property (nonatomic,copy) NSTimeZone * endTimeZone; 
@property (nonatomic,readonly) char allowsAlarmModifications; 
@property (nonatomic,readonly) char allowsAllDayModifications; 
@property (nonatomic,readonly) char allowsPrivateModifications; 
@property (nonatomic,retain) NSDate * proposedEndDate; 
@property (retain) NSString * futureLocalUidForSliceChild;                                                                                   //@synthesize futureLocalUidForSliceChild=_futureLocalUidForSliceChild - In the implementation block
@property (nonatomic,readonly) NSString * eventIdentifier; 
@property (assign,getter=isAllDay,nonatomic) char allDay; 
@property (nonatomic,copy) NSDate * startDate; 
@property (nonatomic,copy) NSDate * endDate; 
@property (nonatomic,copy) EKStructuredLocation * structuredLocation; 
@property (nonatomic,readonly) EKParticipant * organizer; 
@property (assign,nonatomic) long long availability; 
@property (nonatomic,readonly) long long status; 
@property (nonatomic,readonly) char isDetached; 
@property (nonatomic,readonly) NSDate * occurrenceDate; 
@property (nonatomic,readonly) NSString * birthdayContactIdentifier; 
@property (nonatomic,readonly) long long birthdayPersonID;                                                                                   //@synthesize birthdayPersonID=_birthdayPersonID - In the implementation block
@property (nonatomic,readonly) NSString * birthdayPersonUniqueID; 
@property (nonatomic,retain) id<EKCalendarProtocol> container; 
@property (nonatomic,copy) id<EKProtocolStructuredLocation> ekStructuredLocation; 
@property (nonatomic,copy) NSString * recurrenceRuleString; 
@property (nonatomic,copy) NSString * scheduleAgentString; 
@property (nonatomic,copy) NSString * title; 
@property (nonatomic,copy) NSString * notes; 
@property (nonatomic,copy) NSURL * URL; 
@property (nonatomic,copy) NSNumber * priorityNumber; 
@property (nonatomic,copy) NSTimeZone * timeZoneObject; 
@property (nonatomic,copy) NSDate * startDateUnadjustedFromUTC; 
@property (nonatomic,retain) NSDate * recurrenceDateUnadjustedFromUTC; 
@property (nonatomic,copy) NSString * recurrenceSetID; 
@property (nonatomic,copy) NSString * contactIdentifiersString; 
@property (nonatomic,copy) NSString * relatedExternalID; 
@property (nonatomic,copy) NSData * structuredData; 
@property (nonatomic,copy) NSData * localStructuredData; 
@property (nonatomic,readonly) NSNumber * calendarItemPermissionNumber; 
@property (nonatomic,readonly) char cachedHasAttendee; 
@property (nonatomic,readonly) char cachedHasAttachment; 
@property (nonatomic,readonly) char cachedHasAlarm; 
@property (nonatomic,readonly) char cachedIsCalendarOwnerInvitedAttendee; 
@property (nonatomic,readonly) char cachedIsCurrentUserInvitedAttendee; 
@property (nonatomic,copy,readonly) id<EKProtocolParticipant> participantForMe; 
@property (nonatomic,copy,readonly) NSString * organizerName; 
@property (nonatomic,copy,readonly) NSURL * organizerURL; 
@property (nonatomic,copy,readonly) NSString * organizerEmail; 
@property (nonatomic,copy,readonly) NSString * organizerPhoneNumber; 
@property (nonatomic,copy,readonly) NSString * organizerEncodedLikenessData; 
@property (nonatomic,readonly) char organizedByMe; 
@property (nonatomic,readonly) char defaultAlarmWasDeleted; 
@property (nonatomic,readonly) char canBeConvertedToFullObject; 
@property (nonatomic,readonly) char isPartialObject; 
@property (nonatomic,readonly) NSDictionary * preFrozenRelationshipObjects; 
@property (nonatomic,readonly) NSManagedObjectID * managedObjectID; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) char allowsParticipantStatusModifications; 
@property (nonatomic,readonly) char hasAttendees; 
@property (nonatomic,readonly) char isScheduled; 
@property (nonatomic,copy) NSString * lunarCalendarString; 
@property (nonatomic,copy) NSDate * endDateUnadjustedFromUTC; 
@property (nonatomic,copy) NSTimeZone * endTimeZoneObject; 
@property (assign,nonatomic) int availabilityEnum; 
@property (nonatomic,copy) NSString * statusString; 
@property (assign,nonatomic) char needsGeocoding; 
@property (nonatomic,copy) NSString * privacyLevelString; 
@property (assign,nonatomic) double travelDuration; 
@property (nonatomic,copy) id<EKProtocolMutableStructuredLocation> ekStructuredStartLocation; 
@property (nonatomic,copy) id<EKProtocolMutableStructuredLocation> ekStructuredEndLocation; 
@property (nonatomic,copy) NSString * responseComment; 
@property (assign,nonatomic) char dontSendNotificationForChanges; 
@property (nonatomic,copy) NSString * travelAdvisoryBehaviorString; 
@property (assign,nonatomic) unsigned long long junkStatus; 
@property (assign,nonatomic) NSURL * conferenceURL; 
@property (nonatomic,copy) NSString * sliceParentID; 
@property (assign,nonatomic) char suggestionInfoAcknowledged; 
@property (assign,nonatomic) unsigned long long suggestionInfoChangedFields; 
@property (nonatomic,retain) NSString * suggestionInfoOpaqueKey; 
@property (nonatomic,retain) NSDate * suggestionInfoTimestamp; 
@property (nonatomic,retain) NSString * suggestionInfoUniqueKey; 
@property (nonatomic,readonly) unsigned long long participantsStatus; 
@property (nonatomic,readonly) NSString * nameForBirthday; 
@property (nonatomic,readonly) char isYearlessBirthday; 
@property (nonatomic,readonly) char isYearlessLeapMonthBirthday; 
@property (nonatomic,copy,readonly) NSDate * proposedStartDateUnadjustedFromUTCForMe; 
@property (nonatomic,copy,readonly) NSDate * proposedEndDateUnadjustedFromUTCForMe; 
@property (nonatomic,readonly) char allowsAvailabilityModifications; 
@property (nonatomic,readonly) NSString * sendersEmail; 
@property (nonatomic,readonly) NSString * sendersPhoneNumber; 
@property (nonatomic,readonly) char supportsJunkReporting; 
@property (nonatomic,readonly) EKEventStore * eventStore; 
+(id)participationStatusToString:(long long)arg1 ;
+(id)eventWithEventStore:(id)arg1 ;
+(Class)frozenClass;
+(id)knownImmutableKeys;
+(char)canonicalizedEqualityTestValue1:(id)arg1 value2:(id)arg2 key:(id)arg3 object1:(id)arg4 object2:(id)arg5 ;
+(id)itemWithIdentifier:(id)arg1 inStore:(id)arg2 ;
+(unsigned long long)hashForObject:(id)arg1 ;
+(id)singleValueDiffKeys;
+(id)multiValueDiffKeys;
+(id)knownRelationshipSingleValueKeys;
+(id)knownDerivedRelationshipKeys;
+(id)knownSingleValueKeys;
+(id)batchChangeNotificationName;
+(char)_isValidRecurrenceDate:(id)arg1 inSeries:(id)arg2 ;
+(id)_eventWithOriginalOccurrence:(id)arg1 forRecurrenceDate:(id)arg2 store:(id)arg3 ;
+(id)knownKeysToSkipForFutureChanges;
+(id)knownKeysToUseForFutureChanges;
+(id)_eventWithOriginalOccurrence:(id)arg1 forRecurrenceDate:(id)arg2 createPartialBackingObject:(char)arg3 eventStore:(id)arg4 ;
+(id)knownSummaryKeys;
+(id)_basicChangesRequiringSpanAll;
+(id)_additionalChangesRecommendingSpanAll;
+(id)_changesAffectingRecurrenceDate;
+(id)_locationStringForLocations:(id)arg1 ;
+(char)_isValidRecurrenceDate:(id)arg1 event:(id)arg2 master:(id)arg3 ;
+(id)_relatedCachedTimeKeys;
+(char)isMultiDayTimedEventWithStartDate:(id)arg1 endDate:(id)arg2 allDay:(char)arg3 inCalendar:(id)arg4 ;
+(char)_eventsFromSameSeriesAreOutOfOrderForEvent:(id)arg1 otherEvent:(id)arg2 ;
+(id)eventFromICSEvent:(id)arg1 withDocument:(id)arg2 inStore:(id)arg3 ;
+(id)_knownSkipValidationKeys;
+(id)_eventWithMasterEvent:(id)arg1 forRecurrenceDate:(id)arg2 ;
+(id)eventFromICSEvent:(id)arg1 inStore:(id)arg2 ;
+(id)_stringForEventStatus:(long long)arg1 ;
-(id)sg_eventMetadata;
-(id)sg_schemas;
-(char)sg_isCuratedEventFromSuggestionNewerThan:(SGUnixTimestamp_)arg1 ;
-(id)sg_fallbackURL;
-(id)pp_locationString;
-(char)pp_isConnectionFromFlight:(id)arg1 ;
-(char)pp_isDupeOfFlightEvent:(id)arg1 ;
-(char)pp_isDupeOfLodgingEvent:(id)arg1 ;
-(unsigned char)pp_suggestedCategory;
-(id)pp_airports;
-(id)pp_hotelName;
-(NSString *)description;
-(unsigned long long)participantStatus;
-(char)needsSuggestedLocation;
-(char)hasSuggestedLocation;
-(char)hasConfirmedSuggestedLocation;
-(char)hasRejectedSuggestion;
-(char)hasUserSpecifiedLocation;
-(char)hasTTLBeenTriggered;
-(char)ipsos_isTimeApproximate;
-(char)ipsos_isDateTimeTenseDependent;
-(void)setIpsos_isDateTimeTenseDependent:(char)arg1 ;
-(NSArray *)ipsos_dataFeatures;
-(void)setIpsos_dataFeatures:(NSArray *)arg1 ;
-(char)ipsos_isEndTimeApproximate;
-(void)setIpsos_isEndTimeApproximate:(char)arg1 ;
-(void)setIpsos_disableTimeAdjustment:(char)arg1 ;
-(char)ipsos_timeNeedsMeridianGuess;
-(IPEventClassificationType *)ipsos_eventClassificationType;
-(double)ipsos_confidence;
-(char)ipsos_allDayPreferred;
-(char)ipsos_isTimeOffset;
-(char)ipsos_isEventTimeOnlyAndReferrengingToSentDate;
-(double)ipsos_duration;
-(unsigned long long)ipsos_eventAttributes;
-(void)setIpsos_eventAttributes:(unsigned long long)arg1 ;
-(unsigned long long)ipsos_eventStatus;
-(char)ipsos_usesDefaultClassificationTypeStartTime;
-(IPMessageUnit *)ipsos_messageUnit;
-(void)setIpsos_eventClassificationType:(IPEventClassificationType *)arg1 ;
-(void)setIpsos_usesDefaultClassificationTypeStartTime:(char)arg1 ;
-(void)setIpsos_isTimeApproximate:(char)arg1 ;
-(void)setIpsos_confidence:(double)arg1 ;
-(void)setIpsos_messageUnit:(IPMessageUnit *)arg1 ;
-(void)setIpsos_eventStatus:(unsigned long long)arg1 ;
-(void)setIpsos_timeNeedsMeridianGuess:(char)arg1 ;
-(void)setIpsos_isEventTimeOnlyAndReferrengingToSentDate:(char)arg1 ;
-(void)setIpsos_isTimeOffset:(char)arg1 ;
-(void)setIpsos_allDayPreferred:(char)arg1 ;
-(char)ipsos_disableTimeAdjustment;
-(void)setIpsos_experimentalConfidence:(double)arg1 ;
-(void)setIpsos_usedBubblesCount:(unsigned long long)arg1 ;
-(unsigned long long)ipsos_usedBubblesCount;
-(double)ipsos_experimentalConfidence;
-(id)ipsos_betterDescription;
-(void)setURL:(NSURL *)arg1 ;
-(long long)status;
-(char)_reset;
-(NSDate *)endDate;
-(double)duration;
-(NSString *)title;
-(char)isEditable;
-(EKStructuredLocation *)endLocation;
-(char)isDetached;
-(void)setStatusString:(NSString *)arg1 ;
-(NSString *)statusString;
-(void)setStartDate:(NSDate *)arg1 ;
-(void)setEndDate:(NSDate *)arg1 ;
-(char)validate:(id*)arg1 ;
-(void)setAllDay:(char)arg1 ;
-(void)setNotes:(NSString *)arg1 ;
-(NSArray *)locations;
-(long long)availability;
-(NSString *)eventIdentifier;
-(void)setLocations:(NSArray *)arg1 ;
-(EKStructuredLocation *)preferredLocationWithoutPrediction;
-(void)setAvailability:(long long)arg1 ;
-(NSString *)locationWithoutPrediction;
-(NSArray *)locationsWithoutPrediction;
-(long long)participationStatus;
-(EKSuggestedEventInfo *)suggestionInfo;
-(EKStructuredLocation *)structuredLocation;
-(long long)compareStartDateWithEvent:(id)arg1 ;
-(void)setTravelDuration:(double)arg1 ;
-(double)travelDuration;
-(void)setTravelTime:(double)arg1 ;
-(double)travelTime;
-(char)refresh;
-(NSURL *)externalURL;
-(void)setIsDetached:(char)arg1 ;
-(id)masterEvent;
-(id)externalURI;
-(void)willSave;
-(unsigned long long)entityType;
-(NSArray *)notifications;
-(void)setEndTimeZone:(NSTimeZone *)arg1 ;
-(EKParticipant *)organizer;
-(NSTimeZone *)endTimeZone;
-(void)setSuggestionInfo:(EKSuggestedEventInfo *)arg1 ;
-(void)setTravelAdvisoryBehavior:(long long)arg1 ;
-(void)setEndLocation:(EKStructuredLocation *)arg1 ;
-(void)setStructuredLocation:(EKStructuredLocation *)arg1 ;
-(char)allowsParticipantStatusModifications;
-(char)allowsAvailabilityModifications;
-(int)availabilityEnum;
-(NSDate *)proposedStartDateUnadjustedFromUTCForMe;
-(NSDate *)proposedStartDate;
-(NSDate *)proposedEndDate;
-(unsigned long long)junkStatus;
-(char)isBirthday;
-(id)rawTitle;
-(char)isEvent;
-(id)occurrenceIdentifier;
-(char)allowsResponseCommentModifications;
-(id)singleChangedValueForKey:(id)arg1 ;
-(id)defaultAlarms;
-(char)_validateDeletable:(id*)arg1 ;
-(char)allowsAttendeesModifications;
-(char)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id*)arg3 ;
-(char)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 allowedRequirements:(long long)arg3 error:(id*)arg4 ;
-(char)canMoveOrCopyToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id*)arg3 ;
-(id)calendarItemIdentifier;
-(id)commitedItem;
-(void)setTimeZoneObject:(NSTimeZone *)arg1 ;
-(void)clearCachedTimeValues;
-(id)_chosenLocalUIDForDuplicate;
-(char)_validateEntityTypeIsSupported:(id*)arg1 ;
-(char)_validateEditable:(id*)arg1 ;
-(char)_validateAttendees:(id*)arg1 ;
-(char)_validateRecurrence:(id*)arg1 ;
-(char)_needsAttendeePartStatReset;
-(id)masterEventOccurrence;
-(id)detachedEvents;
-(char)allowsAttachmentModifications;
-(void)_applyKnownImmutableValuesFrom:(id)arg1 ;
-(id)calendarItemExternalIdentifier;
-(id)backingOccurrenceIdentifier;
-(id)commitedItemIgnoringPotentialSlice:(char)arg1 ;
-(id)_keysToChangeForDuplicateWithOptions:(long long)arg1 ;
-(void)_updateDatesForRecurrenceDate:(id)arg1 ;
-(id)durationComponents;
-(NSString *)lunarCalendarString;
-(NSDate *)endDateUnadjustedFromUTC;
-(NSTimeZone *)endTimeZoneObject;
-(NSString *)privacyLevelString;
-(char)needsGeocoding;
-(NSString *)travelAdvisoryBehaviorString;
-(NSURL *)conferenceURL;
-(id<EKProtocolMutableStructuredLocation>)ekStructuredStartLocation;
-(id<EKProtocolMutableStructuredLocation>)ekStructuredEndLocation;
-(unsigned long long)participantsStatus;
-(NSString *)responseComment;
-(char)dontSendNotificationForChanges;
-(char)isPhantom;
-(NSString *)sliceParentID;
-(NSDate *)sliceDate;
-(char)suggestionInfoAcknowledged;
-(void)setSuggestionInfoAcknowledged:(char)arg1 ;
-(unsigned long long)suggestionInfoChangedFields;
-(NSString *)suggestionInfoOpaqueKey;
-(NSDate *)suggestionInfoTimestamp;
-(NSString *)suggestionInfoUniqueKey;
-(NSString *)nameForBirthday;
-(char)isYearlessBirthday;
-(char)isYearlessLeapMonthBirthday;
-(NSDate *)proposedEndDateUnadjustedFromUTCForMe;
-(char)isSignificantlyDetached;
-(char)isSignificantlyDetachedIgnoringParticipation;
-(id)frozenObject;
-(char)needsResponse;
-(char)couldBeJunk;
-(NSString *)sendersEmail;
-(NSString *)sendersPhoneNumber;
-(char)supportsJunkReporting;
-(id)occurrenceForDate:(id)arg1 ;
-(NSDate *)occurrenceDate;
-(char)canBeReRepliedTo;
-(char)_hasOrHadRecurrenceRule;
-(char)validateWithSpan:(long long)arg1 error:(id*)arg2 ;
-(id)eventOccurrenceID;
-(char)automaticLocationGeocodingAllowed;
-(id)lastRecurrenceDate;
-(id)exceptionDates;
-(id)_dateUnadjustedFromUTCForNextOccurrenceAfterDate:(id)arg1 ;
-(char)shouldBeIncluded:(long long)arg1 ;
-(char)shouldBeIncludedIfIntersectsRange:(id)arg1 exclusionOptions:(long long)arg2 ;
-(char)isMainOccurrence;
-(char)hasChangesAffectingRecurrenceDate;
-(void)markAsSaved;
-(char)isOnlyOccurrence;
-(char)isUndetached;
-(char)isRedetached;
-(char)isUnexcepted;
-(char)_isSignificantlyDetachedForMaster:(id)arg1 ;
-(char)selfAttendeeStatusIsOnlyChangeWithDiff:(id)arg1 ;
-(long long)_eventAvailabilityForParticipantStatus:(long long)arg1 ;
-(void)setDontSendNotificationForChanges:(char)arg1 ;
-(char)hasUnsavedChangesToStartDate;
-(id)notificationsIncludingPast:(char)arg1 ;
-(id)notificationsForSeriesIncludingPast:(char)arg1 ;
-(void)setSliceDate:(NSDate *)arg1 ;
-(long long)requirementsToMoveFromCalendar:(id)arg1 toCalendar:(id)arg2 ;
-(id)_previousEndDateUnadjustedFromUTC;
-(void)setEndDateUnadjustedFromUTC:(NSDate *)arg1 ;
-(id)dropBoxLocation;
-(char)intersectsRangeIfFloating:(id)arg1 normalRange:(id)arg2 checkProposed:(char)arg3 ;
-(char)isAllDayDirty;
-(NSDate *)startDateIncludingTravel;
-(id)_effectiveTimeZone;
-(void)_setStartDate:(id)arg1 andClearProposedTimes:(char)arg2 ;
-(EKStructuredLocation *)travelStartLocation;
-(char)_isSimpleRepeatingEvent;
-(char)conformsToRecurrenceRules:(id)arg1 ;
-(id)_dateForNextOccurrence;
-(long long)privacyLevel;
-(unsigned long long)invitationStatus;
-(void)setInvitationStatus:(unsigned long long)arg1 ;
-(char)responseMustApplyToAll;
-(char)changingAllDayPropertyIsAllowed;
-(char)hasAttendeeProposedTimes;
-(char)validateRecurrenceRule:(id)arg1 error:(id*)arg2 ;
-(char)canDetachSingleOccurrence;
-(long long)compareStartDateIncludingTravelWithEvent:(id)arg1 ;
-(EKCalendarDate *)startCalendarDateIncludingTravelTime;
-(char)allowsPrivacyLevelModifications;
-(double)durationIncludingTravel;
-(EKCalendarDate *)startCalendarDate;
-(EKCalendarDate *)endCalendarDate;
-(char)isStatusDirty;
-(char)isProposedTimeEvent;
-(void)overrideStartDate:(id)arg1 ;
-(char)serverSupportedProposeNewTime;
-(char)supportsAddingAttachments;
-(long long)travelRoutingMode;
-(char)canBeRespondedTo;
-(void)setParticipationStatus:(long long)arg1 ;
-(id)startDateForRecurrence;
-(char)allowsSpansOtherThanThisEvent;
-(NSSet *)detachedItems;
-(char)isPrivateEventSharedToMe;
-(void)setJunkStatus:(unsigned long long)arg1 ;
-(unsigned long long)cachedJunkStatus;
-(void)setIsJunk:(char)arg1 shouldSave:(char)arg2 ;
-(void)setBirthdayContact:(id)arg1 ;
-(void)setLunarCalendarString:(NSString *)arg1 ;
-(NSString *)birthdayContactIdentifier;
-(char)isStartDateDirty;
-(char)isEndDateDirty;
-(char)_isPrivacySetInDelegateOrSharedToMeCalendar:(id)arg1 ;
-(char)isPrivacySet;
-(void)setPrivacyLevelString:(NSString *)arg1 ;
-(id)_preferredStructuredLocation;
-(void)setIsPhantom:(char)arg1 ;
-(char)_isNonDetachedOccurrenceInSeries;
-(void)setEndTimeZoneObject:(NSTimeZone *)arg1 ;
-(char)isPrivacySetInDelegateOrSharedToMeCalendar;
-(id)startDateIncludingTravelUnadjustedFromUTC;
-(void)_reconcileCachedSuggestionInfo;
-(void)setSuggestionInfoChangedFields:(unsigned long long)arg1 ;
-(void)setSuggestionInfoOpaqueKey:(NSString *)arg1 ;
-(void)setSuggestionInfoTimestamp:(NSDate *)arg1 ;
-(void)setSuggestionInfoUniqueKey:(NSString *)arg1 ;
-(void)setNotesCommon:(id)arg1 ;
-(void)setURLCommon:(id)arg1 ;
-(void)clearDetectedConferenceURL;
-(void)setEkStructuredStartLocation:(id<EKProtocolMutableStructuredLocation>)arg1 ;
-(void)setEkStructuredEndLocation:(id<EKProtocolMutableStructuredLocation>)arg1 ;
-(char)_hasChangesForSpanAllHelper:(char)arg1 ;
-(char)_hasBasicChangesRequiringSpanAll:(char)arg1 ;
-(char)_hasRecurrenceRuleChangeRequiringSpanAll;
-(char)_hasRecurrenceRuleChangeHelperIncludeAddition:(char)arg1 includeRemoval:(char)arg2 ;
-(void)setCachedJunkStatus:(unsigned long long)arg1 ;
-(char)_couldBeJunkCommon;
-(void)setTravelAdvisoryBehaviorString:(NSString *)arg1 ;
-(long long)travelAdvisoryBehavior;
-(void)setAvailabilityEnum:(int)arg1 ;
-(void)_updateAllDayForNewTimeZone:(id)arg1 ;
-(void)_updateEndTimeZoneForNewTimeZone:(id)arg1 ;
-(id)_updatedEndDateForNewTimeZone:(id)arg1 ;
-(void)setStructuredLocation:(id)arg1 preserveConferenceRooms:(char)arg2 ;
-(void)removeConferenceRooms:(id)arg1 ;
-(id)_conferenceRoomDisplayStrings;
-(char)_allowsAnyModificationsByAttendeesAndBeStrict:(char)arg1 ;
-(char)_currentUserInvitedButNotOrganizer;
-(char)_validAttendeeRemoval:(id)arg1 ;
-(char)allowsTravelTimeModifications;
-(id)_dateForNextOccurrenceAfterDate:(id)arg1 ;
-(char)updateEventToEvent:(id)arg1 commit:(char)arg2 ;
-(char)_requirementsToMoveOrCopyToCalendarHelperAllowedToMoveOrCopyEventFromCalendar:(id)arg1 toCalendar:(id)arg2 ;
-(char)_requirementsToMoveToCalendarHelperDuplicationRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2 ;
-(char)_requirementsToMoveToCalendarHelperAlterationsRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2 ;
-(char)_requirementsToMoveToCalendarHelperReinviteAttendeesRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2 ;
-(char)_requirementsToMoveToCalendarHelperNeedToRemoveOriginalToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2 ;
-(char)_requirementsToMoveToCalendarHelperRemoveAttendeesRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2 ;
-(char)_canMoveOrCopyFromCalendar:(id)arg1 toCalendar:(id)arg2 allowedRequirements:(long long)arg3 error:(id*)arg4 ;
-(char)_validateDatesWithError:(id*)arg1 ;
-(char)_validatePrivacyWithError:(id*)arg1 ;
-(char)_validateSpan:(long long)arg1 error:(id*)arg2 ;
-(char)_validateSuggestionInfoWithError:(id*)arg1 ;
-(char)hasChangesRequiringSpanAll;
-(void)_handlePartStatChange:(id)arg1 ;
-(char)hasResponseCommentChange;
-(void)_handleResponseCommentChange;
-(void)_addLikenessDataIfNeeded;
-(NSString *)futureLocalUidForSliceChild;
-(void)_updateDatesForStartDate:(id)arg1 ;
-(id)startOfDayForStartDateInCalendar:(id)arg1 ;
-(long long)daysSpannedInCalendar:(id)arg1 ;
-(id)_sortedExpandedEventsForSeriesTilLatestRelevantDateHelperEarlyDate:(id)arg1 laterDate:(id)arg2 ;
-(char)overlapsWithOrIsSameDayAsEventInSeries;
-(char)seriesHasOutOfOrderEvents;
-(char)alarmOverlapsWithEventInSeries;
-(id)_occurrenceDatesForCount:(unsigned long long)arg1 ;
-(char)eligibleForTravelAdvisories;
-(char)travelAdvisoryBehaviorIsEffectivelyEnabled;
-(char)locationIsAConferenceRoom;
-(id)detachedEventOccurrences;
-(id)diffFromCommitted;
-(char)isDifferentAndHasNewProposedTimeWithDiff:(id)arg1 ;
-(char)isDifferentWithDiff:(id)arg1 ;
-(char)isDifferentAndRequiresRescheduleWithDiff:(id)arg1 ;
-(char)isDifferentAndRequiresRSVPWithDiff:(id)arg1 ;
-(char)isDifferentAndHasUnscheduledAttendeesWithDiff:(id)arg1 ;
-(char)isDifferentAndHasOnlyUnscheduledAttendeesWithDiff:(id)arg1 ;
-(char)isDifferentExceptingPerUserPropertiesWithDiff:(id)arg1 ;
-(char)isDifferentAndHasForwardedAttendeesWithDiff:(id)arg1 ;
-(char)_diff:(id)arg1 isDifferentFromCommittedEventHelperRequiresReschedule:(char)arg2 ;
-(char)isDifferentAndModifiedAttendeesWithDiff:(id)arg1 ;
-(void)_respondToProposedTimeFromAttendee:(id)arg1 shouldAccept:(char)arg2 shouldCommit:(char)arg3 ;
-(char)durationOverlapsRecurrenceInterval;
-(char)seriesHasOverlappingOrOnSameDayOrOutOfOrderEvents;
-(char)isOutOfOrderWithEventInSeries;
-(char)_validateAlarmsEditable:(id*)arg1 requiresFurtherValidation:(char*)arg2 keysAlreadyValidated:(id)arg3 ;
-(char)_validateCalendarEditable:(id*)arg1 requiresFurtherValidation:(char*)arg2 keysAlreadyValidated:(id)arg3 ;
-(char)_validateAttendeePropertiesEditable:(id*)arg1 requiresFurtherValidation:(char*)arg2 keysAlreadyValidated:(id)arg3 ;
-(char)_validateResponseCommentEditable:(id*)arg1 requiresFurtherValidation:(char*)arg2 keysAlreadyValidated:(id)arg3 ;
-(char)_validateTravelTimeEditable:(id*)arg1 requiresFurtherValidation:(char*)arg2 keysAlreadyValidated:(id)arg3 ;
-(char)_validateAllDayEditable:(id*)arg1 requiresFurtherValidation:(char*)arg2 keysAlreadyValidated:(id)arg3 ;
-(char)_validateAvailability:(id*)arg1 requiresFurtherValidation:(char*)arg2 keysAlreadyValidated:(id)arg3 ;
-(char)_validateAttendeesEditable:(id*)arg1 requiresFurtherValidation:(char*)arg2 keysAlreadyValidated:(id)arg3 ;
-(char)_validateEditableHelperBasedOnChangesToKey:(id)arg1 checkBoolPropertiesAndValues:(id)arg2 error:(id*)arg3 errorCode:(long long)arg4 requiresFurtherValidation:(char*)arg5 keysAlreadyValidated:(id)arg6 ;
-(char)_validateEditableHelperBasedOnChangesToKey:(id)arg1 checkBoolProperty:(id)arg2 propertyValue:(char)arg3 error:(id*)arg4 errorCode:(long long)arg5 requiresFurtherValidation:(char*)arg6 keysAlreadyValidated:(id)arg7 ;
-(char)_hasChangesForOtherAttendees;
-(char)_hasAlternateTimeProposalChanges;
-(char)isDifferentFromCommittedEventAndRequiresRSVP;
-(char)_validatePrivacyForDeletion:(id*)arg1 ;
-(void)updateConferenceURLIfNeeded;
-(void)setNeedsGeocoding:(char)arg1 ;
-(void)setResponseComment:(NSString *)arg1 ;
-(void)setConferenceURL:(NSURL *)arg1 ;
-(void)setSliceParentID:(NSString *)arg1 ;
-(void)setPrivacyLevel:(long long)arg1 ;
-(char)supportsParticipationStatusModificationsWithoutNotification;
-(NSArray *)notificationsForSeries;
-(char)_startDateIsOnSameDayAsOtherEventInSeries;
-(id)_singleRelationshipKeysToCheckForChanges;
-(char)intersectsRangeIfFloating:(id)arg1 normalRange:(id)arg2 ;
-(int)attendeesStatus;
-(void)setTravelStartLocation:(EKStructuredLocation *)arg1 ;
-(char)hasChangesRecommendingSpanAll;
-(char)hasUnsavedChangesToEndDate;
-(NSString *)birthdayPersonUniqueID;
-(id)responseCommentForDisplay;
-(void)setAutoGeneratedResponseCommentForProposedStartDate:(id)arg1 ;
-(void)addConferenceRooms:(id)arg1 ;
-(char)allowsAlarmModifications;
-(char)internalAllowsAlarmModifications;
-(char)allowsAllDayModifications;
-(char)_validAttendeeModifications;
-(char)allowsAttendeeRemoval:(id)arg1 ;
-(char)allowsPrivateModifications;
-(char)allowsProposedTimeModifications;
-(char)_travelTimeModificationIsOK;
-(char)updateEventToEvent:(id)arg1 ;
-(long long)requirementsToMoveToCalendar:(id)arg1 ;
-(char)requiresCopyToMoveFromCalendar:(id)arg1 toCalendar:(id)arg2 ;
-(id)copyToCalendar:(id)arg1 withOptions:(long long)arg2 ;
-(char)isValidRecurrenceDate:(id)arg1 ;
-(void)_updateSliceDate:(id)arg1 ;
-(id)_newDetachedEventWithDetachedOccurrence:(id)arg1 forRecurrenceDate:(id)arg2 ;
-(id)_detachedEventForDetachedOccurrence:(id)arg1 forRecurrenceDate:(id)arg2 ;
-(id)startOfDayForEndDateInCalendar:(id)arg1 ;
-(char)isMultiDayTimedEventInCalendar:(id)arg1 ;
-(char)seriesHasOverlappingAlarms;
-(char)hasFieldsIncompatibleWithMoveToCalendar:(id)arg1 ;
-(long long)compareTimeEndingRecently:(id)arg1 ;
-(void)makeRecurrenceEndCountBased;
-(void)makeRecurrenceEndDateBased;
-(id)timeToLeaveAlarm;
-(void)setProposedStartDate:(NSDate *)arg1 ;
-(void)setProposedEndDate:(NSDate *)arg1 ;
-(char)isDifferentFromCommittedEventAndHasNewProposedTime;
-(char)isDifferentFromCommittedEventAndRequiresReschedule;
-(char)isDifferentFromCommittedEventAndHasUnscheduledAttendees;
-(char)isDifferentFromCommittedEventAndHasOnlyUnscheduledAttendees;
-(char)isDifferentFromCommittedEventExceptingPerUserProperties;
-(char)isDifferentFromCommittedEventAndHasForwardedAttendees;
-(char)isBackingObjectSignificantlyDetached;
-(char)isBackingObjectSignificantlyDetachedIgnoringParticipation;
-(char)isFirstOccurrence;
-(char)isLastOccurrence;
-(void)_downloadAttachments;
-(id)scanForConflicts;
-(void)acceptProposedTimeNotificationFromAttendee:(id)arg1 shouldCommit:(char)arg2 ;
-(void)declineProposedTimeNotificationFromAttendee:(id)arg1 shouldCommit:(char)arg2 ;
-(char)updateWithGeocodedMapItemAndSaveWithCommit:(id)arg1 eventStore:(id)arg2 error:(id*)arg3 ;
-(long long)birthdayPersonID;
-(void)setFutureLocalUidForSliceChild:(NSString *)arg1 ;
-(id)conferenceURLDetected;
-(id)_detectConferenceURL;
-(id)_prioritizedConferencesSources;
-(char)_hasChangesForConferenceURLDetection;
-(void)_updateConferenceURL;
-(char)_canWriteConferenceURL;
-(id)conferenceURLForDisplay;
@end

