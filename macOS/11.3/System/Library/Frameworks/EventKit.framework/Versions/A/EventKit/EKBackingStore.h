/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:36 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/EventKit.framework/Versions/A/EventKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue;
@class EKChangeTracker, EKBackingObjectsTracker, EKEventStore, EKEventOccurrenceCache, EKRecurrenceChangeManager, EKCalendarChangeHelper, NSObject, NSString, NSMutableSet, NSArray, EKCalendar;

@interface EKBackingStore : NSObject {

	char _accessToRemindersRequested;
	char _accessToEventsRequested;
	EKChangeTracker* _changeTracker;
	EKBackingObjectsTracker* _backingObjectsTracker;
	EKEventStore* _mainStore;
	EKEventOccurrenceCache* _occurrenceCache;
	EKRecurrenceChangeManager* _recurrenceChangeManager;
	EKCalendarChangeHelper* _calendarChangeHelper;
	NSObject*<OS_dispatch_queue> _backingObjectsQueue;
	NSObject*<OS_dispatch_queue> _noboCacheQueue;
	NSString* _backingStoreIdentifier;
	NSMutableSet* _identifiersToCommit;

}

@property (nonatomic,retain) NSObject*<OS_dispatch_queue> backingObjectsQueue;                       //@synthesize backingObjectsQueue=_backingObjectsQueue - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> noboCacheQueue;                            //@synthesize noboCacheQueue=_noboCacheQueue - In the implementation block
@property (nonatomic,retain) NSString * backingStoreIdentifier;                                      //@synthesize backingStoreIdentifier=_backingStoreIdentifier - In the implementation block
@property (nonatomic,retain) EKEventOccurrenceCache * occurrenceCache;                               //@synthesize occurrenceCache=_occurrenceCache - In the implementation block
@property (nonatomic,readonly) NSObject*<OS_dispatch_group> backingStoreAvailableGroup; 
@property (nonatomic,retain) NSMutableSet * identifiersToCommit;                                     //@synthesize identifiersToCommit=_identifiersToCommit - In the implementation block
@property (nonatomic,readonly) NSArray * sourceFilters; 
@property (nonatomic,readonly) EKChangeTracker * changeTracker;                                      //@synthesize changeTracker=_changeTracker - In the implementation block
@property (nonatomic,readonly) EKBackingObjectsTracker * backingObjectsTracker;                      //@synthesize backingObjectsTracker=_backingObjectsTracker - In the implementation block
@property (nonatomic,readonly) unsigned long long options; 
@property (assign,nonatomic,__weak) EKEventStore * mainStore;                                        //@synthesize mainStore=_mainStore - In the implementation block
@property (nonatomic,readonly) EKRecurrenceChangeManager * recurrenceChangeManager;                  //@synthesize recurrenceChangeManager=_recurrenceChangeManager - In the implementation block
@property (nonatomic,readonly) EKCalendarChangeHelper * calendarChangeHelper;                        //@synthesize calendarChangeHelper=_calendarChangeHelper - In the implementation block
@property (assign,nonatomic) char accessToRemindersRequested;                                        //@synthesize accessToRemindersRequested=_accessToRemindersRequested - In the implementation block
@property (assign,nonatomic) char accessToEventsRequested;                                           //@synthesize accessToEventsRequested=_accessToEventsRequested - In the implementation block
@property (assign,nonatomic) EKCalendar * defaultCalendarForNewEvents; 
@property (assign,nonatomic) EKCalendar * defaultCalendarForNewReminders; 
@property (nonatomic,readonly) EKCalendar * suggestedEventCalendar; 
@property (nonatomic,readonly) EKCalendar * naturalLanguageSuggestedEventCalendar; 
+(id)createNonPartialFrozenObjectForPartialObject:(id)arg1 withFrozenClass:(Class)arg2 ;
+(id)ekBackingStoreHandle;
-(id)init;
-(id)calendarWithIdentifier:(id)arg1 ;
-(unsigned long long)options;
-(id)allEvents;
-(void)resetCache;
-(id)allSources;
-(EKEventStore *)mainStore;
-(id)initWithBackingStore:(id)arg1 ;
-(char)shouldPermitOrganizerEmailFromJunkChecks:(id)arg1 ;
-(char)shouldPermitOrganizerPhoneNumberFromJunkChecks:(id)arg1 ;
-(id)diffFromCommittedItemForItem:(id)arg1 ;
-(id)committedItemForItem:(id)arg1 ;
-(id)_itemWithIdentifier:(id)arg1 ;
-(id)createNonPartialFrozenObjectForPartialObject:(id)arg1 withFrozenClass:(Class)arg2 ;
-(id)_updatedBackingItemWithIdentifier:(id)arg1 commit:(char)arg2 ;
-(char)revertItems:(id)arg1 ;
-(id)seriesForRecurrenceSetID:(id)arg1 ;
-(id)remindersWithCalendarIdentifiers:(id)arg1 ;
-(id)allReminders;
-(void)setAccessToEventsRequested:(char)arg1 ;
-(void)setAccessToRemindersRequested:(char)arg1 ;
-(void)refreshBackingStore;
-(void)setMainStore:(EKEventStore *)arg1 ;
-(id)copyForBackgroundUpdate;
-(NSArray *)sourceFilters;
-(char)finishBatchOfObjectsWithIdentifiers:(id)arg1 error:(id*)arg2 ;
-(void)_accessNotificationsIfNecessary;
-(void)_accessErrorsIfNecessary;
-(void)_postBatchedChangeNotification:(id)arg1 forObjects:(id)arg2 ;
-(void)refreshSources;
-(char)accessToEventsRequested;
-(char)accessToRemindersRequested;
-(id)allCalendars;
-(id)allFrozenOrNewCalendars;
-(id)allFrozenOrNewCalendarsMatchingBlock:(/*^block*/id)arg1 ;
-(id)allEventCalendars;
-(id)acquireDefaultCalendarForEntityType:(unsigned long long)arg1 ;
-(id)defaultCalendarForEntityType:(unsigned long long)arg1 ;
-(EKCalendar *)defaultCalendarForNewReminders;
-(void)setDefaultCalendarForNewEvents:(EKCalendar *)arg1 ;
-(void)setDefaultCalendarForNewReminders:(EKCalendar *)arg1 ;
-(EKCalendar *)suggestedEventCalendar;
-(void)insertSuggestedEventCalendar;
-(EKCalendar *)naturalLanguageSuggestedEventCalendar;
-(id)allDelegateSources;
-(id)sourceWithIdentifier:(id)arg1 ;
-(id)subscribedCalendarSource;
-(id)birthdayCalendarSource;
-(id)sourceErrors;
-(id)allNotificationsIncludingPast:(char)arg1 ;
-(char)batchAcknowledgeNotifications:(id)arg1 error:(id*)arg2 ;
-(char)batchAcceptAlternateTimeProposal:(id)arg1 error:(id*)arg2 ;
-(char)batchRespondToInvitations:(id)arg1 withStatus:(long long)arg2 exceptForDates:(id)arg3 notifyOrganizer:(char)arg4 placingInCalendar:(id)arg5 error:(id*)arg6 ;
-(char)batchRespondToSharedCalendarInvitation:(id)arg1 withStatus:(unsigned long long)arg2 error:(id*)arg3 ;
-(char)batchSaveNotifications:(id)arg1 error:(id*)arg2 ;
-(id)itemWithIdentifier:(id)arg1 apiExpected:(char)arg2 ;
-(char)batchSaveReminder:(id)arg1 error:(id*)arg2 ;
-(char)batchChangeCalendar:(id)arg1 error:(id*)arg2 ;
-(char)batchDeleteCalendar:(id)arg1 error:(id*)arg2 ;
-(char)batchChangeSource:(id)arg1 error:(id*)arg2 ;
-(char)batchDeleteSource:(id)arg1 error:(id*)arg2 ;
-(id)itemsWithIdentifiers:(id)arg1 apiExpected:(char)arg2 ;
-(EKBackingObjectsTracker *)backingObjectsTracker;
-(char)batchSaveEvents:(id)arg1 span:(long long)arg2 error:(id*)arg3 ;
-(char)batchRemoveEvent:(id)arg1 span:(long long)arg2 error:(id*)arg3 ;
-(id)itemsWithExternalIdentifier:(id)arg1 ofType:(unsigned long long)arg2 ;
-(id)eventsWithCalendarIdentifiers:(id)arg1 ;
-(id)occurrencesForSeries:(id)arg1 onDate:(id)arg2 ;
-(id)occurrencesForMultipleSeries:(id)arg1 inRange:(id)arg2 ;
-(NSObject*<OS_dispatch_group>)backingStoreAvailableGroup;
-(EKCalendar *)defaultCalendarForNewEvents;
-(id)allNotifications;
-(id)initWithSourceFilters:(id)arg1 options:(unsigned long long)arg2 accessRequestedForEvents:(char)arg3 accessRequestedForReminders:(char)arg4 orWithExistingStore:(id)arg5 ;
-(EKChangeTracker *)changeTracker;
-(NSObject*<OS_dispatch_queue>)backingObjectsQueue;
-(NSObject*<OS_dispatch_queue>)noboCacheQueue;
-(EKEventOccurrenceCache *)occurrenceCache;
-(void)_emptyCache;
-(id)_copyForBackgroundUpdate;
-(id)_itemsWithCalendarIdentifiers:(id)arg1 ;
-(id)remindersWithDueDatesInRange:(id)arg1 withCalendarIdentifiers:(id)arg2 withCompletion:(id)arg3 ;
-(id)_allItemIdentifiers;
-(id)_baseItemWithIdentifier:(id)arg1 ;
-(id)remindersWithIsCompleted:(char)arg1 maxResults:(unsigned long long)arg2 withCalendarIdentifiers:(id)arg3 ;
-(void)_logIfNoAccessRequested;
-(char)_interestedInAndAuthorizedForEntityType:(unsigned long long)arg1 ;
-(id)lookupItemsWithIdentifiers:(id)arg1 type:(unsigned long long)arg2 ;
-(id)_apiExpectedEventForEvent:(id)arg1 ;
-(id)lookupItemsWithExternalIdentifier:(id)arg1 type:(unsigned long long)arg2 ;
-(id)_itemsWithExternalIdentifier:(id)arg1 ;
-(id)_itemWithIdentifier:(id)arg1 options:(long long)arg2 ;
-(id)_updatedBackingItemWithIdentifier:(id)arg1 commit:(char)arg2 options:(long long)arg3 ;
-(id)_backingItemWithUpdatedCalendarForItem:(id)arg1 ;
-(id)itemWithIdentifier:(id)arg1 ;
-(id)exceptionsForLocalUID:(id)arg1 ;
-(void)_markObjectAsCommitted:(id)arg1 ;
-(id)_updatedBackingCalendarWithIdentifier:(id)arg1 commit:(char)arg2 ;
-(id)commitedEventForEvent:(id)arg1 ignoringPotentialSlice:(char)arg2 ;
-(id)diffFromCommittedItemForItem:(id)arg1 ignoringPotentialSlice:(char)arg2 ;
-(id)occurrencesForSeries:(id)arg1 inRange:(id)arg2 ;
-(id)occurrencesForSeries:(id)arg1 inRange:(id)arg2 exclusionOptions:(long long)arg3 ;
-(id)_expandOccurrencesForSeries:(id)arg1 inRange:(id)arg2 exclusionOptions:(long long)arg3 ;
-(id)occurrencesForMultipleSeries:(id)arg1 inRange:(id)arg2 exclusionOptions:(long long)arg3 ;
-(id)detachedEventsForLocalUID:(id)arg1 ;
-(id)lastOccurrenceInSeries:(id)arg1 exclusionOptions:(long long)arg2 ;
-(char)canCachePredicate:(id)arg1 ;
-(id)_expandGeneralLookupPredicate:(id)arg1 ;
-(id)_expandEventRangePredicate:(id)arg1 ;
-(id)_expandEventRangePredicateReturningCounts:(id)arg1 ;
-(id)notificationsForEvent:(id)arg1 includePast:(char)arg2 ;
-(id)notificationsForEvent:(id)arg1 isForSeries:(char)arg2 includePast:(char)arg3 ;
-(id)notificationsForCalendar:(id)arg1 includePast:(char)arg2 ;
-(id)_allCalendars;
-(id)_allCalendarIdentifiers;
-(id)_calendarWithIdentifier:(id)arg1 ;
-(id)_baseCalendarWithIdentifier:(id)arg1 ;
-(id)_backingCalendarWithUpdatedSourceForCalendar:(id)arg1 ;
-(id)_updatedBackingSourceWithIdentifier:(id)arg1 commit:(char)arg2 ;
-(long long)notificationCountForCalendar:(id)arg1 includePast:(char)arg2 ;
-(id)_notificationWithIdentifier:(id)arg1 ;
-(id)_allSourceIdentifiers;
-(id)_sourceWithIdentifier:(id)arg1 ;
-(id)_baseSourceWithIdentifier:(id)arg1 ;
-(id)_createSubscribedCalendarSource;
-(id)_createBirthdayCalendarSource;
-(id)_ekSourceErrorFromError:(id)arg1 ;
-(id)notificationsForSource:(id)arg1 includePast:(char)arg2 ;
-(id)_allNotificationIdentifiers;
-(id)_updatedBackingNotificationWithIdentifier:(id)arg1 commit:(char)arg2 ;
-(id)_baseNotificationWithIdentifier:(id)arg1 ;
-(char)_batchSaveEventsForSpanThis:(id)arg1 error:(id*)arg2 ;
-(char)batchChangeAllOrFuture:(id)arg1 span:(long long)arg2 error:(id*)arg3 ;
-(char)_batchChange:(id)arg1 rebin:(char)arg2 error:(id*)arg3 ;
-(char)_batchChangeAllOrFuture:(id)arg1 span:(long long)arg2 error:(id*)arg3 ;
-(char)_batchChangePassedInEventForFutureChange:(id)arg1 error:(id*)arg2 ;
-(char)_batchChangeAll:(id)arg1 error:(id*)arg2 ;
-(char)_batchChangeFuture:(id)arg1 error:(id*)arg2 ;
-(id)_changesToSkipWhenApplyingAllForEvent:(id)arg1 ;
-(EKCalendarChangeHelper *)calendarChangeHelper;
-(EKRecurrenceChangeManager *)recurrenceChangeManager;
-(char)_batchChange:(id)arg1 appliesToMaster:(char)arg2 error:(id*)arg3 ;
-(char)_marksAsSavedAfterBatchChange;
-(char)batchDeleteAllOrFuture:(id)arg1 span:(long long)arg2 error:(id*)arg3 ;
-(char)batchDelete:(id)arg1 error:(id*)arg2 ;
-(char)_batchDelete:(id)arg1 appliesToMaster:(char)arg2 deleteFuture:(char)arg3 error:(id*)arg4 ;
-(char)_handleRegeneratingReminderBehaviorForReminder:(id)arg1 error:(id*)arg2 ;
-(char)batchChange:(id)arg1 error:(id*)arg2 ;
-(char)_batchChange:(id)arg1 appliesToMaster:(char)arg2 rebin:(char)arg3 error:(id*)arg4 ;
-(void)_notifyChangedItem:(id)arg1 ;
-(void)_handleAppliesToMasterChangesForItem:(id)arg1 ;
-(void)_handleAppliesToInstanceChangesForItem:(id)arg1 ;
-(void)_propagateNonDateChangesToDetachedForMaster:(id)arg1 ;
-(char)_handleAppliesToInstanceOfRecurringSeriesForEvent:(id)arg1 ;
-(void)_detachEvent:(id)arg1 ;
-(void)_unexceptEvent:(id)arg1 ;
-(void)_undetachEvent:(id)arg1 ;
-(void)_redetachEvent:(id)arg1 ;
-(char)_batchChangeCalendar:(id)arg1 error:(id*)arg2 ;
-(char)_batchDeleteCalendar:(id)arg1 error:(id*)arg2 ;
-(char)_batchChangeSource:(id)arg1 error:(id*)arg2 ;
-(id)_cancelledEventsForNotifications:(id)arg1 ;
-(id)_suggestedEventsForNotificationsClearingChangedField:(id)arg1 ;
-(char)_batchAcknowledgeNotifications:(id)arg1 error:(id*)arg2 ;
-(char)_respondToProposedStartDate:(id)arg1 forEvent:(id)arg2 error:(id*)arg3 ;
-(char)_batchRespondToEvents:(id)arg1 invitations:(id)arg2 withStatus:(long long)arg3 notifyOrganizer:(char)arg4 placingInCalendar:(id)arg5 error:(id*)arg6 ;
-(char)_createConflictsForEvent:(id)arg1 onDates:(id)arg2 error:(id*)arg3 ;
-(char)_batchSaveNotifications:(id)arg1 error:(id*)arg2 ;
-(char)_respondToEvents:(id)arg1 withStatus:(long long)arg2 notifyOrganizer:(char)arg3 placingInCalendar:(id)arg4 error:(id*)arg5 ;
-(char)_batchRespondToSharedCalendarInvitation:(id)arg1 withStatus:(unsigned long long)arg2 error:(id*)arg3 ;
-(void)setIdentifiersToCommit:(NSMutableSet *)arg1 ;
-(void)_prepareToFinishBatch;
-(id)_filteredIdentifiersToCommit:(id)arg1 ;
-(char)_finishBatch:(id*)arg1 ;
-(void)_notifyChangedSources:(id)arg1 changedCalendars:(id)arg2 changedItems:(id)arg3 changedNotifications:(id)arg4 changedSuggestedEvents:(char)arg5 ;
-(NSMutableSet *)identifiersToCommit;
-(void)_prepareToCommitItems;
-(void)_acknowledgeNotificationsForChangedItems:(id)arg1 ;
-(void)_acknowledgeNotificationsForDeletedItems:(id)arg1 ;
-(char)_commit:(id*)arg1 ;
-(char)_commitNotifications;
-(char)_commitSources;
-(char)_commitCalendars;
-(char)_commitItems;
-(char)_commitCreatedSources;
-(char)_commitUpdatedSources;
-(char)_commitDeletedSources;
-(char)_commitCreatedCalendars;
-(char)_commitUpdatedCalendars;
-(char)_commitDeletedCalendars;
-(char)_commitCreatedItems;
-(char)_commitUpdatedItems;
-(char)_commitDeletedItems;
-(char)_commitExceptions;
-(char)_shouldCommitObjectWithIdentifier:(id)arg1 ;
-(char)_commitCreatedNotifications;
-(char)_commitAcknowledgedNotifications;
-(char)_commitUpdatedNotifications;
-(char)_commitMovedNotifications;
-(id)_batchChangeUserInfoForObjects:(id)arg1 ;
-(char)_revertItems:(id)arg1 notify:(char)arg2 ;
-(void)_revertTrackedChangesForIdentifiers:(id)arg1 ;
-(void)_postRevertedEventsNotification:(id)arg1 ;
-(char)_revertCalendars:(id)arg1 notify:(char)arg2 ;
-(void)_postRevertedCalendarsNotification:(id)arg1 ;
-(char)_revertSources:(id)arg1 notify:(char)arg2 ;
-(void)adjustDetachedEvents:(id)arg1 andExceptions:(id)arg2 onSeries:(id)arg3 sliceOffset:(id)arg4 ;
-(void)_notifyChangedSources:(id)arg1 changedCalendars:(id)arg2 changedItems:(id)arg3 changedNotifications:(id)arg4 ;
-(char)_supportsChangingIdentifiers;
-(id)cachedRange;
-(void)pruneCacheForRange:(id)arg1 ;
-(void)pruneCacheForDisjointRange:(id)arg1 ;
-(void)pruneCacheForDisjointRange:(id)arg1 occurrencesToKeep:(id)arg2 ;
-(void)_updateFromBackingStore:(id)arg1 ;
-(id)_eventsWithCalendarIdentifiers:(id)arg1 ;
-(id)_remindersWithCalendarIdentifiers:(id)arg1 ;
-(id)remindersWithDueDates;
-(id)_remindersWithDueDatesInRange:(id)arg1 withCalendarIdentifiers:(id)arg2 withCompletion:(id)arg3 ;
-(id)remindersWithIsCompleted:(char)arg1 maxResults:(unsigned long long)arg2 ;
-(id)remindersWithContactIdentifier:(id)arg1 ;
-(id)_remindersWithContactIdentifier:(id)arg1 ;
-(id)_remindersWithIsCompleted:(char)arg1 maxResults:(unsigned long long)arg2 withCalendarIdentifiers:(id)arg3 ;
-(id)_lookupItemsWithIdentifiers:(id)arg1 type:(unsigned long long)arg2 ;
-(id)_lookupItemsWithExternalIdentifier:(id)arg1 type:(unsigned long long)arg2 ;
-(id)_itemWithUpdatedCalendarForItem:(id)arg1 ;
-(id)commitedEventForEvent:(id)arg1 ;
-(char)eventsExistOnCalendar:(id)arg1 ;
-(char)futureScheduledEventsExistOnCalendar:(id)arg1 ;
-(char)eventsMarkedScheduleAgentClientExistOnCalendar:(id)arg1 ;
-(id)lastOccurrenceInSeries:(id)arg1 ;
-(id)expandAndCachePredicate:(id)arg1 ;
-(id)expandAndCachePredicateReturningCounts:(id)arg1 ;
-(void)_addDetachedEvent:(id)arg1 ;
-(void)_removeDetachedEvent:(id)arg1 ;
-(void)_shiftDetachedEvent:(id)arg1 to:(id)arg2 ;
-(void)_removeException:(id)arg1 ;
-(void)_addException:(id)arg1 ;
-(id)notificationsForEvent:(id)arg1 ;
-(id)notificationsForEvent:(id)arg1 isForSeries:(char)arg2 ;
-(id)allReminderCalendars;
-(id)diffFromCommittedCalendarForCalendar:(id)arg1 ;
-(id)committedCalendarForCalendar:(id)arg1 ;
-(void)insertNaturalLanguageSuggestedEventCalendar;
-(id)errorForCalendar:(id)arg1 ;
-(long long)notificationCountForCalendar:(id)arg1 ;
-(id)notificationsForCalendar:(id)arg1 ;
-(id)errorForSource:(id)arg1 ;
-(id)notificationsForSource:(id)arg1 ;
-(char)finishBatch:(id*)arg1 ;
-(void)_notifyErrorStateChanged;
-(id)createNonPartialObjectForPartialObject:(id)arg1 withMeltedClass:(Class)arg2 ;
-(char)revertCalendars:(id)arg1 ;
-(char)revertSources:(id)arg1 ;
-(void)undeleteFuture:(id)arg1 originalMaster:(id)arg2 ;
-(void)readdDetachedEvents:(id)arg1 andExceptions:(id)arg2 toSeries:(id)arg3 ;
-(id)changeTrackerCopy;
-(void)replaceChangeTracker:(id)arg1 ;
-(void)setOccurrenceCache:(EKEventOccurrenceCache *)arg1 ;
-(void)setBackingObjectsQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(void)setNoboCacheQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(NSString *)backingStoreIdentifier;
-(void)setBackingStoreIdentifier:(NSString *)arg1 ;
@end

