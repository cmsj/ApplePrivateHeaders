/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:53 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/ImageKit.framework/Versions/A/ImageKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <ImageKit/ImageKit-Structs.h>
@class IKMipmapItem;

@interface IKMipmapImage : NSObject {

	IKMipmapItem* _mipmaps[4];
	IKMipmapItem* _originalMipmap;
	IKMipmapItem* _varyingMipmap;
	CGSize _originalImageSizeCache;
	unsigned _originalImageIsInvalid : 1;
	unsigned _dirty : 1;
	unsigned _mark : 1;
	unsigned _isReference : 1;

}
-(void)integrateReferenceInstance:(id)arg1 ;
-(id)referenceInstance;
-(void)setIsReference:(char)arg1 ;
-(void)referenceWillDie;
-(void)_mipmapCommonInit;
-(void)setMipmapSizes:(id)arg1 ;
-(void)setMipmapVMUsagePolicy:(id)arg1 ;
-(int)highestMipmapItemIndex;
-(void)setOriginalImageSizeCache:(CGSize)arg1 ;
-(void)invalidateMipMaps;
-(char)validateMipmap:(id)arg1 withModel:(id)arg2 withQuality:(int)arg3 ;
-(id)highestMipmapItem;
-(void)checkAndMarkMipmapAsInvalid;
-(char)validateMipmap:(id)arg1 withQuality:(int)arg2 ;
-(id)mipmapWithSize:(int)arg1 ;
-(id)fastMipmapItemForSize:(int)arg1 forOpenGL:(char)arg2 useMinimumQualityThreshold:(char)arg3 ;
-(id)validMipmapItems;
-(id)_fastMipmapItemForSize:(CGSize)arg1 forOpenGL:(char)arg2 useMinimumQualityThreshold:(char)arg3 ;
-(char)varyingMipmapIsValidAndMatchSize:(CGSize)arg1 andQuality:(int)arg2 ;
-(void)_cacheMipmapSize:(CGSize)arg1 fromModel:(id)arg2 ;
-(CGSize)originalImageSizeCache;
-(char)shouldUseOriginalImageToCacheNiceImageWithSize:(CGSize)arg1 ;
-(id)nicestMipmapItemForSize:(CGSize)arg1 forGLRendering:(char)arg2 cacheIt:(char)arg3 ;
-(id)niceMipmapItemForSize:(CGSize)arg1 forGLRendering:(char)arg2 cacheIt:(char)arg3 ;
-(id)fastMipmapItemForSize:(CGSize)arg1 forGLRendering:(char)arg2 ;
-(id)fastestMipmapItemForSize:(CGSize)arg1 forGLRendering:(char)arg2 ;
-(id)lockMipmapAtIndex:(int)arg1 ;
-(void)unlockMipmapItem:(id)arg1 ;
-(id*)mipmapItems;
-(id)varyingMipmap;
-(void)setOriginalImageIsInvalid:(char)arg1 ;
-(char)originalImageIsInvalid;
-(id)initWithMipmapSizes:(id)arg1 VMUsagePolicy:(id)arg2 ;
-(void)clearMark;
-(id)mipmapItemAtIndex:(long long)arg1 ;
-(long long)indexOfMipmapItem:(id)arg1 ;
-(void)invalidateOriginalImageSizeCache;
-(void)setImageWithoutInvalidate:(id)arg1 ;
-(char)atLeastOneMipmapItemIsValid;
-(char)allMipmapItemsAreValid;
-(char)validateMipmapAtIndex:(int)arg1 withQuality:(int)arg2 ;
-(int)bestMipmapIndexToValidateForSize:(int)arg1 ;
-(void)setImage:(id)arg1 forMipmapSize:(int)arg2 ;
-(id)fastMipmapItemWithExactSize:(CGSize)arg1 ;
-(id)nicestImageForSize:(CGSize)arg1 forGLRendering:(char)arg2 cacheIt:(char)arg3 ;
-(id)niceImageForSize:(CGSize)arg1 forGLRendering:(char)arg2 cacheIt:(char)arg3 ;
-(id)fastImageForSize:(CGSize)arg1 forGLRendering:(char)arg2 ;
-(id)fastestImageForSize:(CGSize)arg1 forGLRendering:(char)arg2 ;
-(char)preloadMipmapsWithQuality:(int)arg1 ;
-(char)containsMipmapItem:(id)arg1 ;
-(void)freeAllCaches;
-(void)freeTemporaryCache;
-(void)freeOriginalImageCache;
-(void)finalize;
-(void)dealloc;
-(id)init;
-(void)setDirty:(char)arg1 ;
-(void)setImage:(id)arg1 ;
-(id)image;
-(char)isDirty;
-(void)_cleanUp;
-(CGSize)originalImageSize;
-(void)mark;
-(char)marked;
-(float)originalAspectRatio;
-(id)originalItem;
@end

