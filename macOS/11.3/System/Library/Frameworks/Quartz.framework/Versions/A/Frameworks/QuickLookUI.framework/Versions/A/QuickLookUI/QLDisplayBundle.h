/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:46 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/Quartz.framework/Versions/A/Frameworks/QuickLookUI.framework/Versions/A/QuickLookUI
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <QuickLookUI/QuickLookUI-Structs.h>
#import <libobjc.A.dylib/QLAccessibilityUIElementDelegate.h>
#import <libobjc.A.dylib/QLPreviewPageNavigationDataSource.h>
#import <libobjc.A.dylib/QLTimeSliderDataSource.h>
#import <libobjc.A.dylib/QLDisplayable.h>
#import <libobjc.A.dylib/NSPasteboardWriting.h>

@protocol QLDisplayBundleOwner;
@class NSView, CALayer, QLDisplayBundleViewController, NSResponder, NSDictionary, QLPreview, NSMutableArray, NSUUID, NSArray, DMFCategoryPolicyMonitor, DMFApplicationPolicyMonitor, NSString, NSURL, NSTouchBar;

@interface QLDisplayBundle : NSObject <QLAccessibilityUIElementDelegate, QLPreviewPageNavigationDataSource, QLTimeSliderDataSource, QLDisplayable, NSPasteboardWriting> {

	QLPreview* _preview;
	id<QLDisplayBundleOwner> _owner;
	NSMutableArray* _accessoryControllers;
	int _activation;
	int _visibility;
	NSUUID* _operationUUID;
	int _activationCount;
	char _isObservingOwner;
	QLDisplayBundleViewController* _qlViewController;
	NSArray* _invalidModes;
	char _inMarkup;
	char _documentDirty;
	long long _currentScreentimePolicy;
	DMFCategoryPolicyMonitor* _screentimeCategoryPolicyMonitor;
	DMFApplicationPolicyMonitor* _screentimeApplicationPolicyMonitor;

}

@property (readonly) NSDictionary * accessibilityUIElements; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (readonly) unsigned long long numberOfPages; 
@property (assign) unsigned long long currentPage; 
@property (readonly) double defaultPageThumbnailRatio; 
@property (assign) char playing; 
@property (readonly) double duration; 
@property (assign) double currentTime; 
@property (assign) double seekTolerance; 
@property (assign) char showRemainingTime; 
@property (readonly) char needsVolumeControl; 
@property (readonly) char hidePlayControl; 
@property (assign) char muted; 
@property (assign) float volume; 
@property (readonly) char autoplay; 
@property (retain) NSUUID * operationUUID;                                                        //@synthesize operationUUID=_operationUUID - In the implementation block
@property (retain) QLDisplayBundleViewController * qlViewController;                              //@synthesize qlViewController=_qlViewController - In the implementation block
@property (assign) char inMarkup;                                                                 //@synthesize inMarkup=_inMarkup - In the implementation block
@property (retain) DMFCategoryPolicyMonitor * screentimeCategoryPolicyMonitor;                    //@synthesize screentimeCategoryPolicyMonitor=_screentimeCategoryPolicyMonitor - In the implementation block
@property (retain) DMFApplicationPolicyMonitor * screentimeApplicationPolicyMonitor;              //@synthesize screentimeApplicationPolicyMonitor=_screentimeApplicationPolicyMonitor - In the implementation block
@property (assign) long long currentScreentimePolicy;                                             //@synthesize currentScreentimePolicy=_currentScreentimePolicy - In the implementation block
@property (retain) QLPreview * preview;                                                           //@synthesize preview=_preview - In the implementation block
@property (readonly) NSString * displayBundleID; 
@property (retain,readonly) id<QLPreviewItem> previewItem; 
@property (readonly) NSURL * URL; 
@property (retain) id<QLDisplayBundleOwner> owner;                                                //@synthesize owner=_owner - In the implementation block
@property (readonly) char isLoaded; 
@property (readonly) char isRemote; 
@property (readonly) char isWindowKey; 
@property (readonly) char canBeReused; 
@property (readonly) int activationState; 
@property (readonly) char activated; 
@property (readonly) char deactivated; 
@property (readonly) int displayFlags; 
@property (readonly) int additionalDisplayFlags; 
@property (readonly) int disabledDisplayFlags; 
@property (readonly) NSString * customDisplayName; 
@property (readonly) NSString * displayNameComplement; 
@property (readonly) char canShowTitleInBubble; 
@property (readonly) char canShowOpenButton; 
@property (readonly) char needsTimeControl; 
@property (readonly) char isDisplayingError; 
@property (readonly) char opaque; 
@property (readonly) char viewUsesLayer; 
@property (retain) id displayState; 
@property (assign) char highlighted; 
@property (readonly) int mode; 
@property (readonly) int flavor; 
@property (readonly) int backgroundStyle; 
@property (readonly) unsigned long long overlayVisibilityOptions; 
@property (readonly) char shouldShowInlinePreviewControls; 
@property (readonly) char shouldShowInlinePreviewContent; 
@property (readonly) char keepThumbnailUnderInlinePreview; 
@property (readonly) char hasHorizontalScroller; 
@property (assign,nonatomic) int visibility;                                                      //@synthesize visibility=_visibility - In the implementation block
@property (readonly) CALayer * contentLayer; 
@property (readonly) NSView * dragContentView; 
@property (readonly) char shouldDrawBubbleBackground; 
@property (readonly) double backingScaleFactor; 
@property (readonly) CGRect contentFrame; 
@property (readonly) CGRect opaqueFrame; 
@property (readonly) CGRect contentFrameForSeamlessOpening; 
@property (readonly) NSDictionary * sizingConstraints; 
@property (readonly) char scalable; 
@property (readonly) char fullyLoaded; 
@property (readonly) char guessedOptimalSize; 
@property (readonly) char delegatesControls; 
@property (readonly) char showCompactPlayControl; 
@property (readonly) int navigationControls; 
@property (readonly) char hasTime; 
@property (readonly) char playedToTheEnd; 
@property (readonly) char hasAudio; 
@property (readonly) char hasPages; 
@property (readonly) int pageDisplay; 
@property (readonly) char showScrollerToChangePages; 
@property (readonly) CGSize displayPageSize; 
@property (readonly) double contentOffsetForScroller; 
@property (readonly) char hasScrolling; 
@property (readonly) double totalScroll; 
@property (assign) double currentScroll; 
@property (readonly) double totalHorizontalScroll; 
@property (assign) double currentHorizontalScroll; 
@property (readonly) char hasZooming; 
@property (readonly) double maxZoomFactor; 
@property (readonly) double zoomFactorToFitWidth; 
@property (assign) CGPoint focusPoint; 
@property (assign) double zoomFactor; 
@property (assign) char autoZooms; 
@property (readonly) char supportsZoomActions; 
@property (readonly) char markupSupported; 
@property (readonly) char rotateSupported; 
@property (readonly) NSView * markupControls; 
@property (assign) char documentDirty;                                                            //@synthesize documentDirty=_documentDirty - In the implementation block
@property (readonly) NSURL * shareItemURL; 
@property (readonly) char trimmingSupported; 
@property (readonly) NSTouchBar * touchBar; 
@property (assign) char tracksMouseMovements; 
@property (readonly) unsigned long long observedEvents; 
@property (readonly) char prefersLocalEventLoop; 
@property (retain) NSArray * highlightedOccurrences; 
@property (assign) unsigned long long focusedOccurrenceIndex; 
@property (readonly) NSURL * launchURL; 
@property (readonly) NSDictionary * openingApplicationInfo; 
@property (readonly) char allowsAlerts; 
@property (readonly) char shouldPreserveAspectRatioWhenResizing; 
@property (readonly) char allowsNetworkAccess; 
@property (readonly) char allowsJavascript; 
@property (readonly) char allowsPlugIns; 
@property (readonly) char allowsFileAccess; 
@property (readonly) char allowsOpeningFileURLs; 
@property (readonly) char pathBarShouldOverlay; 
@property (retain) NSArray * invalidModes;                                                        //@synthesize invalidModes=_invalidModes - In the implementation block
@property (readonly) NSView * quickLookView; 
@property (readonly) CALayer * quickLookLayer; 
@property (readonly) QLDisplayBundleViewController * quickLookViewController; 
@property (assign) CGRect quickLookFrame; 
@property (readonly) NSResponder * responder; 
@property (readonly) CGRect borderFrame; 
@property (readonly) id accessibilityFocusedUIElement; 
@property (assign) int inputFocusType; 
+(id)keyPathsForValuesAffectingNeedsVolumeControl;
+(id)keyPathsForValuesAffectingHidePlayControl;
+(id)keyPathsForValuesAffectingPlayedToTheEnd;
+(char)generateThumbnail:(QLThumbnailRequestRef)arg1 withData:(id)arg2 contentTypeUTI:(id)arg3 previewProperties:(id)arg4 properties:(id)arg5 ;
+(char)generateThumbnail:(QLThumbnailRequestRef)arg1 withURL:(id)arg2 contentTypeUTI:(id)arg3 previewProperties:(id)arg4 properties:(id)arg5 ;
+(id)newDisplayBundleViewController;
+(id)screentimeTimeoutError;
+(id)_pathOfScreenshotWithKey:(id)arg1 ;
+(id)keyPathsForValuesAffectingIsWindowKey;
+(id)potentialExpectedDisplayBundleIDsForPreview:(id)arg1 ;
+(id)keyPathsForValuesAffectingContentFrame;
+(id)keyPathsForValuesAffectingContentFrameForSeamlessOpening;
+(id)keyPathsForValuesAffectingBorderFrame;
+(id)keyPathsForValuesAffectingHasTime;
+(id)keyPathsForValuesAffectingHasScrolling;
+(id)keyPathsForValuesAffectingHasZooming;
+(id)imageForScreenshotKey:(id)arg1 ;
+(id)newPreviewDocumentDisplayBundleForPreview:(id)arg1 ;
+(id)keyPathsForValuesAffectingDisplayState;
-(char)inMarkup;
-(char)documentDirty;
-(void)previewStatusDidChange;
-(NSDictionary *)openingApplicationInfo;
-(char)canShowOpenButton;
-(char)rotateSupported;
-(char)supportsZoomActions;
-(double)seekTolerance;
-(void)setSeekTolerance:(double)arg1 ;
-(void)debugPreview:(id)arg1 ;
-(char)mustHandleEvent:(id)arg1 ;
-(unsigned long long)observedEvents;
-(char)showRemainingTime;
-(void)setShowRemainingTime:(char)arg1 ;
-(char)needsVolumeControl;
-(NSView *)markupControls;
-(void)exitMarkup:(long long)arg1 ;
-(char)hidePlayControl;
-(char)needsTimeControl;
-(NSView *)dragContentView;
-(id)viewForLocation:(CGPoint)arg1 ;
-(char)isValidInPreviewMode:(int)arg1 ;
-(id)customDisplayNameWithLongForm:(char)arg1 ;
-(NSString *)displayNameComplement;
-(void)willTimeOut;
-(void)backingScaleFactorDidChange;
-(char)hasPages;
-(char)viewUsesLayer;
-(char)shouldShowInlinePreviewControls;
-(char)shouldShowInlinePreviewContent;
-(char)guessedOptimalSize;
-(char)playedToTheEnd;
-(double)totalHorizontalScroll;
-(double)currentHorizontalScroll;
-(void)setCurrentHorizontalScroll:(double)arg1 ;
-(char)hasZooming;
-(double)zoomFactorToFitWidth;
-(char)delegatesControls;
-(char)pathBarShouldOverlay;
-(char)hasContentAtLocation:(CGPoint)arg1 ;
-(char)canSelectText;
-(int)navigationControls;
-(CGRect)contentFrameForSeamlessOpening;
-(void)hostedInWindowServerDidChange;
-(char)allowsOpeningFileURLs;
-(NSString *)customDisplayName;
-(char)keepThumbnailUnderInlinePreview;
-(CGSize)displayPageSize;
-(double)contentOffsetForScroller;
-(char)hasControlAtPoint:(CGPoint)arg1 ;
-(CGRect)contentViewBorderFrame;
-(char)showCompactPlayControl;
-(id)bundleIDForScreentime;
-(id)categoryForScreentime;
-(id)quickLookContentView;
-(void)willEnterMarkup;
-(void)setDocumentDirty:(char)arg1 ;
-(id)accessibilityAttributeValue:(id)arg1 forUIElementWithIdentifier:(id)arg2 ;
-(char)accessibilityIsAttributeSettable:(id)arg1 forUIElementWithIdentifier:(id)arg2 ;
-(CGRect)frameForUIElementWithIdentifier:(id)arg1 ;
-(void)setQlViewController:(QLDisplayBundleViewController *)arg1 ;
-(QLDisplayBundleViewController *)qlViewController;
-(void)setInvalidModes:(NSArray *)arg1 ;
-(void)setScreentimeCategoryPolicyMonitor:(DMFCategoryPolicyMonitor *)arg1 ;
-(void)setScreentimeApplicationPolicyMonitor:(DMFApplicationPolicyMonitor *)arg1 ;
-(void)_unbindWindowController:(id)arg1 ;
-(void)_bindedWindowWillClose:(id)arg1 ;
-(void)_discardBoundWindowControllers;
-(NSArray *)invalidModes;
-(void)startWatchingScreenTimePolicy;
-(void)reloadAndFallbackWithError:(id)arg1 ;
-(void)_saveScreenshotWithKey:(id)arg1 ;
-(void)endWatchingScreenTimePolicy;
-(void)_startObservingOwner;
-(void)_stopObservingOwner;
-(int)additionalDisplayFlags;
-(int)disabledDisplayFlags;
-(DMFCategoryPolicyMonitor *)screentimeCategoryPolicyMonitor;
-(DMFApplicationPolicyMonitor *)screentimeApplicationPolicyMonitor;
-(void)checkScreenTimePolicy;
-(void)setCurrentScreentimePolicy:(long long)arg1 ;
-(void)presentScreenTimeLockoutWithPolicy:(long long)arg1 ;
-(void)didFailLoadingWithError:(id)arg1 ;
-(void)setInMarkup:(char)arg1 ;
-(char)isClickablePoint:(CGPoint)arg1 ;
-(char)prefersLocalEventLoop;
-(double)defaultPageThumbnailRatio;
-(char)allowsNetworkAccess;
-(char)allowsFileAccess;
-(id)initWithPreview:(id)arg1 owner:(id)arg2 ;
-(char)showAccessoryController:(id)arg1 ;
-(void)didMismatchLoadingWithHints:(id)arg1 expectedDisplayBundleID:(id)arg2 ;
-(void)didDesistRemoteWithExpectedDisplayBundleID:(id)arg1 ;
-(void)customTitleUpdated;
-(unsigned long long)overlayVisibilityOptions;
-(void)drawFlavorInBackgroundLayer:(id)arg1 foregroundLayer:(id)arg2 contentSize:(CGSize)arg3 maxSize:(CGSize)arg4 parts:(CGRect*)arg5 ;
-(void)drawHighlights:(id)arg1 inContext:(CGContextRef)arg2 style:(int)arg3 ;
-(int)pageDisplay;
-(char)showScrollerToChangePages;
-(void)saveModeDidChange;
-(char)prefersLocalEventLoopForEvent:(id)arg1 ;
-(NSRange)stringRangeForPage:(unsigned long long)arg1 ;
-(id)rectsForStringRange:(NSRange)arg1 inPage:(unsigned long long)arg2 ;
-(NSArray *)highlightedOccurrences;
-(unsigned long long)focusedOccurrenceIndex;
-(void)setFocusedOccurrenceIndex:(unsigned long long)arg1 ;
-(char)shouldOpenExternalURL:(id)arg1 ;
-(char)shouldPreserveAspectRatioWhenResizing;
-(char)shouldShowPagesOnLeft;
-(char)allowsJavascript;
-(char)validateURLSecureAccess:(id)arg1 ;
-(void)beginOperation:(id)arg1 ;
-(void)endOperation:(id)arg1 ;
-(NSDictionary *)accessibilityUIElements;
-(void)windowDidChange;
-(void)dealloc;
-(NSString *)description;
-(void)cleanup;
-(void)setOwner:(id<QLDisplayBundleOwner>)arg1 ;
-(NSURL *)URL;
-(float)volume;
-(id<QLDisplayBundleOwner>)owner;
-(char)isLoaded;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(void)setVisibility:(int)arg1 ;
-(void)performSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3 ;
-(double)duration;
-(int)mode;
-(int)visibility;
-(void)activate;
-(char)isRemote;
-(id)accessibilityAttributeNames;
-(void)setHighlighted:(char)arg1 ;
-(id)accessibilityHitTest:(CGPoint)arg1 ;
-(char)accessibilityIsIgnored;
-(id)accessibilityAttributeValue:(id)arg1 ;
-(double)backingScaleFactor;
-(NSTouchBar *)touchBar;
-(void)deactivate;
-(void)copy:(id)arg1 ;
-(char)opaque;
-(char)hasHorizontalScroller;
-(void)selectAll:(id)arg1 ;
-(int)backgroundStyle;
-(char)highlighted;
-(id)writableTypesForPasteboard:(id)arg1 ;
-(id)pasteboardPropertyListForType:(id)arg1 ;
-(unsigned long long)writingOptionsForType:(id)arg1 pasteboard:(id)arg2 ;
-(unsigned long long)currentPage;
-(NSURL *)shareItemURL;
-(void)layoutSublayersOfLayer:(id)arg1 ;
-(id)actionForLayer:(id)arg1 forKey:(id)arg2 ;
-(void)setCurrentPage:(unsigned long long)arg1 ;
-(void)discard;
-(double)currentTime;
-(void)setCurrentTime:(double)arg1 ;
-(void)setVolume:(float)arg1 ;
-(char)playing;
-(unsigned long long)numberOfPages;
-(CGRect)contentFrame;
-(CALayer *)contentLayer;
-(char)activated;
-(char)hasTime;
-(void)setMuted:(char)arg1 ;
-(char)muted;
-(int)displayFlags;
-(char)hasAudio;
-(char)deactivated;
-(void)cancelLoading;
-(id)operationName;
-(void)openExternalURL:(id)arg1 ;
-(int)flavor;
-(char)autoplay;
-(int)activationState;
-(CGRect)borderFrame;
-(double)maxZoomFactor;
-(double)zoomFactor;
-(void)setZoomFactor:(double)arg1 ;
-(void)setPlaying:(char)arg1 ;
-(void)setPreview:(QLPreview *)arg1 ;
-(QLPreview *)preview;
-(char)allowsPlugIns;
-(void)rotate:(long long)arg1 ;
-(NSString *)displayBundleID;
-(char)isTrimming;
-(void)editOccuredOnPage:(long long)arg1 ;
-(void)enterMarkup;
-(void)promptSaveForCloseWithCloseHandler:(/*^block*/id)arg1 ;
-(char)isSafe;
-(void)willShow;
-(void)didHide;
-(NSURL *)launchURL;
-(id)displayState;
-(void)setDisplayState:(id)arg1 ;
-(void)willOpen;
-(NSResponder *)responder;
-(void)updateProperties:(/*^block*/id)arg1 ;
-(void)didShow;
-(void)didOpen;
-(void)willHide;
-(NSUUID *)operationUUID;
-(void)setOperationUUID:(NSUUID *)arg1 ;
-(char)fullyLoaded;
-(void)setFocusPoint:(CGPoint)arg1 ;
-(char)canBeReused;
-(QLDisplayBundleViewController *)quickLookViewController;
-(void)didLoad;
-(id<QLPreviewItem>)previewItem;
-(char)isExporting;
-(NSView *)quickLookView;
-(char)mustHandleDragAtLocation:(CGPoint)arg1 ;
-(void)sizingUpdated;
-(void)refreshSynchronously;
-(void)zoomWithAction:(long long)arg1 ;
-(void)setOverlayControlOverlayFrame:(CGRect)arg1 rollOverFrame:(CGRect)arg2 ;
-(void)didEnterMarkup;
-(void)revertMarkup:(/*^block*/id)arg1 ;
-(void)commitTrim;
-(void)revertTrim;
-(void)setQuickLookFrame:(CGRect)arg1 ;
-(char)mustHandleDoubleClickAtLocation:(CGPoint)arg1 ;
-(CGRect)quickLookFrame;
-(void)getImageRepresentationWithFrame:(CGRect)arg1 completion:(/*^block*/id)arg2 ;
-(int)loadWithHints:(id)arg1 ;
-(NSDictionary *)sizingConstraints;
-(void)showOverlayControls:(char)arg1 withOverlayController:(id)arg2 ;
-(char)generateThumbnailForPage:(unsigned long long)arg1 maxSize:(CGSize)arg2 completionBlock:(/*^block*/id)arg3 ;
-(CGRect)opaqueFrame;
-(void)modeDidChange;
-(void)windowKeyDidChange;
-(char)markupSupported;
-(char)trimmingSupported;
-(void)beginTrim;
-(CALayer *)quickLookLayer;
-(void)teardownMarkup:(long long)arg1 needsSave:(char*)arg2 ;
-(long long)currentScreentimePolicy;
-(void)set_QLBundleAppearance:(id)arg1 ;
-(char)hasDisplayFlag:(int)arg1 ;
-(id)viewForEvent:(id)arg1 ;
-(CGPoint)locationForEvent:(id)arg1 ;
-(char)isWindowKey;
-(char)allowsAlerts;
-(char)tracksMouseMovements;
-(void)setTracksMouseMovements:(char)arg1 ;
-(char)scalable;
-(char)hasScrolling;
-(char)drawPage:(unsigned long long)arg1 inRect:(CGRect)arg2 context:(CGContextRef)arg3 ;
-(void)setHighlightedOccurrences:(NSArray *)arg1 ;
-(void)setFocusedOccurrenceIndex:(unsigned long long)arg1 inPage:(unsigned long long)arg2 ;
-(id)stringForPage:(unsigned long long)arg1 ;
-(id)findOccurrencesOfString:(id)arg1 inPage:(unsigned long long)arg2 withOptions:(unsigned long long)arg3 ;
-(double)thumbnailAspectRatioForPage:(unsigned long long)arg1 ;
-(CGPoint)focusPoint;
-(char)autoZooms;
-(void)setAutoZooms:(char)arg1 ;
-(CGImageRef)copyImageRepresentationWithFrame:(CGRect*)arg1 ;
-(char)shouldDrawBubbleBackground;
-(void)drawBubbleBackgroundInFrame:(CGRect)arg1 contentFrame:(CGRect)arg2 ;
-(void)discardAccessoryControllers;
-(char)canShowTitleInBubble;
-(char)isDisplayingError;
-(void)setCurrentScroll:(double)arg1 ;
-(double)totalScroll;
-(double)currentScroll;
@end

