/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:50:54 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <LaunchServices/LaunchServices-Structs.h>
#import <LaunchServices/LSBundleProxy.h>
#import <libobjc.A.dylib/LSDetachable.h>
#import <libobjc.A.dylib/NSSecureCoding.h>

@class LSApplicationRecord, NSArray, NSString, NSDate, NSNumber, NSUUID, NSProgress, _LSDiskUsage, _LSApplicationState, NSDictionary, NSSet;

@interface LSApplicationProxy : LSBundleProxy <LSDetachable, NSSecureCoding> {

	LSApplicationRecord* _record;
	NSArray* _plugInKitPlugins;
	char _userInitiatedUninstall;

}

@property (assign,nonatomic) char userInitiatedUninstall;                                          //@synthesize userInitiatedUninstall=_userInitiatedUninstall - In the implementation block
@property (nonatomic,readonly) char supportsAlternateIconNames; 
@property (nonatomic,readonly) int bundleModTime; 
@property (nonatomic,readonly) LSApplicationRecord * correspondingApplicationRecord; 
@property (nonatomic,readonly) NSString * applicationIdentifier; 
@property (nonatomic,readonly) NSString * companionApplicationIdentifier; 
@property (nonatomic,readonly) NSArray * counterpartIdentifiers; 
@property (nonatomic,readonly) NSDate * registeredDate; 
@property (nonatomic,readonly) NSNumber * itemID; 
@property (nonatomic,readonly) NSString * vendorName; 
@property (nonatomic,readonly) NSString * itemName; 
@property (nonatomic,readonly) NSString * storeCohortMetadata; 
@property (nonatomic,readonly) NSString * genre; 
@property (nonatomic,readonly) NSNumber * genreID; 
@property (nonatomic,readonly) NSArray * subgenres; 
@property (nonatomic,readonly) NSArray * staticShortcutItems; 
@property (nonatomic,readonly) NSString * minimumSystemVersion; 
@property (nonatomic,readonly) NSString * maximumSystemVersion; 
@property (nonatomic,readonly) NSString * shortVersionString; 
@property (nonatomic,readonly) NSString * preferredArchitecture; 
@property (nonatomic,readonly) NSString * applicationType; 
@property (nonatomic,readonly) NSArray * directionsModes; 
@property (nonatomic,readonly) NSArray * UIBackgroundModes; 
@property (nonatomic,readonly) NSArray * audioComponents; 
@property (nonatomic,readonly) NSUUID * deviceIdentifierForVendor; 
@property (nonatomic,readonly) NSUUID * deviceIdentifierForAdvertising; 
@property (nonatomic,readonly) NSProgress * installProgress; 
@property (nonatomic,readonly) NSNumber * staticDiskUsage; 
@property (nonatomic,readonly) NSNumber * dynamicDiskUsage; 
@property (nonatomic,readonly) NSNumber * ODRDiskUsage; 
@property (nonatomic,readonly) _LSDiskUsage * diskUsage; 
@property (nonatomic,readonly) _LSApplicationState * appState; 
@property (getter=isInstalled,nonatomic,readonly) char installed; 
@property (getter=isPlaceholder,nonatomic,readonly) char placeholder; 
@property (getter=isRestricted,nonatomic,readonly) char restricted; 
@property (getter=isRemovedSystemApp,nonatomic,readonly) char removedSystemApp; 
@property (nonatomic,readonly) NSArray * VPNPlugins; 
@property (nonatomic,readonly) NSArray * plugInKitPlugins; 
@property (nonatomic,readonly) NSArray * appTags; 
@property (nonatomic,readonly) NSString * applicationDSID; 
@property (nonatomic,readonly) NSNumber * purchaserDSID; 
@property (nonatomic,readonly) NSNumber * downloaderDSID; 
@property (nonatomic,readonly) NSNumber * familyID; 
@property (nonatomic,readonly) unsigned long long installType; 
@property (nonatomic,readonly) unsigned long long originalInstallType; 
@property (nonatomic,readonly) NSArray * requiredDeviceCapabilities; 
@property (nonatomic,readonly) NSArray * deviceFamily; 
@property (nonatomic,readonly) NSArray * activityTypes; 
@property (nonatomic,readonly) NSArray * externalAccessoryProtocols; 
@property (nonatomic,readonly) NSString * teamID; 
@property (nonatomic,readonly) NSString * appIDPrefix; 
@property (nonatomic,readonly) NSNumber * storeFront; 
@property (nonatomic,readonly) NSNumber * externalVersionIdentifier; 
@property (nonatomic,readonly) NSNumber * betaExternalVersionIdentifier; 
@property (nonatomic,readonly) NSNumber * ratingRank; 
@property (nonatomic,readonly) NSString * ratingLabel; 
@property (nonatomic,readonly) NSString * sourceAppIdentifier; 
@property (nonatomic,readonly) NSString * applicationVariant; 
@property (getter=isAppUpdate,nonatomic,readonly) char appUpdate; 
@property (nonatomic,readonly) char hasParallelPlaceholder; 
@property (getter=isNewsstandApp,nonatomic,readonly) char newsstandApp; 
@property (getter=isWhitelisted,nonatomic,readonly) char whitelisted; 
@property (getter=isAppStoreVendable,nonatomic,readonly) char appStoreVendable; 
@property (getter=isDeviceBasedVPP,nonatomic,readonly) char deviceBasedVPP; 
@property (getter=isBetaApp,nonatomic,readonly) char betaApp; 
@property (getter=isAdHocCodeSigned,nonatomic,readonly) char adHocCodeSigned; 
@property (nonatomic,readonly) char supportsAudiobooks; 
@property (getter=isLaunchProhibited,nonatomic,readonly) char launchProhibited; 
@property (nonatomic,readonly) char supportsODR; 
@property (nonatomic,readonly) char hasSettingsBundle; 
@property (nonatomic,readonly) char supportsExternallyPlayableContent; 
@property (nonatomic,readonly) char supportsOpenInPlace; 
@property (nonatomic,readonly) char fileSharingEnabled; 
@property (nonatomic,readonly) char iconIsPrerendered; 
@property (nonatomic,readonly) char iconUsesAssetCatalog; 
@property (getter=isPurchasedReDownload,nonatomic,readonly) char purchasedReDownload; 
@property (nonatomic,readonly) char hasMIDBasedSINF; 
@property (nonatomic,readonly) char missingRequiredSINF; 
@property (nonatomic,readonly) char supportsPurgeableLocalStorage; 
@property (getter=isDeletable,nonatomic,readonly) char deletable; 
@property (nonatomic,readonly) NSArray * managedPersonas; 
@property (getter=isRemoveableSystemApp,nonatomic,readonly) char removeableSystemApp; 
@property (getter=isWatchKitApp,nonatomic,readonly) char watchKitApp; 
@property (nonatomic,readonly) NSString * watchKitVersion; 
@property (nonatomic,readonly) NSString * complicationPrincipalClass; 
@property (nonatomic,readonly) NSArray * supportedComplicationFamilies; 
@property (nonatomic,readonly) char hasCustomNotification; 
@property (nonatomic,readonly) char hasComplication; 
@property (nonatomic,readonly) char hasGlance; 
@property (nonatomic,readonly) char shouldSkipWatchAppInstall; 
@property (getter=isGameCenterEnabled,nonatomic,readonly) char gameCenterEnabled; 
@property (nonatomic,readonly) char gameCenterEverEnabled; 
@property (nonatomic,readonly) NSNumber * installFailureReason; 
@property (nonatomic,readonly) long long deviceManagementPolicy; 
@property (nonatomic,readonly) NSDictionary * siriActionDefinitionURLs; 
@property (nonatomic,readonly) NSString * appStoreToolsBuildVersion; 
@property (nonatomic,readonly) NSSet * claimedDocumentContentTypes; 
@property (nonatomic,readonly) NSSet * claimedURLSchemes; 
@property (nonatomic,readonly) char canHandleWebAuthentication; 
@property (nonatomic,readonly) char supportsMultiwindow; 
@property (nonatomic,readonly) NSNumber * platform; 
@property (nonatomic,readonly) NSArray * backgroundTaskSchedulerPermittedIdentifiers; 
@property (getter=isStandaloneWatchApp,nonatomic,readonly) char standaloneWatchApp; 
@property (nonatomic,readonly) char runsIndependentlyOfCompanionApp; 
@property (getter=isArcadeApp,nonatomic,readonly) char arcadeApp; 
@property (nonatomic,readonly) NSArray * carPlayInstrumentClusterURLSchemes; 
+(char)supportsSecureCoding;
+(id)applicationProxyWithBundleUnitID:(unsigned)arg1 withContext:(LSContext*)arg2 ;
+(id)applicationProxyForIdentifier:(id)arg1 withContext:(LSContext*)arg2 ;
+(id)applicationProxyForIdentifier:(id)arg1 ;
+(id)applicationProxyForBundleType:(unsigned long long)arg1 identifier:(id)arg2 isCompanion:(char)arg3 URL:(id)arg4 itemID:(id)arg5 bundleUnit:(unsigned*)arg6 ;
+(id)applicationProxyForIdentifier:(id)arg1 placeholder:(char)arg2 ;
+(id)applicationProxyForCompanionIdentifier:(id)arg1 ;
+(id)applicationProxyForSystemPlaceholder:(id)arg1 ;
+(id)applicationProxyForBundleURL:(id)arg1 ;
+(id)applicationProxyForItemID:(id)arg1 ;
-(char)respondsToSelector:(SEL)arg1 ;
-(id)description;
-(id)methodSignatureForSelector:(SEL)arg1 ;
-(id)forwardingTargetForSelector:(SEL)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(NSArray *)managedPersonas;
-(char)_usesSystemPersona;
-(void)detach;
-(NSNumber *)installFailureReason;
-(NSNumber *)itemID;
-(NSString *)teamID;
-(NSArray *)activityTypes;
-(NSArray *)deviceFamily;
-(unsigned long long)installType;
-(id)dataContainerURL;
-(NSString *)vendorName;
-(NSString *)itemName;
-(NSString *)complicationPrincipalClass;
-(NSString *)ratingLabel;
-(NSNumber *)ratingRank;
-(NSNumber *)purchaserDSID;
-(NSNumber *)downloaderDSID;
-(NSNumber *)familyID;
-(id)_managedPersonas;
-(id)_initWithBundleUnit:(unsigned)arg1 context:(LSContext*)arg2 bundleIdentifier:(id)arg3 ;
-(char)isPlaceholder;
-(id)_initWithContext:(LSContext*)arg1 bundleUnit:(unsigned)arg2 applicationRecord:(id)arg3 bundleID:(id)arg4 resolveAndDetach:(char)arg5 ;
-(id)bundleType;
-(void)clearAdvertisingIdentifier;
-(_LSApplicationState *)appState;
-(char)isInstalled;
-(char)isRestricted;
-(NSString *)applicationDSID;
-(unsigned long long)originalInstallType;
-(NSString *)applicationIdentifier;
-(id)groupContainerURLs;
-(id)alternateIconName;
-(id)iconDataForVariant:(int)arg1 withOptions:(int)arg2 ;
-(void)getDeviceManagementPolicyWithCompletionHandler:(/*^block*/id)arg1 ;
-(NSNumber *)platform;
-(char)getGenericTranslocationTargetURL:(id*)arg1 error:(id*)arg2 ;
-(LSApplicationRecord *)correspondingApplicationRecord;
-(NSString *)companionApplicationIdentifier;
-(NSDate *)registeredDate;
-(NSString *)storeCohortMetadata;
-(NSString *)genre;
-(NSNumber *)genreID;
-(NSArray *)subgenres;
-(NSString *)preferredArchitecture;
-(NSString *)applicationType;
-(NSProgress *)installProgress;
-(NSNumber *)staticDiskUsage;
-(NSNumber *)dynamicDiskUsage;
-(NSNumber *)ODRDiskUsage;
-(char)isRemovedSystemApp;
-(NSArray *)plugInKitPlugins;
-(NSArray *)requiredDeviceCapabilities;
-(NSString *)appIDPrefix;
-(NSNumber *)storeFront;
-(NSNumber *)externalVersionIdentifier;
-(NSNumber *)betaExternalVersionIdentifier;
-(NSString *)sourceAppIdentifier;
-(NSString *)applicationVariant;
-(char)isAppUpdate;
-(char)isNewsstandApp;
-(char)isWhitelisted;
-(char)isDeviceBasedVPP;
-(char)isBetaApp;
-(char)supportsODR;
-(char)fileSharingEnabled;
-(char)iconIsPrerendered;
-(char)iconUsesAssetCatalog;
-(char)isPurchasedReDownload;
-(char)hasMIDBasedSINF;
-(char)missingRequiredSINF;
-(char)isDeletableIgnoringRestrictions;
-(id)environmentVariables;
-(char)isRemoveableSystemApp;
-(char)isWatchKitApp;
-(char)isGameCenterEnabled;
-(char)gameCenterEverEnabled;
-(void)setAlternateIconName:(id)arg1 withResult:(/*^block*/id)arg2 ;
-(id)primaryIconDataForVariant:(int)arg1 ;
-(id)iconDataForVariant:(int)arg1 ;
-(long long)deviceManagementPolicy;
-(NSDictionary *)siriActionDefinitionURLs;
-(NSSet *)claimedDocumentContentTypes;
-(NSSet *)claimedURLSchemes;
-(id)handlerRankOfClaimForContentType:(id)arg1 ;
-(char)isStandaloneWatchApp;
-(id)getBundleMetadata;
-(id)installProgressSync;
-(int)bundleModTime;
-(char)profileValidated;
-(char)UPPValidated;
-(char)freeProfileValidated;
-(id)valueForUndefinedKey:(id)arg1 ;
-(char)userInitiatedUninstall;
-(void)setUserInitiatedUninstall:(char)arg1 ;
-(id)localizedNameForContext:(id)arg1 preferredLocalizations:(id)arg2 useShortNameOnly:(char)arg3 ;
-(id)localizedNameForContext:(id)arg1 ;
-(id)localizedNameForContext:(id)arg1 preferredLocalizations:(id)arg2 ;
-(id)_localizedNameWithPreferredLocalizations:(id)arg1 useShortNameOnly:(char)arg2 ;
@end

