/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:50:54 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <LaunchServices/LaunchServices-Structs.h>
#import <libobjc.A.dylib/NSCopying.h>
#import <libobjc.A.dylib/NSSecureCoding.h>

@class NSURL;

@interface FSNode : NSObject <NSCopying, NSSecureCoding> {

	NSURL* _url;
	unsigned long long _cacheExpiration;
	unsigned _isDirectory : 2;
	unsigned _hasReferringAliasNode : 1;
	unsigned _canUseFileCache : 1;
	unsigned _isInitialized : 1;

}

@property (nonatomic,readonly) NSURL * URL; 
@property (nonatomic,readonly) FSNode * referringAliasNode; 
@property (getter=isDirectory,nonatomic,readonly) char directory; 
@property (getter=isBusyDirectory,nonatomic,readonly) char busyDirectory; 
@property (getter=isExecutable,nonatomic,readonly) char executable; 
@property (getter=isResolvable,nonatomic,readonly) char resolvable; 
@property (getter=isSymbolicLink,nonatomic,readonly) char symbolicLink; 
@property (getter=isAliasFile,nonatomic,readonly) char aliasFile; 
@property (getter=isSideFault,nonatomic,readonly) char sideFault; 
@property (nonatomic,readonly) char hasPackageBit; 
@property (getter=isRegularFile,nonatomic,readonly) char regularFile; 
@property (getter=isHidden,nonatomic,readonly) char hidden; 
@property (nonatomic,readonly) char hasHiddenExtension; 
@property (getter=isDataContainer,nonatomic,readonly) char dataContainer; 
@property (getter=isVolume,nonatomic,readonly) char volume; 
@property (getter=isMountTrigger,nonatomic,readonly) char mountTrigger; 
@property (getter=isOnDiskImage,nonatomic,readonly) char onDiskImage; 
@property (getter=isOnLocalVolume,nonatomic,readonly) char onLocalVolume; 
@property (getter=isOnTimeMachineVolume,nonatomic,readonly) char onTimeMachineVolume; 
@property (getter=isInTrash,readonly) char inTrash; 
@property (getter=isTrashFolder,readonly) char trashFolder; 
@property (getter=isInMailbox,readonly) char inMailbox; 
@property (getter=isInTemporaryDirectory,readonly) char inTemporaryDirectory; 
@property (getter=isInternetLocatorFile,readonly) char internetLocatorFile; 
+(char)supportsSecureCoding;
+(id)validURLSchemesForInternetLocatorFileExtension:(id)arg1 ;
+(char)canReadMetadataOfURL:(id)arg1 fromSandboxWithAuditToken:(const SCD_Struct_FS12*)arg2 ;
+(id)nameForBookmarkData:(id)arg1 error:(id*)arg2 ;
+(char)isBookmarkDataInTrash:(id)arg1 ;
+(char)getFileIdentifier:(unsigned long long*)arg1 forBookmarkData:(id)arg2 error:(id*)arg3 ;
+(char)getVolumeIdentifier:(unsigned long long*)arg1 forBookmarkData:(id)arg2 error:(id*)arg3 ;
+(id)pathForBookmarkData:(id)arg1 error:(id*)arg2 ;
+(id)rootVolumeNode;
+(id)_resolvedURLFromAliasFile:(id)arg1 flags:(unsigned)arg2 error:(id*)arg3 ;
+(id)_resolvedNodeFromAliasFile:(id)arg1 flags:(unsigned)arg2 error:(id*)arg3 ;
+(void)warnAboutFSRefUsageWithReason:(unsigned char)arg1 ;
+(char)shimFSRef:(const FSRef*)arg1 reason:(unsigned char)arg2 error:(id*)arg3 block:(/*^block*/id)arg4 ;
+(char)getFSRef:(FSRef*)arg1 fromURL:(id)arg2 reason:(unsigned char)arg3 error:(id*)arg4 ;
+(char)shimFSRefs:(const FSRef*)arg1 count:(long long)arg2 reason:(unsigned char)arg3 error:(id*)arg4 block:(/*^block*/id)arg5 ;
+(char)looksLikeTrashFolderName:(id)arg1 ;
+(void)warnAboutResourceForkUsageWithReason:(unsigned char)arg1 ;
+(unordered_map<OpaqueMappedResourceFileRef *, NSData *, std::__1::hash<OpaqueMappedResourceFileRef *>, std::__1::equal_to<OpaqueMappedResourceFileRef *>, std::__1::allocator<std::__1::pair<OpaqueMappedResourceFileRef *const, NSData *>>>*)openResourceFilesMap;
+(char)canReadURL:(id)arg1 fromSandboxWithAuditToken:(const SCD_Struct_FS12*)arg2 ;
+(char)canWriteURL:(id)arg1 fromSandboxWithAuditToken:(const SCD_Struct_FS12*)arg2 ;
+(char)canAccessURL:(id)arg1 fromSandboxWithAuditToken:(const SCD_Struct_FS12*)arg2 operation:(const char*)arg3 ;
+(id)bookmarkDataPropertiesToInclude;
+(char)isBookmarkDataFull:(id)arg1 ;
+(char)getFileSystemRepresentation:(char)arg1 forBookmarkData:(id)arg2 ;
+(char)getFileIdentifier:(unsigned long long*)arg1 forBookmarkProperties:(id)arg2 ;
+(unsigned char)compareBookmarkData:(id)arg1 toBookmarkData:(id)arg2 ;
+(char)getCreationDate:(double*)arg1 forBookmarkData:(id)arg2 error:(id*)arg3 ;
+(char)getName:(id*)arg1 fileIdentifier:(unsigned long long*)arg2 creationDate:(double*)arg3 forBookmarkData:(id)arg4 error:(id*)arg5 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(char)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(id)description;
-(id)redactedDescription;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(char)isHidden;
-(void)removeCachedResourceValueForKey:(id)arg1 ;
-(void)setTemporaryResourceValue:(id)arg1 forKey:(id)arg2 ;
-(char)checkResourceIsReachableAndReturnError:(id*)arg1 ;
-(id)initWithURL:(id)arg1 flags:(unsigned)arg2 error:(id*)arg3 ;
-(id)nameWithError:(id*)arg1 ;
-(id)extensionWithError:(id*)arg1 ;
-(char)isRegularFile;
-(char)isResolvable;
-(NSURL *)URL;
-(char)isSideFault;
-(char)getHFSType:(unsigned*)arg1 creator:(unsigned*)arg2 error:(id*)arg3 ;
-(char)isDirectory;
-(char)isOnLocalVolume;
-(id)URLFromInternetLocatorFileWithError:(id*)arg1 ;
-(id)bundleIdentifierWithContext:(LSContext*)arg1 error:(id*)arg2 ;
-(id)volumeNodeWithFlags:(unsigned)arg1 error:(id*)arg2 ;
-(id)bookmarkDataRelativeToNode:(id)arg1 error:(id*)arg2 ;
-(char)getInodeNumber:(unsigned long long*)arg1 error:(id*)arg2 ;
-(char)getContentModificationDate:(double*)arg1 error:(id*)arg2 ;
-(id)pathWithError:(id*)arg1 ;
-(char)isInTrash;
-(id)childNodeWithRelativePath:(id)arg1 flags:(unsigned)arg2 error:(id*)arg3 ;
-(char)getVolumeIdentifier:(unsigned long long*)arg1 error:(id*)arg2 ;
-(char)getFileIdentifier:(unsigned long long*)arg1 error:(id*)arg2 ;
-(char)getResourceValue:(id*)arg1 forKey:(id)arg2 options:(unsigned char)arg3 error:(id*)arg4 ;
-(id)initByResolvingBookmarkData:(id)arg1 relativeToNode:(id)arg2 bookmarkDataIsStale:(char*)arg3 error:(id*)arg4 ;
-(id)initWithPath:(id)arg1 flags:(unsigned)arg2 error:(id*)arg3 ;
-(char)isVolume;
-(char)isBusyDirectory;
-(char)isDataContainer;
-(id)bundleInfoDictionaryWithError:(id*)arg1 ;
-(char)hasHiddenExtension;
-(id)sideFaultResourceValuesReturningError:(id*)arg1 ;
-(CFBundleRef)copyCFBundleWithError:(id*)arg1 ;
-(id)resolvedNodeWithFlags:(unsigned)arg1 error:(id*)arg2 ;
-(void)setReferringAliasNode:(FSNode *)arg1 ;
-(char)getFileSystemRepresentation:(char)arg1 error:(id*)arg2 ;
-(FSNode *)referringAliasNode;
-(void)prepareForReuse;
-(id)initWithFileSystemRepresentation:(const char*)arg1 flags:(unsigned)arg2 error:(id*)arg3 ;
-(id)temporaryDirectoryNodeWithFlags:(unsigned)arg1 error:(id*)arg2 ;
-(id)initWithDirectory:(unsigned long long)arg1 inDomain:(unsigned long long)arg2 lastPathComponent:(id)arg3 createIntermediateDirectories:(char)arg4 flags:(unsigned)arg5 error:(id*)arg6 ;
-(id)initWithConfigurationString:(int)arg1 flags:(unsigned)arg2 error:(id*)arg3 ;
-(id)initTemporaryNodeOnVolume:(id)arg1 flags:(unsigned)arg2 fileDescriptor:(int*)arg3 error:(id*)arg4 ;
-(void)clearURLPropertyCacheIfStale;
-(char)setResourceValue:(id)arg1 forKey:(id)arg2 options:(unsigned char)arg3 error:(id*)arg4 ;
-(char)getTemporaryResourceValue:(id*)arg1 forKey:(id)arg2 ;
-(id)diskImageURLWithFlags:(unsigned)arg1 error:(id*)arg2 ;
-(char)getCreationDate:(double*)arg1 error:(id*)arg2 ;
-(char)isSymbolicLink;
-(char)getFinderInfo:(/*function pointer*/void**)arg1 error:(id*)arg2 ;
-(char)getIsDirectory_NoIO:(char*)arg1 ;
-(char)isExecutable;
-(char)isAliasFile;
-(char)hasPackageBit;
-(id)canonical:(char)arg1 pathWithError:(id*)arg2 ;
-(id)canonicalPathWithError:(id*)arg1 ;
-(id)initWithFSRef:(const FSRef*)arg1 reason:(unsigned char)arg2 flags:(unsigned)arg3 error:(id*)arg4 ;
-(char)getFSRef:(FSRef*)arg1 reason:(unsigned char)arg2 error:(id*)arg3 ;
-(char)isMountTrigger;
-(char)isOnDiskImage;
-(char)isOnTimeMachineVolume;
-(id)trashNodeWithError:(id*)arg1 ;
-(char)isTrashFolder;
-(char)isInMailbox;
-(char)isInTemporaryDirectory;
-(char)getDeviceNumber:(int*)arg1 error:(id*)arg2 ;
-(char)getOwnerUID:(unsigned*)arg1 error:(id*)arg2 ;
-(char)canReadFromSandboxWithAuditToken:(const SCD_Struct_FS12*)arg1 ;
-(id)bundleIdentifierWithError:(id*)arg1 ;
-(char)getLength:(unsigned long long*)arg1 error:(id*)arg2 ;
-(char)getWriterBundleIdentifier:(id*)arg1 error:(id*)arg2 ;
-(char)setFinderInfo:(const /*function pointer*/void**)arg1 error:(id*)arg2 ;
-(id)resolveInternetLocatorFileToNetworkVolumeURL;
-(id)resolveWindowsURLFileToURL;
-(const FSInternetLocatorTypeInfo*)internetLocatorTypeInfoForExtension:(id)arg1 fileType:(unsigned)arg2 ;
-(id)resolveDataForkInternetLocatorFile;
-(const FSInternetLocatorTypeInfo*)internetLocatorTypeInfoForScheme:(id)arg1 ;
-(char)writeInternetLocatorFileWithURL:(id)arg1 dataWritingOptions:(unsigned long long)arg2 error:(id*)arg3 ;
-(char)isInternetLocatorFile;
-(OpaqueMappedResourceFileRefRef)openResourceFileForReadingWithReason:(unsigned char)arg1 error:(id*)arg2 ;
-(void)closeResourceFile:(OpaqueMappedResourceFileRefRef)arg1 reason:(unsigned char)arg2 ;
-(char)getHasCarbon:(char*)arg1 andCFMResources:(char*)arg2 propertyList:(id*)arg3 fromResourceFile:(OpaqueMappedResourceFileRefRef)arg4 reason:(unsigned char)arg5 error:(id*)arg6 ;
-(id)bookmarkDataWithOptions:(unsigned long long)arg1 relativeToNode:(id)arg2 error:(id*)arg3 ;
-(id)initWithAppleEventDescriptor:(id)arg1 flags:(unsigned)arg2 error:(id*)arg3 ;
-(id)appleEventDescriptorWithOptions:(unsigned long long)arg1 error:(id*)arg2 ;
-(id)initWithAEDesc:(const AEDesc*)arg1 flags:(unsigned)arg2 error:(id*)arg3 ;
-(char)canWriteFromSandboxWithAuditToken:(const SCD_Struct_FS12*)arg1 ;
-(char)canReadMetadataFromSandboxWithAuditToken:(const SCD_Struct_FS12*)arg1 ;
-(id)extendedAttributeWithName:(id)arg1 options:(int)arg2 error:(id*)arg3 ;
-(char)setExtendedAttribute:(id)arg1 name:(id)arg2 options:(int)arg3 error:(id*)arg4 ;
-(id)initByResolvingBookmarkData:(id)arg1 options:(unsigned long long)arg2 relativeToNode:(id)arg3 bookmarkDataIsStale:(char*)arg4 error:(id*)arg5 ;
@end

