/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:50:54 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class _LSDatabase, NSURL, LSBundleWrapperStagingReceipt, NSError, NSString;

typedef struct LSBinding {
	unsigned bundle;
	LSBundleData bundleData;
	unsigned claim;
	/*function pointer*/void* claimData;
	id userInfo;
	id reason;
	 NSString;
} LSBinding;

typedef struct os_unfair_lock_s {
	unsigned _os_unfair_lock_opaque;
} os_unfair_lock_s;

typedef struct LSContext {
	_LSDatabase* db;
} LSContext;

typedef struct LSVersionNumber {
	unsigned char _opaque[32];
} LSVersionNumber;

typedef struct LSBundleMoreFlags {
	unsigned isWebBrowser : 1;
	unsigned isMailClient : 1;
	unsigned isWrapper : 1;
	unsigned isWrapped : 1;
	unsigned requiresNativeExecution : 1;
	unsigned isCodeSigningInfoNotAuthoritative : 1;
	unsigned _reserved : 1;
} LSBundleMoreFlags;

typedef struct LSBundleBaseData {
	unsigned bookmark;
	unsigned container;
	unsigned execPath;
	unsigned exactIdentifier;
	unsigned platform;
	int registrationTime;
	LSVersionNumber version;
	LSVersionNumber execSDKVersion;
	unsigned machOUUIDs;
	unsigned dataContainerAlias;
	unsigned bundleName;
	unsigned localizedShortDisplayName;
	unsigned displayName;
	unsigned localizedDisplayName;
	unsigned localizedMicrophoneUsageDescription;
	unsigned infoDictionary;
	unsigned entitlements;
	unsigned groupContainers;
	unsigned char containingDirectoryClass;
	unsigned char profileValidationState;
	unsigned intentDefinitionURLs;
	unsigned short _sliceMask;
} LSBundleBaseData;

typedef struct LSBundleData {
	LSBundleBaseData base;
	unsigned _clas;
	unsigned long long _bundleFlags;
	unsigned _plistContentFlags;
	unsigned _itemFlags;
	unsigned char _iconFlags;
	unsigned char highResFlags;
	unsigned char appNapFlags;
	unsigned char eGPUFlags;
	LSBundleMoreFlags moreFlags;
	unsigned _hfsType;
	unsigned _hfsCreator;
	unsigned long long _inoBundle;
	unsigned long long _inoExec;
	int _mtime;
	LSVersionNumber _minSystemVersion;
	LSVersionNumber _maxSystemVersion;
	LSVersionNumber _execMinOSVersion;
	unsigned long long sequenceNumber;
	unsigned long long itemID;
	unsigned deviceFamilies;
	unsigned teamID;
	unsigned identifier;
	unsigned counterpartIdentifiers;
	unsigned categoryType;
	unsigned secondaryCategoryType;
	unsigned filename;
	unsigned bundleVersion;
	unsigned shortVersionString;
	unsigned installType;
	unsigned long long installFailureReason;
	unsigned vendorName;
	unsigned long long purchaserDSID;
	unsigned long long downloaderDSID;
	unsigned long long familyID;
	unsigned itemName;
	unsigned long long storefront;
	unsigned long long versionIdentifier;
	unsigned sourceAppBundleID;
	unsigned appVariant;
	unsigned long long ratingRank;
	unsigned ratingLabel;
	unsigned primaryIconName;
	unsigned iconsDict;
	unsigned iconFileNames;
	unsigned libraryPath;
	unsigned libraryItems;
	unsigned claims;
	unsigned types;
	unsigned services;
	unsigned alternateNames;
	unsigned plugins;
	unsigned extensionPoints;
	unsigned activityTypes;
	unsigned bgPermittedIDs;
	unsigned appContainerAlias;
	unsigned char revision;
	unsigned char retries;
	unsigned char _reserved4;
	unsigned sandboxEnvironmentVariables;
	unsigned localizedNameWithContext[0];
	unsigned managedPersonas;
	int recordModificationTime;
	unsigned wrappedRelativePath;
	unsigned mobileInstallIDs;
	unsigned _reserved5;
} LSBundleData;

typedef struct _NSZone* NSZoneRef;

typedef struct {
	unsigned field1;
	unsigned field2;
	unsigned field3;
	short field4;
	unsigned short field5;
	unsigned field6;
	unsigned field7;
	unsigned field8;
	unsigned field9[1];
	unsigned field10;
	unsigned field11;
	unsigned field12;
} SCD_Struct_LS8;

typedef struct {
	unsigned field1;
	unsigned field2;
	unsigned field3;
	unsigned field4;
	int field5;
	unsigned field6;
	unsigned field7;
	unsigned field8[1];
	unsigned field9;
	unsigned field10;
	unsigned field11;
	unsigned field12;
	unsigned field13;
	unsigned field14;
	unsigned field15;
	unsigned field16;
} SCD_Struct_UT9;

typedef struct _compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> {
	unsigned __value_;
} compressed_pair<unsigned int *, std::__1::allocator<unsigned int>>;

typedef struct vector<unsigned int, std::__1::allocator<unsigned int>> {
	unsigned __begin_;
	unsigned __end_;
	compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> __end_cap_;
} vector<unsigned int, std::__1::allocator<unsigned int>>;

typedef struct {
	unsigned val[8];
} SCD_Struct_FS12;

typedef struct __CFBundle* CFBundleRef;

typedef struct OpaqueMappedResourceFileRef* OpaqueMappedResourceFileRefRef;

typedef struct __LSASN* LSASNRef;

typedef struct __CFString* CFStringRef;

typedef struct OpaqueIconRef* OpaqueIconRefRef;

typedef struct {
	unsigned field1;
	unsigned field2;
	unsigned field3;
} SCD_Struct_LS18;

typedef struct AEDesc {
	unsigned descriptorType;
	OpaqueAEDataStorageType dataHandle;
} AEDesc;

typedef struct AEKeyDesc {
	unsigned descKey;
	AEDesc descContent;
} AEKeyDesc;

typedef struct optional<audit_token_t> {
	/*function pointer*/void* ;
	char __null_state_;
	SCD_Struct_FS12) __val_;
	BOOL __engaged_;
} optional<audit_token_t>;

typedef struct _cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int>> {
	Ai __a_value;
} cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int>>;

typedef struct atomic<int> {
	cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int>> __a_;
} atomic<int>;

typedef struct NotifyToken {
	atomic<int> rawValue;
} NotifyToken;

typedef struct __CSStore* CSStoreRef;

typedef struct CSMapCallbacks {
	/*function pointer*/void* retainKey;
	/*function pointer*/void* releaseKey;
	/*function pointer*/void* getKeyHash;
	/*function pointer*/void* keyMatchesData;
	/*function pointer*/void* retainValue;
	/*function pointer*/void* releaseValue;
} CSMapCallbacks;

typedef struct CSMap {
	unsigned table;
	CSMapCallbacks cb;
	CSMapContext context;
	os_unfair_lock_s _lock;
	unsigned _generation;
	_CSMapHeader _header;
	unsigned _keys;
	unsigned _values;
} CSMap;

typedef struct {
	CSMap map;
} SCD_Struct_LS28;

typedef struct {
	CSMap map;
	unsigned bindingClass;
	unsigned char isCaseInsensitive;
} SCD_Struct_LS29;

typedef struct LSSchema {
	unsigned headerTable;
	unsigned bundleTable;
	unsigned claimTable;
	unsigned serviceTable;
	unsigned utypeTable;
	SCD_Struct_LS28 bindableKeyMap;
	SCD_Struct_LS29 bindingMaps[15];
	unsigned handlerPrefTable;
	unsigned containerTable;
	unsigned aliasTable;
	unsigned pluginTable;
	unsigned extensionPointTable;
	unsigned bindingListTable;
	unsigned propertyListTable;
	unsigned localizedStringTable;
	unsigned canonicalStringTable;
	unsigned surrogateTable;
	_LSSchemaCache _cache;
} LSSchema;

typedef struct BundleWrapperCreationOperation {
	/*function pointer*/void* _vptr$BundleWrapperMutationOperation;
	NSURL* _mutationParentDirectory;
	NSURL* _stagingDirectory;
	NSURL* _createdContainerURL;
	LSBundleWrapperStagingReceipt* _shoveResult;
	NSError* _shoveError;
	char _finalized;
	NSString* _targetBundlePhysicalName;
	NSString* _targetBundleExtension;
	NSURL* _targetDirectory;
} BundleWrapperCreationOperation;

typedef struct optional<LaunchServices::BundleWrappers::BundleWrapperCreationOperation> {
	/*function pointer*/void* ;
	char __null_state_;
	BundleWrapperCreationOperation) __val_;
	BOOL __engaged_;
} optional<LaunchServices::BundleWrappers::BundleWrapperCreationOperation>;

typedef struct BundleWrapperUpdateOperation {
	/*function pointer*/void* _vptr$BundleWrapperMutationOperation;
	NSURL* _mutationParentDirectory;
	NSURL* _stagingDirectory;
	NSURL* _createdContainerURL;
	LSBundleWrapperStagingReceipt* _shoveResult;
	NSError* _shoveError;
	char _finalized;
	NSURL* _existingWrapperURL;
	NSURL* _finalizedURL;
} BundleWrapperUpdateOperation;

typedef struct optional<LaunchServices::BundleWrappers::BundleWrapperUpdateOperation> {
	/*function pointer*/void* ;
	char __null_state_;
	BundleWrapperUpdateOperation) __val_;
	BOOL __engaged_;
} optional<LaunchServices::BundleWrappers::BundleWrapperUpdateOperation>;

typedef struct sqlite3* sqlite3Ref;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct {
	unsigned showDebugInfo : 1;
	unsigned alwaysFailToBind : 1;
	unsigned useUnlocalizedAppNames : 1;
} SCD_Struct_LS37;

typedef struct Options {
	unsigned forDefaultHandlerSelection : 1;
	unsigned showAppStoreMenuItem : 1;
	unsigned showOtherMenuItem : 1;
	unsigned allowMenuWithNoApplications : 1;
	unsigned otherPanelAlwaysModal : 1;
	unsigned stronglyBoundApplicationIncluded : 1;
	unsigned universalLinksIncluded : 1;
	SCD_Struct_LS37 internal;
} Options;

typedef struct _compressed_pair<LaunchServices::OpenWithMenu::State *, std::__1::default_delete<LaunchServices::OpenWithMenu::State>> {
	State __value_;
} compressed_pair<LaunchServices::OpenWithMenu::State *, std::__1::default_delete<LaunchServices::OpenWithMenu::State>>;

typedef struct unique_ptr<LaunchServices::OpenWithMenu::State, std::__1::default_delete<LaunchServices::OpenWithMenu::State>> {
	compressed_pair<LaunchServices::OpenWithMenu::State *, std::__1::default_delete<LaunchServices::OpenWithMenu::State>> __ptr_;
} unique_ptr<LaunchServices::OpenWithMenu::State, std::__1::default_delete<LaunchServices::OpenWithMenu::State>>;

typedef struct _cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool>> {
	AB __a_value;
} cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool>>;

typedef struct atomic_flag {
	cxx_atomic_impl<bool, std::__1::__cxx_atomic_base_impl<bool>> __a_;
} atomic_flag;

typedef struct Context {
	LSContext _contextPointer;
	LSContext _contextStorage;
	BOOL _created;
	NSError* _error;
} Context;

typedef struct {
	unsigned long long field1;
	id field2;
	unsigned long long field3;
	unsigned long long field4[5];
} SCD_Struct_LS44;

typedef struct __CFArray* CFArrayRef;

typedef struct ProcessSerialNumber {
	unsigned highLongOfPSN;
	unsigned lowLongOfPSN;
} ProcessSerialNumber;

typedef struct _compressed_pair<ProcessSerialNumber *, std::__1::allocator<ProcessSerialNumber>> {
	ProcessSerialNumber __value_;
} compressed_pair<ProcessSerialNumber *, std::__1::allocator<ProcessSerialNumber>>;

typedef struct vector<ProcessSerialNumber, std::__1::allocator<ProcessSerialNumber>> {
	ProcessSerialNumber __begin_;
	ProcessSerialNumber __end_;
	compressed_pair<ProcessSerialNumber *, std::__1::allocator<ProcessSerialNumber>> __end_cap_;
} vector<ProcessSerialNumber, std::__1::allocator<ProcessSerialNumber>>;

