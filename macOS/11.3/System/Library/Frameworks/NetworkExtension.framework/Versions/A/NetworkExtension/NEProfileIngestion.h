/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:10 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/NetworkExtension.framework/Versions/A/NetworkExtension
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <NetworkExtension/NetworkExtension-Structs.h>
#import <libobjc.A.dylib/NEProfileIngestionDelegate.h>

@class NSString, NEConfigurationManager, NSMutableArray, NEConfiguration;

@interface NEProfileIngestion : NSObject <NEProfileIngestionDelegate> {

	NSString* _clientName;
	NSString* _payloadType;
	NEConfigurationManager* _manager;
	AuthorizationOpaqueRefRef _authorization;
	NSMutableArray* _currentConfigurations;
	NEConfiguration* _ingestedConfiguration;

}

@property (readonly) NSString * clientName;                                //@synthesize clientName=_clientName - In the implementation block
@property (readonly) NSString * payloadType;                               //@synthesize payloadType=_payloadType - In the implementation block
@property (readonly) NEConfigurationManager * manager;                     //@synthesize manager=_manager - In the implementation block
@property (readonly) AuthorizationOpaqueRefRef authorization;              //@synthesize authorization=_authorization - In the implementation block
@property (retain) NSMutableArray * currentConfigurations;                 //@synthesize currentConfigurations=_currentConfigurations - In the implementation block
@property (retain) NEConfiguration * ingestedConfiguration;                //@synthesize ingestedConfiguration=_ingestedConfiguration - In the implementation block
+(id)getServiceIDForPayload:(id)arg1 ;
+(void)profileMigrationComplete;
-(id)initWithNameAndType:(id)arg1 payloadType:(id)arg2 ;
-(NEConfiguration *)ingestedConfiguration;
-(id)findConfigurationByConfigurationID:(id)arg1 ;
-(void)setIngestedConfiguration:(NEConfiguration *)arg1 ;
-(char)loadConfigurationsWithRefreshOption:(char)arg1 ;
-(id)findConfigurationByName:(id)arg1 ;
-(char)saveConfiguration:(id)arg1 ;
-(id)findConfigurationByPayloadUUID:(id)arg1 ;
-(id)resolveConfigurationNameConflict:(id)arg1 ;
-(char)loadConfigurationsForceReloadFromDisk;
-(char)enableAlwaysOnVpnInternal:(char)arg1 ;
-(char)isAutoCreatedRule:(id)arg1 ;
-(id)initWithNameAndAuthorization:(id)arg1 authorization:(AuthorizationOpaqueRefRef)arg2 ;
-(void)removeOrphanConfigurations:(id)arg1 profileUUID:(id)arg2 ;
-(char)createConfigurationFromPayload:(id)arg1 payloadType:(id)arg2 ;
-(char)saveIngestedConfiguration;
-(char)removeIngestedConfiguration;
-(id)setAsideConfigurationName:(id)arg1 unsetAside:(char)arg2 ;
-(char)isInstalled:(id)arg1 ;
-(char)lockConfigurations;
-(void)unlockConfigurations;
-(void)enableDefaultService;
-(char)enableAlwaysOnVpn;
-(char)updateDefaultAfterAddingConfiguration;
-(char)updateDefaultAfterDeletingConfiguration;
-(id)copyManagedConfigurationIDs;
-(char)updateAppLayerVPNMappingRules:(id)arg1 ;
-(char)updateManagedAppRules:(id)arg1 ;
-(char)updateAccountIdentifiers:(id)arg1 ;
-(id)getCertificatesForConfigurationWithIdentifier:(id)arg1 ;
-(id)findMostSpecificAppRuleForBundleID:(id)arg1 config:(id)arg2 ;
-(void)dealloc;
-(id)initWithName:(id)arg1 ;
-(NEConfigurationManager *)manager;
-(NSString *)clientName;
-(AuthorizationOpaqueRefRef)authorization;
-(char)removeConfigurationWithIdentifier:(id)arg1 ;
-(NSString *)payloadType;
-(NSMutableArray *)currentConfigurations;
-(void)setCurrentConfigurations:(NSMutableArray *)arg1 ;
-(char)removeConfiguration:(id)arg1 ;
@end

