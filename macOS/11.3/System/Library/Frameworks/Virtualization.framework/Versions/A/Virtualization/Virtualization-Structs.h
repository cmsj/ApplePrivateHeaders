/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:45 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/Virtualization.framework/Versions/A/Virtualization
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSObject<OS_dispatch_queue>;

typedef struct _NSZone* NSZoneRef;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct sockaddr_storage {
	unsigned char ss_len;
	unsigned char ss_family;
	char __ss_pad1[6];
	long long __ss_align;
	char __ss_pad2[112];
} sockaddr_storage;

typedef struct shared_ptr<Base::VirtualMemory::Handle> {
	Handle __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<Base::VirtualMemory::Handle>;

typedef struct CfPtr<NSObject<OS_dispatch_queue> *> {
	NSObject<OS_dispatch_queue>* _ptr;
} CfPtr<NSObject<OS_dispatch_queue> *>;

typedef struct DispatchQueue {
	CfPtr<NSObject<OS_dispatch_queue> *> _queue;
} DispatchQueue;

typedef struct _compressed_pair<Networking::NetworkListener *, std::__1::default_delete<Networking::NetworkListener>> {
	NetworkListener __value_;
} compressed_pair<Networking::NetworkListener *, std::__1::default_delete<Networking::NetworkListener>>;

typedef struct unique_ptr<Networking::NetworkListener, std::__1::default_delete<Networking::NetworkListener>> {
	compressed_pair<Networking::NetworkListener *, std::__1::default_delete<Networking::NetworkListener>> __ptr_;
} unique_ptr<Networking::NetworkListener, std::__1::default_delete<Networking::NetworkListener>>;

typedef struct _compressed_pair<(anonymous namespace)::BackendDelegate *, std::__1::default_delete<(anonymous namespace)::BackendDelegate>> {
	BackendDelegate __value_;
} compressed_pair<(anonymous namespace)::BackendDelegate *, std::__1::default_delete<(anonymous namespace)::BackendDelegate>>;

typedef struct unique_ptr<(anonymous namespace)::BackendDelegate, std::__1::default_delete<(anonymous namespace)::BackendDelegate>> {
	compressed_pair<(anonymous namespace)::BackendDelegate *, std::__1::default_delete<(anonymous namespace)::BackendDelegate>> __ptr_;
} unique_ptr<(anonymous namespace)::BackendDelegate, std::__1::default_delete<(anonymous namespace)::BackendDelegate>>;

typedef struct _compressed_pair<std::__1::unique_ptr<Vnc::VncBackend, std::__1::default_delete<Vnc::VncBackend>> *, std::__1::allocator<std::__1::unique_ptr<Vnc::VncBackend, std::__1::default_delete<Vnc::VncBackend>>>> {
	unique_ptr<Vnc::VncBackend, std::__1::default_delete<Vnc::VncBackend>> __value_;
} compressed_pair<std::__1::unique_ptr<Vnc::VncBackend, std::__1::default_delete<Vnc::VncBackend>> *, std::__1::allocator<std::__1::unique_ptr<Vnc::VncBackend, std::__1::default_delete<Vnc::VncBackend>>>>;

typedef struct vector<std::__1::unique_ptr<Vnc::VncBackend, std::__1::default_delete<Vnc::VncBackend>>, std::__1::allocator<std::__1::unique_ptr<Vnc::VncBackend, std::__1::default_delete<Vnc::VncBackend>>>> {
	unique_ptr<Vnc::VncBackend, std::__1::default_delete<Vnc::VncBackend>> __begin_;
	unique_ptr<Vnc::VncBackend, std::__1::default_delete<Vnc::VncBackend>> __end_;
	compressed_pair<std::__1::unique_ptr<Vnc::VncBackend, std::__1::default_delete<Vnc::VncBackend>> *, std::__1::allocator<std::__1::unique_ptr<Vnc::VncBackend, std::__1::default_delete<Vnc::VncBackend>>>> __end_cap_;
} vector<std::__1::unique_ptr<Vnc::VncBackend, std::__1::default_delete<Vnc::VncBackend>>, std::__1::allocator<std::__1::unique_ptr<Vnc::VncBackend, std::__1::default_delete<Vnc::VncBackend>>>>;

typedef struct CpuTopology {
	unsigned _package_count;
	unsigned _cores_per_package;
	unsigned _threads_per_core;
} CpuTopology;

typedef struct _compressed_pair<Storage::DiskImage *, std::__1::default_delete<Storage::DiskImage>> {
	DiskImage __value_;
} compressed_pair<Storage::DiskImage *, std::__1::default_delete<Storage::DiskImage>>;

typedef struct unique_ptr<Storage::DiskImage, std::__1::default_delete<Storage::DiskImage>> {
	compressed_pair<Storage::DiskImage *, std::__1::default_delete<Storage::DiskImage>> __ptr_;
} unique_ptr<Storage::DiskImage, std::__1::default_delete<Storage::DiskImage>>;

typedef struct _compressed_pair<VzShared::Messenger *, std::__1::default_delete<VzShared::Messenger>> {
	Messenger __value_;
} compressed_pair<VzShared::Messenger *, std::__1::default_delete<VzShared::Messenger>>;

typedef struct unique_ptr<VzShared::Messenger, std::__1::default_delete<VzShared::Messenger>> {
	compressed_pair<VzShared::Messenger *, std::__1::default_delete<VzShared::Messenger>> __ptr_;
} unique_ptr<VzShared::Messenger, std::__1::default_delete<VzShared::Messenger>>;

typedef struct optional<_VZDebugStub *> {
	/*function pointer*/void* ;
	char __null_state_;
	id __val_;
	) _VZDebugStub;
	BOOL __engaged_;
} optional<_VZDebugStub *>;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, VZVirtioSocketListener *>, std::__1::less<unsigned int>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, VZVirtioSocketListener *>, std::__1::less<unsigned int>, true>>;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, VZVirtioSocketListener *>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, VZVirtioSocketListener *>, void *>>>;

typedef struct _tree<std::__1::__value_type<unsigned int, VZVirtioSocketListener *>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, VZVirtioSocketListener *>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, VZVirtioSocketListener *>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, VZVirtioSocketListener *>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, VZVirtioSocketListener *>, std::__1::less<unsigned int>, true>> __pair3_;
} tree<std::__1::__value_type<unsigned int, VZVirtioSocketListener *>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, VZVirtioSocketListener *>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, VZVirtioSocketListener *>>>;

typedef struct map<unsigned int, VZVirtioSocketListener *, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, VZVirtioSocketListener *>>> {
	tree<std::__1::__value_type<unsigned int, VZVirtioSocketListener *>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, VZVirtioSocketListener *>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, VZVirtioSocketListener *>>> __tree_;
} map<unsigned int, VZVirtioSocketListener *, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, VZVirtioSocketListener *>>>;

typedef struct _compressed_pair<VZVirtioSocketConnection *__weak *, std::__1::allocator<VZVirtioSocketConnection *__weak>> {
	id __value_;
} compressed_pair<VZVirtioSocketConnection *__weak *, std::__1::allocator<VZVirtioSocketConnection *__weak>>;

typedef struct vector<VZVirtioSocketConnection *__weak, std::__1::allocator<VZVirtioSocketConnection *__weak>> {
	id __begin_;
	id __end_;
	compressed_pair<VZVirtioSocketConnection *__weak *, std::__1::allocator<VZVirtioSocketConnection *__weak>> __end_cap_;
} vector<VZVirtioSocketConnection *__weak, std::__1::allocator<VZVirtioSocketConnection *__weak>>;

typedef struct _compressed_pair<PendingGuestConnection *, std::__1::allocator<PendingGuestConnection>> {
	PendingGuestConnection __value_;
} compressed_pair<PendingGuestConnection *, std::__1::allocator<PendingGuestConnection>>;

typedef struct vector<PendingGuestConnection, std::__1::allocator<PendingGuestConnection>> {
	PendingGuestConnection __begin_;
	PendingGuestConnection __end_;
	compressed_pair<PendingGuestConnection *, std::__1::allocator<PendingGuestConnection>> __end_cap_;
} vector<PendingGuestConnection, std::__1::allocator<PendingGuestConnection>>;

typedef struct FileDescriptor {
	int _fd;
} FileDescriptor;

typedef struct array<unsigned char, 6> {
	unsigned char __elems_[6];
} array<unsigned char, 6>;

typedef struct MacAddress {
	array<unsigned char, 6> _octets;
} MacAddress;

typedef struct _compressed_pair<Observer *, std::__1::allocator<Observer>> {
	Observer __value_;
} compressed_pair<Observer *, std::__1::allocator<Observer>>;

typedef struct vector<Observer, std::__1::allocator<Observer>> {
	Observer __begin_;
	Observer __end_;
	compressed_pair<Observer *, std::__1::allocator<Observer>> __end_cap_;
} vector<Observer, std::__1::allocator<Observer>>;

typedef struct _compressed_pair<unsigned short *, std::__1::allocator<unsigned short>> {
	unsigned short __value_;
} compressed_pair<unsigned short *, std::__1::allocator<unsigned short>>;

typedef struct vector<unsigned short, std::__1::allocator<unsigned short>> {
	unsigned short __begin_;
	unsigned short __end_;
	compressed_pair<unsigned short *, std::__1::allocator<unsigned short>> __end_cap_;
} vector<unsigned short, std::__1::allocator<unsigned short>>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> *>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> *>>;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>>;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>>;

typedef struct BlockNumber {
	unsigned long long _value;
} BlockNumber;

typedef struct DiskCapacity {
	unsigned _block_size;
	BlockNumber _block_count;
} DiskCapacity;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *>>> {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *>>>;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> *>> {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> *>> __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> *>>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> *>>> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> *>> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> *>>>;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> *>>> {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> *>>> __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> *>>>;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>>> {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *> *>>> __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, void *>>> __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>> __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>>>;

typedef struct unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>>> {
	hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>>> __table_;
} unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>>>;

typedef struct PropertyBag {
	unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, Base::PropertyBag::Value>>> _properties;
} PropertyBag;

typedef struct Descriptor {
	DiskImageFormat format;
	PropertyBag parameters;
	DiskCapacity disk_capacity;
} Descriptor;

typedef struct Address {
	unsigned destination_port;
	unsigned source_port;
} Address;

typedef struct VirtioSocket {
	Address address;
	FileDescriptor file_descriptor;
} VirtioSocket;

typedef struct CGContext* CGContextRef;

typedef struct optional<CGPoint> {
	/*function pointer*/void* ;
	char __null_state_;
	CGPoint) __val_;
	BOOL __engaged_;
} optional<CGPoint>;

