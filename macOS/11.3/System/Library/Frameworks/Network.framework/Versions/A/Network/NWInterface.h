/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:03 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/Network.framework/Versions/A/Network
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Network/Network-Structs.h>
#import <libobjc.A.dylib/NWPrettyDescription.h>
#import <libobjc.A.dylib/NSSecureCoding.h>
#import <libobjc.A.dylib/NSCopying.h>

@protocol OS_nw_interface;
@class NSObject, NSString;

@interface NWInterface : NSObject <NWPrettyDescription, NSSecureCoding, NSCopying> {

	NSObject*<OS_nw_interface> _internalInterface;

}

@property (nonatomic,readonly) char supportsMulticast; 
@property (nonatomic,readonly) char hasDNS; 
@property (nonatomic,readonly) char hasNAT64; 
@property (getter=isIPv4Routable,nonatomic,readonly) char ipv4Routable; 
@property (getter=isIPv6Routable,nonatomic,readonly) char ipv6Routable; 
@property (retain) NSObject*<OS_nw_interface> internalInterface;                     //@synthesize internalInterface=_internalInterface - In the implementation block
@property (nonatomic,readonly) unsigned long long generation; 
@property (nonatomic,readonly) long long mtu; 
@property (nonatomic,readonly) NWInterface * delegateInterface; 
@property (nonatomic,readonly) NSString * typeString; 
@property (nonatomic,copy,readonly) NSString * privateDescription; 
@property (nonatomic,readonly) NSString * interfaceName; 
@property (nonatomic,readonly) unsigned long long interfaceIndex; 
@property (nonatomic,readonly) long long type; 
@property (nonatomic,readonly) long long subtype; 
@property (getter=isExpensive,nonatomic,readonly) char expensive; 
@property (getter=isConstrained,nonatomic,readonly) char constrained; 
+(id)interfaceWithProtocolBufferData:(id)arg1 ;
+(char)supportsSecureCoding;
+(id)descriptionForType:(long long)arg1 ;
+(id)descriptionForSubtype:(long long)arg1 ;
-(id)descriptionWithIndent:(int)arg1 showFullContent:(char)arg2 ;
-(id)createProtocolBufferObject;
-(NWInterface *)delegateInterface;
-(char)hasNAT64;
-(char)isIPv4Routable;
-(char)isIPv6Routable;
-(id)ipv4Netmask;
-(id)ipv4Broadcast;
-(char)isShallowEqual:(id)arg1 ;
-(char)isDeepEqual:(id)arg1 ;
-(NSObject*<OS_nw_interface>)internalInterface;
-(void)setInternalInterface:(NSObject*<OS_nw_interface>)arg1 ;
-(id)copyLocalAddressForRemoteAddress:(id)arg1 ;
-(id)copyLocalAddressForDefaultIPv6;
-(id)copyLocalAddressForDefaultIPv4;
-(id)initWithInterfaceIndex:(unsigned long long)arg1 interfaceName:(id)arg2 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(char)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(id)description;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(unsigned long long)generation;
-(long long)type;
-(long long)subtype;
-(id)initWithInterface:(id)arg1 ;
-(unsigned long long)interfaceIndex;
-(NSString *)interfaceName;
-(NSString *)typeString;
-(long long)mtu;
-(NSString *)privateDescription;
-(id)initWithInterfaceName:(id)arg1 ;
-(char)isExpensive;
-(char)isConstrained;
-(id)initWithInterfaceIndex:(unsigned long long)arg1 ;
-(char)hasDNS;
-(char)supportsMulticast;
@end

