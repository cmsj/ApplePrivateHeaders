/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:03 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/Network.framework/Versions/A/Network
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Network/Network-Structs.h>
#import <libobjc.A.dylib/NWPrettyDescription.h>
#import <libobjc.A.dylib/NSSecureCoding.h>
#import <libobjc.A.dylib/NSCopying.h>

@protocol OS_nw_parameters;
@class NSObject, NSSet, NSUUID, NSArray, NSString, NSURL, NSDictionary, NWAddressEndpoint, NWInterface, NSData;

@interface NWParameters : NSObject <NWPrettyDescription, NSSecureCoding, NSCopying> {

	char _enableSFO;
	NSObject*<OS_nw_parameters> _internalParameters;
	NSSet* _SSLCipherSuitesInternal;
	unsigned long long _minimumSSLProtocolVersionInternal;
	unsigned long long _maximumSSLProtocolVersionInternal;

}

@property (retain) NSObject*<OS_nw_parameters> internalParameters;                                       //@synthesize internalParameters=_internalParameters - In the implementation block
@property (assign,nonatomic) char indefinite; 
@property (assign,nonatomic) char noProxy; 
@property (getter=isValid,nonatomic,readonly) char valid; 
@property (getter=isDryRun,nonatomic,readonly) char dryRun; 
@property (nonatomic,readonly) char prohibitCellular; 
@property (assign,nonatomic) char prohibitFallback; 
@property (assign,getter=isDiscretionary,nonatomic) char discretionary; 
@property (assign,nonatomic) char allowSocketAccess; 
@property (nonatomic,retain) NSUUID * parentID; 
@property (nonatomic,readonly) NSArray * parentIDs; 
@property (setter=SLCipherSuitesInternal,nonatomic,retain) NSSet * SSLCipherSuitesInternal;              //@synthesize SSLCipherSuitesInternal=_SSLCipherSuitesInternal - In the implementation block
@property (assign,nonatomic) unsigned long long minimumSSLProtocolVersionInternal;                       //@synthesize minimumSSLProtocolVersionInternal=_minimumSSLProtocolVersionInternal - In the implementation block
@property (assign,nonatomic) unsigned long long maximumSSLProtocolVersionInternal;                       //@synthesize maximumSSLProtocolVersionInternal=_maximumSSLProtocolVersionInternal - In the implementation block
@property (nonatomic,readonly) unsigned char transportProtocol; 
@property (assign,nonatomic) char keepAlive; 
@property (assign,nonatomic) unsigned long long keepAliveIdleTime; 
@property (assign,nonatomic) unsigned long long keepAliveInterval; 
@property (assign,nonatomic) char keepAliveOffload; 
@property (assign,nonatomic) char httpsProxyIsOpaque; 
@property (assign,nonatomic) char httpsProxyOverTLS; 
@property (assign,nonatomic) char attachProtocolListener; 
@property (assign,nonatomic) char prohibitJoiningProtocols; 
@property (assign,nonatomic) char allowJoiningConnectedFd; 
@property (assign,nonatomic) char allowDuplicateStateUpdates; 
@property (assign,nonatomic) char trustInvalidCertificates; 
@property (nonatomic,copy,readonly) NSString * privateDescription; 
@property (nonatomic,readonly) unsigned char ipProtocol; 
@property (assign,nonatomic) int pid; 
@property (assign,nonatomic) unsigned uid; 
@property (nonatomic,copy) NSUUID * processUUID; 
@property (nonatomic,copy) NSUUID * effectiveProcessUUID; 
@property (nonatomic,copy) NSString * effectiveBundleID; 
@property (assign,nonatomic) char useLongOutstandingQueries; 
@property (assign,nonatomic) char ignoreResolverStats; 
@property (assign,nonatomic) char useAWDL; 
@property (assign,nonatomic) char useP2P; 
@property (assign,nonatomic) char resolvePTR; 
@property (assign,nonatomic) char multipath; 
@property (assign,nonatomic) int multipathService; 
@property (assign,nonatomic) char multipathForceEnable; 
@property (assign,nonatomic) unsigned char requiredAddressFamily; 
@property (nonatomic,copy) NSURL * url; 
@property (nonatomic,readonly) NSURL * sanitizedURL; 
@property (nonatomic,copy) NSDictionary * proxyConfiguration; 
@property (nonatomic,retain) NWAddressEndpoint * localAddress; 
@property (assign,nonatomic) char reuseLocalAddress; 
@property (nonatomic,retain) NWInterface * requiredInterface; 
@property (assign,nonatomic) long long requiredInterfaceType; 
@property (assign,nonatomic) long long requiredInterfaceSubtype; 
@property (assign,nonatomic) char enableTFO; 
@property (assign,nonatomic) char enableTFONoCookie; 
@property (assign,nonatomic) char fastOpenForceEnable; 
@property (assign,nonatomic) char enableSFO;                                                             //@synthesize enableSFO=_enableSFO - In the implementation block
@property (nonatomic,retain) NSData * metadata; 
@property (assign,nonatomic) char prohibitRoaming; 
@property (nonatomic,copy) NSArray * protocolTransforms; 
@property (assign,nonatomic) char allowUnusableAddresses; 
@property (assign,nonatomic) char preferNoProxy; 
@property (nonatomic,copy) NSString * account; 
@property (assign,nonatomic) unsigned long long dataMode; 
@property (assign,nonatomic) unsigned long long trafficClass; 
@property (assign,nonatomic) char prohibitExpensivePaths; 
@property (assign,nonatomic) char prohibitConstrainedPaths; 
@property (assign,nonatomic) char reduceBuffering; 
@property (assign,nonatomic) char disableNagleAlgorithm; 
@property (assign,nonatomic) char enableTLS; 
@property (nonatomic,copy) NSData * TLSSessionID; 
@property (nonatomic,copy) NSSet * SSLCipherSuites; 
@property (assign,nonatomic) unsigned long long minimumSSLProtocolVersion; 
@property (assign,nonatomic) unsigned long long maximumSSLProtocolVersion; 
+(id)parametersWithProtocolBufferData:(id)arg1 ;
+(char)supportsSecureCoding;
+(id)parametersWithCParameters:(id)arg1 ;
-(id)descriptionWithIndent:(int)arg1 showFullContent:(char)arg2 ;
-(id)createProtocolBufferObject;
-(long long)requiredInterfaceType;
-(void)setReduceBuffering:(char)arg1 ;
-(void)setUseAWDL:(char)arg1 ;
-(void)setUseP2P:(char)arg1 ;
-(void)setReuseLocalAddress:(char)arg1 ;
-(void)setMultipathService:(int)arg1 ;
-(char)reduceBuffering;
-(char)useP2P;
-(char)reuseLocalAddress;
-(int)multipathService;
-(id)copyCParameters;
-(char)trustInvalidCertificates;
-(void)setTrustInvalidCertificates:(char)arg1 ;
-(void)setAllowSocketAccess:(char)arg1 ;
-(char)allowSocketAccess;
-(char)hasDelegatedPIDForOriginatingPID:(int)arg1 ;
-(char)hasDelegatedProcessUUID;
-(char)copyEffectiveAuditToken:(SCD_Struct_NW22*)arg1 ;
-(NSArray *)parentIDs;
-(unsigned char)requiredAddressFamily;
-(NSURL *)sanitizedURL;
-(char)prohibitExpensivePaths;
-(char)prohibitConstrainedPaths;
-(char)prohibitRoaming;
-(void)setProhibitRoaming:(char)arg1 ;
-(char)prohibitCellular;
-(void)prohibitInterfaceType:(long long)arg1 ;
-(void)prohibitInterface:(id)arg1 ;
-(void)prohibitNetworkAgentWithUUID:(id)arg1 ;
-(long long)requiredInterfaceSubtype;
-(void)setRequiredInterfaceSubtype:(long long)arg1 ;
-(void)requireNetworkAgentWithUUID:(id)arg1 ;
-(void)preferNetworkAgentWithUUID:(id)arg1 ;
-(void)preferNetworkAgentWithDomain:(id)arg1 type:(id)arg2 ;
-(void)avoidNetworkAgentWithUUID:(id)arg1 ;
-(void)avoidNetworkAgentWithDomain:(id)arg1 type:(id)arg2 ;
-(char)enableTFONoCookie;
-(char)fastOpenForceEnable;
-(void)setFastOpenForceEnable:(char)arg1 ;
-(char)disableNagleAlgorithm;
-(void)setDisableNagleAlgorithm:(char)arg1 ;
-(char)useLongOutstandingQueries;
-(void)setUseLongOutstandingQueries:(char)arg1 ;
-(char)ignoreResolverStats;
-(char)resolvePTR;
-(void)setResolvePTR:(char)arg1 ;
-(char)multipathForceEnable;
-(void)setMultipathForceEnable:(char)arg1 ;
-(char)indefinite;
-(void)setIndefinite:(char)arg1 ;
-(char)noProxy;
-(void)setNoProxy:(char)arg1 ;
-(char)enableTLS;
-(unsigned long long)keepAliveIdleTime;
-(void)setKeepAliveIdleTime:(unsigned long long)arg1 ;
-(char)keepAliveOffload;
-(void)setKeepAliveOffload:(char)arg1 ;
-(unsigned short)tlsVersionWithSSLProtocol:(int)arg1 ;
-(void)setSourceApplicationWithToken:(SCD_Struct_NW22)arg1 ;
-(void)setProtocolTransforms:(NSArray *)arg1 ;
-(NSArray *)protocolTransforms;
-(char)prohibitFallback;
-(void)setProhibitFallback:(char)arg1 ;
-(char)hasRequiredNetworkAgents;
-(char)hasPreferredNetworkAgents;
-(char)hasProhibitedNetworkAgents;
-(char)hasNonEmptyProxyConfiguration;
-(id)copyRequiredAgentsDescription;
-(void)setProtocolAtLevel:(unsigned long long)arg1 protocol:(nw_protocol_identifier*)arg2 ;
-(char)allowUnusableAddresses;
-(void)setPreferNoProxy:(char)arg1 ;
-(char)preferNoProxy;
-(void)setHttpsProxyIsOpaque:(char)arg1 ;
-(char)httpsProxyIsOpaque;
-(void)setHttpsProxyOverTLS:(char)arg1 ;
-(char)httpsProxyOverTLS;
-(void)setAttachProtocolListener:(char)arg1 ;
-(char)attachProtocolListener;
-(void)setProhibitJoiningProtocols:(char)arg1 ;
-(char)prohibitJoiningProtocols;
-(void)setAllowJoiningConnectedFd:(char)arg1 ;
-(char)allowJoiningConnectedFd;
-(void)setAllowDuplicateStateUpdates:(char)arg1 ;
-(char)allowDuplicateStateUpdates;
-(NSSet *)SSLCipherSuitesInternal;
-(void)setSSLCipherSuitesInternal:(NSSet *)arg1 ;
-(unsigned long long)minimumSSLProtocolVersionInternal;
-(void)setMinimumSSLProtocolVersionInternal:(unsigned long long)arg1 ;
-(unsigned long long)maximumSSLProtocolVersionInternal;
-(void)setMaximumSSLProtocolVersionInternal:(unsigned long long)arg1 ;
-(char)enableSFO;
-(void)setEnableSFO:(char)arg1 ;
-(void)setSourceApplicationWithBundleID:(id)arg1 ;
-(void)setEffectiveProcessUUID:(NSUUID *)arg1 ;
-(NSObject*<OS_nw_parameters>)internalParameters;
-(void)setInternalParameters:(NSObject*<OS_nw_parameters>)arg1 ;
-(void)setIgnoreResolverStats:(char)arg1 ;
-(NSUUID *)effectiveProcessUUID;
-(void)setEnableTLS:(char)arg1 ;
-(NSData *)TLSSessionID;
-(void)setTLSSessionID:(NSData *)arg1 ;
-(NSSet *)SSLCipherSuites;
-(void)setSSLCipherSuites:(NSSet *)arg1 ;
-(unsigned long long)minimumSSLProtocolVersion;
-(void)setMinimumSSLProtocolVersion:(unsigned long long)arg1 ;
-(unsigned long long)maximumSSLProtocolVersion;
-(void)setMaximumSSLProtocolVersion:(unsigned long long)arg1 ;
-(void)setMultipath:(char)arg1 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(char)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(id)description;
-(id)init;
-(char)isValid;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(NSURL *)url;
-(int)pid;
-(unsigned)uid;
-(void)setUrl:(NSURL *)arg1 ;
-(void)setUid:(unsigned)arg1 ;
-(void)setDiscretionary:(char)arg1 ;
-(id)initWithParameters:(id)arg1 ;
-(NSData *)metadata;
-(NSString *)account;
-(void)setAccount:(NSString *)arg1 ;
-(void)setMetadata:(NSData *)arg1 ;
-(char)multipath;
-(void)setPid:(int)arg1 ;
-(unsigned long long)dataMode;
-(void)setDataMode:(unsigned long long)arg1 ;
-(void)requireNetworkAgentWithDomain:(id)arg1 type:(id)arg2 ;
-(NSString *)privateDescription;
-(void)prohibitInterfaceSubtype:(long long)arg1 ;
-(void)setTrafficClass:(unsigned long long)arg1 ;
-(char)isDiscretionary;
-(void)setRequiredInterface:(NWInterface *)arg1 ;
-(void)setProhibitExpensivePaths:(char)arg1 ;
-(NSUUID *)processUUID;
-(unsigned long long)trafficClass;
-(unsigned char)ipProtocol;
-(void)setEffectiveBundleID:(NSString *)arg1 ;
-(unsigned char)transportProtocol;
-(NSString *)effectiveBundleID;
-(NSUUID *)parentID;
-(void)setParentID:(NSUUID *)arg1 ;
-(NSDictionary *)proxyConfiguration;
-(void)setProxyConfiguration:(NSDictionary *)arg1 ;
-(void)setKeepAlive:(char)arg1 ;
-(char)keepAlive;
-(unsigned long long)keepAliveInterval;
-(void)setKeepAliveInterval:(unsigned long long)arg1 ;
-(NWAddressEndpoint *)localAddress;
-(void)prohibitNetworkAgentsWithDomain:(id)arg1 type:(id)arg2 ;
-(void)setLocalAddress:(NWAddressEndpoint *)arg1 ;
-(void)setEnableTFO:(char)arg1 ;
-(void)setEnableTFONoCookie:(char)arg1 ;
-(void)setInitialDataPayload:(id)arg1 ;
-(char)enableTFO;
-(void)setAllowUnusableAddresses:(char)arg1 ;
-(void)setRequiredAddressFamily:(unsigned char)arg1 ;
-(char)isDryRun;
-(void)setRequiredInterfaceType:(long long)arg1 ;
-(char)useAWDL;
-(NWInterface *)requiredInterface;
-(void)setProcessUUID:(NSUUID *)arg1 ;
-(void)setProhibitConstrainedPaths:(char)arg1 ;
@end

