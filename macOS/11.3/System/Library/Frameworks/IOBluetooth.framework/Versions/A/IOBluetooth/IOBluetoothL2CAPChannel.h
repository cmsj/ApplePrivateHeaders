/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:11 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/IOBluetooth.framework/Versions/A/IOBluetooth
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <IOBluetooth/IOBluetooth-Structs.h>
#import <IOBluetooth/IOBluetoothObject.h>
#import <libobjc.A.dylib/NSPortDelegate.h>

@protocol IOBluetoothL2CAPChannelDelegate;
@class NSPort, IOBluetoothDevice, IOBluetoothL2CAPChannelExpansion, NSObject, NSString;

@interface IOBluetoothL2CAPChannel : IOBluetoothObject <NSPortDelegate> {

	NSPort* mDataAvailablePort;
	IODataQueueMemory* mIncomingDataQueue;
	IOBluetoothDevice* mDevice;
	char mIncomingChannel;
	/*function pointer*/void* mIncomingDataListener;
	void* mIncomingDataListenerRefCon;
	/*function pointer*/void* mEventDataListener;
	void* mEventDataListenerRefCon;
	unsigned short mChannelPSM;
	unsigned short mLocalChannelID;
	unsigned short mRemoteChannelID;
	char mIsClosed;
	unsigned long long mObjectID;
	IOBluetoothL2CAPChannelExpansion* _mReserved;
	NSObject*<IOBluetoothL2CAPChannelDelegate> _mL2CAPChannelConnectionHandler;

}

@property (retain) IOBluetoothL2CAPChannelExpansion * mReserved;                                           //@synthesize mReserved=_mReserved - In the implementation block
@property (retain) NSObject*<IOBluetoothL2CAPChannelDelegate> mL2CAPChannelConnectionHandler;              //@synthesize mL2CAPChannelConnectionHandler=_mL2CAPChannelConnectionHandler - In the implementation block
@property (retain) IOBluetoothDevice * device; 
@property (assign) unsigned short PSM; 
@property (assign) unsigned long long objectID; 
@property (readonly) unsigned short outgoingMTU; 
@property (readonly) unsigned short incomingMTU; 
@property (readonly) unsigned short localChannelID; 
@property (readonly) unsigned short remoteChannelID; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)getUniqueObjectDictionary:(char)arg1 ;
+(id)getKeyForIOService:(unsigned)arg1 ;
+(id)withL2CAPChannelRef:(OpaqueIOBluetoothObjectRefRef)arg1 ;
+(id)registerForChannelOpenNotifications:(id)arg1 selector:(SEL)arg2 ;
+(id)withObjectID:(unsigned long long)arg1 ;
+(id)registerForChannelOpenNotifications:(id)arg1 selector:(SEL)arg2 withPSM:(unsigned short)arg3 direction:(int)arg4 ;
-(id)initWithIOService:(unsigned)arg1 ;
-(int)waitforChanneOpen;
-(void)updateFromNewIOService:(unsigned)arg1 ;
-(void)setML2CAPChannelConnectionHandler:(NSObject*<IOBluetoothL2CAPChannelDelegate>)arg1 ;
-(NSObject*<IOBluetoothL2CAPChannelDelegate>)mL2CAPChannelConnectionHandler;
-(int)configureChannel:(id)arg1 ;
-(void)setMReserved:(IOBluetoothL2CAPChannelExpansion *)arg1 ;
-(IOBluetoothL2CAPChannelExpansion *)mReserved;
-(int)destroyQueue;
-(void)processIncomingData:(IOBluetoothUserMessageBlock*)arg1 ;
-(unsigned short)getPSM;
-(unsigned long long)getObjectID;
-(unsigned short)getOutgoingMTU;
-(unsigned short)getIncomingMTU;
-(unsigned short)getLocalChannelID;
-(unsigned short)getRemoteChannelID;
-(OpaqueIOBluetoothObjectRefRef)getL2CAPChannelRef;
-(int)requestRemoteMTU:(unsigned short)arg1 ;
-(int)write:(void*)arg1 length:(unsigned short)arg2 ;
-(int)registerIncomingDataListener:(/*function pointer*/void*)arg1 refCon:(void*)arg2 ;
-(int)registerIncomingEventListener:(/*function pointer*/void*)arg1 refCon:(void*)arg2 ;
-(int)startStopFlow:(char)arg1 ;
-(void)finalize;
-(void)dealloc;
-(NSString *)description;
-(id)init;
-(char)isValid;
-(id)delegate;
-(int)setDelegate:(id)arg1 ;
-(IOBluetoothDevice *)device;
-(void)handleMachMessage:(void*)arg1 ;
-(unsigned long long)objectID;
-(char)isIncoming;
-(void)dispatchEvent:(IOBluetoothL2CAPChannelEvent*)arg1 ;
-(unsigned short)PSM;
-(void)connectionComplete:(id)arg1 status:(int)arg2 ;
-(void)setDevice:(IOBluetoothDevice *)arg1 ;
-(void)setObjectID:(unsigned long long)arg1 ;
-(id)getDevice;
-(void)logDescription:(const char*)arg1 ;
-(int)instantiateOnDevice:(id)arg1 ;
-(int)closeChannel;
-(int)createQueue;
-(id)getKey;
-(id)registerForChannelCloseNotification:(id)arg1 selector:(SEL)arg2 ;
-(unsigned short)localChannelID;
-(int)writeAsync:(void*)arg1 length:(unsigned short)arg2 refcon:(void*)arg3 ;
-(int)configureChannelID:(unsigned short)arg1 local:(BOOL)arg2 ;
-(unsigned short)remoteChannelID;
-(int)configureMTU:(unsigned short)arg1 maxIncomingMTU:(unsigned short)arg2 ;
-(unsigned short)outgoingMTU;
-(unsigned short)incomingMTU;
-(int)setDelegate:(id)arg1 withConfiguration:(id)arg2 ;
-(int)writeAsyncTrap:(void*)arg1 length:(unsigned short)arg2 refcon:(void*)arg3 ;
-(int)writeSync:(void*)arg1 length:(unsigned short)arg2 ;
-(void)setPSM:(unsigned short)arg1 ;
-(char)channelStateIsOpen;
-(void)closeKernelConnection;
-(char)channelStateIsClosed;
@end

