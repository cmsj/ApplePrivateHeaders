/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:08 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <AudioToolbox/AudioToolbox-Structs.h>
#import <libobjc.A.dylib/NSXPCListenerDelegate.h>
#import <libobjc.A.dylib/CHHapticClientInterface.h>

@protocol OS_dispatch_queue;
@class NSXPCConnection, NSObject, NSArray, NSString;

@interface AVHapticClient : NSObject <NSXPCListenerDelegate, CHHapticClientInterface> {

	NSXPCConnection* _connection;
	HapticSharedMemory* _sharedBuffer;
	unsigned long long _uniqueID;
	int _serverTimeout;
	/*^block*/id _completionCallback;
	/*^block*/id _connectionCallback;
	mutex _mapMutex;
	map<unsigned long, AVHapticSequenceEntry *, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, AVHapticSequenceEntry *>>>* _sequenceEntryMap;
	NSObject*<OS_dispatch_queue> _completionQueue;
	int _state;
	char _disconnecting;
	char _prewarmed;
	char _connected;
	int _serverProcessID;
	unsigned long long _clientID;
	NSArray* _channelKeys;
	/*^block*/id _asyncStopCallback;

}

@property (assign) char connected;                                  //@synthesize connected=_connected - In the implementation block
@property (readonly) unsigned long long clientID;                   //@synthesize clientID=_clientID - In the implementation block
@property (readonly) NSArray * channelKeys;                         //@synthesize channelKeys=_channelKeys - In the implementation block
@property (readonly) char prewarmed;                                //@synthesize prewarmed=_prewarmed - In the implementation block
@property (readonly) char running; 
@property (readonly) int state; 
@property (assign) int serverProcessID;                             //@synthesize serverProcessID=_serverProcessID - In the implementation block
@property (readonly) double hapticLatency; 
@property (copy) id asyncStopCallback;                              //@synthesize asyncStopCallback=_asyncStopCallback - In the implementation block
@property (copy) id completionCallback;                             //@synthesize completionCallback=_completionCallback - In the implementation block
@property (copy) id connectionCallback;                             //@synthesize connectionCallback=_connectionCallback - In the implementation block
@property (readonly) char disconnecting;                            //@synthesize disconnecting=_disconnecting - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)allocateResources:(/*^block*/id)arg1 ;
-(double)hapticLatency;
-(char)setChannelEventBehavior:(unsigned long long)arg1 channel:(unsigned long long)arg2 ;
-(char)resetChannel:(unsigned long long)arg1 atTime:(double)arg2 ;
-(char)startEventAndReturnToken:(unsigned long long)arg1 type:(unsigned long long)arg2 atTime:(double)arg3 channel:(unsigned long long)arg4 eventToken:(unsigned long long*)arg5 ;
-(char)doSendEvents:(id)arg1 atTime:(double)arg2 channel:(unsigned long long)arg3 sorted:(char)arg4 outToken:(unsigned long long*)arg5 error:(id*)arg6 ;
-(char)doScheduleParamCurve:(unsigned long long)arg1 atTime:(double)arg2 channel:(unsigned long long)arg3 paramCurve:(id)arg4 error:(id*)arg5 ;
-(char)doScheduleParamCurveWithMemoryReserve:(unsigned long long)arg1 atTime:(double)arg2 channel:(unsigned long long)arg3 memoryReserve:(AddressReserve*)arg4 paramCurve:(id)arg5 error:(id*)arg6 ;
-(char)sendEvents:(id)arg1 atTime:(double)arg2 channel:(unsigned long long)arg3 outToken:(unsigned long long*)arg4 error:(id*)arg5 ;
-(char)stopEventWithToken:(unsigned long long)arg1 atTime:(double)arg2 channel:(unsigned long long)arg3 ;
-(char)clearEventsFromTime:(double)arg1 channel:(unsigned long long)arg2 ;
-(char)setParameter:(unsigned long long)arg1 atTime:(double)arg2 value:(float)arg3 channel:(unsigned long long)arg4 ;
-(char)scheduleParameterCurve:(unsigned long long)arg1 curve:(id)arg2 atTime:(double)arg3 channel:(unsigned long long)arg4 error:(id*)arg5 ;
-(char)loadAndPrepareHapticSequenceFromData:(id)arg1 reply:(/*^block*/id)arg2 ;
-(char)loadAndPrepareHapticSequenceFromEvents:(id)arg1 reply:(/*^block*/id)arg2 ;
-(char)loadAndPrepareHapticSequenceFromVibePattern:(id)arg1 reply:(/*^block*/id)arg2 ;
-(char)setSequenceEventBehavior:(unsigned long long)arg1 behavior:(unsigned long long)arg2 channel:(unsigned long long)arg3 ;
-(void)setSequenceFinishedHandlerForID:(unsigned long long)arg1 finishedHandler:(/*^block*/id)arg2 ;
-(/*^block*/id)getSequenceFinishedHandlerForID:(unsigned long long)arg1 ;
-(void)callSequenceFinishedHandlersWithError:(id)arg1 ;
-(void)setRunStateForSequenceEntryWithID:(unsigned long long)arg1 running:(char)arg2 ;
-(void)detachSequenceEntryforID:(unsigned long long)arg1 ;
-(char)prepareHapticSequence:(unsigned long long)arg1 error:(id*)arg2 ;
-(char)enableSequenceLooping:(unsigned long long)arg1 enable:(char)arg2 error:(id*)arg3 ;
-(char)setSequenceLoopLength:(unsigned long long)arg1 length:(float)arg2 error:(id*)arg3 ;
-(char)setSequencePlaybackRate:(unsigned long long)arg1 rate:(float)arg2 error:(id*)arg3 ;
-(char)startHapticSequence:(unsigned long long)arg1 atTime:(double)arg2 withOffset:(double)arg3 ;
-(char)stopHapticSequence:(unsigned long long)arg1 atTime:(double)arg2 ;
-(char)pauseHapticSequence:(unsigned long long)arg1 atTime:(double)arg2 ;
-(char)resumeHapticSequence:(unsigned long long)arg1 atTime:(double)arg2 ;
-(char)seekHapticSequence:(unsigned long long)arg1 toTime:(double)arg2 ;
-(char)setSequenceChannelParameter:(unsigned long long)arg1 atTime:(double)arg2 value:(float)arg3 sequenceID:(unsigned long long)arg4 channel:(unsigned long long)arg5 ;
-(char)clearSequenceEvents:(unsigned long long)arg1 atTime:(double)arg2 ;
-(void)detachHapticSequence:(unsigned long long)arg1 ;
-(char)setupConnectionWithOptions:(id)arg1 error:(id*)arg2 ;
-(id)getAsyncDelegateForMethod:(SEL)arg1 errorHandler:(/*^block*/id)arg2 ;
-(id)getSyncDelegateForMethod:(SEL)arg1 errorHandler:(/*^block*/id)arg2 ;
-(void)setChannelKeys:(NSArray *)arg1 ;
-(char)setPlayerBehavior:(unsigned long long)arg1 error:(id*)arg2 ;
-(void)clearAssignedChannels;
-(char)requestAssignedChannels:(unsigned long long)arg1 error:(id*)arg2 ;
-(char)removeAssignedChannelID:(unsigned long long)arg1 error:(id*)arg2 ;
-(void)handleServerConnectionInterruption;
-(void)handleServerConnectionInvalidation;
-(int)setupSharedMemory:(object)arg1 size:(unsigned)arg2 ;
-(unsigned)calculateHapticCommandParamCurveMemorySize:(unsigned)arg1 ;
-(void)destroySharedMemory;
-(NSArray *)channelKeys;
-(char)prewarmed;
-(int)serverProcessID;
-(void)setServerProcessID:(int)arg1 ;
-(id)asyncStopCallback;
-(void)setAsyncStopCallback:(id)arg1 ;
-(void)doInit;
-(void)dealloc;
-(int)state;
-(void)setState:(int)arg1 ;
-(char)running;
-(void)disconnect;
-(id)completionCallback;
-(char)connected;
-(void)setConnected:(char)arg1 ;
-(unsigned long long)clientID;
-(id)initWithOptions:(id)arg1 error:(id*)arg2 ;
-(void)releaseResources;
-(void)queryServerCapabilities:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)expectNotifyAfter:(double)arg1 ;
-(void)stopPrewarm;
-(char)referenceCustomAudioEvent:(unsigned long long)arg1 reply:(/*^block*/id)arg2 ;
-(char)copyCustomAudioEvent:(unsigned long long)arg1 options:(id)arg2 reply:(/*^block*/id)arg3 ;
-(char)createCustomAudioEvent:(id)arg1 format:(id)arg2 frames:(unsigned long long)arg3 options:(id)arg4 reply:(/*^block*/id)arg5 ;
-(char)releaseCustomAudioEvent:(unsigned long long)arg1 reply:(/*^block*/id)arg2 ;
-(void)sequenceFinished:(unsigned long long)arg1 error:(id)arg2 ;
-(void)clientCompletedWithError:(id)arg1 ;
-(void)clientStoppedForReason:(unsigned long long)arg1 error:(id)arg2 ;
-(void)clientDisconnectingForReason:(unsigned long long)arg1 error:(id)arg2 ;
-(char)loadHapticEvent:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)prewarm:(/*^block*/id)arg1 ;
-(void)startRunning:(/*^block*/id)arg1 ;
-(void)stopRunning;
-(void)stopRunning:(/*^block*/id)arg1 ;
-(void)setCompletionCallback:(id)arg1 ;
-(char)disconnecting;
-(char)finish:(/*^block*/id)arg1 ;
-(void)setConnectionCallback:(id)arg1 ;
-(id)connectionCallback;
@end

