/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:45 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/SensorKit.framework/Versions/A/SensorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/SRAuthorizationClientDelegate.h>
#import <libobjc.A.dylib/SRDaemonNotificationDelegate.h>

@protocol SRSensorReaderDelegate;
@class SRDaemonNotification, SRDatastore, NSDictionary, NSString, SRAuthorizationClient, NSXPCConnection;

@interface SRSensorReader : NSObject <SRAuthorizationClientDelegate, SRDaemonNotificationDelegate> {

	SRDaemonNotification* _daemonNotification;
	SRDatastore* _datastore;
	NSDictionary* _deviceDetails;
	double _serviceStartTime;
	double _earliestEligibleTime;
	Ai _authState;
	char _connectionDidInvalidate;
	char _bypassHoldingPeriod;
	NSString* _sensor;
	id<SRSensorReaderDelegate> _delegate;
	NSDictionary* _nextDatastoreFiles;
	SRAuthorizationClient* _authorizationClient;
	NSXPCConnection* _connection;
	NSString* _bundleId;
	Class _sampleClass;
	Class _exportingSampleClass;

}

@property (copy) NSString * sensor;                                          //@synthesize sensor=_sensor - In the implementation block
@property (retain,readonly) SRDatastore * datastore; 
@property (retain) NSDictionary * nextDatastoreFiles;                        //@synthesize nextDatastoreFiles=_nextDatastoreFiles - In the implementation block
@property (assign) char connectionDidInvalidate;                             //@synthesize connectionDidInvalidate=_connectionDidInvalidate - In the implementation block
@property (retain) SRAuthorizationClient * authorizationClient;              //@synthesize authorizationClient=_authorizationClient - In the implementation block
@property (nonatomic,retain) NSXPCConnection * connection;                   //@synthesize connection=_connection - In the implementation block
@property (copy) NSString * bundleId;                                        //@synthesize bundleId=_bundleId - In the implementation block
@property (nonatomic,readonly) Class sampleClass;                            //@synthesize sampleClass=_sampleClass - In the implementation block
@property (nonatomic,readonly) Class exportingSampleClass;                   //@synthesize exportingSampleClass=_exportingSampleClass - In the implementation block
@property (assign,nonatomic) char bypassHoldingPeriod;                       //@synthesize bypassHoldingPeriod=_bypassHoldingPeriod - In the implementation block
@property (nonatomic,readonly) double earliestEligibleTime; 
@property (nonatomic,readonly) double serviceStartTime; 
@property (readonly) long long authorizationStatus; 
@property (__weak) id<SRSensorReaderDelegate> delegate;                      //@synthesize delegate=_delegate - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(void)initialize;
+(id)new;
+(id)clientInterface;
+(id)remoteInterface;
+(id)connectionToDaemon;
+(void)requestAuthorizationForBundle:(id)arg1 sensors:(id)arg2 legacyPromptErrorBehavior:(char)arg3 withCompletionHandler:(/*^block*/id)arg4 ;
+(/*^block*/id)createExportDataForServices:(id)arg1 withCompletionHandler:(/*^block*/id)arg2 ;
+(void)requestAuthorizationForSensors:(id)arg1 completion:(/*^block*/id)arg2 ;
+(void)requestAuthorizationForBundle:(id)arg1 sensors:(id)arg2 withCompletionHandler:(/*^block*/id)arg3 ;
+(void)authorizationRequestStatusForBundle:(id)arg1 sensors:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
+(/*^block*/id)createExportDataWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)dealloc;
-(id)init;
-(id<SRSensorReaderDelegate>)delegate;
-(void)setDelegate:(id<SRSensorReaderDelegate>)arg1 ;
-(NSXPCConnection *)connection;
-(void)setConnection:(NSXPCConnection *)arg1 ;
-(void)fetch:(id)arg1 ;
-(NSString *)bundleId;
-(void)setBundleId:(NSString *)arg1 ;
-(void)stopRecording;
-(long long)authorizationStatus;
-(void)setAuthorizationStatus:(long long)arg1 ;
-(void)startRecording;
-(void)setupConnection;
-(char)isAuthorized;
-(SRDatastore *)datastore;
-(void)daemonNotificationDaemonDidStart:(id)arg1 ;
-(void)resetDatastoreFiles:(id)arg1 ;
-(void)setSensor:(NSString *)arg1 ;
-(void)setNextDatastoreFiles:(NSDictionary *)arg1 ;
-(void)setConnectionDidInvalidate:(char)arg1 ;
-(char)connectionDidInvalidate;
-(NSString *)sensor;
-(NSDictionary *)nextDatastoreFiles;
-(char)bypassHoldingPeriod;
-(void)setBypassHoldingPeriod:(char)arg1 ;
-(void)authorizedServicesDidChange:(id)arg1 deniedServices:(id)arg2 dataCollectionEnabled:(char)arg3 onboardingCompleted:(char)arg4 forBundleIdentifier:(id)arg5 ;
-(id)initWithSensor:(id)arg1 bundle:(id)arg2 ;
-(id)initWithSensor:(id)arg1 xpcConnection:(id)arg2 daemonNotification:(id)arg3 authorizationClient:(id)arg4 bundleId:(id)arg5 ;
-(void)setSampleClassFromDescription:(id)arg1 ;
-(void)setExportingSampleFromDescription:(id)arg1 ;
-(SRAuthorizationClient *)authorizationClient;
-(void)setAuthorizationClient:(SRAuthorizationClient *)arg1 ;
-(void)fetchReaderMetadata;
-(void)didCompleteFetch:(id)arg1 ;
-(void)fetchingRequest:(id)arg1 failedWithError:(id)arg2 ;
-(Class)sampleClass;
-(char)fetchingRequest:(id)arg1 didFetchResult:(id)arg2 ;
-(void)continueFetchRequest:(id)arg1 from:(double)arg2 to:(double)arg3 withDatastoreFiles:(id)arg4 callback:(/*^block*/id)arg5 ;
-(void)fetchSampleBytesFrom:(double)arg1 to:(double)arg2 inSegment:(id)arg3 fetchRequest:(id)arg4 sampleCallback:(/*^block*/id)arg5 ;
-(void)fetchSampleBytesFrom:(double)arg1 to:(double)arg2 inSegment:(id)arg3 fetchRequest:(id)arg4 retryAttempt:(long long)arg5 sampleCallback:(/*^block*/id)arg6 ;
-(void)startRecordingFailedWithError:(id)arg1 ;
-(void)sensorReaderWillStartRecording;
-(void)startRecordingWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)_startRecordingWithSensorConfiguration:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)stopRecordingFailedWithError:(id)arg1 ;
-(void)sensorReaderDidStopRecording;
-(void)stopRecordingWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)fetchDevicesDidFailWithError:(id)arg1 ;
-(void)didFetchDevices:(id)arg1 ;
-(void)fetchDevices:(/*^block*/id)arg1 ;
-(/*^block*/id)createExportDataWithCompletionHandler:(/*^block*/id)arg1 ;
-(id)initWithSensor:(id)arg1 ;
-(double)serviceStartTime;
-(double)earliestEligibleTime;
-(void)fetchDevices;
-(Class)exportingSampleClass;
@end

