/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:19 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/Contacts.framework/Versions/A/Contacts
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/CNLDAPPredicateRemapping.h>

@protocol CNLDAPPredicateRemapping <NSObject>
@optional
-(id)not:(id)arg1;
-(id)and:(id)arg1;
-(id)or:(id)arg1;
-(id)predicateForLeft:(id)arg1 lessThanRight:(id)arg2;
-(id)predicateForLeft:(id)arg1 lessThanOrEqualToRight:(id)arg2;
-(id)predicateForLeft:(id)arg1 greaterThanRight:(id)arg2;
-(id)predicateForLeft:(id)arg1 greaterThanOrEqualToRight:(id)arg2;
-(id)predicateForLeft:(id)arg1 equalToRight:(id)arg2;
-(id)predicateForLeft:(id)arg1 notEqualToRight:(id)arg2;
-(id)predicateForLeft:(id)arg1 matchesRight:(id)arg2;
-(id)predicateForLeft:(id)arg1 likeRight:(id)arg2;
-(id)predicateForLeft:(id)arg1 beginsWithRight:(id)arg2;
-(id)predicateForLeft:(id)arg1 endsWithRight:(id)arg2;
-(id)predicateForLeft:(id)arg1 inRight:(id)arg2;
-(id)predicateForLeft:(id)arg1 containsRight:(id)arg2;
-(id)predicateForLeft:(id)arg1 betweenLowerBound:(id)arg2 upperBound:(id)arg3;

@end


@class NSString;

@interface CNLDAPPredicateRemapping : NSObject <CNLDAPPredicateRemapping>

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id)not:(id)arg1 ;
-(id)and:(id)arg1 ;
-(id)or:(id)arg1 ;
-(id)predicateForLeft:(id)arg1 lessThanRight:(id)arg2 ;
-(id)predicateForLeft:(id)arg1 lessThanOrEqualToRight:(id)arg2 ;
-(id)predicateForLeft:(id)arg1 greaterThanRight:(id)arg2 ;
-(id)predicateForLeft:(id)arg1 greaterThanOrEqualToRight:(id)arg2 ;
-(id)predicateForLeft:(id)arg1 equalToRight:(id)arg2 ;
-(id)predicateForLeft:(id)arg1 notEqualToRight:(id)arg2 ;
-(id)predicateForLeft:(id)arg1 likeRight:(id)arg2 ;
-(id)predicateForLeft:(id)arg1 beginsWithRight:(id)arg2 ;
-(id)predicateForLeft:(id)arg1 endsWithRight:(id)arg2 ;
-(id)predicateForLeft:(id)arg1 inRight:(id)arg2 ;
-(id)predicateForLeft:(id)arg1 containsRight:(id)arg2 ;
-(id)predicateForLeft:(id)arg1 betweenLowerBound:(id)arg2 upperBound:(id)arg3 ;
@end

