/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:57 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/MediaPlayer.framework/Versions/A/MediaPlayer
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <MediaPlayer/MediaPlayer-Structs.h>
#import <libobjc.A.dylib/_MPActiveUserChangeMonitorDelegate.h>
#import <libobjc.A.dylib/NSSecureCoding.h>

@protocol MPMediaLibraryDataProviderPrivate, OS_dispatch_queue;
@class NSObject, NSArray, QueryCriteriaResultsCache, NSMutableDictionary, NSMutableArray, NSPointerArray, ICUserIdentity, _MPActiveUserChangeMonitor, ML3MusicLibrary, NSURL, NSString, NSNumber, NSDate;

@interface MPMediaLibrary : NSObject <_MPActiveUserChangeMonitorDelegate, NSSecureCoding> {

	id<MPMediaLibraryDataProviderPrivate> _libraryDataProvider;
	NSObject*<OS_dispatch_queue> _entityCacheQueue;
	NSObject*<OS_dispatch_queue> _fixedQueue;
	NSArray* _notificationObservers;
	QueryCriteriaResultsCache* _itemsForCriteriaCache;
	QueryCriteriaResultsCache* _hasItemsForCriteriaCache;
	QueryCriteriaResultsCache* _countOfItemsForCriteriaCache;
	QueryCriteriaResultsCache* _itemResultSetsForCriteriaCache;
	QueryCriteriaResultsCache* _collectionsForCriteriaCache;
	QueryCriteriaResultsCache* _hasCollectionsForCriteriaCache;
	QueryCriteriaResultsCache* _countOfCollectionsForCriteriaCache;
	QueryCriteriaResultsCache* _collectionsResultSetsForCriteriaCache;
	NSMutableDictionary* _hasItemsDidLoadForCriteria;
	NSMutableDictionary* _hasCollectionsDidLoadForCriteria;
	NSMutableDictionary* _countOfCollectionsDidLoadForCriteria;
	NSMutableDictionary* _countOfItemsDidLoadForCriteria;
	NSMutableArray* _additionalLibraryFilterPredicates;
	NSObject*<OS_dispatch_queue> _additionalLibraryFilterPredicatesAccessQueue;
	NSPointerArray* _connectionAssertions;
	NSObject*<OS_dispatch_queue> _connectionAssertionsQueue;
	char _disconnectAfterReleasingAssertions;
	float _connectionProgress;
	long long _removalReason;
	unsigned _determinedHasMedia : 1;
	unsigned _hasMedia : 1;
	unsigned _determinedHasSongs : 1;
	unsigned _hasSongs : 1;
	unsigned _determinedHasGeniusMixes : 1;
	unsigned _hasGeniusMixes : 1;
	unsigned _determinedHasPlaylists : 1;
	unsigned _hasPlaylists : 1;
	unsigned _determinedHasComposers : 1;
	unsigned _hasComposers : 1;
	unsigned _determinedHasPodcasts : 1;
	unsigned _hasPodcasts : 1;
	unsigned _determinedHasUbiquitousBookmarkableItems : 1;
	unsigned _hasUbiquitousBookmarkableContent : 1;
	unsigned _determinedHasAudiobooks : 1;
	unsigned _hasAudiobooks : 1;
	long long _cloudFilteringType;
	char _filteringDisabled;
	char _hasVideos;
	char _determinedHasVideos;
	char _hasMusicVideos;
	char _determinedHasMusicVideos;
	char _hasAudibleAudioBooks;
	char _determinedHasAudibleAudioBooks;
	char _hasMovies;
	char _determinedHasMovies;
	char _hasCompilations;
	char _determinedHasCompilations;
	char _hasITunesU;
	char _determinedHasITunesU;
	char _hasVideoITunesU;
	char _determinedHasVideoITunesU;
	char _hasMovieRentals;
	char _determinedHasMovieRentals;
	char _hasTVShows;
	char _determinedHasTVShows;
	char _hasHomeVideos;
	char _determinedHasHomeVideos;
	char _hasVideoPodcasts;
	char _determinedHasVideoPodcasts;
	unsigned char _originalCellNetworkFlags;
	unsigned char _originalWiFiNetworkFlags;
	os_unfair_lock_s __MLCoreStorageLock;
	id __MLCoreStorage;
	ICUserIdentity* _userIdentity;
	long long _libraryChangeObservers;
	_MPActiveUserChangeMonitor* _activeUserChangeMonitor;
	os_unfair_lock_s* __MLCoreStorageLockPointer;
	ML3MusicLibrary* _ml3Library;

}

@property (nonatomic,readonly) NSURL * protectedContentSupportStorageURL; 
@property (nonatomic,readonly) NSString * _syncValidity; 
@property (nonatomic,copy) NSNumber * sagaAccountID; 
@property (nonatomic,copy) NSDate * sagaLastItemPlayDataUploadDate; 
@property (nonatomic,copy) NSDate * sagaLastPlaylistPlayDataUploadDate; 
@property (assign,nonatomic) long long sagaDatabaseUserVersion; 
@property (nonatomic,copy) NSString * storefrontIdentifier; 
@property (nonatomic,copy) NSDate * sagaLastLibraryUpdateTime; 
@property (nonatomic,copy) NSDate * sagaLastSubscribedContainersUpdateTime; 
@property (assign,nonatomic) long long sagaOnDiskDatabaseRevision; 
@property (nonatomic,readonly) long long libraryChangeObservers;                                //@synthesize libraryChangeObservers=_libraryChangeObservers - In the implementation block
@property (assign,nonatomic) long long removalReason; 
@property (nonatomic,readonly) os_unfair_lock_s _MLCoreStorageLock;                             //@synthesize _MLCoreStorageLock=__MLCoreStorageLock - In the implementation block
@property (nonatomic,retain) _MPActiveUserChangeMonitor * activeUserChangeMonitor;              //@synthesize activeUserChangeMonitor=_activeUserChangeMonitor - In the implementation block
@property (setter=_setMLCoreStorage:,nonatomic,retain) id _MLCoreStorage;                       //@synthesize _MLCoreStorage=__MLCoreStorage - In the implementation block
@property (nonatomic,readonly) os_unfair_lock_s* _MLCoreStorageLockPointer;                     //@synthesize _MLCoreStorageLockPointer=__MLCoreStorageLockPointer - In the implementation block
@property (nonatomic,readonly) ML3MusicLibrary * ml3Library;                                    //@synthesize ml3Library=_ml3Library - In the implementation block
@property (nonatomic,copy,readonly) ICUserIdentity * userIdentity;                              //@synthesize userIdentity=_userIdentity - In the implementation block
@property (nonatomic,readonly) NSDate * lastModifiedDate; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(void)initialize;
+(char)supportsSecureCoding;
+(id)mediaLibraries;
+(long long)authorizationStatus;
+(void)requestAuthorization:(/*^block*/id)arg1 ;
+(void)setRunLoopForNotifications:(id)arg1 ;
+(id)deviceMediaLibrary;
+(void)_endDiscoveringMediaLibrariesIfAllowed;
+(id)_mediaLibraries;
+(id)_deviceMediaLibraryWithUserIdentity:(id)arg1 createIfRequired:(char)arg2 ;
+(void)_postNotificationName:(id)arg1 library:(id)arg2 ;
+(void)_postNotificationName:(id)arg1 library:(id)arg2 userInfo:(id)arg3 ;
+(id)mediaLibraryWithUniqueIdentifier:(id)arg1 ;
+(id)defaultMediaLibrary;
+(void)setDefaultMediaLibrary:(id)arg1 ;
+(id)deviceMediaLibraryWithUserIdentity:(id)arg1 ;
+(void)beginDiscoveringMediaLibraries;
+(void)endDiscoveringMediaLibraries;
+(void)validatePermissionsExpiryWithCompletion:(/*^block*/id)arg1 ;
+(char)isLibraryServerDisabled;
+(void)setLibraryServerDisabled:(char)arg1 ;
+(id)sharedMediaLibraries;
+(id)_libraryForDataProvider:(id)arg1 ;
+(id)_libraryDataProviders;
+(id)libraryDataProviders;
+(void)addLibraryDataProvider:(id)arg1 ;
+(void)removeLibraryDataProvider:(id)arg1 removalReason:(long long)arg2 ;
+(void)reloadLibraryDataProvider:(id)arg1 ;
+(void)postEntitiesAddedOrRemovedNotificationForLibraryDataProvider:(id)arg1 ;
+(void)reloadDynamicPropertiesForLibraryDataProvider:(id)arg1 ;
+(void)reloadInvisiblePropertiesForLibraryDataProvider:(id)arg1 ;
+(void)reloadDisplayValuesForLibraryDataProvider:(id)arg1 ;
+(void)syncGenerationDidChangeForLibraryDataProvider:(id)arg1 ;
+(void)uniqueIdentifierDidChangeForLibraryDataProvider:(id)arg1 ;
+(void)libraryPathDidChangeForDataProvider:(id)arg1 ;
-(void)dealloc;
-(char)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(NSString *)description;
-(id)init;
-(id)name;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(id)uniqueIdentifier;
-(long long)status;
-(void)disconnect;
-(id)databasePath;
-(char)removeItems:(id)arg1 ;
-(id)_initWithUserIdentity:(id)arg1 ;
-(ICUserIdentity *)userIdentity;
-(char)requiresAuthentication;
-(void)_disconnect;
-(NSDate *)lastModifiedDate;
-(id)artworkDataSource;
-(char)writable;
-(char)deleteItems:(id)arg1 ;
-(void)connectWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)activeUserChangeDidFinish;
-(void)_clearCachedEntitiesIncludingResultSets:(char)arg1 ;
-(void)_clearCachedContentDataAndResultSets:(char)arg1 ;
-(void)_scheduleLibraryChangeNotificationPostingBlock:(/*^block*/id)arg1 ;
-(void)_reloadLibraryForRestrictionsChange;
-(void)_reloadLibraryForContentsChangeWithNotificationInfo:(id)arg1 ;
-(void)_reloadLibraryForDynamicPropertyChangeWithNotificationInfo:(id)arg1 ;
-(void)_reloadLibraryForInvisiblePropertyChangeWithNotificationInfo:(id)arg1 ;
-(void)_reloadLibraryForPathChange;
-(void)_activeUserDidChangeNotification:(id)arg1 ;
-(void)_canShowCloudTracksDidChangeNotification:(id)arg1 ;
-(void)_didReceiveMemoryWarning:(id)arg1 ;
-(void)_displayValuesDidChangeNotification:(id)arg1 ;
-(void)beginGeneratingLibraryChangeNotifications;
-(void)endGeneratingLibraryChangeNotifications;
-(void)addItemWithProductID:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(unsigned long long)currentEntityRevision;
-(unsigned long long)syncGenerationID;
-(long long)playlistGeneration;
-(char)isDeviceLibrary;
-(char)isHomeSharingLibrary;
-(id)additionalLibraryFilterPredicates;
-(void)addLibraryFilterPredicate:(id)arg1 ;
-(void)removeLibraryFilterPredicate:(id)arg1 ;
-(long long)removalReason;
-(void)setRemovalReason:(long long)arg1 ;
-(char)hasMediaOfType:(unsigned long long)arg1 ;
-(char)hasMedia;
-(char)hasGeniusMixes;
-(char)hasPlaylists;
-(char)hasArtists;
-(char)hasAlbums;
-(char)hasSongs;
-(char)hasPodcasts;
-(char)hasUbiquitousBookmarkableItems;
-(char)hasGenres;
-(char)hasComposers;
-(char)hasAudiobooks;
-(char)_checkHasContent:(char*)arg1 determined:(char*)arg2 queryHasEntitiesBlock:(/*^block*/id)arg3 ;
-(char)_checkHasContent:(char*)arg1 determined:(char*)arg2 mediaType:(unsigned long long)arg3 queryHasEntitiesBlock:(/*^block*/id)arg4 ;
-(char)hasVideos;
-(char)hasMusicVideos;
-(char)hasAudibleAudioBooks;
-(char)hasMovies;
-(char)hasCompilations;
-(char)hasITunesUContent;
-(char)hasAudioITunesUContent;
-(char)hasVideoITunesUContent;
-(char)hasMovieRentals;
-(char)hasTVShows;
-(char)hasHomeVideos;
-(char)hasVideoPodcasts;
-(char)hasUserPlaylists;
-(char)hasAddedToLibraryAppleMusicContent;
-(char)hasUserPlaylistsContainingAppleMusicContent;
-(char)itemExistsWithPersistentID:(unsigned long long)arg1 ;
-(char)itemExistsInDatabaseWithPersistentID:(unsigned long long)arg1 ;
-(char)playlistExistsWithPersistentID:(unsigned long long)arg1 ;
-(char)collectionExistsWithPersistentID:(unsigned long long)arg1 groupingType:(long long)arg2 ;
-(id)collectionWithPersistentID:(unsigned long long)arg1 groupingType:(long long)arg2 ;
-(id)collectionWithPersistentID:(unsigned long long)arg1 groupingType:(long long)arg2 verifyExistence:(char)arg3 ;
-(id)itemWithPersistentID:(unsigned long long)arg1 ;
-(id)itemWithPersistentID:(unsigned long long)arg1 verifyExistence:(char)arg2 ;
-(id)itemWithStoreID:(unsigned long long)arg1 ;
-(id)decodeItemWithCoder:(id)arg1 ;
-(id)newPlaylistWithPersistentID:(unsigned long long)arg1 ;
-(id)localizedSectionHeaderForSectionIndex:(unsigned long long)arg1 ;
-(id)localizedSectionIndexTitles;
-(id)playbackHistoryPlaylist;
-(id)playlistWithPersistentID:(unsigned long long)arg1 ;
-(id)addPlaylistWithName:(id)arg1 ;
-(id)addPlaylistWithName:(id)arg1 activeGeniusPlaylist:(char)arg2 ;
-(void)setSyncPlaylistId:(unsigned long long)arg1 ;
-(unsigned long long)syncPlaylistId;
-(unsigned)homeSharingDatabaseID;
-(id)URLForHomeSharingRequest:(id)arg1 ;
-(char)removePlaylist:(id)arg1 ;
-(void)populateLocationPropertiesOfItem:(id)arg1 withPath:(id)arg2 assetProtectionType:(long long)arg3 ;
-(void)populateLocationPropertiesOfItem:(id)arg1 withPath:(id)arg2 assetProtectionType:(long long)arg3 completionBlock:(/*^block*/id)arg4 ;
-(void)clearLocationPropertiesOfItem:(id)arg1 ;
-(void)setValues:(id)arg1 forProperties:(id)arg2 forItemPersistentIDs:(id)arg3 ;
-(void)geniusItemsForSeedItem:(id)arg1 completion:(/*^block*/id)arg2 ;
-(char)isGeniusEnabled;
-(id)preferredAudioLanguages;
-(id)preferredSubtitleLanguages;
-(void)connectWithAuthenticationData:(id)arg1 completionBlock:(/*^block*/id)arg2 ;
-(id)connectionAssertionWithIdentifier:(id)arg1 ;
-(char)performTransactionWithBlock:(/*^block*/id)arg1 ;
-(void)performReadTransactionWithBlock:(/*^block*/id)arg1 ;
-(char)isCurrentThreadInTransaction;
-(float)connectionProgress;
-(id)syncValidity;
-(id)entityCache;
-(id)valueForDatabaseProperty:(id)arg1 ;
-(char)setValue:(id)arg1 forDatabaseProperty:(id)arg2 ;
-(char)deleteDatabaseProperty:(id)arg1 ;
-(id)multiverseIdentifierForTrackWithPersistentID:(long long)arg1 ;
-(id)multiverseIdentifierForCollectionWithPersistentID:(long long)arg1 groupingType:(long long)arg2 ;
-(id)entityWithMultiverseIdentifier:(id)arg1 ;
-(id)entityWithLibraryURL:(id)arg1 ;
-(id)entityWithSpotlightIdentifier:(id)arg1 ;
-(id)entityWithPersistentID:(long long)arg1 entityType:(long long)arg2 ;
-(char)isValidAssetURL:(id)arg1 ;
-(id)pathForAssetURL:(id)arg1 ;
-(unsigned long long)_persistentIDForAssetURL:(id)arg1 ;
-(char)_handlesSameAccountAs:(id)arg1 ;
-(void)_performBlockOnLibraryHandlingTheSameAccount:(/*^block*/id)arg1 ;
-(char)collectionExistsContainedWithinPersistentIDs:(const unsigned long long*)arg1 count:(unsigned long long)arg2 groupingType:(long long)arg3 existentPID:(unsigned long long*)arg4 ;
-(char)collectionExistsWithName:(id)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long*)arg3 ;
-(char)collectionExistsWithStoreID:(long long)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long*)arg3 ;
-(char)collectionExistsWithSagaID:(long long)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long*)arg3 ;
-(char)collectionExistsWithCloudUniversalLibraryID:(id)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long*)arg3 ;
-(char)collectionExistsContainedWithinSyncIDs:(id)arg1 groupingType:(long long)arg2 existentPID:(unsigned long long*)arg3 ;
-(id)_itemsForQueryCriteria:(id)arg1 ;
-(id)_getCachedValueForQueryCritiera:(id)arg1 valueCriteriaCache:(id)arg2 entitiesForCriteriaCache:(id)arg3 didLoadBlocksByQueryCriteria:(id)arg4 valueLoadedFromEntitiesArrayBlock:(/*^block*/id)arg5 loadValueFromDataProviderBlock:(/*^block*/id)arg6 ;
-(char)_hasItemsForQueryCriteria:(id)arg1 ;
-(char)_hasCollectionsForQueryCriteria:(id)arg1 ;
-(unsigned long long)_countOfItemsForQueryCriteria:(id)arg1 ;
-(unsigned long long)_countOfCollectionsForQueryCriteria:(id)arg1 ;
-(id)_itemPersistentIdentifiersForQueryCriteria:(id)arg1 ;
-(id)_collectionPersistentIdentifiersForQueryCriteria:(id)arg1 ;
-(void)_clearPendingDisconnection;
-(void)setCloudFilteringType:(long long)arg1 ;
-(long long)cloudFilteringType;
-(void)_setLibraryFilterPredicates;
-(id)_collectionsForQueryCriteria:(id)arg1 ;
-(void)_removeConnectionAssertion:(id)arg1 ;
-(void)_setupNotifications;
-(void)_tearDownNotifications;
-(long long)libraryChangeObservers;
-(id)_initWithLibraryDataProvider:(id)arg1 ;
-(id)libraryDataProvider;
-(void)addStoreItem:(long long)arg1 andAddTracksToCloudLibrary:(char)arg2 withCompletion:(/*^block*/id)arg3 ;
-(void)addStoreItemIDs:(id)arg1 andAddTracksToCloudLibrary:(char)arg2 withCompletion:(/*^block*/id)arg3 ;
-(void)addStoreItemIDs:(id)arg1 referralObject:(id)arg2 andAddTracksToCloudLibrary:(char)arg3 withCompletion:(/*^block*/id)arg4 ;
-(void)performStoreItemLibraryImport:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(void)getPlaylistWithUUID:(id)arg1 creationMetadata:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)addPlaylistStoreItemsWithMetadata:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)addTracksToMyLibrary:(id)arg1 ;
-(void)importArtworkTokenForEntityPersistentID:(unsigned long long)arg1 entityType:(long long)arg2 artworkToken:(id)arg3 artworkType:(long long)arg4 sourceType:(long long)arg5 ;
-(char)importOriginalArtworkFromImageData:(id)arg1 withArtworkToken:(id)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 mediaType:(unsigned long long)arg5 ;
-(void)addGlobalPlaylistWithID:(id)arg1 andAddToCloudLibrary:(char)arg2 completion:(/*^block*/id)arg3 ;
-(void)addNonLibraryOwnedPlaylistWithGlobalID:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)addNonLibraryOwnedPlaylistsWithGlobalIDs:(id)arg1 completion:(/*^block*/id)arg2 ;
-(char)recordPlayEventForAlbumPersistentID:(long long)arg1 ;
-(char)recordPlayEventForPlaylistPersistentID:(long long)arg1 ;
-(id)_MLCoreStorage;
-(void)_setMLCoreStorage:(id)arg1 ;
-(os_unfair_lock_s)_MLCoreStorageLock;
-(_MPActiveUserChangeMonitor *)activeUserChangeMonitor;
-(void)setActiveUserChangeMonitor:(_MPActiveUserChangeMonitor *)arg1 ;
-(os_unfair_lock_s*)_MLCoreStorageLockPointer;
-(ML3MusicLibrary *)ml3Library;
-(NSURL *)protectedContentSupportStorageURL;
-(void)enumerateEntityChangesAfterSyncAnchor:(id)arg1 maximumRevisionType:(long long)arg2 inUsersLibrary:(char)arg3 usingBlock:(/*^block*/id)arg4 ;
-(void)enumerateEntityChangesAfterSyncAnchor:(id)arg1 maximumRevisionType:(long long)arg2 usingBlock:(/*^block*/id)arg3 ;
-(NSString *)_syncValidity;
-(void)enumerateEntityChangesAfterSyncAnchor:(id)arg1 usingBlock:(/*^block*/id)arg2 ;
-(NSNumber *)sagaAccountID;
-(void)setSagaLastPlaylistPlayDataUploadDate:(NSDate *)arg1 ;
-(long long)sagaDatabaseUserVersion;
-(void)setSagaDatabaseUserVersion:(long long)arg1 ;
-(NSString *)storefrontIdentifier;
-(void)setStorefrontIdentifier:(NSString *)arg1 ;
-(long long)sagaOnDiskDatabaseRevision;
-(void)setSagaOnDiskDatabaseRevision:(long long)arg1 ;
-(NSDate *)sagaLastLibraryUpdateTime;
-(void)setSagaLastLibraryUpdateTime:(NSDate *)arg1 ;
-(NSDate *)sagaLastSubscribedContainersUpdateTime;
-(void)setSagaAccountID:(NSNumber *)arg1 ;
-(void)setSagaLastSubscribedContainersUpdateTime:(NSDate *)arg1 ;
-(void)clearSagaCloudAccountID;
-(void)clearSagaLastItemPlayDataUploadDate;
-(void)clearSagaLastPlaylistPlayDataUploadDate;
-(NSDate *)sagaLastItemPlayDataUploadDate;
-(void)setSagaLastItemPlayDataUploadDate:(NSDate *)arg1 ;
-(NSDate *)sagaLastPlaylistPlayDataUploadDate;
@end

