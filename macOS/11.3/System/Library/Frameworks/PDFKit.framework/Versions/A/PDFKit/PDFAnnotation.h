/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:59 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/PDFKit.framework/Versions/A/PDFKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <PDFKit/PDFKit-Structs.h>
#import <libobjc.A.dylib/NSCopying.h>
#import <libobjc.A.dylib/NSCoding.h>

@class PDFAnnotationPrivateVars, NSFont, NSColor, NSArray, NSString, PDFDestination, NSURL, PDFPage, NSDate, PDFAnnotationPopup, PDFBorder, PDFAction, NSDictionary;

@interface PDFAnnotation : NSObject <NSCopying, NSCoding> {

	PDFAnnotationPrivateVars* _private;

}

@property (nonatomic,copy) NSFont * font; 
@property (nonatomic,copy) NSColor * fontColor; 
@property (nonatomic,copy) NSColor * interiorColor; 
@property (assign,nonatomic) long long alignment; 
@property (assign,nonatomic) CGPoint startPoint; 
@property (assign,nonatomic) CGPoint endPoint; 
@property (assign,nonatomic) long long startLineStyle; 
@property (assign,nonatomic) long long endLineStyle; 
@property (assign,nonatomic) long long iconType; 
@property (nonatomic,copy) NSArray * quadrilateralPoints; 
@property (assign,nonatomic) long long markupType; 
@property (nonatomic,copy) NSString * widgetFieldType; 
@property (assign,nonatomic) long long widgetControlType; 
@property (assign,getter=isMultiline,nonatomic) char multiline; 
@property (nonatomic,readonly) char isPasswordField; 
@property (assign,getter=hasComb,nonatomic) char comb; 
@property (assign,nonatomic) long long maximumLength; 
@property (nonatomic,copy) NSString * widgetStringValue; 
@property (nonatomic,copy) NSString * widgetDefaultStringValue; 
@property (assign,nonatomic) char allowsToggleToOff; 
@property (assign,nonatomic) char radiosInUnison; 
@property (assign,getter=isReadOnly,nonatomic) char readOnly; 
@property (assign,getter=isListChoice,nonatomic) char listChoice; 
@property (nonatomic,copy) NSArray * choices; 
@property (nonatomic,copy) NSArray * values; 
@property (assign,nonatomic) long long buttonWidgetState; 
@property (nonatomic,copy) NSString * buttonWidgetStateString; 
@property (assign,getter=isOpen,nonatomic) char open; 
@property (nonatomic,readonly) NSArray * paths; 
@property (nonatomic,retain) PDFDestination * destination; 
@property (nonatomic,copy) NSURL * URL; 
@property (nonatomic,copy) NSString * fieldName; 
@property (nonatomic,copy) NSString * caption; 
@property (nonatomic,copy) NSColor * backgroundColor; 
@property (nonatomic,copy) NSString * stampName; 
@property (assign,nonatomic,__weak) PDFPage * page; 
@property (nonatomic,copy) NSString * type; 
@property (assign,nonatomic) CGRect bounds; 
@property (assign,nonatomic) char shouldDisplay; 
@property (assign,nonatomic) char shouldPrint; 
@property (nonatomic,copy) NSDate * modificationDate; 
@property (nonatomic,copy) NSString * userName; 
@property (nonatomic,retain) PDFAnnotationPopup * popup; 
@property (nonatomic,retain) PDFBorder * border; 
@property (nonatomic,copy) NSColor * color; 
@property (nonatomic,copy) NSString * contents; 
@property (nonatomic,retain) PDFAction * action; 
@property (nonatomic,readonly) char hasAppearanceStream; 
@property (assign,getter=isHighlighted,nonatomic) char highlighted; 
@property (nonatomic,copy,readonly) NSDictionary * annotationKeyValues; 
+(id)PDFAnnotationKeysWithStringValues;
+(void)setAnnotationPageLayerEffectIsFlipped:(char)arg1 ;
+(id)PDFTextColors;
+(id)PDFTextBorderColors;
+(id)getProperNameStringFromString:(id)arg1 ;
+(id)PDFMarkupColors;
+(id)PDFKitAnnotationUndoManagerDisplayNames;
+(id)SubtypeForPDFMarkupStyle:(unsigned long long)arg1 ;
+(BOOL)PDFAnnotationIsHandledByPDFKit:(id)arg1 ;
+(char)annotationPageLayerEffectIsFlipped;
+(Class)classForAnnotationDictionary:(CGPDFDictionaryRef)arg1 ;
+(id)PresentableStringForAnnotationKey:(id)arg1 ;
+(id)PDFKitFieldTypeArray;
+(id)PDFKitHighlightingModeArray;
+(id)nameForLineStyle:(long long)arg1 ;
+(id)PDFKitAppearanceDictionaryArray;
+(id)PDFKitBorderStyleArray;
+(long long)lineStyleFromName:(id)arg1 ;
+(id)PDFKitAnnotationKeys;
+(id)PDFKitAnnotationKeysIgnored;
+(id)PDFAnnotationKeysForRedactionDiscoverability;
+(id)PDFKitSubtypeArray;
+(long long)MarkupTypeForMarkupStyle:(unsigned long long)arg1 ;
+(id)PDFMarkupStyleLabels;
-(id)copyWithZone:(NSZone*)arg1 ;
-(unsigned long long)flags;
-(void)dealloc;
-(id)description;
-(id)init;
-(void)setType:(NSString *)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(char)isHidden;
-(void)setHidden:(char)arg1 ;
-(NSArray *)values;
-(NSString *)type;
-(NSURL *)URL;
-(PDFAction *)action;
-(id)displayName;
-(void)setURL:(NSURL *)arg1 ;
-(void)setAction:(PDFAction *)arg1 ;
-(void)setAlignment:(long long)arg1 ;
-(NSString *)contents;
-(id)parent;
-(long long)alignment;
-(NSString *)userName;
-(NSDate *)modificationDate;
-(char)isOpen;
-(void)setBackgroundColor:(NSColor *)arg1 ;
-(CGRect)bounds;
-(NSColor *)backgroundColor;
-(void)setHighlighted:(char)arg1 ;
-(void)setValues:(NSArray *)arg1 ;
-(char)isHighlighted;
-(id)toolTip;
-(void)setBounds:(CGRect)arg1 ;
-(void)setContents:(NSString *)arg1 ;
-(NSFont *)font;
-(void)setFont:(NSFont *)arg1 ;
-(void)setUserName:(NSString *)arg1 ;
-(NSColor *)color;
-(void)setColor:(NSColor *)arg1 ;
-(id)layoutManager;
-(BOOL)containsPoint:(CGPoint)arg1 ;
-(BOOL)isTransparent;
-(long long)priority;
-(id)textStorage;
-(void)setStartPoint:(CGPoint)arg1 ;
-(void)setEndPoint:(CGPoint)arg1 ;
-(PDFPage *)page;
-(void)setPage:(PDFPage *)arg1 ;
-(char)isLocked;
-(void)setLocked:(char)arg1 ;
-(PDFDestination *)destination;
-(void)setDestination:(PDFDestination *)arg1 ;
-(void)setLayoutManager:(id)arg1 ;
-(char)isSelected;
-(CGPoint)startPoint;
-(void)setTextStorage:(id)arg1 ;
-(char)isReadOnly;
-(id)control;
-(void)setControl:(id)arg1 ;
-(void)setScaleFactor:(double)arg1 ;
-(double)scaleFactor;
-(void)commonInit;
-(NSString *)fieldName;
-(void)setModificationDate:(NSDate *)arg1 ;
-(void)setParent:(id)arg1 ;
-(void)setOpen:(char)arg1 ;
-(id)debugQuickLookObject;
-(void)setInvisible:(char)arg1 ;
-(NSArray *)paths;
-(void)setReadOnly:(char)arg1 ;
-(long long)iconType;
-(NSString *)caption;
-(void)setCaption:(NSString *)arg1 ;
-(void)setIconType:(long long)arg1 ;
-(void)setFieldName:(NSString *)arg1 ;
-(char)isMultiline;
-(void)setMultiline:(char)arg1 ;
-(void)setMaximumLength:(long long)arg1 ;
-(PDFBorder *)border;
-(void)setBorder:(PDFBorder *)arg1 ;
-(CGPoint)endPoint;
-(NSColor *)interiorColor;
-(NSColor *)fontColor;
-(char)hasAppearanceStream;
-(void)drawWithBox:(long long)arg1 ;
-(id)initWithBounds:(CGRect)arg1 ;
-(NSArray *)choices;
-(NSEdgeInsets)textInsets;
-(char)shouldDisplay;
-(PDFAnnotationPopup *)popup;
-(void)setPopup:(PDFAnnotationPopup *)arg1 ;
-(void)setIsSelected:(char)arg1 ;
-(id)accessibilityNode;
-(char)shouldBurnIn;
-(id)valueForAnnotationKey:(id)arg1 ;
-(long long)widgetControlType;
-(NSString *)widgetStringValue;
-(long long)buttonWidgetState;
-(char)isListChoice;
-(char)isTextWidget;
-(char)isReadOnlyAnnotation;
-(void)setButtonWidgetState:(long long)arg1 ;
-(void)setFontColor:(NSColor *)arg1 ;
-(char)setValue:(id)arg1 forAnnotationKey:(id)arg2 ;
-(id)initWithAnnotationDictionary:(CGPDFDictionaryRef)arg1 forPage:(id)arg2 ;
-(void)setIsFullyConstructed:(BOOL)arg1 ;
-(CFDictionaryRef)commonCreateDictionaryRef;
-(void)drawWithBox:(long long)arg1 inContext:(CGContextRef)arg2 ;
-(id)formData;
-(void)setDictionaryRef:(CFDictionaryRef)arg1 ;
-(char)intersectsWithRedactionPath;
-(CFDictionaryRef)dictionaryRef;
-(CGPDFAnnotationRef)CGPDFAnnotation;
-(CFDictionaryRef)dictionaryRefExcludingParentOrPopup;
-(void)setCGPDFAnnotation:(CGPDFAnnotationRef)arg1 ;
-(CGRect)extendedBoundsForAction:(int)arg1 ;
-(id)pdfAnnotationUUID;
-(NSArray *)quadrilateralPoints;
-(long long)markupType;
-(CGRect)noteBounds;
-(unsigned long long)markupStyle;
-(void)addNameToDictionaryRef:(CFDictionaryRef)arg1 ;
-(long long)startLineStyle;
-(void)setStartLineStyle:(long long)arg1 ;
-(long long)endLineStyle;
-(void)setEndLineStyle:(long long)arg1 ;
-(void)setInteriorColor:(NSColor *)arg1 ;
-(id)widgetOnStateString;
-(NSString *)widgetDefaultStringValue;
-(void)addFieldTypeToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addFieldNameToDictionaryRef:(CFDictionaryRef)arg1 ;
-(char)isMarkupAnnotationSubtype;
-(id)initWithBounds:(CGRect)arg1 forType:(id)arg2 withProperties:(id)arg3 ;
-(id)scaledFontForTextWidget;
-(char)shouldComb;
-(void)setWidgetStringValue:(NSString *)arg1 ;
-(void)setListChoice:(char)arg1 ;
-(void)setChoices:(NSArray *)arg1 ;
-(id)akAnnotationAdaptor;
-(id)akAnnotation;
-(char)allowsToggleToOff;
-(void)setQuadrilateralPoints:(NSArray *)arg1 ;
-(void)setMarkupType:(long long)arg1 ;
-(void)updateAnnotationEffect;
-(void)addColor:(id)arg1 forKey:(CFStringRef)arg2 toDictionaryRef:(CFDictionaryRef)arg3 ;
-(void)setWidgetControlType:(long long)arg1 ;
-(void)setAllowsToggleToOff:(char)arg1 ;
-(void)setWidgetOnStateString:(id)arg1 ;
-(void)setAccessibilityNode:(id)arg1 ;
-(id)indexSetForQuadPoints;
-(void)setContents:(id)arg1 withUndo:(BOOL)arg2 ;
-(BOOL)noteContainsPoint:(CGPoint)arg1 ;
-(void)setBoundsWithUndo:(CGRect)arg1 ;
-(void)setQuadPointsForIndexSet:(id)arg1 withUndo:(BOOL)arg2 ;
-(void)addToPageView;
-(char)isSignature;
-(char)shouldExport;
-(char)isRedaction;
-(void)removeValueForAnnotationKey:(id)arg1 ;
-(id)replaceTextWidgetWithString:(id)arg1 ;
-(void)setAppearance:(CGPDFFormRef)arg1 forType:(int)arg2 ;
-(long long)maximumLength;
-(CGDisplayListRef)cachedAppearance:(int)arg1 ;
-(void)drawCachedAppearance:(CGDisplayListRef)arg1 withBox:(long long)arg2 inContext:(CGContextRef)arg3 inRect:(CGRect)arg4 scaleProportional:(char)arg5 ;
-(CGPDFFormRef)appearance:(int)arg1 ;
-(void)drawAppearance:(CGPDFFormRef)arg1 withBox:(long long)arg2 inContext:(CGContextRef)arg3 ;
-(CGPath*)cgPathArray;
-(void)setCGPathArray:(CGPath*)arg1 ;
-(char)popupDrawsCloseWidget;
-(char)popupDrawsText;
-(id)mouseHoverBackgroundColor;
-(void)discardTextStorageAndLayoutManager;
-(void)createTextStorageAndLayoutManager;
-(CFDictionaryRef)gcCreateAttributesForFont:(id)arg1 color:(id)arg2 ;
-(BOOL)isFullyConstructed;
-(void)setupAKAnnotationAdaptorIfNecessary;
-(char)isMarkupAnnotation;
-(char)shouldPrint;
-(void)postAnnotationsChangedNotification;
-(void)removeFromPageView;
-(void)setIsTransparent:(BOOL)arg1 ;
-(void)cacheAppearances;
-(CGPDFDictionaryRef)popupDictionary;
-(CGPDFDictionaryRef)sourceDictionary;
-(void)setPopupInternal:(id)arg1 scanPage:(char)arg2 ;
-(void)printDictionaryKeyValues;
-(id)initCommonWithBounds:(CGRect)arg1 ;
-(void)setForExport:(char)arg1 ;
-(CGPathRef)quadPointsPath;
-(id)pathLock;
-(void)secondaryInit;
-(char)setRect:(CGRect)arg1 forAnnotationKey:(id)arg2 ;
-(id)getPDFKeyMappingDictionary;
-(void)setShouldPrint:(char)arg1 ;
-(void)_generateFormFieldName;
-(char)savesAppearanceStream;
-(void)setSavesAppearanceStream:(char)arg1 ;
-(void)setPDFAnnotationDictionary:(id)arg1 ;
-(void)removeAKAnnotationAdaptor;
-(void)_releaseDictionaryRef;
-(void)releaseCGPathArray;
-(BOOL)_annotationAllowsCommenting:(id)arg1 ;
-(void)_savePropertiesBeforeSetBounds;
-(void)_restorePropertiesAfterSetBounds;
-(void)_didSetValue:(id)arg1 forAnnotationKey:(id)arg2 ;
-(char)hasComb;
-(char)isPasswordField;
-(char)isTextMarkupAnnotation;
-(char)isNoteAnnotation;
-(id)_selectionForMarkupAnnotation;
-(void)_printDictionary:(id)arg1 atDepth:(int)arg2 ;
-(NSDictionary *)annotationKeyValues;
-(void)removeAllAppearanceStreams;
-(char)_isValidAnnotationKey:(id)arg1 ;
-(char)_setArray:(id)arg1 forAnnotationKey:(id)arg2 ;
-(char)setBoolean:(char)arg1 forAnnotationKey:(id)arg2 ;
-(char)_setDictionary:(id)arg1 forAnnotationKey:(id)arg2 ;
-(char)_setInteger:(id)arg1 forAnnotationKey:(id)arg2 ;
-(char)_setString:(id)arg1 forAnnotationKey:(id)arg2 ;
-(char)_setVarious:(id)arg1 forAnnotationKey:(id)arg2 ;
-(void)presentRedactionDiscoverabilityAlertWithOldValue:(id)arg1 forAnnotationKey:(id)arg2 ;
-(void)_didRemoveValueForAnnotationKey:(id)arg1 ;
-(void)_addAKAnnotationToDictionary:(CFDictionaryRef)arg1 ;
-(char)_shouldReadAppearanceStreams;
-(void)getAppearancesFromDictionary:(CGPDFDictionaryRef)arg1 ofType:(int)arg2 ;
-(id)_PDFMarkupColorForColor:(id)arg1 ;
-(id)_PDFTextColorForColor:(id)arg1 ;
-(id)getFontFromAppearanceString:(CGPDFStringRef)arg1 ;
-(id)getColorFromAppearanceString:(CGPDFStringRef)arg1 ;
-(void)setIsSignature:(char)arg1 ;
-(id)_getFullFieldNameFromDictionary:(CGPDFDictionaryRef)arg1 ;
-(char)_isTextMarkupRedaction;
-(id)_createArrayForCGRect:(CGRect)arg1 ;
-(id)_createArrayForColor:(id)arg1 ;
-(void)addAppearanceForKey:(CFStringRef)arg1 toDictionaryRef:(CFDictionaryRef)arg2 ;
-(id)mouseDownAction;
-(void*)_sanitizeValue:(id)arg1 forKey:(id)arg2 ;
-(id)getFontFromAppearanceNSString:(id)arg1 ;
-(id)getColorFromAppearanceNSString:(id)arg1 ;
-(id)tokenizeAppearanceString:(id)arg1 ;
-(double)pointSizeFromAppearanceTokens:(id)arg1 ;
-(id)fontNameFromAppearanceTokens:(id)arg1 ;
-(id)colorFromAppearanceTokens:(id)arg1 ;
-(void)addRect:(CGRect)arg1 forKey:(CFStringRef)arg2 toDictionaryRef:(CFDictionaryRef)arg3 ;
-(void)addActionToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addAdditionalActionsToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addNormalAndDownAppearanceToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addNormalAppearanceToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addNormalAndDownAppearanceWithStateToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addNormalAppearanceWithStateToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addBorderToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addBorderStyleToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addContentsToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addDefaultAppearanceDictionaryRef:(CFDictionaryRef)arg1 ;
-(char)addDestinationToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addFlagsToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addHighlightingModeToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addInkListToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addLineToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addLineEndingStylesToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addModificationDateToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addOpenToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addPopupToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addQuaddingToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addQuadPointsToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addTextLabelToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addDefaultFieldValueToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addFieldFlagsToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addMaxLenToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addAppearanceCharacteristicsToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addOptionsToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addAlternateFieldNameToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)addFieldValueToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)_addUnknownPropertiesToDictionaryRef:(CFDictionaryRef)arg1 ;
-(void)drawAppearance:(CGPDFFormRef)arg1 withBox:(long long)arg2 inContext:(CGContextRef)arg3 scaleProportional:(char)arg4 ;
-(void)drawAppearance:(CGPDFFormRef)arg1 withBox:(long long)arg2 inContext:(CGContextRef)arg3 inRect:(CGRect)arg4 scaleProportional:(char)arg5 ;
-(void)_drawAnnotationWithBox:(long long)arg1 inContext:(CGContextRef)arg2 ;
-(SCD_Struct_PD35)_calculatePDFAnnotationLayerOutsetForAction:(int)arg1 ;
-(CGRect)_drawingRectForLineStyle:(long long)arg1 from:(CGPoint)arg2 to:(CGPoint)arg3 borderWidth:(double)arg4 ;
-(CGPoint)_pointOutsetFrom:(CGPoint)arg1 startPoint1:(CGPoint)arg2 startPoint2:(CGPoint)arg3 lineWidth:(double)arg4 ;
-(id)_getAttributedStringForTextWidget;
-(id)initWithDictionary:(id)arg1 forPage:(id)arg2 ;
-(void)setShouldBurnIn:(char)arg1 ;
-(void)setMouseHoverBackgroundColor:(id)arg1 ;
-(char)isTextMarkupOrNoteAnnotation;
-(id)textMarkupString;
-(id)mouseUpAction;
-(void)setMouseUpAction:(id)arg1 ;
-(void)setMouseDownAction:(id)arg1 ;
-(char)isWidgetOrMarkupAnnotation;
-(void)highlightRedaction:(BOOL)arg1 ;
-(id)_accessibilityTypeString;
-(void)addPageReferenceToDictionaryRef:(CFDictionaryRef)arg1 ;
-(id)createDefaultAppearanceStringWithFont:(id)arg1 fontColor:(id)arg2 ;
-(void)setPopupDrawsCloseWidget:(char)arg1 ;
-(void)setPopupDrawsText:(char)arg1 ;
-(void)updateFormData;
-(void)setTextInsets:(NSEdgeInsets)arg1 ;
-(void)addBezierPath:(id)arg1 ;
-(void)removeBezierPath:(id)arg1 ;
-(NSString *)widgetFieldType;
-(BOOL)_boolValueForAnnotationFlag:(unsigned long long)arg1 withDefaultValue:(BOOL)arg2 ;
-(void)_setBoolValue:(BOOL)arg1 forAnnotationFlag:(unsigned long long)arg2 ;
-(BOOL)_boolValueForWidgetFieldFlag:(unsigned long long)arg1 ;
-(void)_setBoolValue:(BOOL)arg1 forWidgetFieldFlag:(unsigned long long)arg2 ;
-(id)_textForValue:(id)arg1 ;
-(void)setWidgetFieldType:(NSString *)arg1 ;
-(char)isInvisible;
-(char)shouldNotZoom;
-(void)setShouldNotZoom:(char)arg1 ;
-(char)shouldNotRotate;
-(void)setShouldNotRotate:(char)arg1 ;
-(void)setShouldDisplay:(char)arg1 ;
-(void)setReadOnlyAnnotation:(char)arg1 ;
-(char)shouldToggleNoView;
-(void)setShouldToggleNoView:(char)arg1 ;
-(char)contentsLocked;
-(void)setContentsLocked:(char)arg1 ;
-(void)setComb:(char)arg1 ;
-(void)setWidgetDefaultStringValue:(NSString *)arg1 ;
-(char)radiosInUnison;
-(void)setRadiosInUnison:(char)arg1 ;
-(NSString *)buttonWidgetStateString;
-(void)setButtonWidgetStateString:(NSString *)arg1 ;
-(NSString *)stampName;
-(void)setStampName:(NSString *)arg1 ;
@end

