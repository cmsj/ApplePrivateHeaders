/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:30 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/SyncServices.framework/Versions/A/SyncServices
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <SyncServices/SyncServices-Structs.h>
@class NSString, ISDDataDatabase, NSMutableDictionary, NSMutableSet, NSMutableArray;

@interface ISDRecordStore : NSObject {

	NSString* _dataDirectory;
	ISDDataDatabase* _database;
	NSMutableDictionary* _clientData;
	NSMutableSet* _filteredTupleReferences;
	unsigned long long _flushCount;
	NSMutableDictionary* _segmentNameForEntity;
	NSMutableDictionary* _truthDatabaseForSegment;
	NSMutableArray* _truthDatabases;
	NSMutableSet* _formattedAwayProperties;
	NSMutableDictionary* _recordIdentifiersToFormattedAwayProperties;

}
-(void)dealloc;
-(void)vacuum;
-(void)rollbackChanges;
-(void)removeAllRecords;
-(void)closeDatabase;
-(void)enableSqliteTracing:(id)arg1 ;
-(void)disableSqliteTracing;
-(void)setSqliteCacheSize:(long long)arg1 ;
-(id)initWithDatabaseInDirectory:(id)arg1 ;
-(void)disableFlush;
-(void)enableFlush;
-(id)initWithEntityNameToTruthSegment:(id)arg1 ;
-(void)removeRecordsForEntityNames:(id)arg1 ;
-(void)removeAttributes:(id)arg1 andRelationships:(id)arg2 forEntityName:(id)arg3 ;
-(void)purgeRecordsForEntitiesNamed:(id)arg1 inGenerationsLessThan:(unsigned)arg2 ;
-(void)setToBeApplied:(char)arg1 forRecordsWithEntityNames:(id)arg2 ;
-(void)updateRecordStatesForPreviouslyFilteredRecordsWithEntityNames:(id)arg1 ;
-(id)recordIdsForEntityNames:(id)arg1 ;
-(void)enumerateRecordDataReferencesForRecordIds:(id)arg1 asArgumentsToFunction:(/*function pointer*/void*)arg2 context:(void*)arg3 ;
-(void)removeRecordsWithIds:(id)arg1 nullifyReferencesToRemovedRecords:(char)arg2 ;
-(void)removeAllDataReferences:(id)arg1 updateRecords:(char)arg2 ;
-(id)recordsWithIdentifiers:(id)arg1 ;
-(void)setDirtyCoderDelegate:(id)arg1 ;
-(void)enumerateSourcesOfRelationshipNames:(id)arg1 toRecordIds:(id)arg2 asArgumentsToFunction:(/*function pointer*/void*)arg3 context:(void*)arg4 ;
-(void)enumerateTargetsOfRelationshipNames:(id)arg1 fromRecordIds:(id)arg2 asArgumentsToFunction:(/*function pointer*/void*)arg3 context:(void*)arg4 ;
-(void)setRecordState:(int)arg1 toBeAppliedFlag:(char)arg2 forRecordIds:(id)arg3 removeProperties:(char)arg4 ;
-(id)createDictionaryWithRecordsWithIdentifiers:(id)arg1 ;
-(void)setToBeApplied:(char)arg1 forRecordIds:(id)arg2 ;
-(void)replaceRecordId:(id)arg1 withRecordId:(id)arg2 ;
-(id)clientDataForRecordWithId:(id)arg1 ;
-(void)removeClientDataForRecordWithId:(id)arg1 ;
-(void)setClientData:(id)arg1 forRecordWithIdentifier:(id)arg2 ;
-(void)enumerateRecordHeadersForRecordsWithIds:(id)arg1 asArgumentsToFunction:(/*function pointer*/void*)arg2 context:(void*)arg3 ;
-(id)toBeAppliedRecordIdentifiersForEntityNames:(id)arg1 ;
-(void)rollbackChangesIgnoringClientData;
-(void)enableFlushIgnoringClientData;
-(id)recordIdentifiersOfRecordsInStates:(int*)arg1 count:(unsigned long long)arg2 entityNames:(id)arg3 ;
-(void)removeRecordsForEntityNames:(id)arg1 nullifyReferencesToRemovedRecords:(char)arg2 ;
-(void)dropIndexes;
-(void)_createSetOfRecordIdsWithFilteredTargets:(id)arg1 ;
-(char)addDataReferences:(id)arg1 withRecordId:(id)arg2 forPropertyName:(id)arg3 savedReferences:(NSRange*)arg4 error:(id*)arg5 ;
-(id)recordWithIdentifier:(id)arg1 ;
-(void)removeDataReferencesWithRecordIds:(id)arg1 dataWrappers:(id)arg2 ;
-(void)updateRecord:(id)arg1 ignoreDeletedRelationshipTuples:(char)arg2 ;
-(void)addRecord:(id)arg1 state:(int)arg2 toBeAppliedFlag:(char)arg3 ignoreDeletedRelationshipTuples:(char)arg4 ;
-(id)entityNumbersForRecords:(id)arg1 ;
-(void)recreateIndexes;
-(id)deletedRecordIdsInTruth:(id)arg1 ;
-(void)addFormattedAwayProperties:(id)arg1 forRecordWithIdentifier:(id)arg2 ;
-(void)markRecordsKeepAwayFromServer:(id)arg1 forClient:(id)arg2 inGeneration:(unsigned)arg3 ;
-(unsigned long long)toBeAppliedRecordCountForEntityNames:(id)arg1 ;
-(void)enumerateTargetsOfRelationshipWithName:(id)arg1 fromRecordWithId:(id)arg2 asArgumentsToFunction:(/*function pointer*/void*)arg3 context:(void*)arg4 ;
-(void)enumerateSourcesOfRelationshipWithName:(id)arg1 toRecordWithId:(id)arg2 asArgumentsToFunction:(/*function pointer*/void*)arg3 context:(void*)arg4 ;
-(void)enumerateRecordIdsForRecordsWithMatchingAttributes:(id)arg1 asArgumentsToFunction:(/*function pointer*/void*)arg2 context:(void*)arg3 matchAll:(char)arg4 ;
-(void)enumerateRecordIdsForEntityNames:(id)arg1 ignoreDeletedRecords:(char)arg2 asArgumentsToFunction:(/*function pointer*/void*)arg3 context:(void*)arg4 ;
-(id)initWithDatabaseInDirectory:(id)arg1 delegate:(id)arg2 ;
-(void)setRecordHasDataReferences:(char)arg1 forRecordIds:(id)arg2 ;
-(void)removePropertiesForRecordsWithIdentifiers:(id)arg1 ;
-(id)createDictionaryWithRecordsWithIdentifiers:(id)arg1 constructRelationshipMap:(char)arg2 ;
-(char)containsRecordWithId:(id)arg1 ;
-(void)setRecordState:(int)arg1 forRecordIds:(id)arg2 ;
-(id)getRecordDataReferencesForRecordId:(id)arg1 forPropertyName:(id)arg2 ;
-(id)getRecordDataReferencesForRecordWithIdentifiers:(id)arg1 ;
-(void)rowids:(id)arg1 addedAfterGeneration:(unsigned)arg2 forEntityWithName:(id)arg3 fromAnyClientsExceptClientWithId:(id)arg4 ;
-(id)recordIdsAddedAfterGeneration:(unsigned)arg1 forEntityWithName:(id)arg2 fromAnyClientsExceptClientWithId:(id)arg3 ;
-(id)recordIdsWithDataReferencesForEntityNames:(id)arg1 ;
-(id)recordCountsForEntityNames:(id)arg1 ;
-(id)addCountsForEntityNames:(id)arg1 generation:(unsigned)arg2 ;
-(id)deleteCountsForEntityNames:(id)arg1 generation:(unsigned)arg2 ;
-(id)createArrayOfEntityNamesEntityNamesWithUndeletedRecords:(id)arg1 lessThanGeneration:(unsigned)arg2 ;
-(void)replaceRelationshipTupleId:(id)arg1 withRelationshipTupleId:(id)arg2 ;
-(void)enumerateRecordHeadersForRecordsAlteredSinceLastSyncedGenerations:(id)arg1 asArgumentsToFunction:(/*function pointer*/void*)arg2 context:(void*)arg3 ;
-(void)setLastChangedGeneration:(unsigned)arg1 forRecordIds:(id)arg2 ;
-(void)enumerateRecordIdsForRecordsWithMatchingAttributes:(id)arg1 asArgumentsToFunction:(/*function pointer*/void*)arg2 context:(void*)arg3 ;
-(id)allRecordIdentifiers;
-(id)unappliedRecordIdentifiers;
-(void)addEquivalentGlobalIds:(id)arg1 forNativeGlobalId:(id)arg2 ;
-(void)removeEquivalentGlobalsIdsForNativeGlobalId:(id)arg1 ;
-(id)nativeGlobalIdForEquivalentId:(id)arg1 ;
-(id)globalIdEquivalentsForNativeRecordId:(id)arg1 ;
-(void)deleteStillBornRecords;
-(id)dirtyCoderDelegate;
-(void)disableFlushAndLockImmediately;
-(void)_initClientData;
-(id)initWithEntityNameToTruthSegment:(id)arg1 delegate:(id)arg2 usingDataDirectory:(id)arg3 ;
-(id)databaseForEntityName:(id)arg1 ;
-(id)databaseForTruthSegment:(id)arg1 ;
-(void)removeAllAuxillaryRecordData;
-(void)removeDataReferencesWithRecordIds:(id)arg1 inDatabase:(id)arg2 dataWrappers:(id)arg3 ;
-(void)_removeRecordsWithIds:(id)arg1 inDatabase:(id)arg2 nullifyReferencesToRemovedRecords:(char)arg3 ;
-(id)_partitionEntityNamesBySegment:(id)arg1 ;
-(id)truthSegmentForEntityName:(id)arg1 ;
-(char)_isRecordStoreAvailableForMode:(int)arg1 ;
-(id)initWithEntityNameToTruthSegment:(id)arg1 delegate:(id)arg2 ;
-(id)truthSegmentNames;
-(unsigned long long)truthSegmentCount;
-(void)addRowidsToIndexSet:(id)arg1 forRecordsWithIds:(id)arg2 inTruthSegment:(id)arg3 ;
-(void)deleteTuple:(id)arg1 inGeneration:(unsigned)arg2 inSegment:(id)arg3 ;
-(void)replaceRecordId:(id)arg1 withRecordId:(id)arg2 forEntityName:(id)arg3 ;
-(id)recordsWithRowids:(unsigned long long*)arg1 count:(unsigned long long)arg2 inTruthSegment:(id)arg3 ;
-(id)_truthSegmentNamesForRecordIds:(id)arg1 ;
-(id)_truthSegmentNameForRecordId:(id)arg1 ;
-(char)isRecordStoreAvailableForWriting;
-(char)isRecordStoreAvailableForReading;
-(void)enableSqliteTracing;
-(void)removeDataReferencesWithRecordId:(id)arg1 forPropertyName:(id)arg2 dataWrappers:(id)arg3 updateRecord:(char)arg4 ;
-(void)_addDataReference:(id)arg1 withRecordId:(id)arg2 forPropertyName:(id)arg3 ;
-(void)enumerateRecordDataReferencesForRecordIds:(id)arg1 inDatabase:(id)arg2 asArgumentsToFunction:(/*function pointer*/void*)arg3 context:(void*)arg4 ;
-(void)_removeDataReferencesWithRecordIds:(id)arg1 inDatabase:(id)arg2 ;
-(void)_removeDataReferencesWithRecordIds:(id)arg1 ;
-(void)addDataReferences:(id)arg1 withRecordId:(id)arg2 forPropertyName:(id)arg3 ;
-(char)_isTargetId:(id)arg1 filteredForRecordWithId:(id)arg2 ;
-(id)formattedAwayPropertiesForRecordWithIdentifier:(id)arg1 ;
@end

