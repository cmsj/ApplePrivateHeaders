/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:30 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/SyncServices.framework/Versions/A/SyncServices
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <SyncServices/SyncServices-Structs.h>
@class ISDDataDirectoryVersion, NSMutableSet, NSString;

@interface ISDDatabase : NSObject {

	sqlite3Ref _db;
	ISDDataDirectoryVersion* _dataVersion;
	NSMutableSet* _globalStringTable;
	NSString* _tracingPrefix;
	id _dirtyCoderDelegate;

}
+(void)initialize;
+(void)toggleSqlLogging;
+(id)defaultDatabasePath:(id)arg1 ;
+(id)getThreadGlobalUniqueStringTable;
+(void)clearThreadGlobalUniqueStringTable;
+(void)maybeEnableSqlLogging;
-(void)dealloc;
-(void)beginTransaction;
-(void)vacuum;
-(sqlite3_stmtRef)prepareStatement:(const char*)arg1 ;
-(void)execute:(const char*)arg1 ;
-(void)commitTransaction;
-(void)closeDatabase;
-(void)beginExclusiveTransaction;
-(void)rollbackTransaction;
-(void)openDatabaseAtPath:(id)arg1 ;
-(void)bindUnsignedLongLong:(unsigned long long)arg1 atIndex:(int)arg2 inStatement:(sqlite3_stmtRef)arg3 ;
-(char)stepStatement:(sqlite3_stmtRef)arg1 ;
-(void)finalizeStatement:(sqlite3_stmt*)arg1 ;
-(void)bindObject:(id)arg1 atIndex:(int)arg2 inStatement:(sqlite3_stmtRef)arg3 ;
-(unsigned long long)unsignedLongLongFromColumn:(int)arg1 inStatement:(sqlite3_stmtRef)arg2 ;
-(void)bindInt:(int)arg1 atIndex:(int)arg2 inStatement:(sqlite3_stmtRef)arg3 ;
-(void)resetStatement:(sqlite3_stmtRef)arg1 unbindValuesThroughIndex:(int)arg2 ;
-(void)setTracingPrefix:(id)arg1 ;
-(void)enableSqliteTracing:(id)arg1 ;
-(void)disableSqliteTracing;
-(void)executeWithBlob:(const void*)arg1 length:(int)arg2 format:(const char*)arg3 ;
-(void)executeWithRollbackOnError:(const char*)arg1 ;
-(void)executeWithCallback:(/*function pointer*/void*)arg1 context:(void*)arg2 sql:(const char*)arg3 ;
-(int)intFromColumn:(int)arg1 inStatement:(sqlite3_stmtRef)arg2 ;
-(void)setSqliteCacheSize:(long long)arg1 ;
-(void)bindString:(id)arg1 atIndex:(int)arg2 inStatement:(sqlite3_stmtRef)arg3 ;
-(id)createStringFromColumn:(int)arg1 inStatement:(sqlite3_stmtRef)arg2 uniqueInStringTable:(id)arg3 ;
-(id)initWithDatabaseAtPath:(id)arg1 ;
-(id)createDataFromColumn:(int)arg1 inStatement:(sqlite3_stmtRef)arg2 copyBytes:(char)arg3 ;
-(void)runStatement:(sqlite3_stmtRef)arg1 withBoundObjects:(id)arg2 startingAtIndex:(unsigned)arg3 callback:(/*function pointer*/void*)arg4 context:(void*)arg5 ;
-(void)setDirtyCoderDelegate:(id)arg1 ;
-(void)bindGlobalId:(id)arg1 atIndex:(int)arg2 inStatement:(sqlite3_stmtRef)arg3 ;
-(void)runStatement:(sqlite3_stmtRef)arg1 withBoundGlobalIds:(id)arg2 startingAtIndex:(unsigned)arg3 callback:(/*function pointer*/void*)arg4 context:(void*)arg5 ;
-(id)createDataWrapperFromDataInColumn:(int)arg1 statement:(sqlite3_stmtRef)arg2 ;
-(void)runStatement:(sqlite3_stmtRef)arg1 withBoundRowIds:(unsigned long long*)arg2 count:(unsigned long long)arg3 startingAtIndex:(unsigned)arg4 callback:(/*function pointer*/void*)arg5 context:(void*)arg6 ;
-(id)createGlobalIdStringFromColumn:(int)arg1 inStatement:(sqlite3_stmtRef)arg2 ;
-(void)runStatement:(sqlite3_stmtRef)arg1 callback:(/*function pointer*/void*)arg2 context:(void*)arg3 ;
-(void)runStatement:(sqlite3_stmtRef)arg1 withBoundRecordStates:(int*)arg2 count:(unsigned long long)arg3 withBoundEntityNumbers:(id)arg4 callback:(/*function pointer*/void*)arg5 context:(void*)arg6 ;
-(id)createGlobalIdStringFromColumn:(int)arg1 inStatement:(sqlite3_stmtRef)arg2 uniqueInStringTable:(id)arg3 ;
-(id)createPropertiesFromDataInColumn:(int)arg1 statement:(sqlite3_stmtRef)arg2 forRecordWithIdentifier:(id)arg3 ;
-(void)runStatement:(sqlite3_stmtRef)arg1 withBoundRowIds:(id)arg2 startingAtIndex:(unsigned)arg3 callback:(/*function pointer*/void*)arg4 context:(void*)arg5 ;
-(id)createGlobalIdFromColumn:(int)arg1 inStatement:(sqlite3_stmtRef)arg2 ;
-(void)setDataVersionGivenPath:(id)arg1 ;
-(void)raiseSQLiteInternalInconsistencyException:(id)arg1 ;
-(char)_isDatabaseAvailableForMode:(int)arg1 ;
-(int)databaseAccessStatus;
-(sqlite3Ref)sqliteDatabase;
-(void)reopenDatabaseAtPath:(id)arg1 ;
-(id)dirtyCoderDelegate;
-(char)isDatabaseAvailableForWriting;
-(char)isDatabaseAvailableForReading;
-(void)beginImmediateTransaction;
-(void)beginTransactionWithCallback:(/*function pointer*/void*)arg1 numberOfAttempts:(unsigned)arg2 interval:(double)arg3 ;
-(void)beginImmediateTransactionWithCallback:(/*function pointer*/void*)arg1 numberOfAttempts:(unsigned)arg2 interval:(double)arg3 ;
-(void)beginExclusiveTransactionWithCallback:(/*function pointer*/void*)arg1 numberOfAttempts:(unsigned)arg2 interval:(double)arg3 ;
-(void)commitTransactionWithCallback:(/*function pointer*/void*)arg1 numberOfAttempts:(unsigned)arg2 interval:(double)arg3 ;
-(void)rollbackTransactionWithCallback:(/*function pointer*/void*)arg1 numberOfAttempts:(unsigned)arg2 interval:(double)arg3 ;
-(void)executeSQL:(const char*)arg1 withCallback:(/*function pointer*/void*)arg2 context:(void*)arg3 ;
-(void)raiseSQLiteExceptionWithName:(id)arg1 format:(id)arg2 ;
-(void)checkBinding:(int)arg1 forValue:(id)arg2 atIndex:(int)arg3 ;
-(void)executeWithCallback:(/*function pointer*/void*)arg1 context:(void*)arg2 rollbackOnError:(char)arg3 sql:(const char*)arg4 ;
@end

