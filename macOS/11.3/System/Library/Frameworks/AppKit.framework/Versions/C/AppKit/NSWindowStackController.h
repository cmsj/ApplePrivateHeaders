/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:50:58 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <AppKit/AppKit-Structs.h>
#import <AppKit/NSWindowTabGroup.h>
#import <libobjc.A.dylib/NSTabBarDelegate.h>
#import <libobjc.A.dylib/NSTabPickerDelegate.h>

@class NSMutableArray, NSString, NSMutableDictionary, NSTabBar, NSWindow, NSMenu, NSTabPickerViewController, NSTabPickerWindow, NSWindowTab, _NSFullScreenModalStackController;

@interface NSWindowStackController : NSWindowTabGroup <NSTabBarDelegate, NSTabPickerDelegate> {

	NSMutableArray* _syncedItems;
	NSString* _stateIdentifier;
	NSMutableDictionary* _talTabbingOrder;
	NSTabBar* _tabBar;
	NSWindow* _overlayWindow;
	NSWindow* _minimizedWindow;
	NSWindow* _windowBeingRemoved;
	NSWindow* _windowBeingDragged;
	NSMenu* _tabItemMenu;
	NSMenu* _pinnedTabItemMenu;
	NSTabPickerViewController* _tabPickerViewController;
	NSTabPickerWindow* _tabPickerWindow;
	NSWindowTab* _plusTab;
	_NSFullScreenModalStackController* _fullScreenModalStackController;
	unsigned _doingClose : 1;
	unsigned _inFullScreen : 1;
	unsigned _changingSelection : 1;
	unsigned _shouldAnimate : 1;

}

@property (assign) char shouldAnimate; 
@property (__weak,readonly) NSWindow * windowBeingDragged;                                          //@synthesize windowBeingDragged=_windowBeingDragged - In the implementation block
@property (readonly) long long numberOfTabs; 
@property (assign) NSWindow * selectedWindow; 
@property (assign) char shouldShowTabBarWithOneItem; 
@property (getter=isTabBarVisible) char tabBarVisible; 
@property (copy) NSString * stateIdentifier;                                                        //@synthesize stateIdentifier=_stateIdentifier - In the implementation block
@property (__weak) _NSFullScreenModalStackController * fullScreenModalStackController;              //@synthesize fullScreenModalStackController=_fullScreenModalStackController - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(void)setTabPlusButtonWasClicked:(char)arg1 ;
+(char)tabPlusButtonWasClicked;
+(void)setupStackControllerForWindow:(id)arg1 attemptToJoinExistingStack:(char)arg2 makeIfNeeded:(char)arg3 ;
+(void)setupStackControllerIfTabBarShownForWindow:(id)arg1 ;
+(void)moveWindow:(id)arg1 toModalStackController:(id)arg2 ;
+(char)canJoinExistingStackForWindow:(id)arg1 ;
+(id)findStackControllerForIdentifier:(id)arg1 stateIdentifier:(id)arg2 ;
+(void)didFinishRestoring;
+(void)disableTabBar;
+(void)enableTabBar;
+(char)mergeAllWindowsWithWindow:(id)arg1 ;
+(id)topStackController;
+(char)_tabBarIsVisibleForIdentifier:(id)arg1 ;
-(char)isOverviewVisible;
-(_NSFullScreenModalStackController *)fullScreenModalStackController;
-(NSWindow *)selectedWindow;
-(id)windows;
-(void)makeActiveStack;
-(void)beginNextSheetAfterWindow:(id)arg1 ;
-(id)nextWindowToSelectAfterClosingWindow:(id)arg1 ;
-(NSWindow *)windowBeingDragged;
-(void)setSelectedWindow:(NSWindow *)arg1 ;
-(CGRect)tabRectForWindow:(id)arg1 ;
-(long long)windowCount;
-(char)isTabBarVisible;
-(void)removeWindow:(id)arg1 ;
-(long long)numberOfTabs;
-(void)syncToolbarsBasedOnWindow:(id)arg1 ;
-(void)moveTabToNewWindow:(id)arg1 ;
-(char)handleMinimizingWindow:(id)arg1 ;
-(char)handleDeminimizingWindow:(id)arg1 ;
-(char)attemptToCloseEntireStack:(id)arg1 ;
-(void)didFinishDeminiaturizeWindow:(id)arg1 ;
-(NSString *)stateIdentifier;
-(long long)tabIndexForWindow:(id)arg1 ;
-(void)setTALTabIndex:(long long)arg1 forWindow:(id)arg2 ;
-(void)addWindow:(id)arg1 ;
-(void)willEnterFullScreenForWindow:(id)arg1 ;
-(void)didEnterFullScreenForWindow:(id)arg1 ;
-(void)didExitFullScreenForWindow:(id)arg1 ;
-(id)_activeWindow;
-(void)selectNextTab;
-(void)selectPreviousTab;
-(void)pinTabForWindow:(id)arg1 ;
-(void)unpinTabForWindow:(id)arg1 ;
-(void)setShouldShowTabBarWithOneItem:(char)arg1 ;
-(void)setTabBarVisible:(char)arg1 ;
-(void)performCloseAllWindowsExcept:(id)arg1 ;
-(void)windowDidGainToolbar:(id)arg1 ;
-(void)moveWindow:(id)arg1 toWindowStackController:(id)arg2 atIndex:(long long)arg3 ;
-(void)insertWindow:(id)arg1 atIndex:(long long)arg2 ;
-(void)_syncInactiveTabWindowSizesToWindow:(id)arg1 ;
-(void)setShouldAnimate:(char)arg1 ;
-(void)setOverviewVisible:(char)arg1 ;
-(void)setFullScreenModalStackController:(_NSFullScreenModalStackController *)arg1 ;
-(void)reattachFullScreenModalTabBar;
-(id)detachedFullScreenModalTabBar;
-(id)_tabPickerThumbnailViews;
-(void)createNewTabInTabBar:(id)arg1 ;
-(id)tabBar:(id)arg1 menuForTabBarViewItem:(id)arg2 event:(id)arg3 ;
-(void)tabBar:(id)arg1 selectTabBarViewItem:(id)arg2 ;
-(void)tabBar:(id)arg1 closeTabBarViewItem:(id)arg2 ;
-(char)tabBarCanDragItems:(id)arg1 ;
-(char)tabBar:(id)arg1 canCloseTabBarViewItem:(id)arg2 ;
-(void)tabBar:(id)arg1 didMoveTabBarViewItem:(id)arg2 fromIndex:(unsigned long long)arg3 toIndex:(unsigned long long)arg4 isChangingPinnedness:(char)arg5 ;
-(void)tabBar:(id)arg1 hideWindowForDraggingItemAtIndex:(unsigned long long)arg2 ;
-(unsigned long long)selectedTabButtonIndex;
-(id)selectedTabBarViewItemAfterClosingCurrentTabInTabBar:(id)arg1 ;
-(void)tabBar:(id)arg1 showWindowForDraggingItemAtIndex:(unsigned long long)arg2 ;
-(id)tabBar:(id)arg1 detachedWindowImageForDraggedTabBarViewItem:(id)arg2 ;
-(id)tabBar:(id)arg1 destinationWindowForDetachedTabBarViewItem:(id)arg2 ;
-(void)tabBar:(id)arg1 didFinishTransitionAnimationForWindow:(id)arg2 ;
-(char)tabBar:(id)arg1 droppedWindowTabShouldMoveToSpace:(long long)arg2 ;
-(char)tabBar:(id)arg1 acceptTabDrop:(id)arg2 index:(unsigned long long)arg3 ;
-(unsigned long long)tabBar:(id)arg1 validateTabDrop:(id)arg2 ;
-(char)tabBar:(id)arg1 acceptDrop:(id)arg2 index:(unsigned long long)arg3 ;
-(unsigned long long)tabBar:(id)arg1 validateDrop:(id)arg2 ;
-(void)setSelectedTabButtonIndex:(unsigned long long)arg1 ;
-(id)_overlayWindow;
-(void)_ensureTabBarBasedOnWindow:(id)arg1 ;
-(void)_ensureWindowHasTabBar:(id)arg1 ;
-(void)_syncToolbarOfWindow:(id)arg1 withPropertiesOfWindow:(id)arg2 ;
-(void)_ensureAccessoryViewControllerExistsForWindow:(id)arg1 ;
-(unsigned long long)_indexOfWrapperForTabBarItem:(id)arg1 ;
-(void)_moveItemAtIndex:(unsigned long long)arg1 toIndex:(unsigned long long)arg2 ;
-(void)_addSyncedTabBarItemForWindow:(id)arg1 atIndex:(long long)arg2 ;
-(char)_tabPickerIsVisible;
-(void)_syncWindowFrameStateForSwapWithNewWindow:(id)arg1 priorWindow:(id)arg2 ;
-(void)_noteTabbingChangedForWindow:(id)arg1 ;
-(id)_selectedWindow;
-(void)_doTabSelectionAndWindowOrderingAtIndex:(unsigned long long)arg1 makeKeyAndOrderFront:(char)arg2 justOrderFront:(char)arg3 ;
-(void)_removeSyncedTabBarItem:(id)arg1 ;
-(void)_removeTabBarAccessoryViewControllerForWindow:(id)arg1 ;
-(id)initWithTabbingIdentifier:(id)arg1 ;
-(void)setStateIdentifier:(NSString *)arg1 ;
-(id)_shouldShowTabBarKey;
-(void)_makeTabBarForWindow:(id)arg1 visible:(char)arg2 ;
-(void)_setTabBarIsVisible:(char)arg1 force:(char)arg2 ;
-(char)shouldShowTabBarWithOneItem;
-(char)_overlayWindowIsVisible;
-(char)_shouldAnimateTabInsertion;
-(char)_tabBarShouldBeVisible;
-(void)_removeSyncedItemAtIndex:(unsigned long long)arg1 ;
-(unsigned long long)_nextSelectedIndexAfterRemovingIndex:(unsigned long long)arg1 ;
-(void)_selectNextTabWhenRemovingTabAtIndex:(unsigned long long)arg1 ;
-(void)_doDockWindowMinimizeOfSelectedWindow;
-(void)_yankWindowFromIndex:(long long)arg1 ;
-(void)_doTabSelectionAndWindowOrderingAtIndex:(unsigned long long)arg1 ;
-(void)_enterWindow:(id)arg1 intoFullScreenWithWindow:(id)arg2 ;
-(void)_exitWindowFromFullScreenIfNeeded:(id)arg1 basedOnWindow:(id)arg2 ;
-(void)_doWindowOrderingToSwapPriorWindow:(id)arg1 withNewWindow:(id)arg2 ;
-(void)_closeAllWindowsExceptItemAtIndex:(long long)arg1 ;
-(void)_closeTabPickerAnimated:(char)arg1 ;
-(void)_closeWindowAtIndex:(long long)arg1 ;
-(id)_currentTabMenuTargetedForWindow:(id)arg1 ;
-(char)_insertDraggedItemAtIndex:(unsigned long long)arg1 fromController:(id)arg2 sourceIndex:(unsigned long long)arg3 ;
-(id)_windowYankedOutIntoNewControllerFromIndex:(long long)arg1 ;
-(char)_animateTabMergeOfWindowsFromTargetWindow:(id)arg1 ;
-(char)_regularTabMergeOfWindowsFromTargetWindow:(id)arg1 ;
-(void)_enumerateTabMergableWindows:(/*^block*/id)arg1 targetWindow:(id)arg2 ;
-(long long)_onePastLastPinnedTab;
-(id)_windowForTabViewItem:(id)arg1 ;
-(void)_checkIfWindowWasClosedByTabPicker:(id)arg1 ;
-(void)_selectWindowWithoutOrderingFront:(id)arg1 ;
-(void)_doWindowOrderingForOverlaySwapWithNewWindow:(id)arg1 priorWindow:(id)arg2 ;
-(void)_sendTabOverviewIsVisibleDidChange;
-(void)_syncInactiveTabWindowSizesForSnapshot;
-(void)_ensureTabPickerViewController;
-(void)_openTabPickerAnimated:(char)arg1 ;
-(void)tabPicker:(id)arg1 didSelectTabItemWhenClosing:(id)arg2 ;
-(void)tabPicker:(id)arg1 closeTabBarItem:(id)arg2 ;
-(id)tabPicker:(id)arg1 nextTabPickerItemAfterClosingItem:(id)arg2 ;
-(id)tabPickerCreatingNewTabItem:(id)arg1 ;
-(id)tabPickerCurrentlySelectedTabItem:(id)arg1 ;
-(id)tabPickerItemsForTabPicker:(id)arg1 ;
-(id)tabBarSnapshotForTabPicker:(id)arg1 ;
-(id)tabPicker:(id)arg1 thumbnailViewForTabItem:(id)arg2 ;
-(id)tabPicker:(id)arg1 imageForTabItem:(id)arg2 ;
-(CGRect)tabPickerFrameForWindowContentAnimation:(id)arg1 ;
-(char)tabPicker:(id)arg1 highlightStateForTabItem:(id)arg2 ;
-(void)tabPickerWillOpen:(id)arg1 ;
-(void)tabPickerDidOpen:(id)arg1 ;
-(void)tabPickerWillClose:(id)arg1 ;
-(void)tabPickerDidClose:(id)arg1 ;
-(id)_windows;
-(id)_syncedWrapperForTabBarItem:(id)arg1 ;
-(id)_wrapperForTabBarItem:(id)arg1 ;
-(char)isTabBarEnabled;
-(void)setTabBarEnabled:(char)arg1 ;
-(id)_tabBar;
-(id)plusTab;
-(id)windowSnapshotForTabPickerAnimation:(id)arg1 ;
-(void)_addTabPickerView:(id)arg1 toWindow:(id)arg2 ;
-(char)shouldAnimate;
@end

