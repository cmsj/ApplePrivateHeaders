/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:00 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <AppKit/AppKit-Structs.h>
#import <libobjc.A.dylib/NSPersistentUIFlushHandler.h>

@protocol OS_dispatch_queue;
@class NSPersistentUIEncodingQueue, NSObject, NSMutableArray, NSMapTable, NSMutableDictionary, NSPersistentUIRestorer, NSPersistentUICrashHandler, NSPersistentUIFileManager, NSPersistentUIFlushScheduler, NSPersistentUIWindowSnapshotter, NSString;

@interface NSPersistentUIManager : NSObject <NSPersistentUIFlushHandler> {

	NSPersistentUIEncodingQueue* _encodingQueue;
	NSObject*<OS_dispatch_queue> workQueue;
	NSMutableArray* sortedWindowInfos;
	NSMapTable* objectToPendingKeyPaths;
	NSMutableArray* pendingRecords;
	NSMutableDictionary* additionalBuckets;
	os_unfair_lock_s _lock;
	NSPersistentUIRestorer* _stateRestorer;
	NSPersistentUICrashHandler* _crashHandler;
	char _isClosedToChanges;
	NSPersistentUIFileManager* _fileManager;
	NSPersistentUIFlushScheduler* _flushScheduler;
	NSPersistentUIWindowSnapshotter* _windowSnapshotter;
	char treatEverythingAsDirty;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)sharedManager;
+(id)unarchiver:(id)arg1 didDecodeObject:(id)arg2 ;
+(void)_permitWindowOrderingUntilStateRestoration;
+(void)_resuppressWindowOrderingNowThatStateRestorationIsOccurring;
+(char)_suppressCGWindowOrdering;
+(/*^block*/id)_copyCGWindowOrderingReplayer;
+(id)_debugUnrestoredWindows;
+(void)_didDecodeObject:(id)arg1 uid:(unsigned)arg2 ;
+(void)nibDecoder:(id)arg1 didDecodeObject:(id)arg2 ;
+(id)copyPersistentCarbonWindowDictionariesForBundleID:(id)arg1 ;
+(id)copyDebugDumpStateDirectory:(id)arg1 ;
+(id)_NSPersistentUIAcquireTalagentWindowsOnConnections:(unsigned)arg1 :(id)arg2 ;
+(void)_NSPersistentUIDestroyTalagentWindows:(unsigned)arg1 :(id)arg2 ;
-(void)dealloc;
-(id)initWithBundleID:(id)arg1 ;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(void)flushPersistentStateAndClose;
-(void)clearCrashCountFileIfNecessary;
-(void)discardAllPersistentStateAndClose;
-(void)fullyDirtyAndReopenPersistentState;
-(char)hasPersistentStateToRestore;
-(char)promptToIgnorePersistentState;
-(char)restoreAllPersistentStateWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)ignoreAnyPreexistingPersistentState;
-(void)changeWindow:(unsigned)arg1 toStatus:(int)arg2 withConditionalGeneration:(unsigned)arg3 ;
-(char)hasFinishedRestoringWindows;
-(void)flushForScheduler:(id)arg1 ;
-(char)performingWindowOrdering;
-(void)delayCGWindowOrderingIfNecessary;
-(id)persistentStateDirectoryURL;
-(id)stateDirectoryAtLaunch;
-(void)invalidateStateDirectoryAtLaunch;
-(void)refreshEncryptionKey:(char)arg1 ;
-(void)_setPublicProperties:(id)arg1 forWindowID:(unsigned)arg2 ;
-(id)windowInfoForWindowID:(unsigned)arg1 createIfNecessary:(char)arg2 ;
-(void)writePublicPlistWithOpenWindowIDs:(id)arg1 ;
-(void)flushAllChanges;
-(id)_flushScheduler;
-(void)_cancelFlushTimer;
-(void)acquireDirtyState;
-(void)_finishPendingChangesImmediatelyWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)flushPersistentStateAndClose:(char)arg1 waitingUntilDone:(char)arg2 ;
-(unsigned)modifyCrashBlameCounterBy:(int)arg1 ;
-(long long)crashBlameCounter;
-(void)addPendingKeyPath:(id)arg1 forObject:(id)arg2 ;
-(void)performDockCommands:(id)arg1 withOldWindowIDToNewWindowID:(id)arg2 ;
-(void)resumeNormalWindowOrderingAndDrawing;
-(char)shouldUseOneWindowHeuristic;
-(void)addObjectInBackgroundForKeyedState:(id)arg1 underKey:(id)arg2 forIdentifier:(id)arg3 inWindow:(unsigned)arg4 ;
-(void)disableRestorableStateWriting;
-(void)enableRestorableStateWriting;
-(void)setPublicProperties:(id)arg1 forWindowID:(unsigned)arg2 ;
-(void)changePersistentKeyPathObservationForPaths:(id)arg1 inObject:(id)arg2 to:(char)arg3 ;
-(char)shouldRestoreStateOnLaunch;
-(unsigned)createPersistentWindow;
-(void)setObject:(id)arg1 forKey:(id)arg2 forPersistentWindowID:(unsigned)arg3 ;
-(void)deletePersistentWindow:(unsigned)arg1 ;
-(id)copyPersistentCarbonWindowDictionariesAtTimeOfAppLaunch;
-(void)beginAcquiringExternallyCreatedWindows;
-(id)copyAcquiredExternallyCreatedWindows;
-(void)destroyExternallyCreatedWindows:(id)arg1 ;
@end

