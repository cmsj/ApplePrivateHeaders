/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:50:56 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <AppKit/AppKit-Structs.h>
#import <libobjc.A.dylib/NSCopying.h>
#import <libobjc.A.dylib/NSSecureCoding.h>

@interface NSBezierPath : NSObject <NSCopying, NSSecureCoding> {

	long long _elementCount;
	long long _elementMax;
	PATHSEGMENT* _head;
	long long _lastSubpathIndex;
	void* _extraSegments;
	double _lineWidth;
	CGRect _controlPointBounds;
	double _miterLimit;
	double _flatness;
	double* _dashedLinePattern;
	unsigned long long _dashedLineCount;
	double _dashedLinePhase;
	void* _path;
	long long _extraSegmentCount;
	long long _extraSegmentMax;
	aSettings _bpFlags;

}

@property (assign) double lineWidth; 
@property (assign) unsigned long long lineCapStyle; 
@property (assign) unsigned long long lineJoinStyle; 
@property (assign) unsigned long long windingRule; 
@property (assign) double miterLimit; 
@property (assign) double flatness; 
@property (copy,readonly) NSBezierPath * bezierPathByFlatteningPath; 
@property (copy,readonly) NSBezierPath * bezierPathByReversingPath; 
@property (getter=isEmpty,readonly) char empty; 
@property (readonly) CGPoint currentPoint; 
@property (readonly) CGRect controlPointBounds; 
@property (readonly) CGRect bounds; 
@property (readonly) long long elementCount; 
+(void)initialize;
+(char)supportsSecureCoding;
+(void)setLineWidth:(double)arg1 ;
+(double)lineWidth;
+(id)bezierPath;
+(unsigned long long)windingRule;
+(void)setWindingRule:(unsigned long long)arg1 ;
+(unsigned long long)lineCapStyle;
+(void)setLineCapStyle:(unsigned long long)arg1 ;
+(unsigned long long)lineJoinStyle;
+(void)setLineJoinStyle:(unsigned long long)arg1 ;
+(double)miterLimit;
+(void)setMiterLimit:(double)arg1 ;
+(double)flatness;
+(void)setFlatness:(double)arg1 ;
+(id)bezierPathWithRect:(CGRect)arg1 ;
+(id)bezierPathWithOvalInRect:(CGRect)arg1 ;
+(id)bezierPathWithRoundedRect:(CGRect)arg1 xRadius:(double)arg2 yRadius:(double)arg3 ;
+(void)fillRect:(CGRect)arg1 ;
+(void)strokeRect:(CGRect)arg1 ;
+(void)clipRect:(CGRect)arg1 ;
+(void)strokeLineFromPoint:(CGPoint)arg1 toPoint:(CGPoint)arg2 ;
+(void)drawPackedGlyphs:(const char*)arg1 atPoint:(CGPoint)arg2 ;
+(void)setDefaultMiterLimit:(double)arg1 ;
+(double)defaultMiterLimit;
+(void)setDefaultFlatness:(double)arg1 ;
+(double)defaultFlatness;
+(void)setDefaultWindingRule:(unsigned long long)arg1 ;
+(unsigned long long)defaultWindingRule;
+(void)setDefaultLineCapStyle:(unsigned long long)arg1 ;
+(unsigned long long)defaultLineCapStyle;
+(void)setDefaultLineJoinStyle:(unsigned long long)arg1 ;
+(unsigned long long)defaultLineJoinStyle;
+(void)setDefaultLineWidth:(double)arg1 ;
+(double)defaultLineWidth;
-(id)copyWithZone:(NSZone*)arg1 ;
-(void)dealloc;
-(id)description;
-(id)init;
-(char)isEmpty;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(void)setLineWidth:(double)arg1 ;
-(double)lineWidth;
-(CGRect)bounds;
-(long long)elementCount;
-(unsigned long long)elementAtIndex:(long long)arg1 associatedPoints:(CGPoint*)arg2 ;
-(void)transformUsingAffineTransform:(id)arg1 ;
-(void)appendBezierPathWithRect:(CGRect)arg1 ;
-(void)appendBezierPathWithOvalInRect:(CGRect)arg1 ;
-(void)appendBezierPathWithRoundedRect:(CGRect)arg1 xRadius:(double)arg2 yRadius:(double)arg3 ;
-(void)appendBezierPath:(id)arg1 ;
-(unsigned long long)windingRule;
-(void)setWindingRule:(unsigned long long)arg1 ;
-(unsigned long long)lineCapStyle;
-(void)setLineCapStyle:(unsigned long long)arg1 ;
-(unsigned long long)lineJoinStyle;
-(void)setLineJoinStyle:(unsigned long long)arg1 ;
-(double)miterLimit;
-(void)setMiterLimit:(double)arg1 ;
-(double)flatness;
-(void)setFlatness:(double)arg1 ;
-(void)setLineDash:(const double*)arg1 count:(long long)arg2 phase:(double)arg3 ;
-(void)_deviceMoveToPoint:(CGPoint)arg1 ;
-(void)_deviceLineToPoint:(CGPoint)arg1 ;
-(void)_deviceCurveToPoint:(CGPoint)arg1 controlPoint1:(CGPoint)arg2 controlPoint2:(CGPoint)arg3 ;
-(void)_deviceClosePath;
-(CGPoint)currentPoint;
-(void)_doPath;
-(void)addClip;
-(void)lineToPoint:(CGPoint)arg1 ;
-(void)moveToPoint:(CGPoint)arg1 ;
-(void)closePath;
-(void)subdivideBezierWithFlatness:(double)arg1 startPoint:(CGPoint)arg2 controlPoint1:(CGPoint)arg3 controlPoint2:(CGPoint)arg4 endPoint:(CGPoint)arg5 ;
-(void)flattenIntoPath:(id)arg1 ;
-(void)curveToPoint:(CGPoint)arg1 controlPoint1:(CGPoint)arg2 controlPoint2:(CGPoint)arg3 ;
-(CGRect)controlPointBounds;
-(void)_appendToPath:(id)arg1 ;
-(void)appendBezierPathWithArcWithCenter:(CGPoint)arg1 radius:(double)arg2 startAngle:(double)arg3 endAngle:(double)arg4 ;
-(void)_appendArcSegmentWithCenter:(CGPoint)arg1 radius:(double)arg2 angle1:(double)arg3 angle2:(double)arg4 ;
-(void)appendBezierPathWithArcWithCenter:(CGPoint)arg1 radius:(double)arg2 startAngle:(double)arg3 endAngle:(double)arg4 clockwise:(char)arg5 ;
-(void)appendBezierPathWithNativeGlyphs:(const unsigned short*)arg1 advances:(CGSize*)arg2 count:(unsigned long long)arg3 inFont:(id)arg4 ;
-(char)_initializeSegmentsFromDecodedBytes:(const void*)arg1 length:(unsigned long long)arg2 requiresSecureCoding:(char)arg3 error:(id*)arg4 ;
-(char)_initializeDashPatternFromDecodedBytes:(const void*)arg1 length:(unsigned long long)arg2 requiresSecureCoding:(char)arg3 error:(id*)arg4 ;
-(void)removeAllPoints;
-(void)relativeMoveToPoint:(CGPoint)arg1 ;
-(void)relativeLineToPoint:(CGPoint)arg1 ;
-(void)relativeCurveToPoint:(CGPoint)arg1 controlPoint1:(CGPoint)arg2 controlPoint2:(CGPoint)arg3 ;
-(void)getLineDash:(double*)arg1 count:(long long*)arg2 phase:(double*)arg3 ;
-(CGPathRef)CGPath;
-(void)stroke;
-(void)fill;
-(void)setClip;
-(NSBezierPath *)bezierPathByFlatteningPath;
-(id)_copyFlattenedPath;
-(NSBezierPath *)bezierPathByReversingPath;
-(unsigned long long)elementAtIndex:(long long)arg1 ;
-(void)setAssociatedPoints:(CGPoint*)arg1 atIndex:(long long)arg2 ;
-(void)appendBezierPathWithPoints:(CGPoint*)arg1 count:(long long)arg2 ;
-(void)appendBezierPathWithArcFromPoint:(CGPoint)arg1 toPoint:(CGPoint)arg2 radius:(double)arg3 ;
-(void)appendBezierPathWithCGGlyph:(unsigned short)arg1 inFont:(id)arg2 ;
-(void)appendBezierPathWithCGGlyphs:(const unsigned short*)arg1 count:(long long)arg2 inFont:(id)arg3 ;
-(char)containsPoint:(CGPoint)arg1 ;
-(void)_addPathSegment:(long long)arg1 point:(CGPoint)arg2 ;
-(char)cachesBezierPath;
-(void)setCachesBezierPath:(char)arg1 ;
-(void)appendBezierPathWithGlyph:(unsigned)arg1 inFont:(id)arg2 ;
-(void)appendBezierPathWithGlyphs:(unsigned*)arg1 count:(long long)arg2 inFont:(id)arg3 ;
-(void)appendBezierPathWithPackedGlyphs:(const char*)arg1 ;
-(void)_appendBezierPathWithRoundRect:(CGRect)arg1 cornerRadius:(double)arg2 ;
-(void)_appendBezierPathWithTopRoundRect:(CGRect)arg1 cornerRadius:(double)arg2 ;
-(void)_appendBezierPathWithBottomRoundRect:(CGRect)arg1 cornerRadius:(double)arg2 ;
@end

