/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:50:57 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <AppKit/AppKit-Structs.h>
#import <libobjc.A.dylib/NSCopying.h>
#import <libobjc.A.dylib/NSCoding.h>

@protocol NSViewRoot;
@class NSWindow, NSGraphicsContext, NSSet, NSTouchDevice, NSDictionary, NSString, NSTrackingArea;

@interface NSEvent : NSObject <NSCopying, NSCoding> {

	CGPoint _location;
	unsigned _modifierFlags;
	NSWindow* _window;
	long long _windowNumber;
	SCD_Union_NS56* _data;
	void* _eventRef;
	unsigned long long _type;
	double _timestamp;
	id<NSViewRoot> _viewRoot;
	NSGraphicsContext* _context;
	CGEventRef _cgEventRef;
	NSSet* _touches;
	long long _touchContextId;
	NSTouchDevice* _touchDevice;
	NSDictionary* _previousCoalescedTouches;

}

@property (readonly) unsigned long long type; 
@property (readonly) unsigned long long modifierFlags; 
@property (readonly) double timestamp; 
@property (__weak,readonly) NSWindow * window; 
@property (readonly) long long windowNumber; 
@property (readonly) NSGraphicsContext * context; 
@property (readonly) long long clickCount; 
@property (readonly) long long buttonNumber; 
@property (readonly) long long eventNumber; 
@property (readonly) float pressure; 
@property (readonly) CGPoint locationInWindow; 
@property (readonly) double deltaX; 
@property (readonly) double deltaY; 
@property (readonly) double deltaZ; 
@property (readonly) char hasPreciseScrollingDeltas; 
@property (readonly) double scrollingDeltaX; 
@property (readonly) double scrollingDeltaY; 
@property (readonly) unsigned long long momentumPhase; 
@property (getter=isDirectionInvertedFromDevice,readonly) char directionInvertedFromDevice; 
@property (copy,readonly) NSString * characters; 
@property (copy,readonly) NSString * charactersIgnoringModifiers; 
@property (getter=isARepeat,readonly) char ARepeat; 
@property (readonly) unsigned short keyCode; 
@property (readonly) long long trackingNumber; 
@property (readonly) void* userData; 
@property (readonly) NSTrackingArea * trackingArea; 
@property (readonly) short subtype; 
@property (readonly) long long data1; 
@property (readonly) long long data2; 
@property (readonly) const void* eventRef; 
@property (readonly) CGEventRef CGEvent; 
@property (readonly) double magnification; 
@property (readonly) unsigned long long deviceID; 
@property (readonly) float rotation; 
@property (readonly) long long absoluteX; 
@property (readonly) long long absoluteY; 
@property (readonly) long long absoluteZ; 
@property (readonly) unsigned long long buttonMask; 
@property (readonly) CGPoint tilt; 
@property (readonly) float tangentialPressure; 
@property (readonly) id vendorDefined; 
@property (readonly) unsigned long long vendorID; 
@property (readonly) unsigned long long tabletID; 
@property (readonly) unsigned long long pointingDeviceID; 
@property (readonly) unsigned long long systemTabletID; 
@property (readonly) unsigned long long vendorPointingDeviceType; 
@property (readonly) unsigned long long pointingDeviceSerialNumber; 
@property (readonly) unsigned long long uniqueID; 
@property (readonly) unsigned long long capabilityMask; 
@property (readonly) unsigned long long pointingDeviceType; 
@property (getter=isEnteringProximity,readonly) char enteringProximity; 
@property (readonly) unsigned long long phase; 
@property (readonly) long long stage; 
@property (readonly) double stageTransition; 
@property (readonly) unsigned long long associatedEventsMask; 
@property (readonly) long long pressureBehavior; 
+(void)initialize;
+(id)mouseEventWithType:(unsigned long long)arg1 location:(CGPoint)arg2 modifierFlags:(unsigned long long)arg3 timestamp:(double)arg4 windowNumber:(long long)arg5 context:(id)arg6 eventNumber:(long long)arg7 clickCount:(long long)arg8 pressure:(float)arg9 ;
+(void)removeMonitor:(id)arg1 ;
+(id)addLocalMonitorForEventsMatchingMask:(unsigned long long)arg1 placement:(long long)arg2 handler:(/*^block*/id)arg3 ;
+(CGPoint)mouseLocation;
+(id)_eventWithEventRefInternal:(const void*)arg1 ;
+(id)_eventWithTouches:(id)arg1 ;
+(id)otherEventWithType:(unsigned long long)arg1 location:(CGPoint)arg2 modifierFlags:(unsigned long long)arg3 timestamp:(double)arg4 windowNumber:(long long)arg5 context:(id)arg6 subtype:(short)arg7 data1:(long long)arg8 data2:(long long)arg9 ;
+(unsigned long long)modifierFlags;
+(id)addLocalMonitorForEventsMatchingMask:(unsigned long long)arg1 handler:(/*^block*/id)arg2 ;
+(void)_registerForConcurrentEventProcessing;
+(id)_eventsCancellingTouchesForWindow:(id)arg1 ;
+(void)_clearCancelledTouches;
+(void)_clearDFRTouches;
+(void)_stopPeriodicEventsForSource:(id)arg1 ;
+(unsigned long long)pressedMouseButtons;
+(id)keyEventWithType:(unsigned long long)arg1 location:(CGPoint)arg2 modifierFlags:(unsigned long long)arg3 timestamp:(double)arg4 windowNumber:(long long)arg5 context:(id)arg6 characters:(id)arg7 charactersIgnoringModifiers:(id)arg8 isARepeat:(char)arg9 keyCode:(unsigned short)arg10 ;
+(double)doubleClickInterval;
+(double)keyRepeatDelay;
+(double)keyRepeatInterval;
+(id)enterExitEventWithType:(unsigned long long)arg1 location:(CGPoint)arg2 modifierFlags:(unsigned long long)arg3 timestamp:(double)arg4 windowNumber:(long long)arg5 context:(id)arg6 eventNumber:(long long)arg7 trackingNumber:(long long)arg8 userData:(void*)arg9 ;
+(void)_discardCursorEventsForWindowNumber:(long long)arg1 criteria:(long long)arg2 ;
+(char)_isConcurrentEventProcessingOn;
+(id)eventWithCGEvent:(CGEventRef)arg1 ;
+(void)_resetDefaults;
+(void)_resetDeviceCapabilityCaches;
+(void)_fluidSwipeTrackingBehaviorChanged;
+(void)_setFakeForceForXCTestEnabled:(char)arg1 ;
+(void)_discardEventsMatchingMask:(unsigned long long)arg1 beforeTime:(unsigned long long)arg2 inQueue:(unsigned long long)arg3 ;
+(void)_resetDiscardMask;
+(void)_discardEventsWithMask:(unsigned long long)arg1 eventTime:(unsigned long long)arg2 ;
+(void)_discardEventsFromSubthread:(id)arg1 ;
+(void)_discardEventsForTrackingArea:(id)arg1 window:(id)arg2 ;
+(id)_touchesFromSet:(id)arg1 matchingPhase:(unsigned long long)arg2 inView:(id)arg3 includeResting:(char)arg4 ;
+(id)_quickLookEventWithLocation:(CGPoint)arg1 modifierFlags:(unsigned long long)arg2 timestamp:(double)arg3 windowNumber:(long long)arg4 context:(id)arg5 eventNumber:(long long)arg6 ;
+(void)_setSuppressesDirectTouchRouting:(char)arg1 ;
+(id)addGlobalMonitorForEventsMatchingMask:(unsigned long long)arg1 handler:(/*^block*/id)arg2 ;
+(id)_sendEventToObservers:(id)arg1 ;
+(id)_eventWithCGSEvent:(void*)arg1 ;
+(id)eventWithEventRef:(const void*)arg1 ;
+(void)setMouseCoalescingEnabled:(char)arg1 ;
+(char)isMouseCoalescingEnabled;
+(double)standardMagnificationThreshold;
+(float)standardRotationThreshold;
+(void)_discardEventsForTrackingArea:(id)arg1 ;
+(void)_discardTrackingAndCursorEventsIfNeeded;
+(id)_delayedEventMatchingMask:(unsigned long long)arg1 pull:(char)arg2 ;
+(char)isSwipeTrackingFromScrollEventsEnabled;
+(void)startPeriodicEventsAfterDelay:(double)arg1 withPeriod:(double)arg2 ;
+(void)stopPeriodicEvents;
+(id)_navigationEventWithCommand:(long long)arg1 data:(long long)arg2 windowNumber:(long long)arg3 ;
+(char)_isConcurrentEventProcessingSupported:(id*)arg1 ;
+(void)_startConcurrentEventProcessing;
+(void)_updateMainThreadEventFilter;
+(id)_addConcurrentEventMonitorMatchingMask:(unsigned long long)arg1 identifier:(id)arg2 handler:(/*^block*/id)arg3 ;
+(void)_removeConcurrentEventMonitor:(id)arg1 ;
+(id)_nextConcurrentEventMatchingMask:(unsigned long long)arg1 ;
+(char)_mouseButtonIsDown;
-(id)copy;
-(id)copyWithZone:(NSZone*)arg1 ;
-(void)dealloc;
-(char)isEqual:(id)arg1 ;
-(id)description;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(unsigned long long)type;
-(short)subtype;
-(void*)userData;
-(NSWindow *)window;
-(float)rotation;
-(unsigned long long)uniqueID;
-(double)progress;
-(NSString *)characters;
-(NSGraphicsContext *)context;
-(double)timestamp;
-(NSString *)charactersIgnoringModifiers;
-(unsigned long long)deviceID;
-(long long)windowNumber;
-(double)deltaX;
-(double)deltaY;
-(id)_eventRelativeToWindow:(id)arg1 ;
-(id)_initWithCGEvent:(CGEventRef)arg1 eventRef:(void*)arg2 ;
-(float)pressure;
-(long long)stage;
-(CGPoint)locationInWindow;
-(unsigned long long)phase;
-(unsigned long long)modifierFlags;
-(id)touchesMatchingPhase:(unsigned long long)arg1 inView:(id)arg2 ;
-(id)allTouches;
-(CGEventRef)CGEvent;
-(char)_matchesKeyEquivalent:(id)arg1 modifierMask:(unsigned long long)arg2 ;
-(long long)data1;
-(long long)data2;
-(double)scrollingDeltaX;
-(long long)clickCount;
-(unsigned long long)momentumPhase;
-(double)scrollingDeltaY;
-(long long)gestureAxis;
-(long long)_gestureAxis;
-(unsigned long long)associatedEventsMask;
-(id)_viewRoot;
-(unsigned short)keyCode;
-(void*)_eventRef;
-(long long)eventNumber;
-(NSTrackingArea *)trackingArea;
-(double)magnification;
-(id)_eventRelativeToViewRoot:(id)arg1 ;
-(id)_touchesMatchingIdentities:(id)arg1 ;
-(unsigned long long)buttonMask;
-(long long)trackingNumber;
-(char)hasPreciseScrollingDeltas;
-(CGSize)velocity;
-(const void*)_eventRefInternal;
-(void)_fixCommandAlphaShifts;
-(void)_setSynthesizedKeyEvent:(char)arg1 ;
-(void)_setTouches:(id)arg1 ;
-(id)_initWithEventRefInternal:(const void*)arg1 ;
-(id)_touchesMatchingPhase:(unsigned long long)arg1 inView:(id)arg2 includeResting:(char)arg3 ;
-(long long)pressureBehavior;
-(double)_eventRecordDelta:(long long)arg1 ;
-(id)_charactersApplyingModifiers:(unsigned long long)arg1 carbonModifiers:(unsigned)arg2 ;
-(unsigned long long)_cgsEventTime;
-(void)_postAtStart:(char)arg1 ;
-(void)_postFromSubthread:(char)arg1 ;
-(long long)buttonNumber;
-(id)vendorDefined;
-(long long)absoluteX;
-(long long)absoluteY;
-(long long)absoluteZ;
-(CGPoint)tilt;
-(float)tangentialPressure;
-(unsigned long long)vendorID;
-(unsigned long long)tabletID;
-(unsigned long long)pointingDeviceID;
-(unsigned long long)systemTabletID;
-(unsigned long long)vendorPointingDeviceType;
-(unsigned long long)pointingDeviceSerialNumber;
-(unsigned long long)capabilityMask;
-(unsigned long long)pointingDeviceType;
-(char)isEnteringProximity;
-(double)deltaZ;
-(long long)_scrollCount;
-(double)gestureAmount;
-(char)_isSynthesizedKeyEvent;
-(char)isARepeat;
-(char)_continuousScroll;
-(void)_trackSwipeEventWithOptions:(unsigned long long)arg1 dampenAmountThresholdMin:(double)arg2 max:(double)arg3 trackingDistance:(double)arg4 axis:(long long)arg5 velocityFilterClass:(Class)arg6 usingHandler:(/*^block*/id)arg7 ;
-(id)_eventWithModifiers:(unsigned long long)arg1 ;
-(const void*)eventRef;
-(void)_initMTTouchesFromIOHidEvent:(IOHIDEventRef)arg1 ;
-(id)_initCoalescingTouchEvents:(id)arg1 ;
-(void)_initDigitizerTouchesFromIOHidEvent:(IOHIDEventRef)arg1 window:(id)arg2 contextID:(long long)arg3 ;
-(SCD_Struct_NS59)_cgsEventRecord;
-(char)_hasAcceleratedScrollingDeltas;
-(double)_unacceleratedScrollingDeltaX;
-(double)_unacceleratedScrollingDeltaY;
-(void)_resetScrollAcceleration;
-(id)charactersByApplyingModifiers:(unsigned long long)arg1 ;
-(id)_unmodifiedCharacters;
-(id)_commandModifiedCharacters;
-(char)_isDeadkey;
-(void)_setEventRef:(void*)arg1 ;
-(void)_postDelayed;
-(char)isGesture;
-(long long)_scrollPhase;
-(id)_eventWithRetargetedLocation:(CGPoint)arg1 ;
-(long long)_nxeventTime;
-(double)deviceDeltaX;
-(double)deviceDeltaY;
-(double)deviceDeltaZ;
-(char)isDirectionInvertedFromDevice;
-(double)stageTransition;
-(void)trackSwipeEventWithOptions:(unsigned long long)arg1 dampenAmountThresholdMin:(double)arg2 max:(double)arg3 usingHandler:(/*^block*/id)arg4 ;
-(CGSize)_velocity;
-(id)_currentEventWithLocationInWindow:(CGPoint)arg1 modifiers:(unsigned long long)arg2 ;
-(id)_eventCancellingTouches;
-(id)_eventCancellingTouchIdentities:(id)arg1 ;
-(id)_eventRemovingTouchIdentities:(id)arg1 ;
-(id)_eventWithOnlyTouchIdentities:(id)arg1 ;
-(id)touchesForView:(id)arg1 ;
-(id)coalescedTouchesForTouch:(id)arg1 ;
-(char)_isTouchesEnded;
-(long long)command;
-(char)_isVerticalWheelEvent;
-(char)_isMiddleButtonEvent;
-(char)_isEscapeKeyEvent;
-(char)_safari_isKeyEvent:(unsigned short)arg1 ;
-(char)_isWheelEvent;
-(char)_isSpaceKeyEvent;
-(char)_hasOptionKeyModifier;
@end

