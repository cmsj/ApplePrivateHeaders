/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:53:00 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/QuickLook/iWork.qlgenerator/Contents/Frameworks/TSTables.framework/Versions/A/TSTables
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSTables/TSTables-Structs.h>
#import <TSTables/TSTCompatibilityVersionProviding.h>

@interface TSTTableTileRowInfo : NSObject <TSTCompatibilityVersionProviding> {

	TSTTableTileRowBuffer* _currentData;
	TSTTableTileRowBuffer* _preBNCData;
	unsigned short _maxColumnIndexPrivate;
	char _maxColumnIndexIsValidPrivate;
	unsigned char _storageVersion;
	os_unfair_lock_s _unfairLock;
	unsigned _tileRowIndex;
	unsigned long long _cellCount;

}

@property (assign,nonatomic) unsigned tileRowIndex;                                           //@synthesize tileRowIndex=_tileRowIndex - In the implementation block
@property (nonatomic,readonly) char usesWideOffsets; 
@property (nonatomic,readonly) unsigned long long cellCount;                                  //@synthesize cellCount=_cellCount - In the implementation block
@property (nonatomic,readonly) unsigned short maxColumnIndex; 
@property (nonatomic,readonly) char bncStorageBufferExists; 
@property (nonatomic,readonly) unsigned long long archivingCompatibilityVersion; 
+(id)rowInfoFromArchive:(const TileRowInfo*)arg1 ;
+(id)rowInfoWithTileRowIndex:(unsigned)arg1 wideOffsets:(char)arg2 ;
-(void)dealloc;
-(id)description;
-(void)validate;
-(void)_removeCellAtIndex:(unsigned short)arg1 ;
-(unsigned long long)cellCount;
-(unsigned)tileRowIndex;
-(void)setTileRowIndex:(unsigned)arg1 ;
-(void)encodeToArchive:(TileRowInfo*)arg1 archiver:(id)arg2 ;
-(id)initFromArchive:(const TileRowInfo*)arg1 ;
-(unsigned long long)archivingCompatibilityVersion;
-(unsigned long long)removeColumnsAtIndex:(unsigned short)arg1 count:(unsigned)arg2 ;
-(unsigned short)maxColumnIndex;
-(char)bncStorageBufferExists;
-(char)usesWideOffsets;
-(void)convertToWideOffsets;
-(TSTCellStorage*)cellStorageRefAtIndex:(unsigned short)arg1 ;
-(TSTCellStorage*)preBNCStorageRefAtIndex:(unsigned short)arg1 ;
-(long long)setCell:(id)arg1 atIndex:(unsigned short)arg2 formatKeys:(SCD_Struct_TS37*)arg3 ;
-(void)insertColumnsAtIndex:(unsigned short)arg1 count:(unsigned)arg2 ;
-(void)moveColumnsFromIndex:(unsigned short)arg1 toIndex:(unsigned short)arg2 count:(unsigned)arg3 ;
-(id)initWithTileRowIndex:(unsigned)arg1 wideOffsets:(char)arg2 ;
-(unsigned short)_archivedColumnCount;
-(void)_replaceCellAtIndex:(unsigned short)arg1 withCell:(id)arg2 formatKeys:(SCD_Struct_TS37*)arg3 ;
-(void)_insertCell:(id)arg1 atIndex:(unsigned short)arg2 formatKeys:(SCD_Struct_TS37*)arg3 ;
-(void)enumerateStoragesInColumnRange:(NSRange)arg1 getPreBNC:(char)arg2 withBlock:(/*^block*/id)arg3 ;
-(char)validateWithResult:(id*)arg1 ;
-(vector<TSTCell *, std::__1::allocator<TSTCell *>>*)accumulateCurrentCellsConcurrentlyAtColumns:(vector<TSUModelColumnIndex, std::__1::allocator<TSUModelColumnIndex>>*)arg1 usingCellCreationBlock:(/*^block*/id)arg2 ;
-(void)lockForConcurrentAccess;
-(void)unlockForConcurrentAccess;
-(unsigned short)cellIndexAtOrAfterIndex:(unsigned short)arg1 ;
-(unsigned short)cellIndexAtOrBeforeIndex:(unsigned short)arg1 ;
-(void)enumerateStoragesInColumnRange:(NSRange)arg1 withBlock:(/*^block*/id)arg2 ;
-(char)searchCellStorageRefAtColumnIndex:(unsigned short)arg1 searchMask:(unsigned long long)arg2 ;
@end

