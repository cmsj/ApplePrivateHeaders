/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:53:00 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/QuickLook/iWork.qlgenerator/Contents/Frameworks/TSTables.framework/Versions/A/TSTables
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSTables/TSTables-Structs.h>
#import <TSPersistence/TSPObject.h>
#import <TSTables/TSCEReferenceResolving.h>
#import <TSTables/TSCEColumnRowUIDMapping.h>
#import <TSTables/TSCECalculationEngineRegistration.h>
#import <TSTables/TSCEFormulaOwning.h>
#import <TSTables/TSDMixing.h>
#import <TSTables/TSTCompatibilityVersionProviding.h>
#import <TSTables/TSTCustomStrokeProviding.h>
#import <TSTables/TSTStyleProviding.h>
#import <TSTables/TSTTableStrokeProviding.h>
#import <TSTables/TSTTableTileCreating.h>

@class TSTTableStyle, TSTCellStyle, TSWPParagraphStyle, TSWPShapeStyle, TSDStroke, TSTHiddenStateFormulaOwner, TSTStrokeSidecar, TSCECalculationEngine, TSTTableDataStore, NSString, TSTTableStylePreset, TSTTableInfo, TSTCellDictionary, TSTConcurrentMutableCellUIDSet, TSTConditionalStyleFormulaOwner, TSTMergeOwner, TSTCategoryOwner, TSTHiddenStatesOwner, TSCEHauntedOwner, TSTTableSortOrder, TSTSortRuleReferenceTracker, TSTColumnRowUIDMap, TSTCellWillChangeDistributor, TSWPStorage, NSMapTable, TSTStructuredTextImportRecord, TSTTableFilterSet, TSTPencilAnnotationOwner, TSCEOwnerUidMapper, NSUUID, NSArray;

@interface TSTTableModel : TSPObject <TSCEReferenceResolving, TSCEColumnRowUIDMapping, TSCECalculationEngineRegistration, TSCEFormulaOwning, TSDMixing, TSTCompatibilityVersionProviding, TSTCustomStrokeProviding, TSTStyleProviding, TSTTableStrokeProviding, TSTTableTileCreating> {

	TSTHiddenStateFormulaOwner* _hiddenStateFormulaOwnerForRows;
	TSTHiddenStateFormulaOwner* _hiddenStateFormulaOwnerForColumns;
	TSTStrokeSidecar* _strokeSidecar;
	TSCECellRefSet* _clearErrorCells;
	os_unfair_lock_s _clearErrorLock;
	char _wasCut;
	char _headerRowsFrozen;
	char _headerColumnsFrozen;
	char _tableNameEnabled;
	char _tableNameBorderEnabled;
	char _repeatingHeaderRowsEnabled;
	char _repeatingHeaderColumnsEnabled;
	char _styleApplyClearsAll;
	char _presetNeedsStrongOwnership;
	char _wasUnarchivedFromAProvidedTable;
	TSUModelColumnIndex _numberOfHeaderColumns;
	TSUModelRowIndex _numberOfHeaderRows;
	TSUModelRowIndex _numberOfFooterRows;
	unsigned long long _lastArchivedAppVersion;
	unsigned long long _archivingCompatibilityVersion;
	TSCECalculationEngine* _calcEngine;
	TSTTableDataStore* _dataStore;
	double _defaultRowHeight;
	double _defaultColumnWidth;
	NSString* _tableName;
	double _tableNameHeight;
	unsigned long long _presetIDForUpgrade;
	TSTTableStylePreset* _tableStylePreset;
	TSTTableStyle* _tableStyle;
	TSTTableInfo* _tableInfo;
	TSTCellStyle* _bodyCellStyle;
	TSTCellStyle* _headerRowCellStyle;
	TSTCellStyle* _headerColumnCellStyle;
	TSTCellStyle* _footerRowCellStyle;
	TSTCellStyle* _categoryLevel1CellStyle;
	TSTCellStyle* _categoryLevel2CellStyle;
	TSTCellStyle* _categoryLevel3CellStyle;
	TSTCellStyle* _categoryLevel4CellStyle;
	TSTCellStyle* _categoryLevel5CellStyle;
	TSTCellStyle* _labelLevel1CellStyle;
	TSTCellStyle* _labelLevel2CellStyle;
	TSTCellStyle* _labelLevel3CellStyle;
	TSTCellStyle* _labelLevel4CellStyle;
	TSTCellStyle* _labelLevel5CellStyle;
	TSWPParagraphStyle* _bodyTextStyle;
	TSWPParagraphStyle* _headerRowTextStyle;
	TSWPParagraphStyle* _headerColumnTextStyle;
	TSWPParagraphStyle* _footerRowTextStyle;
	TSWPParagraphStyle* _categoryLevel1TextStyle;
	TSWPParagraphStyle* _categoryLevel2TextStyle;
	TSWPParagraphStyle* _categoryLevel3TextStyle;
	TSWPParagraphStyle* _categoryLevel4TextStyle;
	TSWPParagraphStyle* _categoryLevel5TextStyle;
	TSWPParagraphStyle* _labelLevel1TextStyle;
	TSWPParagraphStyle* _labelLevel2TextStyle;
	TSWPParagraphStyle* _labelLevel3TextStyle;
	TSWPParagraphStyle* _labelLevel4TextStyle;
	TSWPParagraphStyle* _labelLevel5TextStyle;
	TSWPParagraphStyle* _tableNameStyle;
	TSWPShapeStyle* _tableNameShapeStyle;
	TSTCellDictionary* _cellsPendingWrite;
	TSTConcurrentMutableCellUIDSet* _cellsToInvalidateAfterRecalc;
	TSTConcurrentMutableCellUIDSet* _cellsToInvalidateNonoverflowingAfterRecalc;
	TSTConditionalStyleFormulaOwner* _conditionalStyleFormulaOwner;
	TSTMergeOwner* _mergeOwner;
	TSTCategoryOwner* _categoryOwner;
	TSTHiddenStatesOwner* _hiddenStatesOwner;
	TSCEHauntedOwner* _hauntedOwner;
	TSTTableSortOrder* _sortOrder;
	TSTSortRuleReferenceTracker* _sortRuleReferenceTracker;
	TSTColumnRowUIDMap* _columnRowUIDMap;
	TSTCellWillChangeDistributor* _cellWillChangeDistributor;
	TSWPStorage* _deprecatedProvider;
	NSMapTable* _commentHostingMap;
	TSTStructuredTextImportRecord* _textImportRecord;
	TSTTableFilterSet* _upgradeFilterSet;
	TSTPencilAnnotationOwner* _pencilAnnotationOwner;
	TSKUIDStruct _tableUID;
	TSKUIDStruct _fromTableUID;
	TSKUIDStruct _fromGroupByUID;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,retain) TSTColumnRowUIDMap * columnRowUIDMap;                                                       //@synthesize columnRowUIDMap=_columnRowUIDMap - In the implementation block
@property (nonatomic,retain) TSTTableDataStore * dataStore;                                                              //@synthesize dataStore=_dataStore - In the implementation block
@property (assign,nonatomic) unsigned long long presetIDForUpgrade;                                                      //@synthesize presetIDForUpgrade=_presetIDForUpgrade - In the implementation block
@property (nonatomic,retain) TSTConditionalStyleFormulaOwner * conditionalStyleFormulaOwner;                             //@synthesize conditionalStyleFormulaOwner=_conditionalStyleFormulaOwner - In the implementation block
@property (nonatomic,retain) TSWPStorage * deprecatedProvider;                                                           //@synthesize deprecatedProvider=_deprecatedProvider - In the implementation block
@property (nonatomic,readonly) NSMapTable * commentHostingMap;                                                           //@synthesize commentHostingMap=_commentHostingMap - In the implementation block
@property (nonatomic,readonly) unsigned long long lastArchivedAppVersion;                                                //@synthesize lastArchivedAppVersion=_lastArchivedAppVersion - In the implementation block
@property (assign,nonatomic) TSTTableInfo * tableInfo;                                                                   //@synthesize tableInfo=_tableInfo - In the implementation block
@property (nonatomic,readonly) TSKUIDStruct upgradeHiddenFormulaOwnerForColumnsUID; 
@property (nonatomic,readonly) TSKUIDStruct upgradeHiddenFormulaOwnerForRowsUID; 
@property (nonatomic,readonly) char upgradeNeedsToUpdateFilterSetForImport; 
@property (nonatomic,retain) TSTTableFilterSet * upgradeFilterSet;                                                       //@synthesize upgradeFilterSet=_upgradeFilterSet - In the implementation block
@property (assign,nonatomic) TSCECalculationEngine * calcEngine;                                                         //@synthesize calcEngine=_calcEngine - In the implementation block
@property (assign,nonatomic) char wasCut;                                                                                //@synthesize wasCut=_wasCut - In the implementation block
@property (assign,nonatomic) TSKUIDStruct tableUID;                                                                      //@synthesize tableUID=_tableUID - In the implementation block
@property (assign,nonatomic) TSKUIDStruct fromTableUID;                                                                  //@synthesize fromTableUID=_fromTableUID - In the implementation block
@property (assign,nonatomic) TSKUIDStruct fromGroupByUID;                                                                //@synthesize fromGroupByUID=_fromGroupByUID - In the implementation block
@property (nonatomic,readonly) TSCEOwnerUidMapper * ownerUIDMapper; 
@property (nonatomic,readonly) TSCEOwnerUidMapper * identityOwnerUIDMapper; 
@property (nonatomic,readonly) NSUUID * nsTableUID; 
@property (nonatomic,retain) NSString * tableName;                                                                       //@synthesize tableName=_tableName - In the implementation block
@property (assign,nonatomic) char tableNameEnabled;                                                                      //@synthesize tableNameEnabled=_tableNameEnabled - In the implementation block
@property (assign,nonatomic) double tableNameHeight;                                                                     //@synthesize tableNameHeight=_tableNameHeight - In the implementation block
@property (assign,nonatomic) char tableNameBorderEnabled;                                                                //@synthesize tableNameBorderEnabled=_tableNameBorderEnabled - In the implementation block
@property (nonatomic,readonly) TSDStroke * tableNameBorderStroke; 
@property (assign,nonatomic) char repeatingHeaderRowsEnabled;                                                            //@synthesize repeatingHeaderRowsEnabled=_repeatingHeaderRowsEnabled - In the implementation block
@property (assign,nonatomic) char repeatingHeaderColumnsEnabled;                                                         //@synthesize repeatingHeaderColumnsEnabled=_repeatingHeaderColumnsEnabled - In the implementation block
@property (nonatomic,readonly) int tableWritingDirection; 
@property (nonatomic,readonly) char hasTableBorder; 
@property (nonatomic,readonly) char hasAlternatingRows; 
@property (nonatomic,readonly) TSUModelRowIndex numberOfRows; 
@property (nonatomic,readonly) TSUModelColumnIndex numberOfColumns; 
@property (assign,nonatomic) TSUModelRowIndex numberOfHeaderRows;                                                        //@synthesize numberOfHeaderRows=_numberOfHeaderRows - In the implementation block
@property (assign,nonatomic) TSUModelRowIndex numberOfFooterRows;                                                        //@synthesize numberOfFooterRows=_numberOfFooterRows - In the implementation block
@property (assign,nonatomic) TSUModelColumnIndex numberOfHeaderColumns;                                                  //@synthesize numberOfHeaderColumns=_numberOfHeaderColumns - In the implementation block
@property (assign,nonatomic) char headerRowsFrozen;                                                                      //@synthesize headerRowsFrozen=_headerRowsFrozen - In the implementation block
@property (assign,nonatomic) char headerColumnsFrozen;                                                                   //@synthesize headerColumnsFrozen=_headerColumnsFrozen - In the implementation block
@property (assign,nonatomic) char styleApplyClearsAll;                                                                   //@synthesize styleApplyClearsAll=_styleApplyClearsAll - In the implementation block
@property (nonatomic,retain) TSTTableStylePreset * tableStylePreset;                                                     //@synthesize tableStylePreset=_tableStylePreset - In the implementation block
@property (nonatomic,readonly) TSTSortRuleReferenceTracker * sortRuleReferenceTracker;                                   //@synthesize sortRuleReferenceTracker=_sortRuleReferenceTracker - In the implementation block
@property (nonatomic,readonly) TSTMergeOwner * mergeOwner;                                                               //@synthesize mergeOwner=_mergeOwner - In the implementation block
@property (nonatomic,readonly) TSTCategoryOwner * categoryOwner;                                                         //@synthesize categoryOwner=_categoryOwner - In the implementation block
@property (nonatomic,readonly) TSTHiddenStatesOwner * hiddenStatesOwner;                                                 //@synthesize hiddenStatesOwner=_hiddenStatesOwner - In the implementation block
@property (nonatomic,readonly) TSTPencilAnnotationOwner * pencilAnnotationOwner;                                         //@synthesize pencilAnnotationOwner=_pencilAnnotationOwner - In the implementation block
@property (nonatomic,readonly) TSCEHauntedOwner * hauntedOwner;                                                          //@synthesize hauntedOwner=_hauntedOwner - In the implementation block
@property (nonatomic,readonly) TSKUIDStruct conditionalStyleFormulaOwnerUID; 
@property (nonatomic,readonly) TSTCellDictionary * cellsPendingWrite;                                                    //@synthesize cellsPendingWrite=_cellsPendingWrite - In the implementation block
@property (nonatomic,readonly) TSTConcurrentMutableCellUIDSet * cellsToInvalidateAfterRecalc;                            //@synthesize cellsToInvalidateAfterRecalc=_cellsToInvalidateAfterRecalc - In the implementation block
@property (nonatomic,readonly) TSTConcurrentMutableCellUIDSet * cellsToInvalidateNonoverflowingAfterRecalc;              //@synthesize cellsToInvalidateNonoverflowingAfterRecalc=_cellsToInvalidateNonoverflowingAfterRecalc - In the implementation block
@property (nonatomic,copy) TSTTableSortOrder * sortOrder;                                                                //@synthesize sortOrder=_sortOrder - In the implementation block
@property (nonatomic,retain) TSTStrokeSidecar * strokeSidecar; 
@property (nonatomic,readonly) TSTCellWillChangeDistributor * cellWillChangeDistributor;                                 //@synthesize cellWillChangeDistributor=_cellWillChangeDistributor - In the implementation block
@property (assign,nonatomic) char presetNeedsStrongOwnership;                                                            //@synthesize presetNeedsStrongOwnership=_presetNeedsStrongOwnership - In the implementation block
@property (assign,nonatomic) char wasUnarchivedFromAProvidedTable;                                                       //@synthesize wasUnarchivedFromAProvidedTable=_wasUnarchivedFromAProvidedTable - In the implementation block
@property (nonatomic,retain) TSTStructuredTextImportRecord * textImportRecord;                                           //@synthesize textImportRecord=_textImportRecord - In the implementation block
@property (nonatomic,readonly) unsigned long long tableSizeClass; 
@property (assign,nonatomic) char shouldUseWideRows; 
@property (nonatomic,readonly) char hasMigratableStylesInCells; 
@property (assign,nonatomic) double defaultRowHeight;                                                                    //@synthesize defaultRowHeight=_defaultRowHeight - In the implementation block
@property (assign,nonatomic) double defaultColumnWidth;                                                                  //@synthesize defaultColumnWidth=_defaultColumnWidth - In the implementation block
@property (nonatomic,readonly) NSArray * rowHeights; 
@property (nonatomic,readonly) NSArray * columnWidths; 
@property (nonatomic,readonly) unsigned long long archivingCompatibilityVersion;                                         //@synthesize archivingCompatibilityVersion=_archivingCompatibilityVersion - In the implementation block
@property (nonatomic,retain) TSTTableStyle * tableStyle;                                                                 //@synthesize tableStyle=_tableStyle - In the implementation block
@property (nonatomic,retain) TSTCellStyle * bodyCellStyle;                                                               //@synthesize bodyCellStyle=_bodyCellStyle - In the implementation block
@property (nonatomic,retain) TSTCellStyle * headerRowCellStyle;                                                          //@synthesize headerRowCellStyle=_headerRowCellStyle - In the implementation block
@property (nonatomic,retain) TSTCellStyle * headerColumnCellStyle;                                                       //@synthesize headerColumnCellStyle=_headerColumnCellStyle - In the implementation block
@property (nonatomic,retain) TSTCellStyle * footerRowCellStyle;                                                          //@synthesize footerRowCellStyle=_footerRowCellStyle - In the implementation block
@property (nonatomic,retain) TSTCellStyle * categoryLevel1CellStyle;                                                     //@synthesize categoryLevel1CellStyle=_categoryLevel1CellStyle - In the implementation block
@property (nonatomic,retain) TSTCellStyle * categoryLevel2CellStyle;                                                     //@synthesize categoryLevel2CellStyle=_categoryLevel2CellStyle - In the implementation block
@property (nonatomic,retain) TSTCellStyle * categoryLevel3CellStyle;                                                     //@synthesize categoryLevel3CellStyle=_categoryLevel3CellStyle - In the implementation block
@property (nonatomic,retain) TSTCellStyle * categoryLevel4CellStyle;                                                     //@synthesize categoryLevel4CellStyle=_categoryLevel4CellStyle - In the implementation block
@property (nonatomic,retain) TSTCellStyle * categoryLevel5CellStyle;                                                     //@synthesize categoryLevel5CellStyle=_categoryLevel5CellStyle - In the implementation block
@property (nonatomic,retain) TSTCellStyle * labelLevel1CellStyle;                                                        //@synthesize labelLevel1CellStyle=_labelLevel1CellStyle - In the implementation block
@property (nonatomic,retain) TSTCellStyle * labelLevel2CellStyle;                                                        //@synthesize labelLevel2CellStyle=_labelLevel2CellStyle - In the implementation block
@property (nonatomic,retain) TSTCellStyle * labelLevel3CellStyle;                                                        //@synthesize labelLevel3CellStyle=_labelLevel3CellStyle - In the implementation block
@property (nonatomic,retain) TSTCellStyle * labelLevel4CellStyle;                                                        //@synthesize labelLevel4CellStyle=_labelLevel4CellStyle - In the implementation block
@property (nonatomic,retain) TSTCellStyle * labelLevel5CellStyle;                                                        //@synthesize labelLevel5CellStyle=_labelLevel5CellStyle - In the implementation block
@property (nonatomic,retain) TSWPParagraphStyle * bodyTextStyle;                                                         //@synthesize bodyTextStyle=_bodyTextStyle - In the implementation block
@property (nonatomic,retain) TSWPParagraphStyle * headerRowTextStyle;                                                    //@synthesize headerRowTextStyle=_headerRowTextStyle - In the implementation block
@property (nonatomic,retain) TSWPParagraphStyle * headerColumnTextStyle;                                                 //@synthesize headerColumnTextStyle=_headerColumnTextStyle - In the implementation block
@property (nonatomic,retain) TSWPParagraphStyle * footerRowTextStyle;                                                    //@synthesize footerRowTextStyle=_footerRowTextStyle - In the implementation block
@property (nonatomic,retain) TSWPParagraphStyle * categoryLevel1TextStyle;                                               //@synthesize categoryLevel1TextStyle=_categoryLevel1TextStyle - In the implementation block
@property (nonatomic,retain) TSWPParagraphStyle * categoryLevel2TextStyle;                                               //@synthesize categoryLevel2TextStyle=_categoryLevel2TextStyle - In the implementation block
@property (nonatomic,retain) TSWPParagraphStyle * categoryLevel3TextStyle;                                               //@synthesize categoryLevel3TextStyle=_categoryLevel3TextStyle - In the implementation block
@property (nonatomic,retain) TSWPParagraphStyle * categoryLevel4TextStyle;                                               //@synthesize categoryLevel4TextStyle=_categoryLevel4TextStyle - In the implementation block
@property (nonatomic,retain) TSWPParagraphStyle * categoryLevel5TextStyle;                                               //@synthesize categoryLevel5TextStyle=_categoryLevel5TextStyle - In the implementation block
@property (nonatomic,retain) TSWPParagraphStyle * labelLevel1TextStyle;                                                  //@synthesize labelLevel1TextStyle=_labelLevel1TextStyle - In the implementation block
@property (nonatomic,retain) TSWPParagraphStyle * labelLevel2TextStyle;                                                  //@synthesize labelLevel2TextStyle=_labelLevel2TextStyle - In the implementation block
@property (nonatomic,retain) TSWPParagraphStyle * labelLevel3TextStyle;                                                  //@synthesize labelLevel3TextStyle=_labelLevel3TextStyle - In the implementation block
@property (nonatomic,retain) TSWPParagraphStyle * labelLevel4TextStyle;                                                  //@synthesize labelLevel4TextStyle=_labelLevel4TextStyle - In the implementation block
@property (nonatomic,retain) TSWPParagraphStyle * labelLevel5TextStyle;                                                  //@synthesize labelLevel5TextStyle=_labelLevel5TextStyle - In the implementation block
@property (nonatomic,retain) TSWPParagraphStyle * tableNameStyle;                                                        //@synthesize tableNameStyle=_tableNameStyle - In the implementation block
@property (nonatomic,retain) TSWPShapeStyle * tableNameShapeStyle;                                                       //@synthesize tableNameShapeStyle=_tableNameShapeStyle - In the implementation block
@property (nonatomic,readonly) TSDStroke * defaultHorizontalBorderStroke; 
@property (nonatomic,readonly) TSDStroke * defaultHorizontalBorderStrokeEvenIfNotVisible; 
@property (nonatomic,readonly) TSDStroke * defaultVerticalBorderStroke; 
@property (nonatomic,readonly) TSDStroke * bodyColumnStroke; 
@property (nonatomic,readonly) TSDStroke * bodyRowStroke; 
@property (nonatomic,readonly) TSDStroke * bodyRowStrokeEvenIfNotVisible; 
@property (nonatomic,readonly) TSDStroke * headerColumnBorderStroke; 
@property (nonatomic,readonly) TSDStroke * headerColumnBodyColumnStroke; 
@property (nonatomic,readonly) TSDStroke * headerColumnBodyRowStroke; 
@property (nonatomic,readonly) TSDStroke * headerColumnSeparatorStroke; 
@property (nonatomic,readonly) TSDStroke * headerRowBorderStroke; 
@property (nonatomic,readonly) TSDStroke * headerRowBodyColumnStroke; 
@property (nonatomic,readonly) TSDStroke * headerRowBodyRowStroke; 
@property (nonatomic,readonly) TSDStroke * headerRowSeparatorStroke; 
@property (nonatomic,readonly) TSDStroke * footerRowBorderStroke; 
@property (nonatomic,readonly) TSDStroke * footerRowBodyColumnStroke; 
@property (nonatomic,readonly) TSDStroke * footerRowBodyRowStroke; 
@property (nonatomic,readonly) TSDStroke * footerRowSeparatorStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel1TopStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel2TopStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel3TopStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel4TopStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel5TopStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel1LabelSeparatorStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel2LabelSeparatorStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel3LabelSeparatorStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel4LabelSeparatorStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel5LabelSeparatorStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel1BottomStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel2BottomStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel3BottomStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel4BottomStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel5BottomStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel1InteriorStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel2InteriorStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel3InteriorStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel4InteriorStroke; 
@property (nonatomic,readonly) TSDStroke * categoryLevel5InteriorStroke; 
+(char)needsObjectUUID;
+(id)tableModelForTableUID:(const TSKUIDStruct*)arg1 withCalcEngine:(id)arg2 ;
-(void)dealloc;
-(NSString *)description;
-(TSUModelCellRect)range;
-(TSUModelColumnIndex)numberOfColumns;
-(void)validate;
-(TSUModelRowIndex)numberOfRows;
-(void)setWidth:(double)arg1 ofColumn:(TSUModelColumnIndex)arg2 ;
-(void)setDefaultColumnWidth:(double)arg1 ;
-(double)defaultColumnWidth;
-(void)setSortOrder:(TSTTableSortOrder *)arg1 ;
-(TSTTableSortOrder *)sortOrder;
-(void)clearErrors;
-(TSTTableDataStore *)dataStore;
-(void)setTableName:(NSString *)arg1 ;
-(NSString *)tableName;
-(void)setDataStore:(TSTTableDataStore *)arg1 ;
-(double)defaultRowHeight;
-(void)setDefaultRowHeight:(double)arg1 ;
-(id)sheetName;
-(TSTTableStyle *)tableStyle;
-(TSWPParagraphStyle *)bodyTextStyle;
-(void)setBodyTextStyle:(TSWPParagraphStyle *)arg1 ;
-(char)hasTableBorder;
-(void)willClose;
-(NSArray *)columnWidths;
-(void)setColumnWidths:(NSArray *)arg1 ;
-(long long)evaluationMode;
-(TSUModelCellRect)bodyRange;
-(void)adoptStylesheet:(id)arg1 withMapper:(id)arg2 ;
-(id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2 ;
-(id)drawableInfo;
-(TSTTableInfo *)tableInfo;
-(NSArray *)rowHeights;
-(TSUModelRowIndex)numberOfHeaderRows;
-(TSUModelColumnIndex)numberOfHeaderColumns;
-(TSDStroke *)tableNameBorderStroke;
-(TSUModelCellRect)bodyRowRange;
-(void)setTableStyle:(TSTTableStyle *)arg1 ;
-(void)setTableNameStyle:(TSWPParagraphStyle *)arg1 ;
-(void)setTableNameShapeStyle:(TSWPShapeStyle *)arg1 ;
-(TSTCellStyle *)bodyCellStyle;
-(TSTCellStyle *)headerColumnCellStyle;
-(TSTCellStyle *)footerRowCellStyle;
-(TSTCellStyle *)headerRowCellStyle;
-(TSWPParagraphStyle *)headerColumnTextStyle;
-(TSWPParagraphStyle *)footerRowTextStyle;
-(TSWPParagraphStyle *)headerRowTextStyle;
-(TSWPParagraphStyle *)tableNameStyle;
-(TSWPShapeStyle *)tableNameShapeStyle;
-(void)setBodyCellStyle:(TSTCellStyle *)arg1 ;
-(void)setHeaderColumnCellStyle:(TSTCellStyle *)arg1 ;
-(void)setFooterRowCellStyle:(TSTCellStyle *)arg1 ;
-(void)setHeaderRowCellStyle:(TSTCellStyle *)arg1 ;
-(void)setHeaderColumnTextStyle:(TSWPParagraphStyle *)arg1 ;
-(void)setFooterRowTextStyle:(TSWPParagraphStyle *)arg1 ;
-(void)setHeaderRowTextStyle:(TSWPParagraphStyle *)arg1 ;
-(id)unnamedTableString;
-(char)repeatingHeaderRowsEnabled;
-(char)repeatingHeaderColumnsEnabled;
-(char)headerRowsFrozen;
-(char)headerColumnsFrozen;
-(TSUModelRowIndex)numberOfFooterRows;
-(char)tableNameEnabled;
-(char)tableNameBorderEnabled;
-(void)setTableNameBorderEnabled:(char)arg1 ;
-(double)tableNameHeight;
-(void)setTableNameHeight:(double)arg1 ;
-(char)styleApplyClearsAll;
-(void)setStyleApplyClearsAll:(char)arg1 ;
-(void)setStorageParentToInfo:(id)arg1 ;
-(TSUModelCellRect)headerRowRange;
-(TSUModelCellRect)footerRowRange;
-(TSUModelCellRect)headerColumnRange;
-(TSUModelCellRect)bodyColumnRange;
-(void)mapTableStylesToStylesheet:(id)arg1 withMapper:(id)arg2 ;
-(void)setTableNameEnabled:(char)arg1 ;
-(void)setRepeatingHeaderRowsEnabled:(char)arg1 ;
-(void)setRepeatingHeaderColumnsEnabled:(char)arg1 ;
-(void)setNumberOfHeaderRows:(TSUModelRowIndex)arg1 ;
-(void)setNumberOfFooterRows:(TSUModelRowIndex)arg1 ;
-(void)setNumberOfHeaderColumns:(TSUModelColumnIndex)arg1 ;
-(void)setHeaderRowsFrozen:(char)arg1 ;
-(void)setHeaderColumnsFrozen:(char)arg1 ;
-(char)hasAlternatingRows;
-(TSUModelCellRect)cellRangeForTableArea:(unsigned long long)arg1 ;
-(void)setHeight:(double)arg1 ofRow:(TSUModelRowIndex)arg2 ;
-(void)setRowHeights:(NSArray *)arg1 ;
-(TSDStroke *)bodyColumnStroke;
-(TSDStroke *)bodyRowStroke;
-(TSDStroke *)headerColumnBorderStroke;
-(TSDStroke *)headerColumnBodyColumnStroke;
-(TSDStroke *)headerColumnBodyRowStroke;
-(TSDStroke *)headerColumnSeparatorStroke;
-(TSDStroke *)headerRowBorderStroke;
-(TSDStroke *)headerRowBodyColumnStroke;
-(TSDStroke *)headerRowBodyRowStroke;
-(TSDStroke *)headerRowSeparatorStroke;
-(TSDStroke *)footerRowBorderStroke;
-(TSDStroke *)footerRowBodyColumnStroke;
-(TSDStroke *)footerRowBodyRowStroke;
-(TSDStroke *)footerRowSeparatorStroke;
-(void)upgradeFromPreUFF;
-(char)wasUnarchivedFromAProvidedTable;
-(void)setWasUnarchivedFromAProvidedTable:(char)arg1 ;
-(TSTCellDictionary *)cellsPendingWrite;
-(void)setTableInfo:(TSTTableInfo *)arg1 ;
-(void)setStyleNetwork:(id)arg1 ;
-(void)setStylesheetForUpgradeToSingleStylesheet:(id)arg1 ;
-(void)loadFromUnarchiver:(id)arg1 ;
-(void)saveToArchiver:(id)arg1 ;
-(id)allRichTextStorages;
-(long long)mixingTypeWithObject:(id)arg1 context:(id)arg2 ;
-(int)tableWritingDirection;
-(void)registerWithCalcEngineForDocumentLoad:(id)arg1 ;
-(void)unregisterFromCalcEngine:(id)arg1 ;
-(id)formulaOwner;
-(TSKUIDStruct)formulaOwnerUID;
-(id)objectToArchiveInDependencyTracker;
-(char)registerLast;
-(TSKUIDStruct)tableUID;
-(TSKUIDStruct)ownerUID;
-(NSUUID *)nsTableUID;
-(TSCECalculationEngine *)calcEngine;
-(unsigned short)ownerKind;
-(id)linkedResolver;
-(void)writeResultsForCalcEngine:(id)arg1 ;
-(void)invalidateForCalcEngine:(id)arg1 ;
-(TSCERecalculationState)evaluateFormulaAt:(TSUCellCoord)arg1 withCalcEngine:(id)arg2 recalcOptions:(TSCERecalculationState)arg3 ;
-(TSCEOwnerUidMapper *)ownerUIDMapper;
-(char)hasCellID:(TSUCellCoord)arg1 ;
-(void)setTableUID:(TSKUIDStruct)arg1 ;
-(unsigned long long)numberOfComments;
-(TSKUIDStruct)columnUIDForColumnIndex:(unsigned short)arg1 ;
-(TSKUIDStruct)rowUIDForRowIndex:(unsigned)arg1 ;
-(void)documentLocaleDidChange;
-(void)upgradeFormatsForCustomFormatListU2_0;
-(unsigned long long)tableSizeClass;
-(id)newCell;
-(TSKUIDStruct)fromTableUID;
-(TSKUIDStructVectorTemplate<TSKUIDStruct>*)UIDsForRange:(NSRange)arg1 isRows:(char)arg2 ;
-(unsigned)rowIndexForRowUID:(TSKUIDStruct)arg1 ;
-(TSKUIDStruct)groupByUID;
-(id)mutableIndexesForUIDs:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg1 isRows:(char)arg2 ;
-(TSKUIDStructVectorTemplate<TSKUIDStruct>*)UIDsForIndexes:(id)arg1 isRows:(char)arg2 ;
-(id)mutableColumnIndexesForUIDs:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg1 ;
-(id)mutableRowIndexesForUIDs:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg1 ;
-(TSKUIDStruct)UIDForIndex:(unsigned)arg1 isRows:(char)arg2 ;
-(TSKUIDStruct)resolverUID;
-(int)registerWithCalcEngine:(id)arg1 ;
-(void)setCalcEngine:(TSCECalculationEngine *)arg1 ;
-(unsigned short)columnIndexForColumnUID:(TSKUIDStruct)arg1 ;
-(TSKUIDStructVectorTemplate<TSKUIDStruct>*)columnUIDsForColumnIndexes:(id)arg1 ;
-(TSKUIDStructVectorTemplate<TSKUIDStruct>*)rowUIDsForRowIndexes:(id)arg1 ;
-(id)UIDSetForIndexes:(id)arg1 isRows:(char)arg2 ;
-(TSCERangeCoordinate)tableRangeCoordinate;
-(TSKUIDStruct)conditionalStyleFormulaOwnerUID;
-(TSKUIDStructVectorTemplate<TSKUIDStruct>*)rowUIDsForRowRange:(NSRange)arg1 ;
-(TSKUIDStructVectorTemplate<TSKUIDStruct>*)columnUIDsForColumnRange:(NSRange)arg1 ;
-(TSTCategoryOwner *)categoryOwner;
-(TSTColumnRowUIDMap *)columnRowUIDMap;
-(TSTTableStylePreset *)tableStylePreset;
-(void)setTableStylePreset:(TSTTableStylePreset *)arg1 ;
-(void)p_clearDefaultStyles;
-(TSTCellStyle *)categoryLevel1CellStyle;
-(void)setCategoryLevel1CellStyle:(TSTCellStyle *)arg1 ;
-(TSTCellStyle *)categoryLevel2CellStyle;
-(void)setCategoryLevel2CellStyle:(TSTCellStyle *)arg1 ;
-(TSTCellStyle *)categoryLevel3CellStyle;
-(void)setCategoryLevel3CellStyle:(TSTCellStyle *)arg1 ;
-(TSTCellStyle *)categoryLevel4CellStyle;
-(void)setCategoryLevel4CellStyle:(TSTCellStyle *)arg1 ;
-(TSTCellStyle *)categoryLevel5CellStyle;
-(void)setCategoryLevel5CellStyle:(TSTCellStyle *)arg1 ;
-(TSTCellStyle *)labelLevel1CellStyle;
-(void)setLabelLevel1CellStyle:(TSTCellStyle *)arg1 ;
-(TSTCellStyle *)labelLevel2CellStyle;
-(void)setLabelLevel2CellStyle:(TSTCellStyle *)arg1 ;
-(TSTCellStyle *)labelLevel3CellStyle;
-(void)setLabelLevel3CellStyle:(TSTCellStyle *)arg1 ;
-(TSTCellStyle *)labelLevel4CellStyle;
-(void)setLabelLevel4CellStyle:(TSTCellStyle *)arg1 ;
-(TSTCellStyle *)labelLevel5CellStyle;
-(void)setLabelLevel5CellStyle:(TSTCellStyle *)arg1 ;
-(TSWPParagraphStyle *)categoryLevel1TextStyle;
-(void)setCategoryLevel1TextStyle:(TSWPParagraphStyle *)arg1 ;
-(TSWPParagraphStyle *)categoryLevel2TextStyle;
-(void)setCategoryLevel2TextStyle:(TSWPParagraphStyle *)arg1 ;
-(TSWPParagraphStyle *)categoryLevel3TextStyle;
-(void)setCategoryLevel3TextStyle:(TSWPParagraphStyle *)arg1 ;
-(TSWPParagraphStyle *)categoryLevel4TextStyle;
-(void)setCategoryLevel4TextStyle:(TSWPParagraphStyle *)arg1 ;
-(TSWPParagraphStyle *)categoryLevel5TextStyle;
-(void)setCategoryLevel5TextStyle:(TSWPParagraphStyle *)arg1 ;
-(TSWPParagraphStyle *)labelLevel1TextStyle;
-(void)setLabelLevel1TextStyle:(TSWPParagraphStyle *)arg1 ;
-(TSWPParagraphStyle *)labelLevel2TextStyle;
-(void)setLabelLevel2TextStyle:(TSWPParagraphStyle *)arg1 ;
-(TSWPParagraphStyle *)labelLevel3TextStyle;
-(void)setLabelLevel3TextStyle:(TSWPParagraphStyle *)arg1 ;
-(TSWPParagraphStyle *)labelLevel4TextStyle;
-(void)setLabelLevel4TextStyle:(TSWPParagraphStyle *)arg1 ;
-(TSWPParagraphStyle *)labelLevel5TextStyle;
-(void)setLabelLevel5TextStyle:(TSWPParagraphStyle *)arg1 ;
-(void)validateTableStylesInSameStylesheetExpectingDocSS:(char)arg1 ;
-(void)setShouldUseWideRows:(char)arg1 ;
-(id)initWithContext:(id)arg1 tableUID:(TSKUIDStruct)arg2 columnRowUIDMap:(id)arg3 styles:(id)arg4 stylePreset:(id)arg5 tableInfo:(id)arg6 ;
-(id)initWithContext:(id)arg1 fromSourceModel:(id)arg2 region:(id)arg3 tableInfo:(id)arg4 waitForCalcEngine:(char)arg5 formulaCoordSpace:(long long)arg6 ;
-(id)initWithContext:(id)arg1 rowUids:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg2 columnUids:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg3 styles:(id)arg4 stylePreset:(id)arg5 tableInfo:(id)arg6 ;
-(TSKUIDStruct)fromGroupByUID;
-(double)heightOfRowAtIndex:(TSUModelRowIndex)arg1 isDefault:(out char*)arg2 ;
-(void)setHeight:(double)arg1 ofRowAtIndex:(TSUModelRowIndex)arg2 ;
-(double)widthOfColumnAtIndex:(TSUModelColumnIndex)arg1 isDefault:(out char*)arg2 ;
-(void)setWidth:(double)arg1 ofColumnAtIndex:(TSUModelColumnIndex)arg2 ;
-(TSTMergeOwner *)mergeOwner;
-(unsigned long long)tableAreaForBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(TSTPencilAnnotationOwner *)pencilAnnotationOwner;
-(void)p_iterateDataStoreCellsInRegion:(id)arg1 searchFlags:(unsigned long long)arg2 usingBlock:(/*^block*/id)arg3 ;
-(TSTStrokeSidecar *)strokeSidecar;
-(void)setStroke:(id)arg1 forTopOfRow:(unsigned)arg2 order:(int)arg3 columnRange:(TSTSimpleRange)arg4 ;
-(void)setStroke:(id)arg1 forBottomOfRow:(unsigned)arg2 order:(int)arg3 columnRange:(TSTSimpleRange)arg4 ;
-(void)setStroke:(id)arg1 forLeftOfColumn:(unsigned short)arg2 order:(int)arg3 rowRange:(TSTSimpleRange)arg4 ;
-(void)setStroke:(id)arg1 forRightOfColumn:(unsigned short)arg2 order:(int)arg3 rowRange:(TSTSimpleRange)arg4 ;
-(void)updateTableRowColumnStylesWithBlock:(/*^block*/id)arg1 ;
-(TSTConditionalStyleFormulaOwner *)conditionalStyleFormulaOwner;
-(int)setCellsWithBaseCellMap:(id)arg1 ignoreFormulas:(char)arg2 skipDirtyingNonFormulaCells:(char)arg3 ;
-(char)auditTilesForRowOverlapAndExtensionPastTableBounds:(TSUCellCoord)arg1 result:(id*)arg2 ;
-(void)logTableTileAuditStatus:(char)arg1 withVersion:(unsigned long long)arg2 ;
-(char)p_auditTilesForRowOverlapAndExtensionPastTableBoundsWithVersion:(unsigned long long)arg1 ;
-(char)auditDatalistDuplicationReturningResult:(id*)arg1 ;
-(char)auditColumnRowCellCountsReturningResult:(id*)arg1 hasUndercounts:(char*)arg2 ;
-(char)confirmRefCountsReturningResult:(id*)arg1 ;
-(char)p_auditTableHealthUpgradingFromVersion:(unsigned long long)arg1 ;
-(void)p_rebuildTheTable:(id)arg1 ;
-(char)shouldUseWideRows;
-(void)p_upgradeDefaultCellStylesForStrokeSidecar;
-(unsigned long long)archivingCompatibilityVersion;
-(id)cellStyleForCellWithEmptyStyleAtBaseCellCoord:(TSUModelCellCoord)arg1 isDefault:(out char*)arg2 ;
-(id)defaultCellStyleForBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(id)textStyleForCellWithEmptyStyleAtBaseCellCoord:(TSUModelCellCoord)arg1 isDefault:(out char*)arg2 ;
-(id)defaultTextStyleForBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(void)prepareToApplyConcurrentCellMap:(id)arg1 ;
-(void)accumulateCurrentCellsConcurrently:(id)arg1 suppressCellBorder:(char)arg2 ;
-(void)setCellsConcurrently:(id)arg1 ignoreFormula:(char)arg2 clearImportWarnings:(char)arg3 ;
-(void)didApplyConcurrentCellMap:(id)arg1 ;
-(id)defaultCellStyleForTableStyleArea:(unsigned long long)arg1 ;
-(id)defaultTextStyleForTableStyleArea:(unsigned long long)arg1 ;
-(void)updateCalcEngineForTableSize;
-(void)p_upgradeMerges;
-(char)presetNeedsStrongOwnership;
-(TSTHiddenStatesOwner *)hiddenStatesOwner;
-(TSCEHauntedOwner *)hauntedOwner;
-(TSUModelCellRect)actualHeaderColumnRange;
-(TSUModelCellRect)topCornerRange;
-(TSUModelCellRect)bottomCornerRange;
-(unsigned long long)tableStyleAreaForBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(int)getDefaultCell:(out id)arg1 forTableStyleArea:(unsigned long long)arg2 ;
-(id)cellBorderAtCellID:(TSUCellCoord)arg1 ;
-(int)getCell:(id)arg1 atBaseCellCoord:(TSUModelCellCoord)arg2 suppressCellBorder:(char)arg3 ;
-(char)cellExistsAtBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(int)getCell:(id)arg1 atBaseCellCoord:(TSUModelCellCoord)arg2 ;
-(unsigned long long)numberOfPopulatedCells;
-(int)p_shouldAllowSetCell:(id)arg1 atBaseCellCoord:(TSUModelCellCoord)arg2 ;
-(TSTCellWillChangeDistributor *)cellWillChangeDistributor;
-(int)setCell:(id)arg1 atBaseCellCoord:(TSUModelCellCoord)arg2 ignoreFormula:(char)arg3 clearImportWarnings:(char)arg4 calcEngine:(id)arg5 ;
-(int)p_shouldAllowApplyBaseCellMap:(id)arg1 ;
-(id)textStyleAtBaseCellCoord:(TSUModelCellCoord)arg1 isDefault:(out char*)arg2 ;
-(char)hasCommentAtBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(NSMapTable *)commentHostingMap;
-(id)commentHostingAtBaseCellCoord:(TSUModelCellCoord)arg1 forCommentStorage:(id)arg2 ;
-(void)postCommentNotificationForStorage:(id)arg1 baseCellCoord:(TSUModelCellCoord)arg2 notificationKey:(id)arg3 ;
-(int)setCell:(id)arg1 atBaseCellCoord:(TSUModelCellCoord)arg2 ignoreFormula:(char)arg3 clearImportWarnings:(char)arg4 ;
-(void)clearCommentHostingMapForCommentStorage:(id)arg1 ;
-(int)setCellStyle:(id)arg1 ofRowAtIndex:(TSUModelRowIndex)arg2 ;
-(int)setTextStyle:(id)arg1 ofRowAtIndex:(TSUModelRowIndex)arg2 ;
-(int)setCellStyle:(id)arg1 ofColumnAtIndex:(TSUModelColumnIndex)arg2 ;
-(int)setTextStyle:(id)arg1 ofColumnAtIndex:(TSUModelColumnIndex)arg2 ;
-(id)cellStyleOfRowAtIndex:(TSUModelRowIndex)arg1 isDefault:(out char*)arg2 ;
-(id)cellStyleOfColumnAtIndex:(TSUModelColumnIndex)arg1 isDefault:(out char*)arg2 ;
-(id)textStyleOfRowAtIndex:(TSUModelRowIndex)arg1 isDefault:(out char*)arg2 ;
-(id)textStyleOfColumnAtIndex:(TSUModelColumnIndex)arg1 isDefault:(out char*)arg2 ;
-(double)computeDefaultFontHeightForTableStyleArea:(unsigned long long)arg1 ;
-(SCD_Struct_TS33)p_tableSize;
-(TSUModelCellRect)mergedRangeForBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(void)removeRowsAtIndex:(TSUModelRowIndex)arg1 count:(TSUModelRowIndex)arg2 ;
-(void)removeColumnsAtIndex:(TSUModelColumnIndex)arg1 count:(TSUModelColumnIndex)arg2 ;
-(void)_removeAnnotationsFromDeleteRange:(TSUModelCellRect)arg1 ;
-(void)moveBaseRowRange:(NSRange)arg1 toRowIndex:(TSUModelRowIndex)arg2 ;
-(void)moveBaseColumnRange:(NSRange)arg1 toColumnIndex:(TSUModelColumnIndex)arg2 ;
-(void)swapRowAtIndex:(TSUModelRowIndex)arg1 withRowAtIndex:(TSUModelRowIndex)arg2 ;
-(unsigned long long)lastArchivedAppVersion;
-(unsigned char)headerInfo_hidingActionForRowAtIndex:(TSUModelRowIndex)arg1 ;
-(unsigned char)headerInfo_hidingActionForColumnAtIndex:(TSUModelColumnIndex)arg1 ;
-(char)hasMigratableStylesInCells;
-(id)strokeLayerForLeftSideOfColumn:(unsigned short)arg1 ;
-(id)strokeLayerForRightSideOfColumn:(unsigned short)arg1 ;
-(id)strokeLayerForTopOfRow:(unsigned)arg1 ;
-(id)strokeLayerForBottomOfRow:(unsigned)arg1 ;
-(char)textStyle:(id)arg1 isEqualToDefaultTextStyleForBaseCellCoord:(TSUModelCellCoord)arg2 ;
-(TSCEValue*)tsceValueFromCell:(id)arg1 atBaseCellCoord:(TSUModelCellCoord)arg2 fetchRichTextAttributesIfPlainText:(char)arg3 ;
-(int)getValue:(out TSCEValue*)arg1 atBaseCellCoord:(TSUModelCellCoord)arg2 fetchRichTextAttributesIfPlainText:(char)arg3 ;
-(TSTSortRuleReferenceTracker *)sortRuleReferenceTracker;
-(id)mapReassigningPasteboardCustomFormatKeys:(id)arg1 ;
-(void)makePasteboardCustomFormatList;
-(void)updateCalculationEngineForFormula:(id)arg1 inBaseCellCoord:(TSUModelCellCoord)arg2 usingCalcEngine:(id)arg3 ;
-(void)assertListTilesAndRows;
-(id)initWithContext:(id)arg1 fromSourceModel:(id)arg2 region:(id)arg3 tableInfo:(id)arg4 waitForCalcEngine:(char)arg5 ;
-(char)auditRowInfoCellCountsReturningResult:(id*)arg1 ;
-(TSDStroke *)defaultHorizontalBorderStroke;
-(TSDStroke *)defaultHorizontalBorderStrokeEvenIfNotVisible;
-(TSDStroke *)defaultVerticalBorderStroke;
-(TSDStroke *)bodyRowStrokeEvenIfNotVisible;
-(TSDStroke *)categoryLevel1TopStroke;
-(TSDStroke *)categoryLevel2TopStroke;
-(TSDStroke *)categoryLevel3TopStroke;
-(TSDStroke *)categoryLevel4TopStroke;
-(TSDStroke *)categoryLevel5TopStroke;
-(TSDStroke *)categoryLevel1LabelSeparatorStroke;
-(TSDStroke *)categoryLevel2LabelSeparatorStroke;
-(TSDStroke *)categoryLevel3LabelSeparatorStroke;
-(TSDStroke *)categoryLevel4LabelSeparatorStroke;
-(TSDStroke *)categoryLevel5LabelSeparatorStroke;
-(TSDStroke *)categoryLevel1BottomStroke;
-(TSDStroke *)categoryLevel2BottomStroke;
-(TSDStroke *)categoryLevel3BottomStroke;
-(TSDStroke *)categoryLevel4BottomStroke;
-(TSDStroke *)categoryLevel5BottomStroke;
-(TSDStroke *)categoryLevel1InteriorStroke;
-(TSDStroke *)categoryLevel2InteriorStroke;
-(TSDStroke *)categoryLevel3InteriorStroke;
-(TSDStroke *)categoryLevel4InteriorStroke;
-(TSDStroke *)categoryLevel5InteriorStroke;
-(void)enumerateCellsForSOSSerializationWithBlock:(/*^block*/id)arg1 ;
-(void)setStrokeSidecar:(TSTStrokeSidecar *)arg1 ;
-(id)initWithContext:(id)arg1 rows:(unsigned)arg2 columns:(unsigned)arg3 styles:(id)arg4 stylePreset:(id)arg5 tableInfo:(id)arg6 ;
-(void)upgradeDuringDocumentUpgradeIfNeeded:(unsigned long long)arg1 tableInfo:(id)arg2 ;
-(void)setPresetNeedsStrongOwnership:(char)arg1 ;
-(void)setlabelLevel1CellStyle:(id)arg1 ;
-(void)setlabelLevel2CellStyle:(id)arg1 ;
-(void)setlabelLevel3CellStyle:(id)arg1 ;
-(void)setlabelLevel4CellStyle:(id)arg1 ;
-(void)setlabelLevel5CellStyle:(id)arg1 ;
-(void)setlabelLevel1TextStyle:(id)arg1 ;
-(void)setlabelLevel2TextStyle:(id)arg1 ;
-(void)setlabelLevel3TextStyle:(id)arg1 ;
-(void)setlabelLevel4TextStyle:(id)arg1 ;
-(void)setlabelLevel5TextStyle:(id)arg1 ;
-(void)setColumnRowUIDMap:(TSTColumnRowUIDMap *)arg1 ;
-(void)setTextImportRecord:(TSTStructuredTextImportRecord *)arg1 ;
-(TSCEOwnerUidMapper *)identityOwnerUIDMapper;
-(id)metadataForRowIndex:(TSUModelRowIndex)arg1 hidingAction:(unsigned char)arg2 ;
-(id)metadataForColumnIndex:(TSUModelColumnIndex)arg1 hidingAction:(unsigned char)arg2 ;
-(void)resetSortRuleReferenceTrackerForInsert;
-(void)setFromTableUID:(TSKUIDStruct)arg1 ;
-(void)clearFromTableUID;
-(void)setFromGroupByUID:(TSKUIDStruct)arg1 ;
-(void)clearFromGroupByUID;
-(char)wasCut;
-(void)setWasCut:(char)arg1 ;
-(unsigned long long)tableAreaForRow:(TSUModelRowIndex)arg1 ;
-(unsigned long long)tableAreaForColumn:(TSUModelColumnIndex)arg1 ;
-(unsigned long long)tableStyleAreaForRow:(TSUModelRowIndex)arg1 ;
-(id)tableAreasForBaseCellRect:(TSUModelCellRect)arg1 ;
-(int)getDefaultCell:(out id)arg1 forBaseCellCoord:(TSUModelCellCoord)arg2 ;
-(id)cellAtBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(char)hasFormulaAtBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(id)formulaSyntaxErrorAtBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(id)formulaAtBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(id)formulaSpecAtBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(id)formatForCalcEngineAtBaseCellCoord:(TSUModelCellCoord)arg1 formatIsExplicitOut:(BOOL*)arg2 ;
-(int)cellValueTypeAtBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(id)textStyleForCalcEngineAtBaseCellCoord:(TSUModelCellCoord)arg1 isDefault:(out char*)arg2 ;
-(char)hasCommentStorageAtBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(id)commentHostingAtBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(int)setCommentStorage:(id)arg1 atBaseCellCoord:(TSUModelCellCoord)arg2 ;
-(int)removeCommentStorageAtBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(char)cellStyle:(id)arg1 isEqualToDefaultCellStyleForBaseCellCoord:(TSUModelCellCoord)arg2 ;
-(int)setCellStyle:(id)arg1 atBaseCellCoord:(TSUModelCellCoord)arg2 ;
-(int)setTextStyle:(id)arg1 atBaseCellCoord:(TSUModelCellCoord)arg2 ;
-(id)cellStyleAtBaseCellCoord:(TSUModelCellCoord)arg1 isDefault:(out char*)arg2 ;
-(id)conditionalStyleSetAtBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(void)computeDefaultRowHeight;
-(char)hasNamesInHeaders;
-(int)insertRowsInBaseRange:(NSRange)arg1 uids:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg2 metadata:(id)arg3 unsetFilterHidingAction:(char)arg4 ;
-(int)insertColumnsAtIndex:(TSUModelColumnIndex)arg1 uids:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg2 metadatas:(id)arg3 tableArea:(unsigned long long)arg4 ;
-(int)insertRowsAtIndex:(TSUModelRowIndex)arg1 uids:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg2 metadatas:(id)arg3 tableArea:(unsigned long long)arg4 unsetFilterHidingAction:(char)arg5 ;
-(void)removeRowsAtBaseIndexes:(id)arg1 ;
-(void)removeColumnsAtBaseIndexes:(id)arg1 ;
-(void)removeAnnotationsFromRowsAtBaseIndexes:(id)arg1 ;
-(void)removeAnnotationsFromColumnsAtBaseIndexes:(id)arg1 ;
-(void)upgradeHiddenStates;
-(TSKUIDStruct)upgradeHiddenFormulaOwnerForColumnsUID;
-(TSKUIDStruct)upgradeHiddenFormulaOwnerForRowsUID;
-(char)upgradeNeedsToUpdateFilterSetForImport;
-(id)hiddenStateFormulaOwnerForRows;
-(id)hiddenStateFormulaOwnerForColumns;
-(void)setHidingState:(unsigned char)arg1 atRowIndex:(const TSUModelRowIndex*)arg2 ;
-(void)setHidingState:(unsigned char)arg1 atColumnIndex:(const TSUModelColumnIndex*)arg2 ;
-(id)stringAtBaseCellCoord:(TSUModelCellCoord)arg1 optionalCell:(id)arg2 ;
-(id)characterFillAtBaseCellCoord:(TSUModelCellCoord)arg1 optionalCell:(id)arg2 ;
-(id)regionForValueOrCommentCellsInBaseCellRect:(TSUModelCellRect)arg1 ;
-(id)fillForRow:(TSUModelRowIndex)arg1 ;
-(id)fillForColumn:(TSUModelColumnIndex)arg1 ;
-(int)maxStrokeOrder;
-(void)setStroke:(id)arg1 forTopOfRow:(unsigned)arg2 order:(int)arg3 ;
-(void)setStroke:(id)arg1 forBottomOfRow:(unsigned)arg2 order:(int)arg3 ;
-(void)setStroke:(id)arg1 forLeftOfColumn:(unsigned short)arg2 order:(int)arg3 ;
-(void)setStroke:(id)arg1 forRightOfColumn:(unsigned short)arg2 order:(int)arg3 ;
-(id)cellValueFromCell:(id)arg1 atBaseCellCoord:(TSUModelCellCoord)arg2 ;
-(id)cellValueAtBaseCellCoord:(TSUModelCellCoord)arg1 ;
-(void)setFormulaOwnerUIDsWithMap:(id)arg1 shouldStealReferences:(char)arg2 ;
-(void)remapTableUIDsInFormulasWithMap:(const TSKUIDStructMap*)arg1 calcEngine:(id)arg2 bakeForBadRefs:(char)arg3 ;
-(void)addPasteboardCustomFormatsToDocumentAndUpdateCells;
-(void)copyPasteboardCustomFormatsFromTableModel:(id)arg1 ;
-(void)registerAllFormulasWithCalculationEngine:(id)arg1 wasCrossDocumentPaste:(char)arg2 infoIsCategorized:(char)arg3 wasUndo:(char)arg4 ;
-(void)prepareForPasteWithCalculationEngine:(id)arg1 sourceOffset:(TSUColumnRowOffset)arg2 bakeFormulas:(char)arg3 ;
-(char)hasFormulas;
-(TSCECellCoordSet*)cellsModifiedInCurrentRecalcCycle;
-(void)addCellRefToClearError:(const TSCECellRef*)arg1 ;
-(void)assertCollaborationConvergence;
-(char)hasImportWarnings;
-(char)hasControls;
-(TSUModelCellCoord)baseCellCoordForCellContainingRichTextStorage:(id)arg1 ;
-(int)shouldAllowApplyConcurrentCellMap:(id)arg1 ;
-(unsigned long long)presetIDForUpgrade;
-(void)setPresetIDForUpgrade:(unsigned long long)arg1 ;
-(TSTConcurrentMutableCellUIDSet *)cellsToInvalidateAfterRecalc;
-(TSTConcurrentMutableCellUIDSet *)cellsToInvalidateNonoverflowingAfterRecalc;
-(void)setConditionalStyleFormulaOwner:(TSTConditionalStyleFormulaOwner *)arg1 ;
-(TSWPStorage *)deprecatedProvider;
-(void)setDeprecatedProvider:(TSWPStorage *)arg1 ;
-(TSTStructuredTextImportRecord *)textImportRecord;
-(TSTTableFilterSet *)upgradeFilterSet;
-(void)setUpgradeFilterSet:(TSTTableFilterSet *)arg1 ;
-(TSKUIDStructVectorTemplate<TSKUIDStruct>*)columnUIDs;
-(TSKUIDStructVectorTemplate<TSKUIDStruct>*)rowUIDs;
-(char)isRegisteredWithCalcEngine:(id)arg1 ;
-(void)performReadForOneOffFormulaEvaluation:(id)arg1 forCellCoord:(TSUCellCoord)arg2 ;
-(id)rowIndexesForUIDs:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg1 ;
-(id)columnIndexesForUIDs:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg1 ;
-(TSKUIDStructVectorTemplate<TSKUIDStruct>*)prunedColumnUIDsFromColumnUIDs:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg1 ;
-(TSKUIDStructVectorTemplate<TSKUIDStruct>*)prunedRowUIDsFromRowUIDs:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg1 ;
-(id)mutableIndexesForUIDSet:(id)arg1 isRows:(char)arg2 ;
-(id)mutableIndexesForUIDSet:(id)arg1 isRows:(char)arg2 notFoundUIDs:(id)arg3 ;
-(NSRange)rowRangeForUIDs:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg1 ;
-(NSRange)columnRangeForUIDs:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg1 ;
-(TSUCellRect)cellRangeForUIDRange:(const TSKUIDStructTract*)arg1 ;
-(TSKUIDStructTract*)cellUIDRangeForCellRange:(TSUCellRect)arg1 ;
-(void)notifyTableOfNewResults;
-(void)resetDependenciesForCell:(TSUCellCoord)arg1 ;
-(id)UIDSetForRange:(NSRange)arg1 isRows:(char)arg2 ;
-(void)setNewFormulaOwnerUIDsForDuplicatesWithCalcEngine:(id)arg1 ;
@end

