/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:53:00 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/QuickLook/iWork.qlgenerator/Contents/Frameworks/TSText.framework/Versions/A/TSText
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSText/TSText-Structs.h>
#import <TSDrawables/TSDLayout.h>
#import <TSText/TSKChangeSourceObserver.h>
#import <TSText/TSWPLayoutTarget.h>
#import <TSText/TSWPLayoutOwner.h>
#import <TSText/TSDWrapInvalidationParent.h>

@protocol TSWPLayoutParent;
@class NSMutableArray, TSWPStorage, TSDCanvas, TSDLayout, TSWPLayoutManager, NSMutableSet, TSUBezierPath, NSString;

@interface TSWPLayout : TSDLayout <TSKChangeSourceObserver, TSWPLayoutTarget, TSWPLayoutOwner, TSDWrapInvalidationParent> {

	TSWPLayoutManager* _layoutManager;
	NSMutableArray* _columns;
	char _textLayoutValid;
	TSWPStorage* _storage;
	unsigned long long _lastLayoutMgrChangeCount;
	TSDLayout*<TSWPLayoutParent> _wpLayoutParent;
	NSMutableSet* _markedHiddenInlineDrawableLayouts;
	char _useBlackTextColor;
	char _isLayingOutIntoTarget;

}

@property (assign,nonatomic) char isLayingOutIntoTarget;                                                //@synthesize isLayingOutIntoTarget=_isLayingOutIntoTarget - In the implementation block
@property (nonatomic,readonly) TSWPLayoutManager * layoutManager; 
@property (nonatomic,readonly) char textLayoutValid; 
@property (nonatomic,readonly) TSUBezierPath * interiorClippingPath; 
@property (nonatomic,readonly) char shouldWrapAroundExternalDrawables; 
@property (nonatomic,readonly) TSWPStorage * storage;                                                   //@synthesize storage=_storage - In the implementation block
@property (nonatomic,readonly) NSRange containedTextRange; 
@property (nonatomic,readonly) char isLinked; 
@property (nonatomic,readonly) char isOverflowing; 
@property (assign,nonatomic) char useBlackTextColor;                                                    //@synthesize useBlackTextColor=_useBlackTextColor - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) NSMutableArray * columns;                                                //@synthesize columns=_columns - In the implementation block
@property (nonatomic,readonly) id<TSWPOffscreenColumn> previousTargetLastColumn; 
@property (nonatomic,readonly) NSObject*<TSWPTopicNumberHints> previousTargetTopicNumbers; 
@property (nonatomic,readonly) id<TSWPOffscreenColumn> nextTargetFirstColumn; 
@property (nonatomic,readonly) NSObject*<TSWPTopicNumberHints> nextTargetTopicNumbers; 
@property (nonatomic,readonly) id<TSWPFootnoteHeightMeasurer> footnoteHeightMeasurer; 
@property (nonatomic,readonly) id<TSWPFootnoteMarkProvider> footnoteMarkProvider; 
@property (nonatomic,readonly) TSPObject*<TSDHint> nextTargetFirstChildHint; 
@property (nonatomic,readonly) char isInstructional; 
@property (nonatomic,readonly) CGSize minSize; 
@property (nonatomic,readonly) CGSize maxSize; 
@property (nonatomic,readonly) CGSize currentSize; 
@property (nonatomic,readonly) CGPoint position; 
@property (nonatomic,readonly) CGPoint anchorPoint; 
@property (nonatomic,readonly) unsigned long long autosizeFlags; 
@property (nonatomic,readonly) int verticalAlignment; 
@property (nonatomic,readonly) int naturalAlignment; 
@property (nonatomic,readonly) int naturalDirection; 
@property (nonatomic,readonly) char wantsLineFragments; 
@property (nonatomic,readonly) unsigned long long pageNumber; 
@property (nonatomic,readonly) unsigned long long pageCount; 
@property (nonatomic,readonly) char textIsVertical; 
@property (nonatomic,readonly) char layoutIsValid; 
@property (nonatomic,readonly) double maxAnchorInBlockDirection; 
@property (nonatomic,readonly) CGRect maskRect; 
@property (nonatomic,retain) NSMutableArray * anchoredDrawablesForRelayout; 
@property (nonatomic,readonly) TSDCanvas * canvas; 
@property (nonatomic,readonly) TSDLayout * parentLayoutForInlineAttachments; 
@property (nonatomic,readonly) char shouldHyphenate; 
@property (nonatomic,readonly) CFLocaleRef hyphenationLocale; 
@property (nonatomic,readonly) char repShouldPreventCaret; 
@property (nonatomic,readonly) char marginsAreMirrored; 
-(id)additionalReliedOnLayoutsForTextWrap;
-(void)tp_validateTextLayoutForcibly;
-(TSWPStorage *)storage;
-(void)invalidate;
-(id)initWithInfo:(id)arg1 ;
-(CGPoint)position;
-(CGSize)minSize;
-(CGSize)maxSize;
-(TSWPLayoutManager *)layoutManager;
-(void)validate;
-(CGPoint)anchorPoint;
-(unsigned long long)pageCount;
-(int)verticalAlignment;
-(NSMutableArray *)columns;
-(CGSize)currentSize;
-(unsigned long long)pageNumber;
-(TSDCanvas *)canvas;
-(char)isLinked;
-(id)styleProvider;
-(id)p_wpLayoutParent;
-(Class)repClassOverride;
-(id)computeLayoutGeometry;
-(void)invalidateTextLayout;
-(id)textWrapper;
-(void)invalidateSize;
-(void)updateChildrenFromInfo;
-(char)textLayoutValid;
-(void)addAttachmentLayout:(id)arg1 ;
-(id)currentInlineDrawableLayouts;
-(id)currentAnchoredDrawableLayouts;
-(id)validatedLayoutForAnchoredDrawable:(id)arg1 ;
-(id)layoutForInlineDrawable:(id)arg1 ;
-(char)isLayoutOffscreen;
-(id)columnMetricsForCharIndex:(unsigned long long)arg1 outRange:(NSRange*)arg2 ;
-(char)isLastTarget;
-(void)setNeedsDisplayInTargetRect:(CGRect)arg1 ;
-(CGRect)targetRectForCanvasRect:(CGRect)arg1 ;
-(id<TSWPOffscreenColumn>)previousTargetLastColumn;
-(NSObject*<TSWPTopicNumberHints>)previousTargetTopicNumbers;
-(id<TSWPOffscreenColumn>)nextTargetFirstColumn;
-(NSObject*<TSWPTopicNumberHints>)nextTargetTopicNumbers;
-(id<TSWPFootnoteHeightMeasurer>)footnoteHeightMeasurer;
-(id<TSWPFootnoteMarkProvider>)footnoteMarkProvider;
-(TSPObject*<TSDHint>)nextTargetFirstChildHint;
-(unsigned long long)autosizeFlags;
-(int)naturalAlignment;
-(int)naturalDirection;
-(char)wantsLineFragments;
-(char)textIsVertical;
-(char)layoutIsValid;
-(char)invalidateForPageCountChange;
-(TSUBezierPath *)interiorClippingPath;
-(CGRect)maskRect;
-(CGPoint)capturedInfoPositionForAttachment;
-(char)shouldDisplayGuides;
-(char)shouldProvideSizingGuides;
-(void)parentDidChange;
-(void)wrappableChildInvalidated:(id)arg1 ;
-(id)dependentLayouts;
-(void)parentWillChangeTo:(id)arg1 ;
-(CGSize)maximumFrameSizeForChild:(id)arg1 ;
-(id)additionalDependenciesForChildLayout:(id)arg1 ;
-(char)shouldValidate;
-(void)willBeAddedToLayoutController:(id)arg1 ;
-(void)willBeRemovedFromLayoutController:(id)arg1 ;
-(id)reliedOnLayouts;
-(id)initWithInfo:(id)arg1 frame:(CGRect)arg2 ;
-(void)p_invalidateTextLayout;
-(void*)initialLayoutState;
-(CGRect)p_protectedRectWithinLayoutForSelectionRect:(CGRect)arg1 ;
-(id)p_firstAncestorRespondingToSelector:(SEL)arg1 ;
-(void)invalidateParentForAutosizing;
-(char)caresAboutStorageChanges;
-(void)layoutManagerNeedsLayout:(id)arg1 ;
-(void)layoutManager:(id)arg1 didClearDirtyRangeWithDelta:(long long)arg2 afterCharIndex:(unsigned long long)arg3 ;
-(id)textColorOverride;
-(void)invalidateForFootnoteNumberingChange;
-(char)shouldWrapAroundExternalDrawables;
-(char)isOverflowing;
-(NSRange)containedTextRange;
-(char)descendersCannotClip;
-(void)setUseBlackTextColor:(char)arg1 ;
-(CGRect)rectInRootForSelectionPath:(id)arg1 ;
-(char)selectionMustBeEntirelyOnscreenToCountAsVisibleInSelectionPath:(id)arg1 ;
-(char)shouldInvalidateSizeWhenInvalidateSizeOfReliedOnLayout:(id)arg1 ;
-(void)clearHiddenInlineDrawableLayoutMarks;
-(void)markHiddenInlineDrawableLayout:(id)arg1 ;
-(double)textScaleForChild:(id)arg1 ;
-(char)containsStartOfRange:(NSRange)arg1 ;
-(char)isInstructional;
-(double)maxAnchorInBlockDirection;
-(id)interiorWrapSegments;
-(void)willLayoutIntoTarget;
-(void)didLayoutIntoTarget;
-(double)viewScaleForZoomingToSelectionPath:(id)arg1 targetPointSize:(double)arg2 ;
-(CGRect)rectInRootOfAutoZoomContextOfSelectionPath:(id)arg1 ;
-(CGRect)rectInRootForPresentingAnnotationPopoverForSelectionPath:(id)arg1 ;
-(id)containedPencilAnnotations;
-(id)unscaledContentRectsToAvoidPencilAnnotationOverlap;
-(char)containsStartOfPencilAnnotation:(id)arg1 ;
-(char)childLayoutIsCurrentlyHiddenWhileManipulating:(id)arg1 ;
-(void)i_validateTextLayout;
-(void)invalidateForcingFullReLayOut;
-(char)parentAutosizes;
-(void)beginResizeWrapInvalidationCluster;
-(void)endResizeWrapInvalidationCluster;
-(void)didLayoutChangingDirtyRanges;
-(void)didLayoutWithLayoutManager:(id)arg1 ;
-(void)invalidateForChangedPrintingSettings;
-(CGRect)rectInRootForZoomingToSelectionPath:(id)arg1 ;
-(char)isLayingOutIntoTarget;
-(void)i_setTextLayoutValid:(char)arg1 ;
-(char)p_shouldAssertDependenciesAreCorrect;
-(CGSize)p_maximumFrameSizeForChild:(id)arg1 ;
-(void)p_clearOutLayoutManager;
-(CGRect)p_rectInRootForSelectionPath:(id)arg1 useParagraphModeRects:(char)arg2 forZoom:(char)arg3 ;
-(id)initWithInfo:(id)arg1 storage:(id)arg2 frame:(CGRect)arg3 ;
-(CGSize)p_maximumFrameSizeForChild:(id)arg1 foundInColumn:(id*)arg2 ;
-(char)needsAdditionalOffsetBasedOnPartitioningOfParent;
-(id)pageAnchorDetailsForPencilAnnotationAtSelectionPath:(id)arg1 attachedType:(long long)arg2 ;
-(CGRect)p_rectForSelectionPath:(id)arg1 useParagraphModeRects:(char)arg2 ;
-(char)useBlackTextColor;
-(void)setIsLayingOutIntoTarget:(char)arg1 ;
@end

