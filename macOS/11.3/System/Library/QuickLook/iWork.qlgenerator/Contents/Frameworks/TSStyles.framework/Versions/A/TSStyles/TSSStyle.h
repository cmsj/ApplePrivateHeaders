/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:58 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/QuickLook/iWork.qlgenerator/Contents/Frameworks/TSStyles.framework/Versions/A/TSStyles
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSStyles/TSStyles-Structs.h>
#import <TSPersistence/TSPObject.h>
#import <libobjc.A.dylib/NSCopying.h>
#import <TSStyles/TSSPropertyValueValidator.h>
#import <TSStyles/TSSStyleObject.h>
#import <TSStyles/TSSMutablePropertySource.h>
#import <TSStyles/TSSStyleClient.h>
#import <TSStyles/TSKModel.h>
#import <TSStyles/TSKTransformableObject.h>

@class NSSet, TSSPropertyMap, TSSStylesheet, NSString, TSUColor, TSURetainedPointerSet, TSSPropertySet;

@interface TSSStyle : TSPObject <NSCopying, TSSPropertyValueValidator, TSSStyleObject, TSSMutablePropertySource, TSSStyleClient, TSKModel, TSKTransformableObject> {

	TSSPropertyMap* mOverridePropertyMap;
	TSSStylesheet* mStylesheet;
	NSString* mName;
	NSString* mStyleIdentifier;
	TSSStyle* mParent;
	char mIsVariation;
	char mWasUnarchivedAsOrphanVariation;

}

@property (nonatomic,readonly) TSUColor * fallbackFontColorWhenUnableToReadCharacterFillColor; 
@property (assign,nonatomic,__weak) TSSStylesheet * stylesheet; 
@property (nonatomic,copy) NSString * name; 
@property (nonatomic,readonly) NSString * styleIdentifier; 
@property (nonatomic,readonly) TSSStyle * parent; 
@property (nonatomic,readonly) TSSStyle * rootAncestor; 
@property (nonatomic,readonly) TSSStyle * baseStyleForVariation; 
@property (nonatomic,readonly) TSSStyle * firstIdentifiedAncestor; 
@property (nonatomic,readonly) TSSStyle * firstNamedAncestor; 
@property (nonatomic,readonly) TSSStyle * rootIdentifiedAncestor; 
@property (nonatomic,readonly) char isVariation; 
@property (nonatomic,readonly) char isNamed; 
@property (nonatomic,readonly) char isIdentified; 
@property (nonatomic,readonly) TSSPropertyMap * overridePropertyMap; 
@property (nonatomic,readonly) NSString * contentTag; 
@property (nonatomic,readonly) TSURetainedPointerSet * children; 
@property (nonatomic,readonly) TSURetainedPointerSet * descendants; 
@property (nonatomic,readonly) char overridesAnyProperty; 
@property (nonatomic,readonly) TSSPropertySet * overriddenProperties; 
@property (nonatomic,readonly) unsigned long long overrideCount; 
@property (nonatomic,readonly) TSSPropertyMap * propertyMap; 
@property (nonatomic,readonly) unsigned long long minimumReadVersion; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) NSSet * referencedStyles; 
+(int)muxDefaultPropertyForSpecificProperty:(int)arg1 ;
+(void)upgradeFontColorToIncludeCharacterFillInPropertyMap:(id)arg1 forOwningTSPObject:(id)arg2 ;
+(char)p_isFillAdvanced:(id)arg1 ;
+(id)adjustPropertyMapForFontColorArchiving:(id)arg1 fallbackColor:(id)arg2 ;
+(void)addIgnoreAndPreserveRulesAndDocumentWarningsForPropertyMap:(id)arg1 withArchiver:(id)arg2 archive:(CharacterStylePropertiesArchive*)arg3 ;
+(const CTFontRef)pCreateFontWithName:(id)arg1 fontSize:(double)arg2 ;
+(id)pReplacementForMissingFontName:(id)arg1 outBold:(out int*)arg2 outItalic:(out int*)arg3 outQuiet:(out char*)arg4 ;
+(id)validateFontName:(id)arg1 size:(double)arg2 bold:(char)arg3 italic:(char)arg4 checkedFontMap:(id)arg5 newFontName:(id*)arg6 newBold:(char*)arg7 newItalic:(char*)arg8 ;
+(id)validateFontInPropertyMap:(id)arg1 parentStyle:(id)arg2 checkedFontMap:(id)arg3 ;
+(id)description;
+(id)properties;
+(id)defaultStyleWithContext:(id)arg1 ;
+(id)defaultValueForProperty:(int)arg1 ;
+(int)defaultIntValueForProperty:(int)arg1 ;
+(float)defaultFloatValueForProperty:(int)arg1 ;
+(double)defaultDoubleValueForProperty:(int)arg1 ;
+(id)boxedDefaultValueForProperty:(int)arg1 ;
+(char)validateIntValue:(int*)arg1 forProperty:(int)arg2 ;
+(char)validateIntValue:(int*)arg1 forProperty:(int)arg2 min:(int)arg3 max:(int)arg4 ;
+(char)validateIntValueAsBool:(int*)arg1 forProperty:(int)arg2 ;
+(char)validateFloatValue:(float*)arg1 forProperty:(int)arg2 ;
+(char)validateDoubleValue:(double*)arg1 forProperty:(int)arg2 ;
+(char)validateObjectValue:(id*)arg1 withClass:(Class)arg2 forProperty:(int)arg3 ;
+(double)fontSizeForFontSize:(double)arg1 scalingFactor:(double)arg2 ;
+(id)defaultPropertyMap;
+(id)propertiesAllowingNSNull;
+(char)needsObjectUUID;
+(char)shouldWarnWithPersistingWithoutStylesheet;
-(char)isEquivalentForCrossDocumentPasteMasterComparison:(id)arg1 ;
-(char)tst_dataObjectIsEqual:(id)arg1 ;
-(unsigned long long)tst_dataObjectHash;
-(int)intValueForMUXedProperty:(int)arg1 ;
-(void)setBoolValue:(char)arg1 forProperty:(int)arg2 ;
-(void)upgradeOutlinesToStrokesForcingUpgradeForUnderspecifiedCharacterStyles:(char)arg1 overridingCharacterStrokes:(char)arg2 ;
-(char)wantsCustomResolveLogicForProperty:(int)arg1 forStyles:(id)arg2 ;
-(id)resolvedValueForProperty:(int)arg1 inStyles:(id)arg2 ;
-(int)resolvedIntForProperty:(int)arg1 inStyles:(id)arg2 ;
-(double)resolvedFloatForProperty:(int)arg1 inStyles:(id)arg2 ;
-(void)loadCharacterStylePropertiesIntoPropertyMap:(id)arg1 fromArchive:(const CharacterStylePropertiesArchive*)arg2 unarchiver:(id)arg3 ;
-(void)loadParagraphStylePropertiesIntoPropertyMap:(id)arg1 fromArchive:(const ParagraphStylePropertiesArchive*)arg2 unarchiver:(id)arg3 ;
-(void)saveCharacterStylePropertiesToArchive:(CharacterStylePropertiesArchive*)arg1 archiver:(id)arg2 archivingForCommand:(char)arg3 ;
-(void)saveParagraphStylePropertiesToArchive:(ParagraphStylePropertiesArchive*)arg1 archiver:(id)arg2 ;
-(TSUColor *)fallbackFontColorWhenUnableToReadCharacterFillColor;
-(void)p_upgradeOutlinesToStrokesInPropertyMap:(id)arg1 forcingUpgradeForUnderspecifiedCharacterStyles:(char)arg2 overridingCharacterStrokes:(char)arg3 ;
-(void)p_removeFontColorPropertyInPropertyMap:(id)arg1 ;
-(char)boolValueForProperty:(int)arg1 defaultValue:(char)arg2 ;
-(id)validateFontWithCheckedFontMap:(id)arg1 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(char)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(NSString *)name;
-(void)setName:(NSString *)arg1 ;
-(id)initWithContext:(id)arg1 ;
-(TSSStyle *)parent;
-(char)isAncestorOf:(id)arg1 ;
-(TSURetainedPointerSet *)children;
-(id)valueForProperty:(int)arg1 ;
-(void)removeAllValues;
-(void)setParent:(TSSStyle *)arg1 ;
-(void)setValue:(id)arg1 forProperty:(int)arg2 ;
-(void)removeValueForProperty:(int)arg1 ;
-(TSSStylesheet *)stylesheet;
-(void)setStylesheet:(TSSStylesheet *)arg1 ;
-(TSSPropertyMap *)propertyMap;
-(id)valuesForProperties:(id)arg1 ;
-(id)copyWithContext:(id)arg1 ;
-(void)setObject:(id)arg1 forProperty:(int)arg2 ;
-(TSURetainedPointerSet *)descendants;
-(id)objectForProperty:(int)arg1 ;
-(void)setIntValue:(int)arg1 forProperty:(int)arg2 ;
-(float)floatValueForProperty:(int)arg1 ;
-(void)setFloatValue:(float)arg1 forProperty:(int)arg2 ;
-(char)containsProperty:(int)arg1 ;
-(void)setDoubleValue:(double)arg1 forProperty:(int)arg2 ;
-(id)componentRootObject;
-(char)allowsImplicitComponentOwnership;
-(id)boxedObjectForProperty:(int)arg1 ;
-(int)intValueForProperty:(int)arg1 ;
-(double)doubleValueForProperty:(int)arg1 ;
-(double)CGFloatValueForProperty:(int)arg1 ;
-(void)setBoxedObject:(id)arg1 forProperty:(int)arg2 ;
-(void)setCGFloatValue:(double)arg1 forProperty:(int)arg2 ;
-(char)definesProperty:(int)arg1 ;
-(TSSStyle *)rootAncestor;
-(NSString *)styleIdentifier;
-(id)initWithContext:(id)arg1 name:(id)arg2 overridePropertyMap:(id)arg3 isVariation:(char)arg4 ;
-(id)copyWithZone:(NSZone*)arg1 context:(id)arg2 ;
-(id)boxedValueForProperty:(int)arg1 ;
-(id)copyPropertyMap;
-(char)overridesProperty:(int)arg1 ;
-(id)overrideValueForProperty:(int)arg1 ;
-(int)overrideIntValueForProperty:(int)arg1 ;
-(float)overrideFloatValueForProperty:(int)arg1 ;
-(double)overrideDoubleValueForProperty:(int)arg1 ;
-(id)propertyMapIgnoringStyle:(id)arg1 ;
-(char)isVariation;
-(char)hasEqualValues:(id)arg1 forProperties:(id)arg2 ;
-(char)p_hasEqualValuesTo:(id)arg1 forProperty:(int)arg2 ;
-(char)isIdentified;
-(char)isDescendentOf:(id)arg1 ;
-(char)validateIntValue:(int*)arg1 forProperty:(int)arg2 ;
-(char)validateIntValue:(int*)arg1 forProperty:(int)arg2 min:(int)arg3 max:(int)arg4 ;
-(char)validateIntValueAsBool:(int*)arg1 forProperty:(int)arg2 ;
-(char)validateFloatValue:(float*)arg1 forProperty:(int)arg2 ;
-(char)validateDoubleValue:(double*)arg1 forProperty:(int)arg2 ;
-(char)validateObjectValue:(id*)arg1 withClass:(Class)arg2 forProperty:(int)arg3 ;
-(char)transformsFontSizes;
-(NSSet *)referencedStyles;
-(void)replaceReferencedStylesUsingBlock:(/*^block*/id)arg1 ;
-(void)setStyleIdentifier:(NSString *)arg1 ;
-(id)copyFlattenedWithContext:(id)arg1 ;
-(void)setBoxedValue:(id)arg1 forProperty:(int)arg2 ;
-(void)setValuesForProperties:(id)arg1 ;
-(char)isNamed;
-(char)overridesAnyProperty;
-(TSSPropertySet *)overriddenProperties;
-(unsigned long long)overrideCount;
-(id)boxedOverrideValueForProperty:(int)arg1 ;
-(double)overrideCGFloatValueForProperty:(int)arg1 ;
-(id)fullPropertyMap;
-(id)overridePropertyMapWithPropertyMap:(id)arg1 overridePropertyMap:(id)arg2 collapseSourceOverrides:(char)arg3 ;
-(id)newOverridePropertyMapWithPropertyMap:(id)arg1 ;
-(char)hasEqualPropertyValues:(id)arg1 ;
-(char)hasEqualValuesToPropertyMap:(id)arg1 forProperties:(id)arg2 ;
-(TSSPropertyMap *)overridePropertyMap;
-(void)setOverridePropertyMap:(TSSPropertyMap *)arg1 ;
-(char)overridePropertyMapIsEqualTo:(id)arg1 ;
-(TSSStyle *)baseStyleForVariation;
-(TSSStyle *)firstIdentifiedAncestor;
-(TSSStyle *)rootIdentifiedAncestor;
-(char)isChildOf:(id)arg1 ;
-(char)isParentOf:(id)arg1 ;
-(id)boxedValueForProperty:(int)arg1 oldBoxedValue:(id)arg2 transformedByTransform:(CGAffineTransform)arg3 ;
-(NSString *)contentTag;
-(void)saveToArchive:(StyleArchive*)arg1 archiver:(id)arg2 ;
-(void)setObjectUUID:(id)arg1 ;
-(void)loadFromArchive:(const StyleArchive*)arg1 unarchiver:(id)arg2 ;
-(char)isRelatedTo:(id)arg1 ;
-(unsigned long long)minimumReadVersion;
-(id)parentStyleForFixingOrphanVariation;
-(void)setIsVariation:(char)arg1 ;
-(TSSStyle *)firstNamedAncestor;
-(char)isEqualToStyle:(id)arg1 ignoreObjectContext:(char)arg2 ;
-(char)isEqualToStyle:(id)arg1 ignoreObjectContext:(char)arg2 ignoreObjectUUID:(char)arg3 ;
-(char)isEqualToStyle:(id)arg1 ignoreObjectUUID:(char)arg2 ;
-(id)copyWithContext:(id)arg1 includeParentProperties:(char)arg2 ;
-(id)additionalPropertiesNeededForVariationWithPropertyMap:(id)arg1 ;
-(void)mapNonDefaultPropertyOverridesForParentStyle:(id)arg1 propertyMap:(id)arg2 ;
-(id)archivableRepresentationOfChangeSet:(id)arg1 ;
-(id)propertyMapThatNeedsToBeTransformedWithTransformedObjects:(id)arg1 ;
@end

