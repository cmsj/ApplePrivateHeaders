/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:53:00 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/QuickLook/iWork.qlgenerator/Contents/Frameworks/TSTables.framework/Versions/A/TSTables
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSTables/TSTables-Structs.h>
#import <libobjc.A.dylib/NSCopying.h>

@protocol OS_dispatch_queue;
@class TSTCellUIDLookupListWrapper, NSObject;

@interface TSTCellUIDList : NSObject <NSCopying> {

	TSKUIDStructVectorTemplate<TSKUIDStruct>* _rowIdList;
	TSKUIDStructVectorTemplate<TSKUIDStruct>* _columnIdList;
	vector<int, std::__1::allocator<int>>* _rowUIDIndexList;
	vector<int, std::__1::allocator<int>>* _columnUIDIndexList;
	TSTCellUIDLookupListWrapper* _uncompressedCellUIDs;
	unsigned long long _compressedSize;
	NSObject*<OS_dispatch_queue> _queue;

}

@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> queue;              //@synthesize queue=_queue - In the implementation block
@property (nonatomic,readonly) unsigned long long compressedSize;               //@synthesize compressedSize=_compressedSize - In the implementation block
+(id)cellUIDList;
+(id)cellUIDListFromRange:(const TSKUIDStructTract*)arg1 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(id)init;
-(unsigned long long)count;
-(NSObject*<OS_dispatch_queue>)queue;
-(unsigned long long)compressedSize;
-(void)compress;
-(id)iterator;
-(void)reserve:(unsigned long long)arg1 ;
-(void)saveToMessage:(CellUIDListArchive*)arg1 archiver:(id)arg2 ;
-(id)initFromMessage:(const CellUIDListArchive*)arg1 unarchiver:(id)arg2 ;
-(void)enumerateCellUIDsUsingBlock:(/*^block*/id)arg1 ;
-(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)columnUIDs;
-(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)rowUIDs;
-(id)uncompressedCellUIDs;
-(void)addCellUID:(const TSKUIDStructCoord*)arg1 ;
-(void)addCellUIDs:(vector<TSKUIDStructCoord, std::__1::allocator<TSKUIDStructCoord>>*)arg1 ;
-(void)addCellRegion:(id)arg1 withColumnUIDs:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg2 rowUIDs:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg3 ;
-(void)p_compressUID:(const TSKUIDStruct*)arg1 index:(unsigned long long)arg2 UIDtoIndexMap:(map<TSKUIDStruct, unsigned long, std::__1::less<TSKUIDStruct>, std::__1::allocator<std::__1::pair<const TSKUIDStruct, unsigned long>>>*)arg3 UIDs:(vector<TSKUIDStruct, std::__1::allocator<TSKUIDStruct>>*)arg4 compressedIndexes:(vector<int, std::__1::allocator<int>>*)arg5 lastSameUIDIndex:(vector<unsigned long, std::__1::allocator<unsigned long>>*)arg6 ;
-(void)compressUIDIndexListFrom:(const vector<int, std::__1::allocator<int>>*)arg1 withUIDCount:(unsigned long long)arg2 to:(vector<int, std::__1::allocator<int>>*)arg3 ;
-(id)pruneCellUIDListAgainstTable:(id)arg1 behavior:(unsigned long long)arg2 usingBlock:(/*^block*/id)arg3 ;
-(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)compressedRowUIDs;
-(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)compressedColumnUIDs;
-(const vector<int, std::__1::allocator<int>>*)compressedRowIndexes;
-(const vector<int, std::__1::allocator<int>>*)compressedColumnIndexes;
-(void)setCompressedColumnIndexes:(const vector<int, std::__1::allocator<int>>*)arg1 ;
-(unsigned long long)computeValidCount;
-(void)addCellUIDRanges:(const TSKUIDStructTract*)arg1 ;
-(id)pruneCellUIDListAgainstTable:(id)arg1 behavior:(unsigned long long)arg2 ;
@end

