/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:57 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/QuickLook/iWork.qlgenerator/Contents/Frameworks/TSCalculationEngine.framework/Versions/A/TSCalculationEngine
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSCalculationEngine/TSCalculationEngine-Structs.h>
#import <libobjc.A.dylib/NSCopying.h>
#import <TSCalculationEngine/TSCEFormulaReturning.h>

@class NSString;

@interface TSCEFormulaObject : NSObject <NSCopying, TSCEFormulaReturning> {

	TSCEASTNodeArray* _astNodeArray;
	struct {
		unsigned char _flags;
	}  _translationFlags;
	unsigned long long _hash;
	TSKUIDStruct _hostTableUID;
	TSKUIDStruct _hostColumnUID;
	TSKUIDStruct _hostRowUID;

}

@property (readonly) char isEmpty; 
@property (readonly) char containsInvalidRef; 
@property (readonly) char containsUidReferences; 
@property (readonly) char hasBadRefWithUidInfo; 
@property (readonly) char usesFunctionsWithDateArgs; 
@property (readonly) char hasUidTracts; 
@property (readonly) unsigned long long hash; 
@property (nonatomic,readonly) TSCEFormulaObject * formulaObject; 
@property (readonly) char hasHostCell; 
@property (nonatomic,readonly) const TSKUIDStruct* hostTableUID;                          //@synthesize hostTableUID=_hostTableUID - In the implementation block
@property (nonatomic,readonly) const TSKUIDStruct* hostColumnUID;                         //@synthesize hostColumnUID=_hostColumnUID - In the implementation block
@property (nonatomic,readonly) const TSKUIDStruct* hostRowUID;                            //@synthesize hostRowUID=_hostRowUID - In the implementation block
@property (nonatomic,readonly) TSCEFormulaTranslationFlags translationFlags;              //@synthesize translationFlags=_translationFlags - In the implementation block
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(TSCEValue*)formulaResultForFormattedValue:(const TSCEValue*)arg1 context:(TSCEEvaluationContext*)arg2 suppressCycleCheck:(char)arg3 ;
+(TSCEValue*)formulaResultForFormattedValueWithKnownCycleState:(const TSCEValue*)arg1 context:(TSCEEvaluationContext*)arg2 isInACycle:(char)arg3 outErrorIsDueToCycle:(char*)arg4 ;
+(id)parseFormula:(id)arg1 calcEngine:(id)arg2 unqualifiedReferenceTableUID:(const TSKUIDStruct*)arg3 containingCell:(const TSUCellCoord*)arg4 outError:(id*)arg5 outNeedsImportRewrite:(char*)arg6 isChartFormula:(char)arg7 isSageUpgrade:(char)arg8 ;
+(id)parseFormula:(id)arg1 calcEngine:(id)arg2 containingCell:(const TSCECellRef*)arg3 outError:(id*)arg4 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(void)dealloc;
-(char)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(NSString *)description;
-(char)isEmpty;
-(TSCEValue*)evaluateWithContext:(TSCEEvaluationContext*)arg1 ;
-(unsigned char)encodeToArchive:(FormulaArchive*)arg1 archiver:(id)arg2 ;
-(TSCEFormulaObject *)formulaObject;
-(TSCEValue*)evaluateWithContextVectorResult:(TSCEEvaluationContext*)arg1 ;
-(id)initWithNodeArray:(const TSCEASTNodeArray*)arg1 ;
-(void)getPrecedents:(TSCEReferenceSet*)arg1 calcEngine:(id)arg2 hostCell:(const TSCECellRef*)arg3 doImplicitIntersection:(char)arg4 returnUidReferences:(char)arg5 ;
-(id)copyByRemappingOwnerUIDs:(const TSKUIDStructMap*)arg1 calcEngine:(id)arg2 containingCell:(const TSCECellRef*)arg3 outBadRefFound:(char*)arg4 ;
-(id)copyByRepairingBadReferences:(TSCEFormulaRewriteContext*)arg1 ;
-(TSCEASTNodeArray*)astNodeArrayCopy;
-(TSCEFormulaTranslationFlags)translationFlags;
-(id)initWithNodeArray:(const TSCEASTNodeArray*)arg1 translationFlags:(TSCEFormulaTranslationFlags)arg2 ;
-(char)isEqualToFormula:(id)arg1 ;
-(id)hostedDescriptionAtCell:(const TSCECellRef*)arg1 ;
-(id)copyByRewritingReferencesToUidForm:(TSCEFormulaRewriteContext*)arg1 ;
-(id)copyByRewritingReferencesToGeometricForm:(TSCEFormulaRewriteContext*)arg1 ;
-(id)initWithArchive:(const FormulaArchive*)arg1 isPreUFF:(char)arg2 ;
-(id)copyByOffsettingRelativeReferences:(TSUColumnRowOffset)arg1 ;
-(const TSCEASTNodeArray*)const_astNodeArray;
-(void)appendExternalTableUIDs:(unordered_set<TSKUIDStruct, std::__1::hash<TSKUIDStruct>, std::__1::equal_to<TSKUIDStruct>, std::__1::allocator<TSKUIDStruct>>*)arg1 groupByUIDs:(unordered_set<TSKUIDStruct, std::__1::hash<TSKUIDStruct>, std::__1::equal_to<TSKUIDStruct>, std::__1::allocator<TSKUIDStruct>>*)arg2 ;
-(vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef>>*)getCategoryReferencesWithCalcEngine:(id)arg1 ;
-(id)descriptionForLevel:(int)arg1 ;
-(const TSKUIDStruct*)hostTableUID;
-(id)initWithCreator:(TSCEFormulaCreator)arg1 ;
-(id)initWithCreator:(TSCEFormulaCreator)arg1 argInfo:(TSCEASTNodeArgInfo*)arg2 translationFlags:(TSCEFormulaTranslationFlags)arg3 ;
-(id)copyByConvertingColonToColonTract:(TSCEFormulaRewriteContext*)arg1 ;
-(char)isEquivalentToFormula:(id)arg1 context:(unsigned long long)arg2 thisContainingCell:(TSCECellRef*)arg3 thatContainingCell:(TSCECellRef*)arg4 ;
-(id)hostedDescriptionAtCell:(const TSCECellRef*)arg1 hideUids:(char)arg2 ;
-(char)hasHostCell;
-(id)copyBySettingHostTableUID:(const TSKUIDStruct*)arg1 hostColumnUID:(const TSKUIDStruct*)arg2 hostRowUID:(const TSKUIDStruct*)arg3 ;
-(id)copyByConvertingColonTractToColon:(TSCEFormulaRewriteContext*)arg1 breakUpIntoRefs:(char)arg2 ;
-(id)initWithCreator:(TSCEFormulaCreator)arg1 translationFlags:(TSCEFormulaTranslationFlags)arg2 ;
-(char)containsInvalidRef;
-(char)containsUidReferences;
-(char)hasBadRefWithUidInfo;
-(char)usesFunctionsWithDateArgs;
-(char)hasUidTracts;
-(TSCEValue*)evaluateWithContext:(TSCEEvaluationContext*)arg1 isInACycle:(char)arg2 outErrorIsDueToCycle:(char*)arg3 ;
-(char)isEquivalentToFormula:(id)arg1 ;
-(id)sageFormulaStringForContainingCell:(const TSCECellRef*)arg1 outHasSageUnsupportedFunctions:(char*)arg2 ;
-(id)copyByRewritingForTranspose:(id)arg1 calcEngine:(id)arg2 containingCell:(const TSCEFormulaContainingCell*)arg3 outTransposeWarning:(char*)arg4 ;
-(id)copyByRewritingWithSpec:(id)arg1 calcEngine:(id)arg2 containingCell:(const TSCEFormulaContainingCell*)arg3 ;
-(id)copyByClearingHostCell;
-(id)copyBySettingTranslationFlags:(TSCEFormulaTranslationFlags)arg1 ;
-(id)copyByRewritingWithBlock:(TSCEFormulaRewriteContext*)arg1 rewriteBlock:(/*^block*/id)arg2 ;
-(void)iterateWithBlock:(TSCEFormulaRewriteContext*)arg1 stop:(char*)arg2 block:(/*^block*/id)arg3 ;
-(id)copyByFreezingRefs:(id)arg1 containingCell:(const TSCEFormulaContainingCell*)arg2 ;
-(id)copyByThawingRefs:(id)arg1 containingCell:(const TSCEFormulaContainingCell*)arg2 ;
-(id)copyByConvertingColonTractToColon:(TSCEFormulaRewriteContext*)arg1 ;
-(id)copyByClearingUids:(id)arg1 containingTableUID:(const TSKUIDStruct*)arg2 ;
-(id)copyByMakingAllCategoryRefsIndirect:(id)arg1 containingCell:(const TSCEFormulaContainingCell*)arg2 ;
-(id)copyByRemappingHostCellAgnosticOwnerUIDs:(const TSKUIDStructMap*)arg1 calcEngine:(id)arg2 containingCell:(const TSCECellRef*)arg3 outError:(char*)arg4 ;
-(id)copyByRemappingOwnerUIDs:(const TSKUIDStructMap*)arg1 calcEngine:(id)arg2 badRefFound:(char*)arg3 ;
-(id)copyByForceSettingOwnerUIDs:(const TSKUIDStruct*)arg1 calcEngine:(id)arg2 ;
-(id)copyByRemappingUids:(const TSKUIDStructMap*)arg1 rowMap:(const TSKUIDStructMap*)arg2 ownerMap:(const TSKUIDStructMap*)arg3 clearIfMissing:(char)arg4 ;
-(id)copyByUpdatingLinkedTable:(const TSKUIDStruct*)arg1 outfoundLinkedRef:(char*)arg2 ;
-(id)copyByRewritingForSageExport:(TSCEEvaluationContext*)arg1 targetDocumentSupportsCrossTableReferences:(char)arg2 outshouldBakeWholeFormula:(char*)arg3 outFeaturesUsed:(char*)arg4 ;
-(id)copyByRewritingForSageImport:(id)arg1 containingCell:(const TSCECellRef*)arg2 ;
-(id)copyByRewritingForExcelImport:(TSCEEvaluationContext*)arg1 outFormulaResult:(TSCEValue*)arg2 outDidModifyFormula:(char*)arg3 outFormulaReplacedForExcelCompatWarning:(char*)arg4 functionNameReplacedForExcelCompat:(id*)arg5 formulaFormatFromCell:(unsigned)arg6 ;
-(id)copyByRemovingNumberToDateCoercion:(TSCEEvaluationContext*)arg1 outFormulaResult:(TSCEValue*)arg2 outDidModifyFormula:(char*)arg3 ;
-(id)copyByRewritingForExcelExport:(TSCEEvaluationContext*)arg1 ;
-(id)copyByRewritingNumberToDurationForSageImport:(const TSCECellRef*)arg1 durationUnitLargest:(int)arg2 ;
-(id)copyByOffsettingRelativeReferences:(id)arg1 oldContainingCell:(const TSCECellRef*)arg2 newContainingTable:(const TSKUIDStruct*)arg3 offset:(TSUColumnRowOffset)arg4 ;
-(id)copyByRewritingGroupUid:(const TSKUIDStruct*)arg1 ;
-(const TSKUIDStruct*)hostColumnUID;
-(const TSKUIDStruct*)hostRowUID;
@end

