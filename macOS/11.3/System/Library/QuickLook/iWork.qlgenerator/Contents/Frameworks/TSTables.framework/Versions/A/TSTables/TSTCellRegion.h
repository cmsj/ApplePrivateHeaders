/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:53:00 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/QuickLook/iWork.qlgenerator/Contents/Frameworks/TSTables.framework/Versions/A/TSTables
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSTables/TSTables-Structs.h>
#import <libobjc.A.dylib/NSCopying.h>
#import <libobjc.A.dylib/NSMutableCopying.h>

@class NSIndexSet;

@interface TSTCellRegion : NSObject <NSCopying, NSMutableCopying> {

	vector<TSUCellRect, std::__1::allocator<TSUCellRect>>* _cellRanges;
	TSUCellRect _boundingCellRange;
	unsigned long long _cellCount;
	NSIndexSet* _intersectingColumnsIndexSet;
	NSIndexSet* _intersectingRowsIndexSet;
	TSUCellCoord _firstCellID;
	TSUCellCoord _lastCellID;

}

@property (nonatomic,readonly) TSUModelCellRect boundingModelCellRect; 
@property (nonatomic,readonly) TSUViewCellRect boundingViewCellRect; 
@property (assign,nonatomic) TSUCellRect boundingCellRange;                         //@synthesize boundingCellRange=_boundingCellRange - In the implementation block
@property (assign,nonatomic) unsigned long long cellCount;                          //@synthesize cellCount=_cellCount - In the implementation block
@property (nonatomic,retain) NSIndexSet * intersectingColumnsIndexSet;              //@synthesize intersectingColumnsIndexSet=_intersectingColumnsIndexSet - In the implementation block
@property (nonatomic,retain) NSIndexSet * intersectingRowsIndexSet;                 //@synthesize intersectingRowsIndexSet=_intersectingRowsIndexSet - In the implementation block
@property (assign,nonatomic) TSUCellCoord firstCellID;                              //@synthesize firstCellID=_firstCellID - In the implementation block
@property (assign,nonatomic) TSUCellCoord lastCellID;                               //@synthesize lastCellID=_lastCellID - In the implementation block
@property (nonatomic,readonly) const vector<TSUCellRect* cellRanges;                //@synthesize cellRanges=_cellRanges - In the implementation block
@property (nonatomic,readonly) unsigned long long cellRangeCount; 
@property (nonatomic,readonly) char isEmpty; 
@property (nonatomic,readonly) char isRectangle; 
@property (nonatomic,readonly) unsigned long long sizeClass; 
@property (nonatomic,readonly) TSUCellCoord boundingTopLeftCellID; 
@property (nonatomic,readonly) TSUCellCoord boundingBottomRightCellID; 
@property (nonatomic,readonly) unsigned numberOfIntersectingColumns; 
@property (nonatomic,readonly) unsigned numberOfIntersectingRows; 
+(id)regionFromRange:(TSUCellRect)arg1 ;
+(id)invalidRegion;
+(id)region:(id)arg1 addingRange:(TSUCellRect)arg2 ;
+(id)region:(id)arg1 subtractingRange:(TSUCellRect)arg2 ;
+(id)region:(id)arg1 intersectingRange:(TSUCellRect)arg2 ;
+(id)unionEveryRangeInRegion:(id)arg1 withRange:(TSUCellRect)arg2 ;
+(id)region:(id)arg1 addingRegion:(id)arg2 ;
+(id)region:(id)arg1 subtractingRegion:(id)arg2 ;
+(id)regionFillingColumnsFromRegion:(id)arg1 ;
+(id)regionFillingRowsFromRegion:(id)arg1 ;
+(id)regionFromRowIndices:(id)arg1 ;
+(id)regionFromColumnIndices:(id)arg1 ;
+(id)regionFromRowIndices:(id)arg1 columnRange:(NSRange)arg2 ;
+(id)regionFromColumnIndices:(id)arg1 rowRange:(NSRange)arg2 ;
+(id)regionFromColumnIndexes:(id)arg1 rowIndexes:(id)arg2 ;
+(id)regionFromCellIDVector:(const vector<TSUCellCoord, std::__1::allocator<TSUCellCoord>>*)arg1 ;
+(id)regionFromCellRangeVector:(const vector<TSUCellRect, std::__1::allocator<TSUCellRect>>*)arg1 ;
+(id)regionFromMergeList:(const vector<TSUCellRect, std::__1::allocator<TSUCellRect>>*)arg1 ;
+(id)regionFromViewCellRectVector:(const vector<TSUViewCellRect, std::__1::allocator<TSUViewCellRect>>*)arg1 ;
+(id)regionFromViewCellRect:(TSUViewCellRect)arg1 ;
+(vector<TSUCellRect, std::__1::allocator<TSUCellRect>>*)combineNonOverlappingCellRanges:(vector<TSUCellRect, std::__1::allocator<TSUCellRect>>*)arg1 addingOverlappingCellRanges:(vector<TSUCellRect, std::__1::allocator<TSUCellRect>>*)arg2 ;
+(id)regionFromCellMap:(id)arg1 withTableInfo:(id)arg2 ;
+(id)regionFromModelCellRect:(TSUModelCellRect)arg1 ;
+(id)regionFromCellMap:(id)arg1 withTableInfo:(id)arg2 passingTest:(/*^block*/id)arg3 ;
+(id)regionFromCellCoordSet:(const TSCECellCoordSet*)arg1 ;
+(id)region:(id)arg1 subtractingRowIndexes:(id)arg2 ;
+(id)region:(id)arg1 subtractingColumnIndexes:(id)arg2 ;
+(id)region:(id)arg1 intersectingRegion:(id)arg2 ;
+(id)regionFromCellDiffMap:(id)arg1 withTableInfo:(id)arg2 ;
+(id)regionFromCellUIDVector:(const vector<TSKUIDStructCoord, std::__1::allocator<TSKUIDStructCoord>>*)arg1 withTableInfo:(id)arg2 ;
+(id)regionFromOverlappingCellRangeVector:(const vector<TSUCellRect, std::__1::allocator<TSUCellRect>>*)arg1 ;
+(id)regionFromModelMergeList:(const vector<TSUModelCellRect, std::__1::allocator<TSUModelCellRect>>*)arg1 ;
+(id)regionFromMergeActionArray:(id)arg1 withTableInfo:(id)arg2 ;
+(id)regionFromPropertyListRepresentation:(id)arg1 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(char)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(id)description;
-(id)init;
-(id)mutableCopyWithZone:(NSZone*)arg1 ;
-(char)isEmpty;
-(char)isValid;
-(id)propertyListRepresentation;
-(unsigned long long)cellCount;
-(void)enumerateRowsUsingBlock:(/*^block*/id)arg1 ;
-(unsigned long long)sizeClass;
-(id)regionByAddingRegion:(id)arg1 ;
-(TSUCellRect)boundingCellRange;
-(unsigned)numberOfIntersectingRows;
-(unsigned)numberOfIntersectingColumns;
-(void)enumerateColumnsUsingBlock:(/*^block*/id)arg1 ;
-(unsigned long long)cellRangeCount;
-(id)regionOffsetBy:(TSUColumnRowOffset)arg1 ;
-(TSUCellCoord)suitableAnchor;
-(TSUCellCoord)suitableCursor;
-(char)equalsCellRange:(TSUCellRect)arg1 ;
-(char)containsCellID:(TSUCellCoord)arg1 ;
-(id)regionByAddingRange:(TSUCellRect)arg1 ;
-(id)regionBySubtractingRange:(TSUCellRect)arg1 ;
-(char)equalsCellRegion:(id)arg1 ;
-(char)containsCellRegion:(id)arg1 ;
-(char)intersectsCellRange:(TSUCellRect)arg1 ;
-(char)containsCellRange:(TSUCellRect)arg1 ;
-(void)p_insertRangeIntoRegion:(TSUCellRect)arg1 ;
-(void)p_calculateAncillaryInformation;
-(void)enumerateCellRangesUsingBlock:(/*^block*/id)arg1 ;
-(id)regionByIntersectingRange:(TSUCellRect)arg1 ;
-(id)regionByUnioningEveryRangeInRegionWithRange:(TSUCellRect)arg1 ;
-(id)regionBySubtractingRegion:(id)arg1 ;
-(id)regionByRemovingRows:(id)arg1 ;
-(id)regionByRemovingColumns:(id)arg1 ;
-(id)regionByIntersectingRowIndices:(id)arg1 ;
-(id)regionByIntersectingColumnIndices:(id)arg1 ;
-(id)regionByAddingRows:(id)arg1 ;
-(id)regionByAddingColumns:(id)arg1 ;
-(id)regionByApplyingRowMapping:(id)arg1 ;
-(char)isRectangle;
-(char)partiallyIntersectsCellRange:(TSUCellRect)arg1 ;
-(char)intersectsColumn:(unsigned short)arg1 ;
-(char)intersectsRow:(unsigned)arg1 ;
-(NSIndexSet *)intersectingColumnsIndexSet;
-(NSIndexSet *)intersectingRowsIndexSet;
-(void)enumerateCellIDsUsingBlock:(/*^block*/id)arg1 ;
-(void)enumerateInDirection:(long long)arg1 usingBlock:(/*^block*/id)arg2 ;
-(void)enumerateRowRangesUsingBlock:(/*^block*/id)arg1 ;
-(void)enumerateColumnRangesUsingBlock:(/*^block*/id)arg1 ;
-(void)fillCellRangeRowMajorSet:(set<TSUCellRect, TSTCellRangeRowMajorLess, std::__1::allocator<TSUCellRect>>*)arg1 leftToRight:(char)arg2 ;
-(void)saveToMessage:(CellRegion*)arg1 ;
-(id)prunedCellRegionAgainstTable:(id)arg1 behavior:(unsigned long long)arg2 ;
-(id)initFromMessage:(const CellRegion*)arg1 ;
-(TSUCellCoord)firstCellID;
-(id)regionByTrimmingAroundRowIndices:(id)arg1 ;
-(id)regionByTrimmingAroundColumnIndices:(id)arg1 ;
-(char)intersectsCellRegion:(id)arg1 ;
-(id)regionBySubtractingColumnIndexes:(id)arg1 ;
-(TSUCellCoord)boundingTopLeftCellID;
-(id)regionBySubtractingRowIndexes:(id)arg1 ;
-(id)newRightToLeftIterator;
-(id)newIterator;
-(TSUCellCoord)lastCellID;
-(void)enumerateMissingRowsIntersectingCellRange:(TSUCellRect)arg1 usingBlock:(/*^block*/id)arg2 ;
-(void)enumerateRowsIntersectingCellRange:(TSUCellRect)arg1 usingBlock:(/*^block*/id)arg2 ;
-(void)enumerateMissingColumnsIntersectingCellRange:(TSUCellRect)arg1 usingBlock:(/*^block*/id)arg2 ;
-(void)enumerateColumnsIntersectingCellRange:(TSUCellRect)arg1 usingBlock:(/*^block*/id)arg2 ;
-(id)intersectingColumnsInRow:(unsigned)arg1 ;
-(char)partiallyIntersectsModelCellRect:(TSUModelCellRect)arg1 ;
-(id)regionByMovingColumnsFromRange:(NSRange)arg1 toIndex:(unsigned short)arg2 ;
-(id)regionByMovingRowsFromRange:(NSRange)arg1 toIndex:(unsigned)arg2 ;
-(vector<TSUCellRect, std::__1::allocator<TSUCellRect>>*)subRangesOfCellCount:(unsigned long long)arg1 ;
-(id)regionByIntersectingRegion:(id)arg1 ;
-(void)enumerateModelCellRectsUsingBlock:(/*^block*/id)arg1 ;
-(vector<TSUModelCellRect, std::__1::allocator<TSUModelCellRect>>*)modelCellRanges;
-(char)containsModelCellCoord:(TSUModelCellCoord)arg1 ;
-(id)regionByAddingModelCellRect:(TSUModelCellRect)arg1 ;
-(id)regionBySubtractingModelCellRect:(TSUModelCellRect)arg1 ;
-(TSUModelCellRect)boundingModelCellRect;
-(id)regionBySubtractingModelCellRegion:(id)arg1 ;
-(char)intersectsModelCellRect:(TSUModelCellRect)arg1 ;
-(TSUCellCoord)boundingBottomRightCellID;
-(char)containsModelCellRect:(TSUModelCellRect)arg1 ;
-(void)enumerateRowRangesInReverseUsingBlock:(/*^block*/id)arg1 ;
-(void)enumerateColumnRangesInReverseUsingBlock:(/*^block*/id)arg1 ;
-(const vector<TSUCellRect*)cellRanges;
-(id)p_copy;
-(id)prunedCellRegionAgainstTable:(id)arg1 behavior:(unsigned long long)arg2 usingBlock:(/*^block*/id)arg3 ;
-(void)p_copyFromRegion:(id)arg1 ;
-(id)regionByCollapsingRangesForRemovedRows:(id)arg1 ;
-(id)regionByCollapsingRangesForRemovedColumns:(id)arg1 ;
-(id)regionUpToColumnIndex:(unsigned short)arg1 ;
-(id)regionUpToColumnIndexRtoL:(unsigned short)arg1 maxColumnIndex:(unsigned short)arg2 ;
-(id)regionAfterColumnIndex:(unsigned short)arg1 ;
-(id)regionAfterColumnIndexRtoL:(unsigned short)arg1 ;
-(id)regionUpToRowIndex:(unsigned)arg1 ;
-(id)regionAfterRowIndex:(unsigned)arg1 ;
-(TSUCellRect)largestRangeContainingCellID:(TSUCellCoord)arg1 ;
-(id)isSingleCellWideOrHigh:(id)arg1 ;
-(id)newBottomToTopIterator;
-(void)enumerateColumnsInReverseUsingBlock:(/*^block*/id)arg1 ;
-(void)enumerateRowsInReverseUsingBlock:(/*^block*/id)arg1 ;
-(void)enumerateGridColumnsUsingBlock:(/*^block*/id)arg1 ;
-(void)enumerateGridRowsUsingBlock:(/*^block*/id)arg1 ;
-(void)setBoundingCellRange:(TSUCellRect)arg1 ;
-(void)setCellCount:(unsigned long long)arg1 ;
-(void)setFirstCellID:(TSUCellCoord)arg1 ;
-(void)setLastCellID:(TSUCellCoord)arg1 ;
-(void)setIntersectingColumnsIndexSet:(NSIndexSet *)arg1 ;
-(void)setIntersectingRowsIndexSet:(NSIndexSet *)arg1 ;
-(id)regionByAddingModelCellRegion:(id)arg1 ;
-(TSUViewCellRect)boundingViewCellRect;
-(id)regionByAddingViewCellRect:(TSUViewCellRect)arg1 ;
-(id)regionBySubtractingViewCellRect:(TSUViewCellRect)arg1 ;
-(id)regionByAddingViewCellRegion:(id)arg1 ;
-(id)regionBySubtractingViewCellRegion:(id)arg1 ;
-(void)enumerateViewCellRectsUsingBlock:(/*^block*/id)arg1 ;
-(void)fillCellRangeColMajorSet:(set<TSUCellRect, TSTCellRangeColumnMajorLess, std::__1::allocator<TSUCellRect>>*)arg1 topToBottom:(char)arg2 ;
@end

