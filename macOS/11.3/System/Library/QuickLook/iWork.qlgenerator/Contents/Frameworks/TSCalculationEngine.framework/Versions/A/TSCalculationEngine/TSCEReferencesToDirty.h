/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:57 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/QuickLook/iWork.qlgenerator/Contents/Frameworks/TSCalculationEngine.framework/Versions/A/TSCalculationEngine
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSCalculationEngine/TSCalculationEngine-Structs.h>
#import <TSPersistence/TSPObject.h>

@class TSCECalculationEngine, TSCECellDirtier;

@interface TSCEReferencesToDirty : TSPObject {

	os_unfair_lock_s _dirtyingMutex;
	TSCECalculationEngine* _calcEngine;
	TSCECellDirtier* _cellRefDirtier;
	TSUIndexSet* _toDirtyOwnerIds;
	TSCEInternalCellRefSet* _toDirtyInternalCellRefs;
	TSCECellRefSet* _toDirtyCellRefs;
	vector<TSCEInternalRangeReference, std::__1::allocator<TSCEInternalRangeReference>>* _toDirtyRangeRefs;
	char _shouldPerformDetectAndRepairConsistencyViolations;
	char _shouldCleanGraphForConsistencyViolation;
	TSCEInternalCellRefSet* _calcCellsInProgress;
	char _debugOnly_DidDetectAndRepairConsistencyViolations;
	char _debugOnly_DidCleanGraphForConsistencyViolation;

}

@property (nonatomic,readonly) TSCECalculationEngine * calcEngine;                                  //@synthesize calcEngine=_calcEngine - In the implementation block
@property (nonatomic,readonly) char isEmptyForDirtying; 
@property (nonatomic,readonly) char isEmptyForArchiving; 
@property (assign,nonatomic) char shouldPerformDetectAndRepairConsistencyViolations;                //@synthesize shouldPerformDetectAndRepairConsistencyViolations=_shouldPerformDetectAndRepairConsistencyViolations - In the implementation block
@property (assign,nonatomic) char shouldCleanGraphForConsistencyViolation;                          //@synthesize shouldCleanGraphForConsistencyViolation=_shouldCleanGraphForConsistencyViolation - In the implementation block
@property (nonatomic,readonly) char debugOnly_DidDetectAndRepairConsistencyViolations;              //@synthesize debugOnly_DidDetectAndRepairConsistencyViolations=_debugOnly_DidDetectAndRepairConsistencyViolations - In the implementation block
@property (nonatomic,readonly) char debugOnly_DidCleanGraphForConsistencyViolation;                 //@synthesize debugOnly_DidCleanGraphForConsistencyViolation=_debugOnly_DidCleanGraphForConsistencyViolation - In the implementation block
-(void)commonInit;
-(void)willClose;
-(void)loadFromUnarchiver:(id)arg1 ;
-(void)saveToArchiver:(id)arg1 ;
-(TSCECalculationEngine *)calcEngine;
-(void)setCalculationEngine:(id)arg1 ;
-(id)initWithCalcEngine:(id)arg1 ;
-(char)isEmptyForDirtying;
-(void)dirtyAllCellsInOwnerId:(unsigned short)arg1 ;
-(void)dirtyInternalRangeRef:(const TSCEInternalRangeReference*)arg1 ;
-(char)shouldCleanGraphForConsistencyViolation;
-(void)setShouldCleanGraphForConsistencyViolation:(char)arg1 ;
-(void)_flushDirtyOwnerIdsWithDepTracker:(TSCEDependencyTracker*)arg1 startTime:(id)arg2 timeout:(double)arg3 ;
-(void)_flushCellRefSetWithDepTracker:(TSCEDependencyTracker*)arg1 startTime:(id)arg2 timeout:(double)arg3 ;
-(void)_flushRangeRefsWithDepTracker:(TSCEDependencyTracker*)arg1 startTime:(id)arg2 timeout:(double)arg3 ;
-(void)_flushInternalCellRefSetWithDepTracker:(TSCEDependencyTracker*)arg1 startTime:(id)arg2 timeout:(double)arg3 ;
-(char)flushDirtyReferencesForSeconds:(double)arg1 ;
-(void)setShouldPerformDetectAndRepairConsistencyViolations:(char)arg1 ;
-(char)isEmptyForArchiving;
-(void)dirtyAllCellsInOwner:(const TSKUIDStruct*)arg1 ;
-(void)dirtyCellRef:(const TSCECellRef*)arg1 ;
-(void)dirtyInternalCellRef:(const TSCEInternalCellReference*)arg1 ;
-(void)dirtyCoords:(const TSCECellCoordSet*)arg1 inOwnerId:(unsigned short)arg2 ;
-(void)dirtyCellRefs:(const TSCECellRefSet*)arg1 ;
-(void)dirtyInternalCellRefs:(const TSCEInternalCellRefSet*)arg1 ;
-(void)dirtyCellRefsInReferenceSet:(id)arg1 ;
-(void)dirtyRangeRef:(const TSCERangeRef*)arg1 ;
-(char)hasDirtyingToPerformForOwnerId:(unsigned short)arg1 ;
-(void)flushCellDirtier;
-(void)flushAllDirtyReferences;
-(void)addInProgressCalcCellRefs:(const TSCEInternalCellRefSet*)arg1 ;
-(char)isInProgressCalcCellRef:(const TSCECellRef*)arg1 ;
-(unsigned long long)numberOfInProgressCalcCellRef;
-(void)clearInProgressCalcCellRefs;
-(char)shouldPerformDetectAndRepairConsistencyViolations;
-(char)debugOnly_DidDetectAndRepairConsistencyViolations;
-(char)debugOnly_DidCleanGraphForConsistencyViolation;
@end

