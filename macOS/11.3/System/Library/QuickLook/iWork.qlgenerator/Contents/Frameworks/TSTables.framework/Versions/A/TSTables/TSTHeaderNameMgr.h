/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:53:00 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/QuickLook/iWork.qlgenerator/Contents/Frameworks/TSTables.framework/Versions/A/TSTables
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSTables/TSTables-Structs.h>
#import <TSPersistence/TSPObject.h>
#import <TSTables/TSCEHeaderNameProtocol.h>
#import <TSTables/TSTCellWillChangeProtocol.h>
#import <TSTables/TSCEFormulaOwning.h>

@protocol OS_dispatch_queue;
@class TSCECalculationEngine, NSObject, TSCENameTrie, NSMutableSet, NSCharacterSet, NSString;

@interface TSTHeaderNameMgr : TSPObject <TSCEHeaderNameProtocol, TSTCellWillChangeProtocol, TSCEFormulaOwning> {

	TSCECalculationEngine* _calcEngine;
	TSCECalculationEngine* _weakCalcEngine;
	NSObject*<OS_dispatch_queue> _headerNameMgrQueue;
	TSKUIDStruct _ownerUID;
	TSUCellCoord _nextPrecedentCoord;
	TSUCellCoord _allHeaderPerTablesPrecedent;
	TSUCellCoord _needsTileSplittingPrecedent;
	vector<TSTHeaderNameMgrTile *, std::__1::allocator<TSTHeaderNameMgrTile *>>* _nameFragmentTiles;
	unordered_map<TSUCellCoord, TSTHeaderNameMgrEntry *, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, TSTHeaderNameMgrEntry *>>>* _fragPrecedentToEntry;
	unordered_map<TSCEUidCellRef, TSCECellCoordSet, std::__1::hash<TSCEUidCellRef>, std::__1::equal_to<TSCEUidCellRef>, std::__1::allocator<std::__1::pair<const TSCEUidCellRef, TSCECellCoordSet>>>* _fragPrecedentsUsedByCellRef;
	unordered_map<TSKUIDStruct, TSTHeaderPerTable *, std::__1::hash<TSKUIDStruct>, std::__1::equal_to<TSKUIDStruct>, std::__1::allocator<std::__1::pair<const TSKUIDStruct, TSTHeaderPerTable *>>>* _perTableInfo;
	unordered_map<TSUCellCoord, TSKUIDStruct, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, TSKUIDStruct>>>* _headerPerTablePrecedentToTableUID;
	TSCENameTrie* _namePrefixIndex;
	NSMutableSet* _tilesToConsiderSplitting;
	char _isClosing;
	TSKUIDStruct _nrm_ownerUID;
	NSCharacterSet* _whitespaceToBreakAt;

}

@property (nonatomic,readonly) TSCECalculationEngine * calcEngine; 
@property (nonatomic,readonly) char isClosing; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)dealloc;
-(NSString *)description;
-(id)initWithContext:(id)arg1 ;
-(char)isClosing;
-(void)setup;
-(void)willClose;
-(unsigned long long)numberOfTiles;
-(long long)evaluationMode;
-(void)loadFromUnarchiver:(id)arg1 ;
-(void)saveToArchiver:(id)arg1 ;
-(TSKUIDStruct)formulaOwnerUID;
-(TSKUIDStruct)ownerUID;
-(TSCECalculationEngine *)calcEngine;
-(unsigned short)ownerKind;
-(id)linkedResolver;
-(void)writeResultsForCalcEngine:(id)arg1 ;
-(void)invalidateForCalcEngine:(id)arg1 ;
-(TSCERecalculationState)evaluateFormulaAt:(TSUCellCoord)arg1 withCalcEngine:(id)arg2 recalcOptions:(TSCERecalculationState)arg3 ;
-(TSCERangeRef)baseHeaderColumnsForCell:(const TSCECellRef*)arg1 ;
-(TSCERangeRef)baseHeaderRowsForCell:(const TSCECellRef*)arg1 ;
-(TSCECellRefSet*)nameFragmentPrecedentsForReferenceString:(id)arg1 ;
-(int)registerWithCalcEngine:(id)arg1 ;
-(void)setCalcEngine:(TSCECalculationEngine *)arg1 ;
-(void)beginTrackingNamesInTable:(const TSKUIDStruct*)arg1 ;
-(void)endTrackingNamesInTable:(const TSKUIDStruct*)arg1 ;
-(void)updateTrackedHeaders:(const TSKUIDStruct*)arg1 ;
-(void)unregisterFromCalcEngine;
-(id)initWithContext:(id)arg1 calcEngine:(id)arg2 ;
-(TSKUIDStruct)NRM_formulaOwnerUID;
-(void)updateTrackedHeadersForDocumentLocaleChange:(const TSKUIDStruct*)arg1 ;
-(void)setNRM_formulaOwnerUID:(const TSKUIDStruct*)arg1 ;
-(TSCECellRefSet*)headerCellsMatching:(id)arg1 limitToTable:(const TSKUIDStruct*)arg2 includePrefixes:(char)arg3 ;
-(id)anyRefForRangeForHeaderCell:(const TSCECellRef*)arg1 usePreserveFlags:(char)arg2 ;
-(TSCERangeRef)spanningRangeForHeaderCell:(const TSCECellRef*)arg1 ;
-(id)subsetForReferenceName:(id)arg1 limitToTable:(const TSKUIDStruct*)arg2 includePrefixes:(char)arg3 ;
-(TSCECellRefSet*)allHeaderCellRefsLimitedToTable:(const TSKUIDStruct*)arg1 ;
-(id)stringInHeaderCell:(const TSCECellRef*)arg1 ;
-(void)willApplyCell:(id)arg1 baseCellCoord:(TSUModelCellCoord)arg2 tableUID:(const TSKUIDStruct*)arg3 ;
-(void)willApplyBaseCellMap:(id)arg1 tableUID:(const TSKUIDStruct*)arg2 ;
-(void)updateTableUIDFrom:(const TSKUIDStruct*)arg1 toTableUID:(const TSKUIDStruct*)arg2 ;
-(char)referenceNameIsUnique:(id)arg1 forReference:(const RefTypeHolder<TSCERangeRef, 2>*)arg2 contextTable:(const TSKUIDStruct*)arg3 ;
-(void)willApplyConcurrentCellMap:(id)arg1 tableUID:(const TSKUIDStruct*)arg2 ;
-(void)willRemoveRows:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg1 tableUID:(const TSKUIDStruct*)arg2 ;
-(void)unpackEntryAfterUnarchive:(TSTHeaderNameMgrEntry*)arg1 ;
-(void)addChangedTile:(id)arg1 ;
-(TSUCellCoord)getNextPrecedentCoord:(char)arg1 ;
-(void)setEntry:(TSTHeaderNameMgrEntry*)arg1 forPrecedentCoord:(const TSUCellCoord*)arg2 ;
-(TSTHeaderNameMgrEntry*)fragmentEntryForString:(id)arg1 createIfMissing:(char)arg2 ;
-(id)namePrefixIndex;
-(vector<NSString *, std::__1::allocator<NSString *>>*)wordFragmentsFromString:(id)arg1 savePreserveFlags:(char)arg2 ;
-(void)usedPrecedentCoord:(const TSUCellCoord*)arg1 ;
-(void)waitForQueueToDrain;
-(TSTHeaderPerTable*)perTableEntryForTable:(const TSKUIDStruct*)arg1 createIfMissing:(char)arg2 ;
-(void)updateTrackedHeaders:(const TSKUIDStruct*)arg1 checkForEmptyHeaders:(char)arg2 ;
-(TSTHeaderNameMgrEntry*)fragmentEntryForNameFragmentPrecedent:(const TSUCellCoord*)arg1 ;
-(id)findTileForString:(id)arg1 findClosest:(char)arg2 ;
-(id)findTileForString:(id)arg1 findClosest:(char)arg2 foundAtOffset:(unsigned long long*)arg3 ;
-(void)handleFullTile:(id)arg1 ;
-(void)p_updateWithWordFragments:(const vector<NSString *, std::__1::allocator<NSString *>>*)arg1 atCellCoord:(const TSKUIDStructCoord*)arg2 tableUID:(const TSKUIDStruct*)arg3 ;
-(void)p_updateText:(id)arg1 atCellCoord:(const TSKUIDStructCoord*)arg2 tableUID:(const TSKUIDStruct*)arg3 ;
-(void)updateText:(id)arg1 atCellCoord:(const TSKUIDStructCoord*)arg2 tableUID:(const TSKUIDStruct*)arg3 ;
-(void)p_willApplyCell:(id)arg1 baseCellCoord:(TSUModelCellCoord)arg2 tableUID:(const TSKUIDStruct*)arg3 ;
-(id)tileForEntry:(TSTHeaderNameMgrEntry*)arg1 ;
-(void)updateWithIndexingChunks:(id)arg1 ;
-(void)p_processWorkForTable:(const TSKUIDStruct*)arg1 ;
-(id)headerNameMgrQueue;
-(void)clearTextAtCellCoord:(const TSKUIDStructCoord*)arg1 tableUID:(const TSKUIDStruct*)arg2 ;
@end

