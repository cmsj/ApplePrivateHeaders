/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:58 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/QuickLook/iWork.qlgenerator/Contents/Frameworks/TSDrawables.framework/Versions/A/TSDrawables
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSDrawables/TSDrawables-Structs.h>
#import <TSDrawables/TSDPathSource.h>
#import <TSDrawables/TSDMixing.h>
#import <TSDrawables/TSDSmartPathSource.h>

@interface TSDPointPathSource : TSDPathSource <TSDMixing, TSDSmartPathSource> {

	unsigned long long mType;
	CGPoint mPoint;
	CGSize mNaturalSize;

}

@property (assign,nonatomic) unsigned long long type; 
@property (assign,nonatomic) CGPoint point; 
@property (nonatomic,readonly) CGPoint minPointValue; 
@property (nonatomic,readonly) CGPoint maxPointValue; 
@property (nonatomic,readonly) unsigned long long starPoints; 
@property (nonatomic,readonly) unsigned long long maxStarPoints; 
@property (nonatomic,readonly) unsigned long long minStarPoints; 
@property (nonatomic,readonly) double starRadius; 
@property (nonatomic,readonly) double maxStarRadius; 
@property (nonatomic,readonly) double minStarRadius; 
@property (nonatomic,readonly) double arrowHead; 
@property (nonatomic,readonly) double maxArrowHead; 
@property (nonatomic,readonly) double minArrowHead; 
@property (nonatomic,readonly) double arrowIndent; 
@property (nonatomic,readonly) double maxArrowIndent; 
@property (nonatomic,readonly) double minArrowIndent; 
+(id)rightSingleArrowWithPoint:(CGPoint)arg1 naturalSize:(CGSize)arg2 ;
+(id)doubleArrowWithPoint:(CGPoint)arg1 naturalSize:(CGSize)arg2 ;
+(id)starWithPoint:(CGPoint)arg1 naturalSize:(CGSize)arg2 ;
+(id)pathSourceWithType:(unsigned long long)arg1 point:(CGPoint)arg2 naturalSize:(CGSize)arg3 ;
+(id)leftSingleArrowWithPoint:(CGPoint)arg1 naturalSize:(CGSize)arg2 ;
+(id)plusWithPoint:(CGPoint)arg1 naturalSize:(CGSize)arg2 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(char)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(id)description;
-(id)init;
-(void)setType:(unsigned long long)arg1 ;
-(unsigned long long)type;
-(char)isRectangular;
-(CGPoint)point;
-(void)setPoint:(CGPoint)arg1 ;
-(CGSize)naturalSize;
-(void)setNaturalSize:(CGSize)arg1 ;
-(char)isCircular;
-(id)initWithArchive:(const PathSourceArchive*)arg1 ;
-(void)saveToArchive:(PathSourceArchive*)arg1 ;
-(id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2 ;
-(id)bezierPathWithoutFlips;
-(void)scaleToNaturalSize:(CGSize)arg1 ;
-(id)initWithType:(unsigned long long)arg1 point:(CGPoint)arg2 naturalSize:(CGSize)arg3 ;
-(CGPoint)p_getControlKnobPointForArrow;
-(CGPoint)p_getControlKnobPointForStarPoints;
-(CGPoint)p_getControlKnobPointForStarInnerRadius;
-(CGPoint)p_getControlKnobPointForPlus;
-(void)p_setControlKnobPointForArrow:(CGPoint)arg1 ;
-(void)p_setControlKnobPointForStarPoints:(CGPoint)arg1 ;
-(void)p_setControlKnobPointForStarInnerRadius:(CGPoint)arg1 ;
-(void)p_setControlKnobPointForPlus:(CGPoint)arg1 ;
-(const CGPathRef)p_newArrowPath;
-(const CGPathRef)p_newStarPath;
-(const CGPathRef)p_newPlusPath;
-(char)p_isRightFacingArrow;
-(CGPoint)getControlKnobPosition:(unsigned long long)arg1 ;
-(unsigned long long)numberOfControlKnobs;
-(CGPoint)minPointValue;
-(CGPoint)maxPointValue;
-(char)p_isFlippedDoubleArrow;
-(long long)mixingTypeWithObject:(id)arg1 context:(id)arg2 ;
-(char)p_isArrowType;
-(unsigned long long)starPoints;
-(unsigned long long)maxStarPoints;
-(unsigned long long)minStarPoints;
-(double)starRadius;
-(double)maxStarRadius;
-(double)minStarRadius;
-(double)arrowIndent;
-(double)maxArrowIndent;
-(double)minArrowIndent;
-(double)arrowHead;
-(double)maxArrowHead;
-(double)minArrowHead;
-(id)inferredAccessibilityDescription;
@end

