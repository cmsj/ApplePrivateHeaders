/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:58 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/QuickLook/iWork.qlgenerator/Contents/Frameworks/TSDrawables.framework/Versions/A/TSDrawables
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSDrawables/TSDrawables-Structs.h>
#import <TSDrawables/TSDStyledLayout.h>

@class TSUBezierPath, TSDPathSource, TSDEditableBezierPathSource, TSDInfoGeometry, TSDMutableStroke, TSDFill, NSArray, TSDShapeInfo, TSDLineEnd;

@interface TSDShapeLayout : TSDStyledLayout {

	struct {
		unsigned path : 1;
		unsigned pathIsOpen : 1;
		unsigned pathIsLineSegment : 1;
		unsigned headAndTail : 1;
		unsigned headLineEnd : 1;
		unsigned tailLineEnd : 1;
		unsigned clippedPath : 1;
	}  mShapeInvalidFlags;
	TSUBezierPath* mCachedPath;
	char mCachedPathIsOpen;
	char mCachedPathIsLineSegment;
	SCD_Struct_TS12 mCachedPathBoundsStruct;
	SCD_Struct_TS12 mCachedPathBoundsWithoutStrokeStruct;
	TSUBezierPath* mCachedClippedPath;
	SCD_Struct_TS12 mCachedClippedPathStroked;
	SCD_Struct_TS12 mCachedClippedPathRotatedStroked;
	CGAffineTransform mClippedPathRotatedTransform;
	SCD_Struct_TS12 mCachedAlignmentFrame;
	SCD_Struct_TS12 mCachedAlignmentFrameInRoot;
	CGAffineTransform mCachedAlignmentFrameInRootTransformInRoot;
	CGPoint mHeadPoint;
	CGPoint mTailPoint;
	CGPoint mHeadLineEndPoint;
	CGPoint mTailLineEndPoint;
	double mHeadLineEndAngle;
	double mTailLineEndAngle;
	long long mHeadCutSegment;
	long long mTailCutSegment;
	double mHeadCutT;
	double mTailCutT;
	TSDPathSource* mShrunkenPathSource;
	TSDPathSource* mOriginalShrunkenPathSource;
	TSDEditableBezierPathSource* mCachedEditableBezierPathSource;
	TSDPathSource* mCachedPathSource;
	TSDPathSource* mResizePathSource;
	TSDInfoGeometry* mResizeInfoGeometry;
	TSDInfoGeometry* mInitialInfoGeometry;
	TSDMutableStroke* mDynamicStroke;
	TSDFill* mDynamicFill;
	NSArray* mDynamicStrokeOffsetArray;
	char mIsDynamicallyInvisible;
	CGSize mLastParentLimitedSize;

}

@property (nonatomic,readonly) TSDFill * fill; 
@property (nonatomic,readonly) TSDShapeInfo * shapeInfo; 
@property (nonatomic,readonly) TSDPathSource * pathSource; 
@property (nonatomic,readonly) TSUBezierPath * path; 
@property (nonatomic,readonly) CGRect pathBounds; 
@property (nonatomic,readonly) CGRect pathBoundsWithoutStroke; 
@property (nonatomic,readonly) char pathIsOpen; 
@property (nonatomic,readonly) char pathIsLineSegment; 
@property (nonatomic,readonly) TSDInfoGeometry * layoutInfoGeometry; 
@property (nonatomic,readonly) CGPoint headPoint; 
@property (nonatomic,readonly) CGPoint tailPoint; 
@property (nonatomic,readonly) CGPoint headLineEndPoint; 
@property (nonatomic,readonly) CGPoint tailLineEndPoint; 
@property (nonatomic,readonly) double headLineEndAngle; 
@property (nonatomic,readonly) double tailLineEndAngle; 
@property (nonatomic,readonly) char isTailEndOnLeft; 
@property (nonatomic,readonly) TSUBezierPath * clippedPathForLineEnds; 
@property (nonatomic,readonly) TSDLineEnd * strokeHeadLineEnd; 
@property (nonatomic,readonly) TSDLineEnd * strokeTailLineEnd; 
@property (nonatomic,readonly) CGPoint unclippedTailPoint; 
@property (nonatomic,readonly) CGPoint unclippedHeadPoint; 
@property (nonatomic,readonly) char isFreehandDrawingSpacerShape; 
-(id)textWrapperForExteriorWrap;
-(void)dealloc;
-(void)invalidate;
-(TSUBezierPath *)path;
-(id)initWithInfo:(id)arg1 ;
-(CGSize)minimumSize;
-(void)validate;
-(id)stroke;
-(TSDFill *)fill;
-(void)setGeometry:(id)arg1 ;
-(void)invalidatePath;
-(int)wrapType;
-(TSUBezierPath *)clippedPathForLineEnds;
-(TSDLineEnd *)strokeHeadLineEnd;
-(TSDLineEnd *)strokeTailLineEnd;
-(CGPoint)headLineEndPoint;
-(CGPoint)tailLineEndPoint;
-(double)headLineEndAngle;
-(double)tailLineEndAngle;
-(void)p_validateHeadLineEnd;
-(void)p_validateTailLineEnd;
-(void)p_invalidateClippedPath;
-(void)p_validateHeadAndTail;
-(void)p_invalidateHead;
-(void)p_invalidateTail;
-(CGRect)pathBounds;
-(char)isInvisible;
-(void)invalidateFrame;
-(id)computeLayoutGeometry;
-(id)layoutGeometryFromInfo;
-(id)i_computeWrapPath;
-(void)processChangedProperty:(int)arg1 ;
-(id)i_computeWrapPathClosed:(char)arg1 ;
-(CGRect)boundsForStandardKnobs;
-(char)supportsRotation;
-(CGRect)alignmentFrame;
-(char)shouldBeDisplayedInShowMode;
-(CGPoint)centerForConnecting;
-(id)reliedOnLayouts;
-(CGRect)alignmentFrameInRoot;
-(char)supportsResize;
-(TSDPathSource *)pathSource;
-(TSDShapeInfo *)shapeInfo;
-(CGRect)shapeFrameWithTransform:(CGAffineTransform)arg1 ;
-(void)aliasPathForScale:(double)arg1 adjustedStroke:(id*)arg2 adjustedPath:(id*)arg3 startDelta:(CGPoint*)arg4 endDelta:(CGPoint*)arg5 ;
-(char)pathIsOpen;
-(CGRect)pathBoundsWithoutStroke;
-(char)pathIsLineSegment;
-(CGPoint)headPoint;
-(CGPoint)tailPoint;
-(id)editablePathSource;
-(void)invalidatePathBounds;
-(TSDInfoGeometry *)layoutInfoGeometry;
-(CGAffineTransform)computeLayoutTransform;
-(id)p_cachedPath;
-(CGRect)p_cachedPathBounds;
-(CGRect)p_cachedPathBoundsWithoutStroke;
-(char)p_cachedPathIsOpen;
-(char)p_cachedPathIsLineSegment;
-(id)p_createClippedPath;
-(CGRect)p_boundsOfLineEndForHead:(char)arg1 transform:(CGAffineTransform)arg2 ;
-(char)isInvisibleAutosizingShape;
-(void)aliasPathForScale:(double)arg1 originalStroke:(id)arg2 adjustedStroke:(id*)arg3 adjustedPath:(id*)arg4 startDelta:(CGPoint*)arg5 endDelta:(CGPoint*)arg6 ;
-(id)p_unitePath:(id)arg1 withLineEndForHead:(char)arg2 stroke:(id)arg3 ;
-(id)smartPathSource;
-(char)isTailEndOnLeft;
-(CGRect)aliasedAlignmentFrameForScale:(double)arg1 ;
-(char)canBeIntersected;
-(char)canResetTextAndObjectHandles;
-(CGPoint)unclippedHeadPoint;
-(CGPoint)unclippedTailPoint;
-(CGRect)frameForCullingWithBaseFrame:(CGRect)arg1 additionalTransform:(CGAffineTransform)arg2 ;
-(CGRect)baseFrameForFrameForCullingWithAdditionalTransform:(CGAffineTransform)arg1 ;
-(double)scaleForInlineClampingUnrotatedSize:(CGSize)arg1 withTransform:(CGAffineTransform)arg2 ;
-(CGRect)frameForPartitioning;
-(void)transferLayoutGeometryToInfo:(id)arg1 withAdditionalTransform:(CGAffineTransform)arg2 assertIfInDocument:(char)arg3 ;
-(char)isFreehandDrawingSpacerShape;
-(CGRect)shapeFrameWithTransform:(CGAffineTransform)arg1 strokeDrawOptions:(unsigned long long)arg2 ;
-(char)p_isInlineInsideParentContainerDynamicallyChangingAvailableSpace;
-(CGRect)p_cachedClippedPathStroked;
-(CGRect)p_updatedCachedClipRectIfNeededForRotation:(CGAffineTransform)arg1 ;
-(double)lineEndScale:(char)arg1 ;
-(char)shouldAdjustForStrokeWidthForCollabCursor;
-(char)supportsCalloutAttributes;
@end

