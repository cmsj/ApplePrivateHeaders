/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:53:00 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/QuickLook/iWork.qlgenerator/Contents/Frameworks/TSTables.framework/Versions/A/TSTables
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSTables/TSTables-Structs.h>
#import <TSKit/TSKSosBase.h>
#import <TSTables/TSCEFormulaOwning.h>
#import <TSTables/TSTGroupByChangeProtocol.h>
#import <TSTables/TSTCompatibilityVersionProviding.h>

@class NSArray, TSTGroupNode, NSMutableArray, TSTCategoryOwner, TSTGroupByChangeDistributor, TSKCustomFormatWrapper, TSTTableInfo, TSULocale, NSString;

@interface TSTGroupBy : TSKSosBase <TSCEFormulaOwning, TSTGroupByChangeProtocol, TSTCompatibilityVersionProviding> {

	UUIDData<TSP::UUIDData> _groupByUid;
	char _isEnabled;
	NSArray* _groupingColumns;
	NSArray* _columnAggregates;
	TSTGroupNode* _groupRoot;
	NSMutableArray* _aggregators;
	TSTCategoryOwner* _categoryOwner;
	TSUCellCoord _indirectAggTypeChangeFormulaCoord;
	TSUCellCoord _groupingColumnsFormulaCoord;
	TSUCellCoord _groupingColumnHeadersFormulaCoord;
	TSUCellCoord _allAggsInGroupRootFormulaCoord;
	TSUCellCoord _columnOrderChangedCoord;
	TSUCellCoord _rowOrderChangedCoord;
	TSUCellCoord _rowOrderChangedIgnoringRecalcCoord;
	TSTGroupByChangeDistributor* _groupByChangeDistributor;
	TSUCellCoord _nextAggFormulaCoord;
	os_unfair_lock_s _aggValuesLock;
	unordered_map<TSUCellCoord, TSTAggNode *, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, TSTAggNode *>>>* _aggNodesByFormulaCoord;
	unordered_map<TSKUIDStruct, TSTGroupNode *, std::__1::hash<TSKUIDStruct>, std::__1::equal_to<TSKUIDStruct>, std::__1::allocator<std::__1::pair<const TSKUIDStruct, TSTGroupNode *>>>* _groupNodesByGroupUid;
	unsigned long long _rebuildFormulasDeferredLevel;
	char _needsRebuildOfAggFormulas;
	unsigned long long _deferGroupByChangeNotificationsLevel;
	NSMutableArray* _deferredGroupByChangeNotifications;
	NSMutableArray* _calcEngineGroupByChangeNotifications;
	char _inCalcEngineMode;
	char _groupingColumnHeadersChanged;
	TSKCustomFormatWrapper* _customFormatForBlankGroup;
	TSKCustomFormatWrapper* _customFormatForErrorGroup;

}

@property (assign,nonatomic,__weak) TSTCategoryOwner * categoryOwner;                                      //@synthesize categoryOwner=_categoryOwner - In the implementation block
@property (nonatomic,readonly) TSTTableInfo * tableInfo; 
@property (retain,readonly) NSArray * groupingColumns;                                                     //@synthesize groupingColumns=_groupingColumns - In the implementation block
@property (readonly) unsigned char numberOfLevels; 
@property (assign,nonatomic) char isEnabled;                                                               //@synthesize isEnabled=_isEnabled - In the implementation block
@property (nonatomic,retain,readonly) TSTGroupByChangeDistributor * groupByChangeDistributor;              //@synthesize groupByChangeDistributor=_groupByChangeDistributor - In the implementation block
@property (nonatomic,retain,readonly) NSMutableArray * aggregators;                                        //@synthesize aggregators=_aggregators - In the implementation block
@property (nonatomic,readonly) NSArray * columnAggregates;                                                 //@synthesize columnAggregates=_columnAggregates - In the implementation block
@property (nonatomic,readonly) TSULocale * locale; 
@property (nonatomic,readonly) char isCategorized; 
@property (nonatomic,readonly) TSKUIDStruct baseTableUID; 
@property (assign,nonatomic) TSKUIDStruct groupByUid; 
@property (nonatomic,readonly) TSKUIDStruct topLevelGroupUid; 
@property (nonatomic,readonly) TSTGroupNode * topLevelGroupNode; 
@property (nonatomic,readonly) TSUCellCoord indirectAggTypeChangeFormulaCoord;                             //@synthesize indirectAggTypeChangeFormulaCoord=_indirectAggTypeChangeFormulaCoord - In the implementation block
@property (nonatomic,readonly) TSUCellCoord groupingColumnsFormulaCoord;                                   //@synthesize groupingColumnsFormulaCoord=_groupingColumnsFormulaCoord - In the implementation block
@property (nonatomic,readonly) TSUCellCoord groupingColumnHeadersFormulaCoord;                             //@synthesize groupingColumnHeadersFormulaCoord=_groupingColumnHeadersFormulaCoord - In the implementation block
@property (nonatomic,readonly) TSUCellCoord allAggsInGroupRootFormulaCoord;                                //@synthesize allAggsInGroupRootFormulaCoord=_allAggsInGroupRootFormulaCoord - In the implementation block
@property (nonatomic,readonly) TSCECellRef columnOrderChangedPrecedent; 
@property (nonatomic,readonly) TSCECellRef rowOrderChangedPrecedent; 
@property (nonatomic,readonly) TSCECellRef rowOrderChangedPrecedentIgnoringRecalc; 
@property (assign,nonatomic) char needsRebuildOfAggFormulas;                                               //@synthesize needsRebuildOfAggFormulas=_needsRebuildOfAggFormulas - In the implementation block
@property (nonatomic,retain,readonly) TSKCustomFormatWrapper * customFormatForBlankGroup;                  //@synthesize customFormatForBlankGroup=_customFormatForBlankGroup - In the implementation block
@property (nonatomic,retain,readonly) TSKCustomFormatWrapper * customFormatForErrorGroup;                  //@synthesize customFormatForErrorGroup=_customFormatForErrorGroup - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) unsigned long long archivingCompatibilityVersion; 
+(id)groupByForUID:(const TSKUIDStruct*)arg1 withCalcEngine:(id)arg2 ;
+(id)localizedNameForBlankGroupForDocumentLocale:(id)arg1 ;
+(id)localizedNameForErrorGroupForDocumentLocale:(id)arg1 ;
+(id)localizedTrueStringForBooleanGroupWithString:(id)arg1 documentLocale:(id)arg2 ;
+(id)localizedFalseStringForBooleanGroupWithString:(id)arg1 documentLocale:(id)arg2 ;
+(unsigned char)aggregateTypeForAggregateLabel:(id)arg1 locale:(id)arg2 ;
+(int)relativeLevelOfAncestorGroupUid:(const TSKUIDStruct*)arg1 ;
+(TSKUIDStruct)relativeAncestorGroupUid:(int)arg1 ;
+(char)isRelativeAncestorGroupUid:(const TSKUIDStruct*)arg1 ;
+(unsigned short)groupingComboForGroupingType:(int)arg1 ;
+(id)p_dateBySettingUnit:(unsigned long long)arg1 value:(long long)arg2 ofDate:(id)arg3 inCalendar:(id)arg4 ;
-(TSULocale *)locale;
-(char)isEnabled;
-(char)analyze;
-(void)setIsEnabled:(char)arg1 ;
-(void)teardown;
-(void)willRemoveGroup:(id)arg1 ;
-(char)isCategorized;
-(long long)evaluationMode;
-(unsigned char)numberOfLevels;
-(TSTTableInfo *)tableInfo;
-(void)didInitFromSOS;
-(void)encodeToArchive:(CategoryOwnerArchive_GroupByArchive*)arg1 archiver:(id)arg2 ;
-(TSKUIDStruct)ownerUID;
-(TSKUIDStruct)groupByUid;
-(TSKUIDStruct)topLevelGroupUid;
-(TSUCellCoord)groupingColumnsFormulaCoord;
-(TSCECellRef)columnOrderChangedPrecedent;
-(TSCECellRef)rowOrderChangedPrecedent;
-(char)isValidCategoryRef:(const TSCECategoryRef*)arg1 ;
-(vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef>>*)expandSpanningCategoryRef:(TSCECategoryRef)arg1 ;
-(id)calcEngine;
-(char)isSpanningCategoryRef:(const TSCECategoryRef*)arg1 ;
-(vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef>>*)promoteSpanningReferences:(vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef>>*)arg1 ;
-(unsigned short)ownerKind;
-(id)linkedResolver;
-(void)writeResultsForCalcEngine:(id)arg1 ;
-(void)invalidateForCalcEngine:(id)arg1 ;
-(TSCERecalculationState)evaluateFormulaAt:(TSUCellCoord)arg1 withCalcEngine:(id)arg2 recalcOptions:(TSCERecalculationState)arg3 ;
-(vector<TSCEValue, std::__1::allocator<TSCEValue>>*)valuesForCategoryRef:(const TSCECategoryRef*)arg1 ;
-(TSKUIDStruct)baseTableUID;
-(unsigned long long)numberOfGroupsAtLevel:(unsigned char)arg1 ;
-(id)groupNodeForGroupUid:(TSKUIDStruct)arg1 ;
-(void)enumerateGroupsAtLevel:(unsigned char)arg1 withBlock:(/*^block*/id)arg2 ;
-(vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef>>*)captureCategoryLabelRefsForViewRegion:(id)arg1 atLevel:(unsigned char)arg2 asSpanning:(char)arg3 forRows:(char)arg4 ;
-(vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef>>*)captureAnyCategoryRefsForViewRegion:(id)arg1 atLevel:(unsigned char)arg2 asSpanning:(char)arg3 ;
-(vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef>>*)captureCategoryRefsForViewRegion:(id)arg1 atLevel:(unsigned char)arg2 asSpanning:(char)arg3 ;
-(vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef>>*)categoryRefsForSpanningCategoryRef:(const TSCECategoryRef*)arg1 ;
-(unsigned char)aggregateTypeForCategoryRef:(const TSCECategoryRef*)arg1 ;
-(vector<TSCECellRef, std::__1::allocator<TSCECellRef>>*)cellRefsForCategoryRef:(const TSCECategoryRef*)arg1 atRowUid:(const TSKUIDStruct*)arg2 ;
-(TSCERangeRef)aggregateRangeRefForCategoryRef:(const TSCECategoryRef*)arg1 ;
-(vector<TSCECellRef, std::__1::allocator<TSCECellRef>>*)unorderedCellRefsForCategoryRef:(const TSCECategoryRef*)arg1 atRowUid:(const TSKUIDStruct*)arg2 ;
-(unordered_map<TSKUIDStruct, TSTGroupNode *, std::__1::hash<TSKUIDStruct>, std::__1::equal_to<TSKUIDStruct>, std::__1::allocator<std::__1::pair<const TSKUIDStruct, TSTGroupNode *>>>*)groupNodesByGroupUid;
-(id)aggNodeForAggFormulaCoord:(const TSUCellCoord*)arg1 ;
-(void)updateWithDocumentRoot:(id)arg1 ;
-(void)didAddRowUID:(TSKUIDStruct)arg1 toGroup:(id)arg2 ;
-(void)didAddGroupNode:(id)arg1 ;
-(NSMutableArray *)aggregators;
-(char)isRebuildFormulasDeferred;
-(void)setNeedsRebuildOfAggFormulas:(char)arg1 ;
-(void)didRemoveRowUID:(TSKUIDStruct)arg1 fromGroup:(id)arg2 ;
-(void)willRemoveGroupNode:(id)arg1 ;
-(TSTCategoryOwner *)categoryOwner;
-(unsigned char)anyAggregateTypeForColumnUID:(TSKUIDStruct)arg1 ;
-(void)enumerateAllGroupsWithBlock:(/*^block*/id)arg1 ;
-(id)groupNodeForRowUid:(TSKUIDStruct)arg1 atLevel:(unsigned char)arg2 ;
-(char)containsRowUid:(const TSKUIDStruct*)arg1 ;
-(unsigned char)groupLevelForGroupUid:(TSKUIDStruct)arg1 ;
-(unsigned char)aggregateTypeForColumnUID:(TSKUIDStruct)arg1 atGroupLevel:(unsigned char)arg2 ;
-(unsigned char)aggregateTypeForAggregateLabel:(id)arg1 ;
-(id)groupNodeForGroupValueHierarchyFromSplitter:(id)arg1 startAtComponent:(unsigned long long)arg2 startAtWord:(unsigned long long)arg3 preserveFlags:(TSUPreserveFlags*)arg4 ;
-(unsigned long long)archivingCompatibilityVersion;
-(void)startOfGroupingChangesBatch;
-(void)endOfGroupingChangesBatch;
-(void)setGroupByUid:(TSKUIDStruct)arg1 ;
-(void)remapTableUIDsInFormulasWithMap:(const TSKUIDStructMap*)arg1 calcEngine:(id)arg2 ;
-(id)initWithGroupings:(id)arg1 categoryOwner:(id)arg2 ;
-(char)isBlankGroupUid:(const TSKUIDStruct*)arg1 ;
-(char)isErrorGroupUid:(const TSKUIDStruct*)arg1 ;
-(TSTGroupByChangeDistributor *)groupByChangeDistributor;
-(void)enumerateAggregates:(/*^block*/id)arg1 ;
-(void)setGroupingColumnList:(id)arg1 ;
-(void)resetGroupBy;
-(NSArray *)groupingColumns;
-(char)isGroupingColumn:(const TSKUIDStruct*)arg1 ;
-(id)groupingColumnAtCategoryLevel:(unsigned char)arg1 ;
-(vector<TSCECategoryLevel, std::__1::allocator<TSCECategoryLevel>>*)groupingColumnLevelsForColumn:(const TSKUIDStruct*)arg1 ;
-(void)enumerateGroupingColumnsForColumn:(TSKUIDStruct)arg1 withBlock:(/*^block*/id)arg2 ;
-(void)setAggregateType:(unsigned char)arg1 forColumnUID:(TSKUIDStruct)arg2 atGroupLevel:(unsigned char)arg3 ;
-(id)initWithGroupings:(id)arg1 categoryOwner:(id)arg2 groupByUid:(const TSKUIDStruct*)arg3 ;
-(void)willMakeGroupingChangesInRowUIDs:(id)arg1 ;
-(id)aggregatesOnLevel:(unsigned char)arg1 ;
-(TSCECategoryRef)categoryRefForAggregateRangeRef:(const TSCERangeRef*)arg1 ;
-(id)prettyStringForCategoryRef:(const TSCECategoryRef*)arg1 forHostCellRef:(const TSCECellRef*)arg2 namingContext:(id)arg3 ;
-(id)valueForFormulaCoord:(const TSUCellCoord*)arg1 ;
-(TSUCellCoord)getNextAggFormulaCoord;
-(TSCECategoryRef)resolveCategoryRef:(const TSCECategoryRef*)arg1 atRowUid:(const TSKUIDStruct*)arg2 inHostTable:(const TSKUIDStruct*)arg3 ;
-(void)setCategoryOwner:(TSTCategoryOwner *)arg1 ;
-(void)checkForFormulaCoordUpgrade;
-(void)resetGroupings;
-(void)didChangeGroupByStructure;
-(id)initWithArchive:(const CategoryOwnerArchive_GroupByArchive*)arg1 forCategoryOwner:(id)arg2 ;
-(id)groupValueTupleForRowUid:(TSKUIDStruct)arg1 atLevel:(unsigned char)arg2 ;
-(void)removeRowUid:(const TSKUIDStruct*)arg1 forGroupValue:(id)arg2 ;
-(void)insertRowUid:(const TSKUIDStruct*)arg1 forGroupValue:(id)arg2 ;
-(void)removeRowUids:(id)arg1 ;
-(void)insertRowUids:(id)arg1 ;
-(void)setAggNode:(id)arg1 forFormulaCoord:(const TSUCellCoord*)arg2 ;
-(TSTGroupNode *)topLevelGroupNode;
-(void)markAllDependentsAsDirty;
-(void)didCreateGroup:(id)arg1 ;
-(void)didRemoveGroup:(id)arg1 ;
-(TSCECategoryRef)convertCategoryRefToRelativeAncestorUid:(const TSCECategoryRef*)arg1 atRowUid:(const TSKUIDStruct*)arg2 inHostTable:(const TSKUIDStruct*)arg3 ;
-(id)viewCellTractRefForCategoryRef:(const TSCECategoryRef*)arg1 atRowUid:(const TSKUIDStruct*)arg2 ;
-(char)createAggregatorsIfMissingAndAssert:(char)arg1 ;
-(TSKUIDStruct)resolveRelativeAncestorUid:(const TSKUIDStruct*)arg1 atRowUid:(const TSKUIDStruct*)arg2 ;
-(TSKUIDStruct)convertToRelativeAncestorUid:(const TSKUIDStruct*)arg1 atRowUid:(const TSKUIDStruct*)arg2 ;
-(void)dropAllAggregators;
-(char)isDeferringGroupByChangeNotifications;
-(void)beginDeferringRebuildFormulas;
-(void)deferGroupByChangeNotifications;
-(void)endDeferringRebuildFormulas;
-(void)resumeGroupByChangeNotifications;
-(void)addAggregator:(id)arg1 ;
-(void)usedAggFormulaCoord:(const TSUCellCoord*)arg1 ;
-(void)p_setupCustomFormatsWithLocale:(id)arg1 ;
-(void)resetAllAggsFormula;
-(void)resetGroupingColumnsFormula;
-(id)groupingColumnListCopy;
-(id)columnAggregateListCopy;
-(void)_removeAggregates:(id)arg1 ;
-(void)_addAggregates:(id)arg1 atLevel:(unsigned char)arg2 ;
-(id)aggregatorForColumn:(TSKUIDStruct)arg1 createIfMissing:(char)arg2 ;
-(id)findGroupNodeForValue:(id)arg1 atLevel:(unsigned char)arg2 createIfMissing:(char)arg3 ;
-(id)rowUidsForGroupValue:(id)arg1 atLevel:(unsigned char)arg2 ;
-(id)distinctValuesAtLevel:(unsigned char)arg1 ;
-(void)rebuildAllAggFormulas;
-(void)sendDeferredNotifictions:(id)arg1 ;
-(id)allGroupNodeUids;
-(void)setValue:(id)arg1 forFormulaCoord:(const TSUCellCoord*)arg2 ;
-(void)dropAggregator:(id)arg1 ;
-(id)createAggregatorOnColumn:(const TSKUIDStruct*)arg1 ;
-(id)p_columnNameForColumnUid:(const TSKUIDStruct*)arg1 ;
-(id)aggregateLabelForCategoryRef:(const TSCECategoryRef*)arg1 ;
-(id)columnNameForCategoryRef:(const TSCECategoryRef*)arg1 ;
-(vector<TSCEValue, std::__1::allocator<TSCEValue>>*)valuesForCategoryRef:(const TSCECategoryRef*)arg1 atRowUid:(const TSKUIDStruct*)arg2 ;
-(vector<TSCECellRef, std::__1::allocator<TSCECellRef>>*)cellRefsForCategoryRef:(const TSCECategoryRef*)arg1 atRowUid:(const TSKUIDStruct*)arg2 ordered:(char)arg3 ;
-(TSKUIDStructVectorTemplate<TSKUIDStruct>*)bodyRowUidsForCategoryRef:(const TSCECategoryRef*)arg1 atRowUid:(const TSKUIDStruct*)arg2 ordered:(char)arg3 ;
-(vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef>>*)p_promoteSpanningReferences:(vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef>>*)arg1 withCaptured:(id)arg2 atLevel:(unsigned char)arg3 ;
-(vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef>>*)captureCategoryRefsFromIterator:(id)arg1 atLevel:(unsigned char)arg2 asSpanning:(char)arg3 ;
-(id)uidRectRefForCategoryRef:(const TSCECategoryRef*)arg1 atRowUid:(const TSKUIDStruct*)arg2 ;
-(id)groupValueHierarchyStringForCategoryRef:(const TSCECategoryRef*)arg1 forHostCellRef:(const TSCECellRef*)arg2 namingContext:(id)arg3 ;
-(TSCECellRef)rowOrderChangedPrecedentIgnoringRecalc;
-(id)columnAggregatesOnColumnUids:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg1 ;
-(id)changeForUpdatingGroupValueOnNode:(const TSKUIDStruct*)arg1 toValue:(id)arg2 ;
-(id)changeForMovingBaseRows:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg1 toDestGroup:(id)arg2 ;
-(id)changeForSettingGroupingColumnList:(id)arg1 ;
-(void)mapGroupUidsForChange:(id)arg1 ;
-(void)runChange:(id)arg1 withAggregates:(id)arg2 ;
-(unsigned long long)indexOfGroupingColumn:(id)arg1 ;
-(void)markAllAggregatesAsDirty;
-(void)enumerateAggregatesAtLevel:(unsigned char)arg1 withBlock:(/*^block*/id)arg2 ;
-(unsigned char)groupLevelForGroupUid:(const TSKUIDStruct*)arg1 isBlank:(char*)arg2 isError:(char*)arg3 ;
-(void)markAllGroupNodesDirty;
-(id)groupsAtLevel:(unsigned char)arg1 ;
-(id)rowsForGroupValue:(id)arg1 atLevel:(unsigned char)arg2 ;
-(id)rowUidsForGroupUids:(id)arg1 ;
-(void)enumerateRowsUidsAtLevel:(unsigned char)arg1 withBlock:(/*^block*/id)arg2 ;
-(id)childGroupUidsForGroupUids:(id)arg1 ;
-(id)labelRowUidsForGroupUids:(id)arg1 ;
-(id)indexesOfGroupUidsInUids:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg1 ;
-(void)removeRowUid:(const TSKUIDStruct*)arg1 ;
-(id)sortedValuesAtLevel:(unsigned char)arg1 ;
-(TSCECategoryRef)aggregateRefOnValue:(id)arg1 forColumnUid:(const TSKUIDStruct*)arg2 forType:(unsigned char)arg3 atLevel:(unsigned char)arg4 ;
-(TSCECategoryRef)groupValueRefOnValue:(id)arg1 atLevel:(unsigned char)arg2 ;
-(TSCECategoryRef)groupValueHierarchyRefOnValue:(id)arg1 atLevel:(unsigned char)arg2 ;
-(void)enterCalcEngineMode;
-(void)exitCalcEngineMode;
-(char)inCalcEngineMode;
-(void)updateAggFormulaCoord:(TSUCellCoord)arg1 ;
-(void)clearValueForFormulaCoord:(const TSUCellCoord*)arg1 ;
-(void)clearAggNode:(id)arg1 forFormulaCoord:(const TSUCellCoord*)arg2 ;
-(id)aggregatorForColumn:(TSKUIDStruct)arg1 ;
-(id)columnNameForCategoryLevel:(unsigned char)arg1 ;
-(id)labelForCategoryRef:(const TSCECategoryRef*)arg1 ;
-(vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef>>*)captureCategoryRefsForViewRange:(TSUCellRect)arg1 atLevel:(unsigned char)arg2 asSpanning:(char)arg3 ;
-(id)viewCellTractRefForCategoryRef:(const TSCECategoryRef*)arg1 ;
-(id)stringForCategoryRef:(const TSCECategoryRef*)arg1 hostTableUID:(const TSKUIDStruct*)arg2 ;
-(NSArray *)columnAggregates;
-(TSUCellCoord)indirectAggTypeChangeFormulaCoord;
-(TSUCellCoord)groupingColumnHeadersFormulaCoord;
-(TSUCellCoord)allAggsInGroupRootFormulaCoord;
-(char)needsRebuildOfAggFormulas;
-(TSKCustomFormatWrapper *)customFormatForBlankGroup;
-(TSKCustomFormatWrapper *)customFormatForErrorGroup;
-(id)labelRowUIDSet;
-(id)labelRowUIDSetForCategoryLevel:(unsigned char)arg1 labelRowVisibility:(unsigned long long)arg2 ;
-(unordered_map<TSKUIDStruct, TSTPlanForGroupingCell, std::__1::hash<TSKUIDStruct>, std::__1::equal_to<TSKUIDStruct>, std::__1::allocator<std::__1::pair<const TSKUIDStruct, TSTPlanForGroupingCell>>>*)changesPerColumnMapToBeInGroup:(id)arg1 ;
-(char)p_setCell:(id)arg1 groupingCellPlan:(const TSTPlanForGroupingCell*)arg2 groupValue:(id)arg3 toGroup:(id)arg4 templateCell:(id)arg5 ;
-(id)p_cellDiffForFinishedCell:(id)arg1 ;
-(void)p_setCell:(id)arg1 groupingTypeCombo:(unsigned short)arg2 groupingCellValue:(id)arg3 toBeInGroup:(id)arg4 ;
-(void)p_setCell:(id)arg1 forUniqueGroupingTypeWithGroupColumnValue:(id)arg2 toBeInGroup:(id)arg3 ;
-(void)p_setCell:(id)arg1 forYearGroupingTypeWithGroupColumnValue:(id)arg2 toBeInGroup:(id)arg3 ;
-(void)p_setCell:(id)arg1 forYearQuarterGroupingTypeWithGroupColumnValue:(id)arg2 toBeInGroup:(id)arg3 ;
-(void)p_setCell:(id)arg1 forMonthGroupingTypeWithGroupColumnValue:(id)arg2 toBeInGroup:(id)arg3 ;
-(void)p_setCell:(id)arg1 forYearWeekGroupingTypeWithGroupColumnValue:(id)arg2 toBeInGroup:(id)arg3 ;
-(void)p_setCell:(id)arg1 forDayOfWeekGroupingTypeWithGroupColumnValue:(id)arg2 toBeInGroup:(id)arg3 ;
-(void)p_setCell:(id)arg1 forDayGroupingTypeWithGroupColumnValue:(id)arg2 toBeInGroup:(id)arg3 ;
-(id)defaultDateForGrouping;
-(char)changeCell:(id)arg1 atCellUID:(const TSKUIDStructCoord*)arg2 toBeInGroup:(id)arg3 ;
-(id)changeCellDiffMapToMoveRows:(const TSKUIDStructVectorTemplate<TSKUIDStruct>*)arg1 toGroup:(id)arg2 templateRowUID:(const TSKUIDStruct*)arg3 ;
-(id)cellDiffForCell:(id)arg1 applyingGroupCellValue:(id)arg2 groupingType:(int)arg3 toBeInGroup:(id)arg4 ;
@end

