/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:53:00 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/QuickLook/iWork.qlgenerator/Contents/Frameworks/TSTables.framework/Versions/A/TSTables
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSTables/TSTables-Structs.h>
#import <TSPersistence/TSPContainedObject.h>
#import <TSTables/TSTCompatibilityVersionProviding.h>

@protocol TSDContainerInfoTSWPStorageParent;
@class TSTTableDataList, TSKCustomFormatList, TSTTableTileStorage, TSTTableHeaderStorage, TSPLazyReference, NSObject, NSMutableDictionary, TSTMergeRegionMap;

@interface TSTTableDataStore : TSPContainedObject <TSTCompatibilityVersionProviding> {

	Ai _iteratorRunningCount;
	vector<TSUCellRect, std::__1::allocator<TSUCellRect>>* _mergedRects;
	TSTTableDataList* _styleDataList;
	TSTTableDataList* _conditionalStyleSetDataList;
	TSTTableDataList* _stringDataList;
	TSTTableDataList* _formulaDataList;
	TSTTableDataList* _controlCellSpecDataList;
	TSTTableDataList* _formulaErrorDataList;
	TSTTableDataList* _richTextDataList;
	TSTTableDataList* _formatDataList;
	TSTTableDataList* _commentStorageDataList;
	TSTTableDataList* _importWarningSetDataList;
	TSTTableDataList* _preBNCFormatDataList;
	char _foundABadDatalistKey;
	char _upgrading;
	char _cellCountValid;
	unsigned char _storageVersionPreBNC;
	char _missingPostBNCDatalists;
	unsigned _cellCount;
	TSKCustomFormatList* _pasteboardCustomFormatList;
	TSTTableTileStorage* _tileStorage;
	TSTTableHeaderStorage* _rowHeaderStorage;
	TSTTableHeaderStorage* _columnHeaderStorage;
	TSPLazyReference* _styleTableReference;
	TSPLazyReference* _conditionalStyleSetTableReference;
	TSPLazyReference* _stringTableReference;
	TSPLazyReference* _formulaTableReference;
	TSPLazyReference* _controlCellSpecTableReference;
	TSPLazyReference* _formulaErrorTableReference;
	TSPLazyReference* _richTextTableReference;
	TSPLazyReference* _formatTableReference;
	TSPLazyReference* _commentStorageTableReference;
	TSPLazyReference* _importWarningSetTableReference;
	TSPLazyReference* _preBNCFormatTableReference;
	TSTTableDataList* _multipleChoiceListFormatDataList;
	NSObject*<TSDContainerInfo>*<TSWPStorageParent> _richTextParentInfo;
	NSMutableDictionary* _pasteboardCustomFormatMap;
	TSTMergeRegionMap* _mergedCellRanges;

}

@property (nonatomic,retain) TSTTableTileStorage * tileStorage;                                                      //@synthesize tileStorage=_tileStorage - In the implementation block
@property (nonatomic,retain) TSTTableHeaderStorage * rowHeaderStorage;                                               //@synthesize rowHeaderStorage=_rowHeaderStorage - In the implementation block
@property (nonatomic,retain) TSTTableHeaderStorage * columnHeaderStorage;                                            //@synthesize columnHeaderStorage=_columnHeaderStorage - In the implementation block
@property (nonatomic,retain) TSPLazyReference * styleTableReference;                                                 //@synthesize styleTableReference=_styleTableReference - In the implementation block
@property (nonatomic,retain) TSPLazyReference * conditionalStyleSetTableReference;                                   //@synthesize conditionalStyleSetTableReference=_conditionalStyleSetTableReference - In the implementation block
@property (nonatomic,retain) TSPLazyReference * stringTableReference;                                                //@synthesize stringTableReference=_stringTableReference - In the implementation block
@property (nonatomic,retain) TSPLazyReference * formulaTableReference;                                               //@synthesize formulaTableReference=_formulaTableReference - In the implementation block
@property (nonatomic,retain) TSPLazyReference * controlCellSpecTableReference;                                       //@synthesize controlCellSpecTableReference=_controlCellSpecTableReference - In the implementation block
@property (nonatomic,retain) TSPLazyReference * formulaErrorTableReference;                                          //@synthesize formulaErrorTableReference=_formulaErrorTableReference - In the implementation block
@property (nonatomic,retain) TSPLazyReference * richTextTableReference;                                              //@synthesize richTextTableReference=_richTextTableReference - In the implementation block
@property (nonatomic,retain) TSPLazyReference * formatTableReference;                                                //@synthesize formatTableReference=_formatTableReference - In the implementation block
@property (nonatomic,retain) TSPLazyReference * commentStorageTableReference;                                        //@synthesize commentStorageTableReference=_commentStorageTableReference - In the implementation block
@property (nonatomic,retain) TSPLazyReference * importWarningSetTableReference;                                      //@synthesize importWarningSetTableReference=_importWarningSetTableReference - In the implementation block
@property (nonatomic,retain) TSPLazyReference * preBNCFormatTableReference;                                          //@synthesize preBNCFormatTableReference=_preBNCFormatTableReference - In the implementation block
@property (nonatomic,readonly) TSTTableDataList * multipleChoiceListFormatDataList;                                  //@synthesize multipleChoiceListFormatDataList=_multipleChoiceListFormatDataList - In the implementation block
@property (assign,nonatomic,__weak) NSObject*<TSDContainerInfo>*<TSWPStorageParent> richTextParentInfo;              //@synthesize richTextParentInfo=_richTextParentInfo - In the implementation block
@property (nonatomic,retain) TSKCustomFormatList * pasteboardCustomFormatList;                                       //@synthesize pasteboardCustomFormatList=_pasteboardCustomFormatList - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * pasteboardCustomFormatMap;                                        //@synthesize pasteboardCustomFormatMap=_pasteboardCustomFormatMap - In the implementation block
@property (nonatomic,retain) TSTMergeRegionMap * mergedCellRanges;                                                   //@synthesize mergedCellRanges=_mergedCellRanges - In the implementation block
@property (assign,nonatomic) unsigned cellCount;                                                                     //@synthesize cellCount=_cellCount - In the implementation block
@property (assign,nonatomic) char cellCountValid;                                                                    //@synthesize cellCountValid=_cellCountValid - In the implementation block
@property (assign,nonatomic) unsigned char storageVersionPreBNC;                                                     //@synthesize storageVersionPreBNC=_storageVersionPreBNC - In the implementation block
@property (assign,nonatomic) char missingPostBNCDatalists;                                                           //@synthesize missingPostBNCDatalists=_missingPostBNCDatalists - In the implementation block
@property (nonatomic,readonly) char hasMigratableStylesInCells; 
@property (nonatomic,readonly) unsigned numberOfPopulatedCells; 
@property (nonatomic,readonly) unsigned numberOfConditionalStyles; 
@property (nonatomic,readonly) unsigned long long numberOfComments; 
@property (nonatomic,readonly) char hasPasteboardCustomFormats; 
@property (assign,nonatomic) char upgrading;                                                                         //@synthesize upgrading=_upgrading - In the implementation block
@property (assign,nonatomic) char shouldUseWideRows; 
@property (nonatomic,readonly) unsigned long long archivingCompatibilityVersion; 
-(id)initWithOwner:(id)arg1 ;
-(void)removeRows:(NSRange)arg1 ;
-(void)removeColumns:(NSRange)arg1 ;
-(unsigned)cellCount;
-(double)widthOfColumnAtIndex:(unsigned short)arg1 ;
-(void)setStorageParentToInfo:(id)arg1 ;
-(char)upgrading;
-(void)setUpgrading:(char)arg1 ;
-(id)initWithArchive:(const DataStore*)arg1 unarchiver:(id)arg2 owner:(id)arg3 ;
-(id)allRichTextStorages;
-(unsigned long long)numberOfComments;
-(TSKCustomFormatList *)pasteboardCustomFormatList;
-(void)setPasteboardCustomFormatList:(TSKCustomFormatList *)arg1 ;
-(char)getCell:(id)arg1 atCellID:(TSUCellCoord)arg2 ;
-(void)setShouldUseWideRows:(char)arg1 ;
-(void)setHeight:(double)arg1 ofRowAtIndex:(unsigned)arg2 ;
-(void)setWidth:(double)arg1 ofColumnAtIndex:(unsigned short)arg2 ;
-(char)hasPasteboardCustomFormats;
-(void)copyPasteboardCustomFormatsFromDataStore:(id)arg1 ;
-(void)setCell:(id)arg1 atCellID:(TSUCellCoord)arg2 tableUID:(const TSKUIDStruct*)arg3 calculationEngine:(id)arg4 conditionalStyleOwner:(id)arg5 ignoreFormula:(char)arg6 clearImportWarnings:(char)arg7 doRichTextDOLC:(char)arg8 ;
-(void)enumerateCellStoragesRowByRowToMaxID:(TSUCellCoord)arg1 getPreBNC:(char)arg2 withBlock:(/*^block*/id)arg3 ;
-(void)resetAlmostEverything;
-(char)auditTilesForRowOverlapAndExtensionPastTableBounds:(TSUCellCoord)arg1 result:(id*)arg2 ;
-(char)auditDatalistDuplicationReturningResult:(id*)arg1 ;
-(char)auditColumnRowCellCountsReturningResult:(id*)arg1 hasUndercounts:(char*)arg2 ;
-(char)confirmRefCountsReturningResult:(id*)arg1 ;
-(void)upgradeDataStoreCellStorageIfNeededWithTableUID:(const TSKUIDStruct*)arg1 conditionalStyleOwner:(id)arg2 ;
-(char)repairStyleDatalistStylesheetIfNecessary;
-(char)shouldUseWideRows;
-(void)upgradeConditionalStylesToLinkedRefWithTableUID:(const TSKUIDStruct*)arg1 ;
-(unsigned long long)archivingCompatibilityVersion;
-(void)embiggenTableForUpgrade;
-(void)forceLoadHeaderStorages;
-(void)prepareToApplyConcurrentCellMap:(id)arg1 ;
-(void)didApplyConcurrentCellMap:(id)arg1 ;
-(void)saveToArchive:(DataStore*)arg1 archiver:(id)arg2 isInTheDocument:(char)arg3 ;
-(id)metadataForRowIndex:(unsigned)arg1 hidingAction:(unsigned char)arg2 uuid:(TSKUIDStruct)arg3 ;
-(id)metadataForColumnIndex:(unsigned short)arg1 hidingAction:(unsigned char)arg2 uuid:(TSKUIDStruct)arg3 defaultColumnWidth:(double)arg4 ;
-(char)cellExistsAtCellID:(TSUCellCoord)arg1 ;
-(char)hasFormulaAtCellID:(TSUCellCoord)arg1 ;
-(unsigned)numberOfPopulatedCells;
-(void)setCell:(id)arg1 atCellID:(TSUCellCoord)arg2 tableUID:(const TSKUIDStruct*)arg3 calculationEngine:(id)arg4 conditionalStyleOwner:(id)arg5 ignoreFormula:(char)arg6 clearImportWarnings:(char)arg7 ;
-(id)formulaSyntaxErrorAtCellID:(TSUCellCoord)arg1 ;
-(id)formulaAtCellID:(TSUCellCoord)arg1 ;
-(id)formulaSpecAtCellID:(TSUCellCoord)arg1 ;
-(void)setCellMap:(id)arg1 tableUID:(const TSKUIDStruct*)arg2 calculationEngine:(id)arg3 conditionalStyleOwner:(id)arg4 ignoreFormulas:(char)arg5 skipDirtyingNonFormulaCells:(char)arg6 doRichTextDOLC:(char)arg7 ;
-(id)formatForCalcEngineAtCellID:(TSUCellCoord)arg1 formatIsExplicitOut:(BOOL*)arg2 refIfAvailable:(TSTCellStorage*)arg3 ;
-(TSTCellStorage*)cellStorageRefAtCellID:(TSUCellCoord)arg1 ;
-(int)valueTypeAtCellID:(TSUCellCoord)arg1 ;
-(id)commentStorageAtCellID:(TSUCellCoord)arg1 ;
-(void)setCellStyle:(id)arg1 ofRowAtIndex:(unsigned)arg2 ;
-(void)setTextStyle:(id)arg1 ofRowAtIndex:(unsigned)arg2 ;
-(id)cellStyleOfRowAtIndex:(unsigned)arg1 ;
-(id)textStyleOfRowAtIndex:(unsigned)arg1 ;
-(void)setCellStyle:(id)arg1 ofColumnAtIndex:(unsigned short)arg2 ;
-(void)setTextStyle:(id)arg1 ofColumnAtIndex:(unsigned short)arg2 ;
-(id)cellStyleOfColumnAtIndex:(unsigned short)arg1 ;
-(id)textStyleOfColumnAtIndex:(unsigned short)arg1 ;
-(id)cellStyleAtCellID:(TSUCellCoord)arg1 ;
-(id)textStyleAtCellID:(TSUCellCoord)arg1 ;
-(id)conditionalStyleSetAtCellID:(TSUCellCoord)arg1 ;
-(double)heightOfRowAtIndex:(unsigned)arg1 ;
-(void)insertRows:(NSRange)arg1 ;
-(void)updateRowHeaderAtIndex:(unsigned)arg1 fromMetadata:(id)arg2 ;
-(void)insertColumns:(NSRange)arg1 ;
-(void)updateColumnHeaderAtIndex:(unsigned short)arg1 fromMetadata:(id)arg2 ;
-(void)moveRowIndexRange:(NSRange)arg1 toIndex:(unsigned)arg2 ;
-(void)moveColumnIndexRange:(NSRange)arg1 toIndex:(unsigned short)arg2 ;
-(void)swapRowAtIndex:(unsigned)arg1 withRowAtIndex:(unsigned)arg2 ;
-(unsigned char)hidingStateOfRowAtIndex:(unsigned)arg1 ;
-(unsigned char)hidingStateOfColumnAtIndex:(unsigned short)arg1 ;
-(void)setHidingState:(unsigned char)arg1 ofRowAtIndex:(unsigned)arg2 ;
-(void)setHidingState:(unsigned char)arg1 ofColumnAtIndex:(unsigned short)arg2 ;
-(id)stringAtCellID:(TSUCellCoord)arg1 ;
-(char)hasMigratableStylesInCells;
-(id)populatedCustomFormat:(id)arg1 value:(double)arg2 ;
-(id)stringForCalcEngineAtCellID:(TSUCellCoord)arg1 refIfAvailable:(TSTCellStorage*)arg2 ;
-(id)richTextStorageForCalcEngineAtCellID:(TSUCellCoord)arg1 refIfAvailable:(TSTCellStorage*)arg2 ;
-(void)replaceFormulasUsingBlock:(/*^block*/id)arg1 ;
-(void)replaceConditionalStyleSetsUsingBlock:(/*^block*/id)arg1 ;
-(id)addPasteboardCustomFormat:(id)arg1 toDocument:(id)arg2 updatingPasteboardFormat:(char)arg3 ;
-(void)clearPasteboardCustomFormatMap;
-(id)mapReassigningPasteboardCustomFormatKeys:(id)arg1 ;
-(void)makePasteboardCustomFormatList;
-(char)containsFormulas;
-(unsigned)numberOfConditionalStyles;
-(void)updateHeaderStorageStylesWithBlock:(/*^block*/id)arg1 ;
-(void)assertListTilesAndRows;
-(void)upgradeCellFormatsU2_0;
-(vector<TSUCellRect, std::__1::allocator<TSUCellRect>>*)mergedRects;
-(char)containsImportWarnings;
-(char)containsControlCellSpecs;
-(char)auditRowInfoCellCountsReturningResult:(id*)arg1 ;
-(vector<TSTCell *, std::__1::allocator<TSTCell *>>*)accumulateCurrentCellsConcurrentlyInRow:(TSUModelRowIndex)arg1 rowInfo:(id)arg2 atColumns:(vector<TSUModelColumnIndex, std::__1::allocator<TSUModelColumnIndex>>*)arg3 usingCellCreationBlock:(/*^block*/id)arg4 ;
-(void)updateDataListsConcurrentlyWithConcurrentCellMap:(id)arg1 clearImportWarnings:(char)arg2 ;
-(void)setCellsConcurrently:(id)arg1 tableUID:(const TSKUIDStruct*)arg2 calculationEngine:(id)arg3 conditionalStyleOwner:(id)arg4 ignoreFormula:(char)arg5 clearImportWarnings:(char)arg6 ;
-(NSObject*<TSDContainerInfo>*<TSWPStorageParent>)richTextParentInfo;
-(void)setRichTextParentInfo:(NSObject*<TSDContainerInfo>*<TSWPStorageParent>)arg1 ;
-(void)resolveDataListKeysForPreBNCCell:(id)arg1 suppressTransmutation:(char)arg2 sourceStorageVersion:(unsigned char)arg3 ;
-(void)enumerateCellStoragesInRange:(TSUCellRect)arg1 withBlock:(/*^block*/id)arg2 ;
-(id)formulaSpecForStorageRef:(TSTCellStorage*)arg1 ;
-(id)i_tileStartingAtOrBeforeRowIndex:(unsigned)arg1 outTileRange:(NSRange*)arg2 ;
-(void)setCellCount:(unsigned)arg1 ;
-(id)i_tileStartingAtOrAfterRowIndex:(unsigned)arg1 outTileRange:(NSRange*)arg2 ;
-(void)resolveDataListKeysForCell:(id)arg1 suppressTransmutation:(char)arg2 sourceStorageVersion:(unsigned char)arg3 ;
-(id)styleDataList;
-(id)richTextDataList;
-(id)formulaErrorDataList;
-(void)decrementColumnCellCount:(unsigned short)arg1 byAmount:(unsigned long long)arg2 ;
-(void)p_updateNumberOfPopulatedCells;
-(id)conditionalStyleSetDataList;
-(id)commentStorageDataList;
-(id)stringDataList;
-(id)formatDataList;
-(id)formulaDataList;
-(id)importWarningSetDataList;
-(id)controlCellSpecDataList;
-(TSTTableDataList *)multipleChoiceListFormatDataList;
-(id)preBNCFormatDataList;
-(void)_setCell:(id)arg1 atCellID:(TSUCellCoord)arg2 tableUID:(const TSKUIDStruct*)arg3 calculationEngine:(id)arg4 conditionalStyleOwner:(id)arg5 ignoreFormula:(char)arg6 clearImportWarnings:(char)arg7 richTextDOLCHint:(char*)arg8 ;
-(void)assertIsNotIterating;
-(SCD_Struct_TS37)p_preBNCKeysForCell:(id)arg1 atCellID:(TSUCellCoord)arg2 ;
-(void)incrementCellCountsAtCellID:(TSUCellCoord)arg1 ;
-(void)decrementCellCountsAtCellID:(TSUCellCoord)arg1 ;
-(SCD_Struct_TS37)p_preBNCKeysForCell:(id)arg1 oldPreBNCStorageRef:(SCD_Struct_TS189*)arg2 callWillModify:(char)arg3 ;
-(SCD_Struct_TS37)p_updatePreBNCDataListsForCurrentFormat:(id)arg1 numberFormat:(id)arg2 currencyFormat:(id)arg3 dateFormat:(id)arg4 durationFormat:(id)arg5 baseFormat:(id)arg6 customFormat:(id)arg7 stepperSliderFormat:(id)arg8 mcListFormat:(id)arg9 oldPreBNCStorageRef:(SCD_Struct_TS189*)arg10 callWillModify:(char)arg11 ;
-(void)p_stashBadKey:(unsigned long long)arg1 forList:(id)arg2 ;
-(id)p_preBNCpopulatedCustomFormat:(id)arg1 value:(double)arg2 ;
-(id)p_populatedMultipleChoiceListFormat:(id)arg1 ;
-(void)p_clearDataListEntriesForStorageRef:(TSTCellStorage*)arg1 cellID:(TSUCellCoord)arg2 ;
-(void)p_clearDataListEntriesInRange:(TSUCellRect)arg1 ;
-(void)p_loadDatalist:(id*)arg1 forLazyReference:(id)arg2 completionBlock:(/*^block*/id)arg3 ;
-(void)p_loadDatalist:(id*)arg1 forLazyReference:(id)arg2 ;
-(id)p_makeALazyDatalistOfType:(int)arg1 isNewForBNC:(char)arg2 ;
-(id)p_makeALazyDatalistOfType:(int)arg1 ;
-(id)p_pasteboardCustomFormatList;
-(id)p_pasteboardCustomFormatMap;
-(char)_needToUpgradeCellStorage;
-(id)p_cellMapForUpgradingToBraveNewCell;
-(unsigned long long)cellCountOfRowAtIndex:(unsigned)arg1 ;
-(unsigned long long)cellCountOfColumnAtIndex:(unsigned short)arg1 ;
-(char)hasFormulaSyntaxErrorAtCellID:(TSUCellCoord)arg1 ;
-(void)addPasteboardCustomFormatFromCell:(id)arg1 ;
-(id)setupEmptyPasteboardCustomFormatList;
-(void)beginIteration;
-(void)endIteration;
-(id)copyWithOwner:(id)arg1 ;
-(TSTTableTileStorage *)tileStorage;
-(void)setTileStorage:(TSTTableTileStorage *)arg1 ;
-(TSTTableHeaderStorage *)rowHeaderStorage;
-(void)setRowHeaderStorage:(TSTTableHeaderStorage *)arg1 ;
-(TSTTableHeaderStorage *)columnHeaderStorage;
-(void)setColumnHeaderStorage:(TSTTableHeaderStorage *)arg1 ;
-(TSPLazyReference *)styleTableReference;
-(void)setStyleTableReference:(TSPLazyReference *)arg1 ;
-(TSPLazyReference *)conditionalStyleSetTableReference;
-(void)setConditionalStyleSetTableReference:(TSPLazyReference *)arg1 ;
-(TSPLazyReference *)stringTableReference;
-(void)setStringTableReference:(TSPLazyReference *)arg1 ;
-(TSPLazyReference *)formulaTableReference;
-(void)setFormulaTableReference:(TSPLazyReference *)arg1 ;
-(TSPLazyReference *)controlCellSpecTableReference;
-(void)setControlCellSpecTableReference:(TSPLazyReference *)arg1 ;
-(TSPLazyReference *)formulaErrorTableReference;
-(void)setFormulaErrorTableReference:(TSPLazyReference *)arg1 ;
-(TSPLazyReference *)richTextTableReference;
-(void)setRichTextTableReference:(TSPLazyReference *)arg1 ;
-(TSPLazyReference *)formatTableReference;
-(void)setFormatTableReference:(TSPLazyReference *)arg1 ;
-(TSPLazyReference *)commentStorageTableReference;
-(void)setCommentStorageTableReference:(TSPLazyReference *)arg1 ;
-(TSPLazyReference *)importWarningSetTableReference;
-(void)setImportWarningSetTableReference:(TSPLazyReference *)arg1 ;
-(TSPLazyReference *)preBNCFormatTableReference;
-(void)setPreBNCFormatTableReference:(TSPLazyReference *)arg1 ;
-(NSMutableDictionary *)pasteboardCustomFormatMap;
-(void)setPasteboardCustomFormatMap:(NSMutableDictionary *)arg1 ;
-(TSTMergeRegionMap *)mergedCellRanges;
-(void)setMergedCellRanges:(TSTMergeRegionMap *)arg1 ;
-(char)cellCountValid;
-(void)setCellCountValid:(char)arg1 ;
-(unsigned char)storageVersionPreBNC;
-(void)setStorageVersionPreBNC:(unsigned char)arg1 ;
-(char)missingPostBNCDatalists;
-(void)setMissingPostBNCDatalists:(char)arg1 ;
@end

