/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:53:01 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/QuickLook/iWork.qlgenerator/Contents/Frameworks/TSUtility.framework/Versions/A/TSUtility
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <TSUtility/TSUtility-Structs.h>
#import <TSUtility/TSSPropertyValueArchiving.h>
#import <TSUtility/TSSPropertyCommandSerializing.h>
#import <TSUtility/TSSPreset.h>
#import <TSUtility/TSSPresetSource.h>
#import <libobjc.A.dylib/NSCopying.h>

@class NSString, NSColor;

@interface TSUColor : NSObject <TSSPropertyValueArchiving, TSSPropertyCommandSerializing, TSSPreset, TSSPresetSource, NSCopying> {

	CGColorRef mCGColor;
	unsigned long long mColorRGBSpace;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) NSString * presetKind; 
@property (readonly) CGColorRef CGColor; 
@property (nonatomic,readonly) unsigned long long colorRGBSpace; 
@property (nonatomic,readonly) double blueComponent; 
@property (nonatomic,readonly) double redComponent; 
@property (nonatomic,readonly) double greenComponent; 
@property (nonatomic,readonly) double alphaComponent; 
@property (nonatomic,readonly) NSColor * NSColor; 
@property (nonatomic,readonly) TSUColor * grayscaleColor; 
@property (nonatomic,readonly) TSUColor * invertedColor; 
@property (nonatomic,readonly) double luminance; 
@property (nonatomic,readonly) double relativeLuminance; 
@property (nonatomic,readonly) char isOpaque; 
@property (nonatomic,readonly) char isClear; 
@property (nonatomic,readonly) char isNearlyWhite; 
@property (nonatomic,readonly) NSString * hexString; 
+(id)tsd_darkInsertSwatchBackgroundColor;
+(id)tsd_darkTranslucentSwatchBackground;
+(id)tsd_darkBackgroundForShapesLibrary;
+(id)tsd_darkBackgroundForL1Presets;
+(id)presetKinds;
+(void)bootstrapPresetsOfKind:(id)arg1 inTheme:(id)arg2 alternate:(unsigned long long)arg3 ;
+(id)p_defaultPresetColors:(unsigned long long)arg1 ;
+(id)instanceWithArchive:(const Message*)arg1 unarchiver:(id)arg2 ;
+(id)pencilTrayBlueColor;
+(id)pencilTrayGreenColor;
+(id)pencilTrayRedColor;
+(id)pencilTrayYellowColor;
+(id)redColor;
+(id)clearColor;
+(id)blackColor;
+(id)whiteColor;
+(id)colorWithCGColor:(CGColorRef)arg1 ;
+(id)colorWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4 ;
+(id)colorWithWhite:(double)arg1 alpha:(double)arg2 ;
+(id)colorWithPatternImage:(id)arg1 ;
+(id)greenColor;
+(id)purpleColor;
+(id)blueColor;
+(id)lightGrayColor;
+(id)grayColor;
+(id)cyanColor;
+(id)yellowColor;
+(id)magentaColor;
+(id)orangeColor;
+(id)brownColor;
+(id)colorWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4 ;
+(id)colorWithHexString:(id)arg1 ;
+(id)colorWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4 targetRGBSpace:(unsigned long long)arg5 ;
+(id)colorWithNSColor:(id)arg1 ;
+(id)randomColor;
+(id)colorWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4 targetRGBSpace:(unsigned long long)arg5 ;
-(id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2 ;
-(long long)mixingTypeWithObject:(id)arg1 context:(id)arg2 ;
-(NSString *)presetKind;
-(id)initWithArchive:(const Color*)arg1 unarchiver:(id)arg2 ;
-(void)saveToArchive:(Color*)arg1 archiver:(id)arg2 ;
-(id)initFromPropertyCommandMessage:(const Message*)arg1 unarchiver:(id)arg2 ;
-(void)saveToPropertyCommandMessage:(Message*)arg1 archiver:(id)arg2 ;
-(id)initWithMessage:(const Color*)arg1 ;
-(void)saveToMessage:(Color*)arg1 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(void)dealloc;
-(char)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(CGColorRef)CGColor;
-(char)isOpaque;
-(double)alphaComponent;
-(id)colorWithAlphaComponent:(double)arg1 ;
-(double)redComponent;
-(double)greenComponent;
-(double)blueComponent;
-(id)blendedColorWithFraction:(double)arg1 ofColor:(id)arg2 ;
-(id)initWithWhite:(double)arg1 alpha:(double)arg2 ;
-(id)initWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4 ;
-(id)initWithCyan:(double)arg1 magenta:(double)arg2 yellow:(double)arg3 black:(double)arg4 alpha:(double)arg5 ;
-(double)hueComponent;
-(double)saturationComponent;
-(double)brightnessComponent;
-(id)initWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4 ;
-(id)initWithCGColor:(CGColorRef)arg1 ;
-(id)initWithHexString:(id)arg1 ;
-(NSString *)hexString;
-(char)isClear;
-(double)luminance;
-(id)initWithHue:(double)arg1 saturation:(double)arg2 brightness:(double)arg3 alpha:(double)arg4 targetRGBSpace:(unsigned long long)arg5 ;
-(id)initWithPatternImage:(id)arg1 ;
-(id)initWithNSColor:(id)arg1 ;
-(id)initWithCGColor:(CGColorRef)arg1 colorSpace:(unsigned long long)arg2 ;
-(id)initWithRed:(double)arg1 green:(double)arg2 blue:(double)arg3 alpha:(double)arg4 colorSpace:(unsigned long long)arg5 ;
-(char)isEqualWithTolerance:(id)arg1 ;
-(unsigned long long)colorRGBSpace;
-(char)p_isEqualToColor:(id)arg1 withTolerance:(double)arg2 ;
-(double)p_rgbComponentWithIndex:(unsigned char)arg1 ;
-(id)newBlendedColorWithFraction:(double)arg1 ofColor:(id)arg2 ;
-(char)isAlmostEqualToColor:(id)arg1 ;
-(void)getRGBAComponents:(double*)arg1 ;
-(NSColor *)NSColor;
-(TSUColor *)grayscaleColor;
-(TSUColor *)invertedColor;
-(char)isNearlyWhite;
-(void)paintRect:(CGRect)arg1 inContext:(CGContextRef)arg2 ;
-(void)paintPath:(CGPathRef)arg1 inContext:(CGContextRef)arg2 ;
-(double)relativeLuminance;
-(char)requiresOutlineOnBackgroundWithAppearance:(unsigned long long)arg1 ;
-(id)colorByCompositingSourceOverDestinationColor:(id)arg1 ;
-(double)contrastRatioWithColor:(id)arg1 ;
-(id)p_colorForComparingWithColor:(id)arg1 ;
-(char)improvesContrastWhenDisplayedOverAlternateBackgroundColor:(id)arg1 ratherThanStandardBackgroundColor:(id)arg2 inScenario:(unsigned long long)arg3 ;
@end

