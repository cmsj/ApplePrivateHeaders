/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:53:01 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/QuickLook/iWork.qlgenerator/Contents/Frameworks/TSText.framework/Versions/A/TSText
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class TSWPParagraphStyle, TSPObject, TSWPColumnStyle, TSWPListStyle, TSWPDropCapStyle;

typedef struct CGContext* CGContextRef;

typedef struct _compressed_pair<TSWPParagraphMetrics *, std::__1::allocator<TSWPParagraphMetrics>> {
	TSWPParagraphMetrics __value_;
} compressed_pair<TSWPParagraphMetrics *, std::__1::allocator<TSWPParagraphMetrics>>;

typedef struct vector<TSWPParagraphMetrics, std::__1::allocator<TSWPParagraphMetrics>> {
	TSWPParagraphMetrics __begin_;
	TSWPParagraphMetrics __end_;
	compressed_pair<TSWPParagraphMetrics *, std::__1::allocator<TSWPParagraphMetrics>> __end_cap_;
} vector<TSWPParagraphMetrics, std::__1::allocator<TSWPParagraphMetrics>>;

typedef struct NSRange {
	unsigned long long location;
	unsigned long long length;
} NSRange;

typedef struct _cxx_atomic_impl<unsigned long, std::__1::__cxx_atomic_base_impl<unsigned long>> {
	AQ __a_value;
} cxx_atomic_impl<unsigned long, std::__1::__cxx_atomic_base_impl<unsigned long>>;

typedef struct atomic<unsigned long> {
	cxx_atomic_impl<unsigned long, std::__1::__cxx_atomic_base_impl<unsigned long>> __a_;
} atomic<unsigned long>;

typedef struct {
	int field1;
	unsigned long long field2;
	char field3;
} SCD_Struct_TS6;

typedef struct __CTFont* CTFontRef;

typedef struct __CFStringTokenizer* CFStringTokenizerRef;

typedef struct TSWPStorageActionBuilder* TSWPStorageActionBuilderRef;

typedef struct _NSZone* NSZoneRef;

typedef struct {
	unsigned long long field1;
	id field2;
	unsigned long long field3;
	unsigned long long field4[5];
} SCD_Struct_TS11;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct CGAffineTransform {
	double a;
	double b;
	double c;
	double d;
	double tx;
	double ty;
} CGAffineTransform;

typedef struct shared_ptr<TSWPLineFragmentArray> {
	TSWPLineFragmentArray __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<TSWPLineFragmentArray>;

typedef struct {
	CGRect field1;
	double field2;
	T field3;
	unsigned short field4;
	W field5;
	P field6;
	F field7;
	o field8;
	n field9;
	t field10;
	H field11;
	e field12;
	int field13;
	g field14;
	h field15;
	t field16;
	unsigned field17;
	n field18;
	float field19;
	o field20;
	double field21;
	CGRect field22;
	double field23;
	T field24;
	unsigned short field25;
	W field26;
	P field27;
	F field28;
	o field29;
	n field30;
	t field31;
	H field32;
	e field33;
	int field34;
	g field35;
	h field36;
	t field37;
	unsigned field38;
	n field39;
	float field40;
	o field41;
	CGAffineTransform field42;
} SCD_Struct_TS17;

typedef const struct __CTLine* CTLineRef;

typedef struct CGPDFDocument* CGPDFDocumentRef;

typedef struct __CFLocale* CFLocaleRef;

typedef struct {
	CGRect field1;
	double field2;
	double field3;
	double field4;
	double field5;
	char field6;
	CGAffineTransform field7;
} SCD_Struct_TS21;

typedef const struct CGPath* CGPathRef;

typedef struct TSWPFontHeightInfo {
	double spaceBefore;
	double attachmentHeight;
	double ascent;
	double capHeight;
	double descent;
	double leadingAbove;
	double leadingBelow;
	double spaceAfter;
	double verticalHeight;
	double xHeight;
	double underlinePosition;
	double underlineThickness;
} TSWPFontHeightInfo;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::shared_ptr<TSWPParagraphTypesetter>>, std::__1::less<unsigned long>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::shared_ptr<TSWPParagraphTypesetter>>, std::__1::less<unsigned long>, true>>;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, std::__1::shared_ptr<TSWPParagraphTypesetter>>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, std::__1::shared_ptr<TSWPParagraphTypesetter>>, void *>>>;

typedef struct _tree<std::__1::__value_type<unsigned long, std::__1::shared_ptr<TSWPParagraphTypesetter>>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::shared_ptr<TSWPParagraphTypesetter>>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, std::__1::shared_ptr<TSWPParagraphTypesetter>>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, std::__1::shared_ptr<TSWPParagraphTypesetter>>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::shared_ptr<TSWPParagraphTypesetter>>, std::__1::less<unsigned long>, true>> __pair3_;
} tree<std::__1::__value_type<unsigned long, std::__1::shared_ptr<TSWPParagraphTypesetter>>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::shared_ptr<TSWPParagraphTypesetter>>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, std::__1::shared_ptr<TSWPParagraphTypesetter>>>>;

typedef struct map<unsigned long, std::__1::shared_ptr<TSWPParagraphTypesetter>, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::shared_ptr<TSWPParagraphTypesetter>>>> {
	tree<std::__1::__value_type<unsigned long, std::__1::shared_ptr<TSWPParagraphTypesetter>>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::shared_ptr<TSWPParagraphTypesetter>>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, std::__1::shared_ptr<TSWPParagraphTypesetter>>>> __tree_;
} map<unsigned long, std::__1::shared_ptr<TSWPParagraphTypesetter>, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::shared_ptr<TSWPParagraphTypesetter>>>>;

typedef struct _compressed_pair<unsigned long *, std::__1::allocator<unsigned long>> {
	unsigned long long __value_;
} compressed_pair<unsigned long *, std::__1::allocator<unsigned long>>;

typedef struct vector<unsigned long, std::__1::allocator<unsigned long>> {
	unsigned long long __begin_;
	unsigned long long __end_;
	compressed_pair<unsigned long *, std::__1::allocator<unsigned long>> __end_cap_;
} vector<unsigned long, std::__1::allocator<unsigned long>>;

typedef struct _compressed_pair<unsigned short *, std::__1::allocator<unsigned short>> {
	unsigned short __value_;
} compressed_pair<unsigned short *, std::__1::allocator<unsigned short>>;

typedef struct vector<unsigned short, std::__1::allocator<unsigned short>> {
	unsigned short __begin_;
	unsigned short __end_;
	compressed_pair<unsigned short *, std::__1::allocator<unsigned short>> __end_cap_;
} vector<unsigned short, std::__1::allocator<unsigned short>>;

typedef struct _compressed_pair<CGPoint *, std::__1::allocator<CGPoint>> {
	CGPoint __value_;
} compressed_pair<CGPoint *, std::__1::allocator<CGPoint>>;

typedef struct vector<CGPoint, std::__1::allocator<CGPoint>> {
	CGPoint __begin_;
	CGPoint __end_;
	compressed_pair<CGPoint *, std::__1::allocator<CGPoint>> __end_cap_;
} vector<CGPoint, std::__1::allocator<CGPoint>>;

typedef struct _compressed_pair<CGRect *, std::__1::allocator<CGRect>> {
	CGRect __value_;
} compressed_pair<CGRect *, std::__1::allocator<CGRect>>;

typedef struct vector<CGRect, std::__1::allocator<CGRect>> {
	CGRect __begin_;
	CGRect __end_;
	compressed_pair<CGRect *, std::__1::allocator<CGRect>> __end_cap_;
} vector<CGRect, std::__1::allocator<CGRect>>;

typedef struct _compressed_pair<TSWPAttachmentPosition *, std::__1::allocator<TSWPAttachmentPosition>> {
	/*function pointer*/void* __value_;
} compressed_pair<TSWPAttachmentPosition *, std::__1::allocator<TSWPAttachmentPosition>>;

typedef struct vector<TSWPAttachmentPosition, std::__1::allocator<TSWPAttachmentPosition>> {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<TSWPAttachmentPosition *, std::__1::allocator<TSWPAttachmentPosition>> __end_cap_;
} vector<TSWPAttachmentPosition, std::__1::allocator<TSWPAttachmentPosition>>;

typedef struct CGColor* CGColorRef;

typedef struct {
	unsigned long long field1;
	double field2;
} SCD_Struct_TS40;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned long, void *>>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned long, void *>>>;

typedef struct _list_node_base<unsigned long, void *> {
	__list_node_base<unsigned long, void *> __prev_;
	__list_node_base<unsigned long, void *> __next_;
} list_node_base<unsigned long, void *>;

typedef struct list<unsigned long, std::__1::allocator<unsigned long>> {
	list_node_base<unsigned long, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned long, void *>>> __size_alloc_;
} list<unsigned long, std::__1::allocator<unsigned long>>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, TSWPFontMetricsCacheEntry>, std::__1::less<unsigned long>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, TSWPFontMetricsCacheEntry>, std::__1::less<unsigned long>, true>>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, TSWPFontMetricsCacheEntry>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, TSWPFontMetricsCacheEntry>, void *>>>;

typedef struct _tree<std::__1::__value_type<unsigned long, TSWPFontMetricsCacheEntry>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, TSWPFontMetricsCacheEntry>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, TSWPFontMetricsCacheEntry>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, TSWPFontMetricsCacheEntry>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, TSWPFontMetricsCacheEntry>, std::__1::less<unsigned long>, true>> __pair3_;
} tree<std::__1::__value_type<unsigned long, TSWPFontMetricsCacheEntry>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, TSWPFontMetricsCacheEntry>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, TSWPFontMetricsCacheEntry>>>;

typedef struct map<unsigned long, TSWPFontMetricsCacheEntry, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, TSWPFontMetricsCacheEntry>>> {
	tree<std::__1::__value_type<unsigned long, TSWPFontMetricsCacheEntry>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, TSWPFontMetricsCacheEntry>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, TSWPFontMetricsCacheEntry>>> __tree_;
} map<unsigned long, TSWPFontMetricsCacheEntry, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, TSWPFontMetricsCacheEntry>>>;

typedef struct opaque_pthread_rwlock_t {
	long long __sig;
	char __opaque[192];
} opaque_pthread_rwlock_t;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<unsigned long>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<unsigned long>>;

typedef struct vector<bool, std::__1::allocator<bool>> {
	unsigned long long __begin_;
	unsigned long long __size_;
	compressed_pair<unsigned long, std::__1::allocator<unsigned long>> __cap_alloc_;
} vector<bool, std::__1::allocator<bool>>;

typedef struct _compressed_pair<_NSRange *, std::__1::allocator<_NSRange>> {
	_NSRange __value_;
} compressed_pair<_NSRange *, std::__1::allocator<_NSRange>>;

typedef struct vector<_NSRange, std::__1::allocator<_NSRange>> {
	_NSRange __begin_;
	_NSRange __end_;
	compressed_pair<_NSRange *, std::__1::allocator<_NSRange>> __end_cap_;
} vector<_NSRange, std::__1::allocator<_NSRange>>;

typedef struct _compressed_pair<TSWPDirtyRange *, std::__1::allocator<TSWPDirtyRange>> {
	/*function pointer*/void* __value_;
} compressed_pair<TSWPDirtyRange *, std::__1::allocator<TSWPDirtyRange>>;

typedef struct vector<TSWPDirtyRange, std::__1::allocator<TSWPDirtyRange>> {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<TSWPDirtyRange *, std::__1::allocator<TSWPDirtyRange>> __end_cap_;
} vector<TSWPDirtyRange, std::__1::allocator<TSWPDirtyRange>>;

typedef struct {
	_ field1;
	NSRange field2;
	long long field3;
} SCD_Struct_TS55;

typedef struct __CFString* CFStringRef;

typedef struct __CTFontCollection* CTFontCollectionRef;

typedef struct __CTFontDescriptor* CTFontDescriptorRef;

typedef struct _compressed_pair<_TSWPCharIndexAndAffinity *, std::__1::allocator<_TSWPCharIndexAndAffinity>> {
	_TSWPCharIndexAndAffinity __value_;
} compressed_pair<_TSWPCharIndexAndAffinity *, std::__1::allocator<_TSWPCharIndexAndAffinity>>;

typedef struct vector<_TSWPCharIndexAndAffinity, std::__1::allocator<_TSWPCharIndexAndAffinity>> {
	_TSWPCharIndexAndAffinity __begin_;
	_TSWPCharIndexAndAffinity __end_;
	compressed_pair<_TSWPCharIndexAndAffinity *, std::__1::allocator<_TSWPCharIndexAndAffinity>> __end_cap_;
} vector<_TSWPCharIndexAndAffinity, std::__1::allocator<_TSWPCharIndexAndAffinity>>;

typedef struct {
	unsigned listStart;
} SCD_Struct_TS61;

typedef struct {
	unsigned short level;
	unsigned short flags;
} SCD_Struct_TS62;

typedef struct {
	int writingDirection;
} SCD_Struct_TS63;

typedef struct TSWPParagraphData {
	/*function pointer*/void* ;
	SCD_Struct_TS61 ;
	SCD_Struct_TS62 ;
	SCD_Struct_TS62 ;
	SCD_Struct_TS63 ;
	SCD_Struct_TS61 ;
	SCD_Struct_TS62) ;
} TSWPParagraphData;

typedef struct {
	TSWPParagraphStyle* parStyle;
	TSPObject* section;
	TSWPColumnStyle* columnStyle;
	TSWPListStyle* listStyle;
	TSWPParagraphData parData;
	TSWPParagraphData parStartData;
	TSWPParagraphData parBidiData;
	TSWPDropCapStyle* dropCapStyle;
} SCD_Struct_TS65;

typedef struct {
	CGPoint point;
	double time;
} SCD_Struct_TS66;

typedef struct TSWPStorageTransaction* TSWPStorageTransactionRef;

