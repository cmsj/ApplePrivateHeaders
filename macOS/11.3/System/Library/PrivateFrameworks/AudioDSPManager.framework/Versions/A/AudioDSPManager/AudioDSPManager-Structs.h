/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:23 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/AudioDSPManager.framework/Versions/A/AudioDSPManager
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSObject<OS_dispatch_object>;

typedef struct _compressed_pair<adm::graph::Graph *, std::__1::default_delete<adm::graph::Graph>> {
	Graph __value_;
} compressed_pair<adm::graph::Graph *, std::__1::default_delete<adm::graph::Graph>>;

typedef struct unique_ptr<adm::graph::Graph, std::__1::default_delete<adm::graph::Graph>> {
	compressed_pair<adm::graph::Graph *, std::__1::default_delete<adm::graph::Graph>> __ptr_;
} unique_ptr<adm::graph::Graph, std::__1::default_delete<adm::graph::Graph>>;

typedef struct _compressed_pair<adm::MutateGraph *, std::__1::default_delete<adm::MutateGraph>> {
	MutateGraph __value_;
} compressed_pair<adm::MutateGraph *, std::__1::default_delete<adm::MutateGraph>>;

typedef struct unique_ptr<adm::MutateGraph, std::__1::default_delete<adm::MutateGraph>> {
	compressed_pair<adm::MutateGraph *, std::__1::default_delete<adm::MutateGraph>> __ptr_;
} unique_ptr<adm::MutateGraph, std::__1::default_delete<adm::MutateGraph>>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<GraphState *, void *>>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<GraphState *, void *>>>;

typedef struct _list_node_base<GraphState *, void *> {
	__list_node_base<GraphState *, void *> __prev_;
	__list_node_base<GraphState *, void *> __next_;
} list_node_base<GraphState *, void *>;

typedef struct list<GraphState *, std::__1::allocator<GraphState *>> {
	list_node_base<GraphState *, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<GraphState *, void *>>> __size_alloc_;
} list<GraphState *, std::__1::allocator<GraphState *>>;

typedef struct _compressed_pair<adm::graph::GraphBuilder *, std::__1::default_delete<adm::graph::GraphBuilder>> {
	GraphBuilder __value_;
} compressed_pair<adm::graph::GraphBuilder *, std::__1::default_delete<adm::graph::GraphBuilder>>;

typedef struct unique_ptr<adm::graph::GraphBuilder, std::__1::default_delete<adm::graph::GraphBuilder>> {
	compressed_pair<adm::graph::GraphBuilder *, std::__1::default_delete<adm::graph::GraphBuilder>> __ptr_;
} unique_ptr<adm::graph::GraphBuilder, std::__1::default_delete<adm::graph::GraphBuilder>>;

typedef struct shared_ptr<adm::graph::ParameterStorageInterface> {
	ParameterStorageInterface __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<adm::graph::ParameterStorageInterface>;

typedef struct shared_ptr<adm::graph::PropertyStorageInterface> {
	PropertyStorageInterface __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<adm::graph::PropertyStorageInterface>;

typedef struct shared_ptr<adm::vp::detail::ProxyFactoryImplementation> {
	ProxyFactoryImplementation __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<adm::vp::detail::ProxyFactoryImplementation>;

typedef struct ProxyFactory {
	shared_ptr<adm::vp::detail::ProxyFactoryImplementation> mImplementation;
} ProxyFactory;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> *>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> *>>;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, std::__1::hash<unsigned long long>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, std::__1::hash<unsigned long long>, true>>;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, std::__1::equal_to<unsigned long long>, true>> {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, std::__1::equal_to<unsigned long long>, true>>;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *>>> {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *>>>;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> *>> {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> *>> __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> *>>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> *>>> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> *>> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> *>>>;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> *>>> {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> *>>> __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> *>>>;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>>> {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *> *>>> __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, void *>>> __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, std::__1::hash<unsigned long long>, true>> __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, std::__1::equal_to<unsigned long long>, true>> __p3_;
} hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>>>;

typedef struct unordered_map<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>>> {
	hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>>> __table_;
} unordered_map<unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>>>>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> *>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> *>>;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, std::__1::hash<unsigned long long>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, std::__1::hash<unsigned long long>, true>>;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, std::__1::equal_to<unsigned long long>, true>> {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, std::__1::equal_to<unsigned long long>, true>>;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *>>> {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *>>>;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> *>> {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> *>> __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> *>>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> *>>> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> *>> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> *>>>;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> *>>> {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> *>>> __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> *>>>;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>>> {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *> *>>> __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, void *>>> __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, std::__1::hash<unsigned long long>, true>> __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, std::__1::equal_to<unsigned long long>, true>> __p3_;
} hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>>>;

typedef struct unordered_map<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>>> {
	hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>>> __table_;
} unordered_map<unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<adm::DSPModuleParamID, unsigned int, std::__1::hash<adm::DSPModuleParamID>, std::__1::equal_to<adm::DSPModuleParamID>, std::__1::allocator<std::__1::pair<const adm::DSPModuleParamID, unsigned int>>>>>>;

typedef struct type {
	unsigned char __lx[32];
} type;

typedef struct _value_func<void (std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>)> {
	type __buf_;
	__base<void (std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>)> __f_;
} value_func<void (std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>)>;

typedef struct function<void (std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>)> {
	value_func<void (std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>)> __f_;
} function<void (std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>)>;

typedef struct optional<unsigned int> {
	/*function pointer*/void* ;
	char __null_state_;
	I) __val_;
	BOOL __engaged_;
} optional<unsigned int>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> *>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> *>>;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::hash<unsigned int>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::hash<unsigned int>, true>>;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::equal_to<unsigned int>, true>> {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::equal_to<unsigned int>, true>>;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *>>> {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *>>>;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> *>> {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> *>> __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> *>>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> *>>> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> *>> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> *>>>;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> *>>> {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> *>>> __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> *>>>;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>>> {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *> *>>> __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *>>> __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::hash<unsigned int>, true>> __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::equal_to<unsigned int>, true>> __p3_;
} hash_table<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>>>;

typedef struct unordered_map<unsigned int, id<dspd_ConfigurationChangeRequest>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, id<dspd_ConfigurationChangeRequest>>>> {
	hash_table<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>>> __table_;
} unordered_map<unsigned int, id<dspd_ConfigurationChangeRequest>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, id<dspd_ConfigurationChangeRequest>>>>;

typedef struct _NSZone* NSZoneRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> *>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> *>>;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::hash<unsigned long long>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::hash<unsigned long long>, true>>;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::equal_to<unsigned long long>, true>> {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::equal_to<unsigned long long>, true>>;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *>>> {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *>>>;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> *>> {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> *>> __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> *>>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> *>>> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> *>> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> *>>>;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> *>>> {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> *>>> __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> *>>>;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>>> {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *> *>>> __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *>>> __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::hash<unsigned long long>, true>> __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::equal_to<unsigned long long>, true>> __p3_;
} hash_table<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>>>;

typedef struct unordered_map<unsigned long long, adm::vm::Port, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, adm::vm::Port>>> {
	hash_table<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>>> __table_;
} unordered_map<unsigned long long, adm::vm::Port, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, adm::vm::Port>>>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> *>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> *>>;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::hash<unsigned long long>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::hash<unsigned long long>, true>>;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::equal_to<unsigned long long>, true>> {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::equal_to<unsigned long long>, true>>;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *>>> {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *>>>;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> *>> {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> *>> __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> *>>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> *>>> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> *>> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> *>>>;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> *>>> {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> *>>> __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> *>>>;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, IOControllerState>>> {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *> *>>> __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *>>> __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::hash<unsigned long long>, true>> __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::equal_to<unsigned long long>, true>> __p3_;
} hash_table<std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, IOControllerState>>>;

typedef struct unordered_map<unsigned long long, IOControllerState, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, IOControllerState>>> {
	hash_table<std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, IOControllerState>>> __table_;
} unordered_map<unsigned long long, IOControllerState, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, IOControllerState>>>;

typedef struct shared_ptr<AudioNotification::BusStation> {
	BusStation __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<AudioNotification::BusStation>;

typedef struct _compressed_pair<adm::DSPModuleParamID *, std::__1::allocator<adm::DSPModuleParamID>> {
	unsigned __value_;
} compressed_pair<adm::DSPModuleParamID *, std::__1::allocator<adm::DSPModuleParamID>>;

typedef struct vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>> {
	unsigned __begin_;
	unsigned __end_;
	compressed_pair<adm::DSPModuleParamID *, std::__1::allocator<adm::DSPModuleParamID>> __end_cap_;
} vector<adm::DSPModuleParamID, std::__1::allocator<adm::DSPModuleParamID>>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> *>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> *>>;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::hash<unsigned int>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::hash<unsigned int>, true>>;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::equal_to<unsigned int>, true>> {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::equal_to<unsigned int>, true>>;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *>>> {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *>>>;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> *>> {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> *>> __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> *>>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> *>>> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> *>> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> *>>>;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> *>>> {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> *>>> __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> *>>>;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>>> {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *> *>>> __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *>>> __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::hash<unsigned int>, true>> __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::equal_to<unsigned int>, true>> __p3_;
} hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>>>;

typedef struct unordered_map<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>>> {
	hash_table<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>>> __table_;
} unordered_map<unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>>>;

typedef const struct vector<id<dspd_ConfigurationChangeRequest>, std::__1::allocator<id<dspd_ConfigurationChangeRequest>>>* vector<id<dspd_ConfigurationChangeRequest>, std::__1::allocator<id<dspd_ConfigurationChangeRequest>>>Ref;

typedef struct expected<void, std::__1::error_code>* expected<void, std::__1::error_code>Ref;

typedef struct expected<std::__1::vector<dspd::PublicFormatMap, std::__1::allocator<dspd::PublicFormatMap>>, std::__1::error_code>* expected<std::__1::vector<dspd::PublicFormatMap, std::__1::allocator<dspd::PublicFormatMap>>, std::__1::error_code>Ref;

typedef struct expected<dspd::VolumeCapabilites, std::__1::error_code>* expected<dspd::VolumeCapabilites, std::__1::error_code>Ref;

typedef struct expected<float, std::__1::error_code>* expected<float, std::__1::error_code>Ref;

typedef struct vector<dspd::VolumeUpdateResult, std::__1::allocator<dspd::VolumeUpdateResult>>* vector<dspd::VolumeUpdateResult, std::__1::allocator<dspd::VolumeUpdateResult>>Ref;

typedef struct _compressed_pair<unsigned long, std::__1::less<unsigned long long>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::less<unsigned long long>>;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long long, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long long, void *>>>;

typedef struct _tree<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long long, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::less<unsigned long long>> __pair3_;
} tree<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long>>;

typedef struct set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long>> {
	tree<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long>> __tree_;
} set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long>>;

typedef struct opaque_pthread_mutex_t {
	long long __sig;
	char __opaque[56];
} opaque_pthread_mutex_t;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

typedef struct _compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>> *, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>>>> {
	unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>> __value_;
} compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>> *, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>>>>;

typedef struct vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>>>> {
	unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>> __begin_;
	unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>> __end_;
	compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>> *, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>>>> __end_cap_;
} vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>>>>;

typedef struct _compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>>> *, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>>>>> {
	unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>>> __value_;
} compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>>> *, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>>>>>;

typedef struct vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>>>>> {
	unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>>> __begin_;
	unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>>> __end_;
	compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>>> *, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>>>>> __end_cap_;
} vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>>>>>;

typedef struct _compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>> *, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>>>> {
	unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>> __value_;
} compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>> *, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>>>>;

typedef struct vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>>>> {
	unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>> __begin_;
	unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>> __end_;
	compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>> *, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>>>> __end_cap_;
} vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>>>>;

typedef struct _compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>> *, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>>>> {
	unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>> __value_;
} compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>> *, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>>>>;

typedef struct vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>>>> {
	unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>> __begin_;
	unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>> __end_;
	compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>> *, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>>>> __end_cap_;
} vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>>>>;

typedef struct _compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>> *, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>>>> {
	unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>> __value_;
} compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>> *, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>>>>;

typedef struct vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>>>> {
	unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>> __begin_;
	unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>> __end_;
	compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>> *, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>>>> __end_cap_;
} vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>>>>;

typedef struct KnobController {
	vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>>>> mVolumeKnobs;
	vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>>>> mMuteKnobs;
	vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>>>> mPanKnobs;
	vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, float>>>>> mGenericKnobs;
	vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>>>> mFaderKnobs;
} KnobController;

typedef struct ObjectRef<const __CFString *> {
	__CFString mCFObject;
} ObjectRef<const __CFString *>;

typedef struct StringRef {
	ObjectRef<const __CFString *> mObject;
} StringRef;

typedef struct _compressed_pair<dspd::PortDescription *, std::__1::allocator<dspd::PortDescription>> {
	PortDescription __value_;
} compressed_pair<dspd::PortDescription *, std::__1::allocator<dspd::PortDescription>>;

typedef struct vector<dspd::PortDescription, std::__1::allocator<dspd::PortDescription>> {
	PortDescription __begin_;
	PortDescription __end_;
	compressed_pair<dspd::PortDescription *, std::__1::allocator<dspd::PortDescription>> __end_cap_;
} vector<dspd::PortDescription, std::__1::allocator<dspd::PortDescription>>;

typedef struct _compressed_pair<dspd::StreamDescription *, std::__1::allocator<dspd::StreamDescription>> {
	StreamDescription __value_;
} compressed_pair<dspd::StreamDescription *, std::__1::allocator<dspd::StreamDescription>>;

typedef struct vector<dspd::StreamDescription, std::__1::allocator<dspd::StreamDescription>> {
	StreamDescription __begin_;
	StreamDescription __end_;
	compressed_pair<dspd::StreamDescription *, std::__1::allocator<dspd::StreamDescription>> __end_cap_;
} vector<dspd::StreamDescription, std::__1::allocator<dspd::StreamDescription>>;

typedef struct _compressed_pair<dspd::DeviceDescription *, std::__1::allocator<dspd::DeviceDescription>> {
	DeviceDescription __value_;
} compressed_pair<dspd::DeviceDescription *, std::__1::allocator<dspd::DeviceDescription>>;

typedef struct vector<dspd::DeviceDescription, std::__1::allocator<dspd::DeviceDescription>> {
	DeviceDescription __begin_;
	DeviceDescription __end_;
	compressed_pair<dspd::DeviceDescription *, std::__1::allocator<dspd::DeviceDescription>> __end_cap_;
} vector<dspd::DeviceDescription, std::__1::allocator<dspd::DeviceDescription>>;

typedef struct _compressed_pair<dspd::IOControllerDescription *, std::__1::allocator<dspd::IOControllerDescription>> {
	IOControllerDescription __value_;
} compressed_pair<dspd::IOControllerDescription *, std::__1::allocator<dspd::IOControllerDescription>>;

typedef struct vector<dspd::IOControllerDescription, std::__1::allocator<dspd::IOControllerDescription>> {
	IOControllerDescription __begin_;
	IOControllerDescription __end_;
	compressed_pair<dspd::IOControllerDescription *, std::__1::allocator<dspd::IOControllerDescription>> __end_cap_;
} vector<dspd::IOControllerDescription, std::__1::allocator<dspd::IOControllerDescription>>;

typedef struct optional<AVAudioSessionActivationAccessibilityPreference> {
	/*function pointer*/void* ;
	char __null_state_;
	Q) __val_;
	BOOL __engaged_;
} optional<AVAudioSessionActivationAccessibilityPreference>;

typedef struct optional<AVAudioSessionActivationCallDirection> {
	/*function pointer*/void* ;
	char __null_state_;
	Q) __val_;
	BOOL __engaged_;
} optional<AVAudioSessionActivationCallDirection>;

typedef struct optional<applesauce::CF::StringRef> {
	/*function pointer*/void* ;
	char __null_state_;
	StringRef) __val_;
	BOOL __engaged_;
} optional<applesauce::CF::StringRef>;

typedef struct InitiationTriggerSpecification {
	unsigned mTrigger;
	optional<applesauce::CF::StringRef> mInitiatingUID;
	optional<AVAudioSessionActivationAccessibilityPreference> mAccessibilityPreference;
	optional<AVAudioSessionActivationCallDirection> mCallDirection;
} InitiationTriggerSpecification;

typedef struct optional<aura::InitiationTriggerSpecification> {
	/*function pointer*/void* ;
	char __null_state_;
	InitiationTriggerSpecification) __val_;
	BOOL __engaged_;
} optional<aura::InitiationTriggerSpecification>;

typedef struct object {
	NSObject<OS_dispatch_object>* fObj;
} object;

typedef struct queue {
	object fObj;
} queue;

typedef struct _compressed_pair<std::__1::any *, std::__1::allocator<std::__1::any>> {
	any __value_;
} compressed_pair<std::__1::any *, std::__1::allocator<std::__1::any>>;

typedef struct vector<std::__1::any, std::__1::allocator<std::__1::any>> {
	any __begin_;
	any __end_;
	compressed_pair<std::__1::any *, std::__1::allocator<std::__1::any>> __end_cap_;
} vector<std::__1::any, std::__1::allocator<std::__1::any>>;

typedef struct shared_ptr<AudioNotification::DynamicBus> {
	DynamicBus __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<AudioNotification::DynamicBus>;

typedef struct _compressed_pair<dspd::StreamDescription *, std::__1::default_delete<dspd::StreamDescription>> {
	StreamDescription __value_;
} compressed_pair<dspd::StreamDescription *, std::__1::default_delete<dspd::StreamDescription>>;

typedef struct unique_ptr<dspd::StreamDescription, std::__1::default_delete<dspd::StreamDescription>> {
	compressed_pair<dspd::StreamDescription *, std::__1::default_delete<dspd::StreamDescription>> __ptr_;
} unique_ptr<dspd::StreamDescription, std::__1::default_delete<dspd::StreamDescription>>;

typedef struct _compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long>> {
	unsigned long long __value_;
} compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long>>;

typedef struct _compressed_pair<std::__1::tuple<double, double> *, std::__1::allocator<std::__1::tuple<double, double>>> {
	tuple<double, double> __value_;
} compressed_pair<std::__1::tuple<double, double> *, std::__1::allocator<std::__1::tuple<double, double>>>;

typedef struct vector<std::__1::tuple<double, double>, std::__1::allocator<std::__1::tuple<double, double>>> {
	tuple<double, double> __begin_;
	tuple<double, double> __end_;
	compressed_pair<std::__1::tuple<double, double> *, std::__1::allocator<std::__1::tuple<double, double>>> __end_cap_;
} vector<std::__1::tuple<double, double>, std::__1::allocator<std::__1::tuple<double, double>>>;

typedef struct HardwareInfo {
	optional<applesauce::CF::StringRef> mHardwareName;
	optional<applesauce::CF::StringRef> mModelName;
	optional<applesauce::CF::StringRef> mManufacturerName;
} HardwareInfo;

typedef struct vector<unsigned long long, std::__1::allocator<unsigned long long>> {
	unsigned long long __begin_;
	unsigned long long __end_;
	compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long>> __end_cap_;
} vector<unsigned long long, std::__1::allocator<unsigned long long>>;

typedef struct DeviceDescription {
	unsigned long long mDeviceDescriptionID;
	vector<unsigned long long, std::__1::allocator<unsigned long long>> mStreamDescriptionIDs;
	StringRef mUID;
	HardwareInfo mHardwareInfo;
	double mSampleRate;
	vector<std::__1::tuple<double, double>, std::__1::allocator<std::__1::tuple<double, double>>> mSupportedSampleRates;
	unsigned mInputLatency;
	unsigned mOutputLatency;
	unsigned mInputSafetyOffset;
	unsigned mOutputSafetyOffset;
} DeviceDescription;

