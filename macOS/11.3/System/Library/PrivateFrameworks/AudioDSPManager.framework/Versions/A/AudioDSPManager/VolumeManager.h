/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:23 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/AudioDSPManager.framework/Versions/A/AudioDSPManager
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <AudioDSPManager/AudioDSPManager-Structs.h>
#import <libobjc.A.dylib/RPBHostDelegate.h>
#import <libobjc.A.dylib/RPBServerListener.h>
#import <libobjc.A.dylib/NSSecureCoding.h>

@protocol dspd_HardwareVolumeDelegate, SoftwareVolumeDelegate, dspd_GraphVolumeDelegate;
@class RPBHost, NSString;

@interface VolumeManager : NSObject <RPBHostDelegate, RPBServerListener, NSSecureCoding> {

	unordered_map<unsigned long long, adm::vm::Port, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, adm::vm::Port>>>* mPorts;
	unordered_map<unsigned long long, IOControllerState, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, IOControllerState>>>* mIOControllers;
	id<dspd_HardwareVolumeDelegate> mHardwareVolumeDelegate;
	id<SoftwareVolumeDelegate> mSoftwareVolumeDelegate;
	id<dspd_GraphVolumeDelegate> mGraphVolumeDelegate;
	shared_ptr<AudioNotification::BusStation>* mBusStation;

}

@property (readonly) RPBHost * remoteProcessingBlockHost; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) vector<dspd::PortRecord<float> scalarVolumeRecords; 
@property (nonatomic,readonly) vector<dspd::PortRecord<bool> muteRecords; 
+(char)supportsSecureCoding;
-(void)dealloc;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(expected<bool, std::__1::error_code>*)levelControlSettable:(unsigned long long)arg1 element:(unsigned)arg2 ;
-(expected<float, std::__1::error_code>*)scalarVolume:(unsigned long long)arg1 element:(unsigned)arg2 ;
-(error_code*)setScalarVolume:(unsigned long long)arg1 element:(unsigned)arg2 scalarVolume:(float)arg3 ;
-(expected<float, std::__1::error_code>*)decibelVolume:(unsigned long long)arg1 element:(unsigned)arg2 ;
-(error_code*)setDecibelVolume:(unsigned long long)arg1 element:(unsigned)arg2 decibelVolume:(float)arg3 ;
-(expected<std::__1::tuple<double, double>, std::__1::error_code>*)decibelVolumeRange:(unsigned long long)arg1 element:(unsigned)arg2 ;
-(expected<float, std::__1::error_code>*)convertScalarToDecibels:(unsigned long long)arg1 element:(unsigned)arg2 scalarVolume:(float)arg3 ;
-(expected<float, std::__1::error_code>*)convertDecibelsToScalar:(unsigned long long)arg1 element:(unsigned)arg2 decibelVolume:(float)arg3 ;
-(error_code*)setLevelControlValueChangeObserver:(unsigned long long)arg1 element:(unsigned)arg2 observer:(function<void ()>*)arg3 ;
-(expected<bool, std::__1::error_code>*)muteControlSettable:(unsigned long long)arg1 element:(unsigned)arg2 ;
-(expected<bool, std::__1::error_code>*)isMuted:(unsigned long long)arg1 element:(unsigned)arg2 ;
-(error_code*)setMuted:(unsigned long long)arg1 element:(unsigned)arg2 isMuted:(BOOL)arg3 ;
-(error_code*)setMuteControlValueChangeObserver:(unsigned long long)arg1 element:(unsigned)arg2 observer:(function<void ()>*)arg3 ;
-(expected<bool, std::__1::error_code>*)stereoPanControlSettable:(unsigned long long)arg1 element:(unsigned)arg2 ;
-(expected<float, std::__1::error_code>*)stereoPan:(unsigned long long)arg1 element:(unsigned)arg2 ;
-(error_code*)setStereoPan:(unsigned long long)arg1 element:(unsigned)arg2 stereoPan:(float)arg3 ;
-(expected<std::__1::tuple<unsigned int, unsigned int>, std::__1::error_code>*)stereoPanChannels:(unsigned long long)arg1 element:(unsigned)arg2 ;
-(error_code*)setStereoPanControlValueChangeObserver:(unsigned long long)arg1 element:(unsigned)arg2 observer:(function<void ()>*)arg3 ;
-(error_code*)setHardwareVolumeDelegate:(id)arg1 ;
-(error_code*)setGraphVolumeDelegate:(id)arg1 ;
-(expected<dspd::VolumeCapabilites, std::__1::error_code>*)volumeCapabilities:(unsigned long long)arg1 ;
-(expected<float, std::__1::error_code>*)virtualMasterVolume:(unsigned long long)arg1 ;
-(error_code*)setVirtualMasterVolume:(unsigned long long)arg1 scalarVolume:(float)arg2 ;
-(expected<float, std::__1::error_code>*)virtualMasterStereoPan:(unsigned long long)arg1 ;
-(error_code*)setVirtualMasterStereoPan:(unsigned long long)arg1 stereoPan:(float)arg2 ;
-(vector<dspd::VolumeUpdateResult, std::__1::allocator<dspd::VolumeUpdateResult>>*)setScalarVolumeRecords:(vector<dspd::PortRecord<float>)arg1 ;
-(vector<dspd::VolumeUpdateResult, std::__1::allocator<dspd::VolumeUpdateResult>>*)setMuteRecords:(vector<dspd::PortRecord<bool>)arg1 ;
-(error_code*)fadeVolumeLevel:(float)arg1 ioControllerID:(unsigned long long)arg2 direction:(unsigned char)arg3 portID:(optional<unsigned long long>)arg4 duration:(duration<long long, std::__1::ratio<1, 1000>>)arg5 completionHandler:(function<void (std::__1::error_code)>*)arg6 ;
-(vector<dspd::PortRecord<float>)scalarVolumeRecords;
-(vector<dspd::PortRecord<bool>)muteRecords;
-(IOControllerState*)findOrCreateIOControllerState:(unsigned long long)arg1 ;
-(shared_ptr<adm::graph::FadeController>*)fadeControllerForIOController:(unsigned long long)arg1 ;
-(id)initWithBusStation:(id)arg1 ;
-(error_code*)setSoftwareVolumeDelegate:(id)arg1 ;
-(id)getGraphVolumeDelegate;
-(error_code*)configurePort:(unsigned long long)arg1 volumePolicy:(VolumePolicy*)arg2 volumeCapabilities:(VolumeCapabilites*)arg3 ;
-(error_code*)updateSoftwareVolumeCapabilities:(const SoftwareVolumeCatalog*)arg1 ;
-(vector<unsigned long long, std::__1::allocator<unsigned long long>>*)getPortDescriptionIDs;
-(vector<unsigned long long, std::__1::allocator<unsigned long long>>*)getIOControllerIDs;
-(void)getRemoteProcessingBlockProperty:(id*)arg1 forID:(unsigned)arg2 scope:(unsigned)arg3 element:(unsigned)arg4 object:(id)arg5 withError:(id*)arg6 ;
-(void)setRemoteProcessingBlockProperty:(id)arg1 forID:(unsigned)arg2 scope:(unsigned)arg3 element:(unsigned)arg4 object:(id)arg5 withError:(id*)arg6 ;
-(void)remoteProcessingBlockServerDidStartRunning:(id)arg1 ;
-(void)remoteProcessingBlockServerDidStopRunning:(id)arg1 ;
-(RPBHost *)remoteProcessingBlockHost;
-(void)tearDownRemoteProcessingBlockHost;
-(void)setRemoteProcessingBlockHost:(RPBHost *)arg1 ;
-(void)connectToRemoteProcessingBlock;
-(void)disconnectFromRemoteProcessingBlock;
-(void)setUpRemoteProcessingBlockHost;
@end

