/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:54 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/VoiceShortcuts.framework/Versions/A/VoiceShortcuts
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/VCUserNotificationManagerDelegate.h>
#import <libobjc.A.dylib/VCTriggerEventRunnerDelegate.h>

@protocol VCDatabaseProvider, OS_dispatch_queue;
@class VCUserNotificationManager, VCTriggerEventRunner, NSObject, NSString;

@interface VCTriggerEventQueue : NSObject <VCUserNotificationManagerDelegate, VCTriggerEventRunnerDelegate> {

	id<VCDatabaseProvider> _databaseProvider;
	VCUserNotificationManager* _notificationManager;
	VCTriggerEventRunner* _triggerEventRunner;
	NSObject*<OS_dispatch_queue> _queue;

}

@property (nonatomic,readonly) id<VCDatabaseProvider> databaseProvider;                      //@synthesize databaseProvider=_databaseProvider - In the implementation block
@property (nonatomic,readonly) VCUserNotificationManager * notificationManager;              //@synthesize notificationManager=_notificationManager - In the implementation block
@property (nonatomic,readonly) VCTriggerEventRunner * triggerEventRunner;                    //@synthesize triggerEventRunner=_triggerEventRunner - In the implementation block
@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> queue;                           //@synthesize queue=_queue - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(char)shouldRunTrigger:(id)arg1 forEvent:(id)arg2 runEvents:(id)arg3 error:(id*)arg4 ;
+(double)rateLimitingTimeoutForTrigger:(id)arg1 runEvents:(id)arg2 ;
-(void)resume;
-(NSObject*<OS_dispatch_queue>)queue;
-(VCUserNotificationManager *)notificationManager;
-(id<VCDatabaseProvider>)databaseProvider;
-(id)databaseWithError:(id*)arg1 ;
-(void)didFinishRunningWithError:(id)arg1 cancelled:(char)arg2 trigger:(id)arg3 runEvent:(id)arg4 ;
-(void)notificationManager:(id)arg1 receivedConfirmationToRunTriggerWithIdentifier:(id)arg2 pendingTriggerEventIDs:(id)arg3 ;
-(void)notificationManager:(id)arg1 didDismissTriggerWithIdentifier:(id)arg2 pendingTriggerEventIDs:(id)arg3 ;
-(void)notificationManager:(id)arg1 didFailToPostNotificationPromptWithTriggerIdentifier:(id)arg2 pendingTriggerEventIDs:(id)arg3 ;
-(id)initWithDatabaseProvider:(id)arg1 runCoordinator:(id)arg2 ;
-(void)resumeWithConfiguredTrigger:(id)arg1 workflowReference:(id)arg2 eventInfo:(id)arg3 ;
-(void)runWithConfiguredTrigger:(id)arg1 workflowReference:(id)arg2 eventInfo:(id)arg3 ;
-(void)enqueueTriggerWithIdentifier:(id)arg1 eventInfo:(id)arg2 force:(char)arg3 completion:(/*^block*/id)arg4 ;
-(unsigned long long)numberOfEventsInQueueWithConfirmationOnly:(char)arg1 ;
-(char)deleteTriggerEvent:(id)arg1 error:(id*)arg2 ;
-(id)nextTriggerEventWithError:(id*)arg1 ;
-(id)configuredTriggerForIdentifier:(id)arg1 workflowReference:(id*)arg2 error:(id*)arg3 ;
-(id)triggerEventsForConfiguredTrigger:(id)arg1 eventInfo:(id)arg2 confirmed:(char)arg3 error:(id*)arg4 ;
-(void)setConfirmedForTriggerEventIDs:(id)arg1 error:(id*)arg2 ;
-(void)removePendingTriggerEventsWithEventIDs:(id)arg1 ;
-(char)shouldRunEmailOrMessageTrigger:(id)arg1 forEvent:(id)arg2 runEvents:(id)arg3 error:(id*)arg4 ;
-(void)removeStalePendingNotificationsAndTriggerEvents;
-(void)removeAllStaleTriggerEventsIgnoringValidIDs:(id)arg1 ;
-(char)isTriggerEventStale:(id)arg1 ;
-(void)logMetricForTrigger:(id)arg1 ;
-(VCTriggerEventRunner *)triggerEventRunner;
@end

