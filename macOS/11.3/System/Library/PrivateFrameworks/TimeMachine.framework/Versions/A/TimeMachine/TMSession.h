/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:33 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/TimeMachine.framework/Versions/A/TimeMachine
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <TimeMachine/TimeMachine-Structs.h>
@class NSSet, NSURL, NSRunLoop, NSMutableOrderedSet, NSArray;

@interface TMSession : NSObject {

	os_unfair_lock_s _backupsLock;
	/*^block*/id _backupMountedBlock;
	/*^block*/id _backupUnmountedBlock;
	NSSet* _cachedBackupDates;
	NSURL* _dataVolumeMountPoint;
	NSURL* _currentMachineStoreURL;
	long long _options;
	id _daSession;
	NSRunLoop* _sessionRunLoop;
	NSMutableOrderedSet* _backups;

}

@property (readonly) long long options;                           //@synthesize options=_options - In the implementation block
@property (retain) id daSession;                                  //@synthesize daSession=_daSession - In the implementation block
@property (retain) NSRunLoop * sessionRunLoop;                    //@synthesize sessionRunLoop=_sessionRunLoop - In the implementation block
@property (readonly) NSMutableOrderedSet * backups;               //@synthesize backups=_backups - In the implementation block
@property (readonly) os_unfair_lock_s backupsLock;                //@synthesize backupsLock=_backupsLock - In the implementation block
@property (retain) NSSet * cachedBackupDates;                     //@synthesize cachedBackupDates=_cachedBackupDates - In the implementation block
@property (retain) NSURL * currentMachineStoreURL;                //@synthesize currentMachineStoreURL=_currentMachineStoreURL - In the implementation block
@property (copy) id backupMountedBlock;                           //@synthesize backupMountedBlock=_backupMountedBlock - In the implementation block
@property (copy) id backupUnmountedBlock;                         //@synthesize backupUnmountedBlock=_backupUnmountedBlock - In the implementation block
@property (readonly) NSArray * browsableBackupDates; 
@property (readonly) NSURL * dataVolumeMountPoint;                //@synthesize dataVolumeMountPoint=_dataVolumeMountPoint - In the implementation block
+(long long)volumeTypeForMountPoint:(id)arg1 ;
+(id)cache;
+(id)sessionTable;
+(id)sessionForTMVolumeMountPoint:(id)arg1 options:(long long)arg2 error:(id*)arg3 ;
+(void)setSession:(id)arg1 forMountPoint:(id)arg2 ;
+(char)_connectToBackupd:(id*)arg1 connectionBlock:(/*^block*/id)arg2 ;
+(id)testBackupProxy;
+(char)_connectToBackupd:(id*)arg1 timeout:(unsigned long long)arg2 connectionBlock:(/*^block*/id)arg3 ;
+(id)existingSessionForMountPoint:(id)arg1 ;
+(id)browsingSessionForTMVolumeMountPoint:(id)arg1 error:(id*)arg2 ;
+(id)browsingSessionForTMVolumeMountPoint:(id)arg1 options:(long long)arg2 error:(id*)arg3 ;
+(id)deleteBackupForMountPoint:(id)arg1 date:(id)arg2 error:(id*)arg3 ;
+(id)deleteInProgressBackupsForMountPoint:(id)arg1 error:(id*)arg2 ;
+(void)setTestBackupProxy:(id)arg1 ;
+(char)volumeTypeSupportsStoringSpotlightIndex:(long long)arg1 ;
+(id)_inheritanceHistoryForBackupURL:(id)arg1 ;
+(id)currentVolumeUUIDForHistoricVolumeUUID:(id)arg1 usingInheritanceHistory:(id)arg2 ;
+(id)migrationSessionForTMVolumeMountPoint:(id)arg1 error:(id*)arg2 ;
+(id)ROSPVolumeStoreInfoCache;
+(id)remappingCache;
+(id)inheritanceHistoryCache;
+(void)clearPathMappingCaches;
+(id)currentSystemVolume;
+(id)currentDataVolume;
+(id)_mountDestinationForDestinationID:(id)arg1 error:(id*)arg2 ;
+(id)_volumeUUIDForVolumeStoreAtURL:(id)arg1 ;
+(TMBackupPathRanges)_backupPathRangesInPath:(id)arg1 ;
+(id)_machineStoreURLForBackupURL:(id)arg1 ;
+(id)currentDataVolumeUUID;
+(id)_pathInBackupForVolumeRelativePath:(id)arg1 volumeName:(id)arg2 volumeUUID:(id)arg3 pathToBackup:(id)arg4 currentDataVolumeName:(id)arg5 currentDataVolumeUUID:(id)arg6 currentSystemVolumeName:(id)arg7 currentSystemVolumeUUID:(id)arg8 firmLinkMap:(id)arg9 ;
+(id)_cachedVolumeStorePathForVolumeUUID:(id)arg1 backupURL:(id)arg2 ;
+(id)_tryVolumeNameRemapInBackupForVolumeName:(id)arg1 volumeUUID:(id)arg2 backupURL:(id)arg3 ;
+(id)_tryROSPVolumeNameRemapInBackupForVolumeUUID:(id)arg1 backupURL:(id)arg2 currentDataVolumeUUID:(id)arg3 currentSystemVolumeName:(id)arg4 ;
+(id)_tryUUIDSearchInBackupURL:(id)arg1 forVolumeUUID:(id)arg2 alternateSystemUUID:(id)arg3 inheritanceHistory:(id)arg4 ;
+(id)_failOverVolumeStoreNameForVolumeRelativePath:(id)arg1 volumeName:(id)arg2 volumeUUID:(id)arg3 currentDataVolumeName:(id)arg4 currentDataVolumeUUID:(id)arg5 currentSystemVolumeName:(id)arg6 currentSystemVolumeUUID:(id)arg7 firmLinkMap:(id)arg8 ;
+(void)cacheVolumeStoreName:(id)arg1 forVolumeUUID:(id)arg2 backupURL:(id)arg3 ;
+(char)checkAndSetIsInCurrentSystemDataVolumeForPath:(id)arg1 ranges:(TMBackupPathRanges)arg2 ;
+(id)currentDataVolumeMountPoint;
+(void)clearROSPCache;
+(id)_browsingSessionForDestinationID:(id)arg1 error:(id*)arg2 ;
+(id)_pathInBackupForVolumeRelativePath:(id)arg1 volumeName:(id)arg2 volumeUUID:(id)arg3 pathToBackup:(id)arg4 ;
+(id)_inferOriginalPathFromBackedUpItemPath:(id)arg1 ;
+(id)_inferBackupRootPathFromBackedUpItemPath:(id)arg1 ;
+(id)_replaceBackupPathForBackedUpItemPath:(id)arg1 newBackupPath:(id)arg2 ;
+(id)_backupRelativePathFromBackedUpItemPath:(id)arg1 ;
+(id)_originalLocationForBackedUpItem:(id)arg1 error:(id*)arg2 ;
+(id)_synthesizedDirectoryPathForBackupPath:(id)arg1 backupMountPoint:(id)arg2 ;
+(id)cachedBackupDatesForDestinationID:(id)arg1 ;
+(id)calculateUniqueSizeForBackupDate:(id)arg1 liveVolume:(id)arg2 allowCachedValue:(char)arg3 error:(id*)arg4 ;
+(id)calculateTotalSizeForBackupDate:(id)arg1 liveVolume:(id)arg2 allowCachedValue:(char)arg3 error:(id*)arg4 ;
+(void)setCurrentROSPDataVolumeUUID:(id)arg1 ;
+(void)setCurrentROSPDataVolumeMountPoint:(id)arg1 ;
+(void)setNextVolumeStoreVolumeUUID:(id)arg1 ;
-(void)dealloc;
-(long long)options;
-(NSURL *)dataVolumeMountPoint;
-(id)initWithLiveVolumeMountPoint:(id)arg1 options:(long long)arg2 ;
-(char)_prepareBackupsForTMVolumeMountPoint:(id)arg1 options:(long long)arg2 error:(id*)arg3 ;
-(NSMutableOrderedSet *)backups;
-(void)setCurrentMachineStoreURL:(NSURL *)arg1 ;
-(void)setCachedBackupDates:(NSSet *)arg1 ;
-(void)setSessionRunLoop:(NSRunLoop *)arg1 ;
-(void)setDaSession:(id)arg1 ;
-(id)daSession;
-(NSRunLoop *)sessionRunLoop;
-(char)finishSession:(id*)arg1 ;
-(NSArray *)browsableBackupDates;
-(id)completeBackupInfoEnumerator:(id*)arg1 ;
-(id)browsableBackupEnumerator:(id*)arg1 ;
-(id)_readyBackupForDate:(id)arg1 error:(id*)arg2 ;
-(const DADissenterRef)_copyUnmountDissenterForDisk:(DADiskRef)arg1 ;
-(id)backupMountedBlock;
-(void)setBackupMountedBlock:(id)arg1 ;
-(id)backupUnmountedBlock;
-(void)setBackupUnmountedBlock:(id)arg1 ;
-(NSSet *)cachedBackupDates;
-(NSURL *)currentMachineStoreURL;
-(os_unfair_lock_s)backupsLock;
-(id)_enumeratorForMountedBackupsForMachineStoreInfo:(id)arg1 ;
-(id)machineStoreInfoEnumerator:(id*)arg1 ;
-(id)latestVolumeStoreInfoEnumeratorForMachineStoreInfo:(id)arg1 error:(id*)arg2 ;
-(id)enumeratorForVolumeStoreInfosMatchingVolumeStoreInfo:(id)arg1 error:(id*)arg2 ;
-(id)_synthesizeLegacyBackupDB:(id*)arg1 ;
@end

