/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:14 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/CloudPhotoLibrary.framework/Versions/A/CloudPhotoLibrary
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <CloudPhotoLibrary/CPLEngineStorage.h>
#import <libobjc.A.dylib/CPLAbstractObject.h>

@class _CPLEngineScopeCache, NSMutableSet, CPLPlatformObject, NSString;

@interface CPLEngineScopeStorage : CPLEngineStorage <CPLAbstractObject> {

	_CPLEngineScopeCache* _scopeCache;
	NSMutableSet* _scopeIdentifiersExcludedFromMingling;
	NSMutableSet* _scopeIdentifiersManuallyExcludedFromMingling;
	char _shouldResetGlobalsForMainScope;
	char _scheduleATransportUpdate;
	char _scheduleAScopeUpdate;
	char _schedulePushHighPriorityToTransport;
	char _schedulePushToTransport;
	char _schedulePullFromTransport;
	char _schedulePullFromClient;
	char _shouldChangeSyncManagerPriorityBoost;
	char _syncManagerPriorityBoost;
	char _someScopeMightHaveToBePulledByClient;
	char _clearSomeScopeMightHaveToBePulledByClient;

}

@property (nonatomic,readonly) char hasStagedSyncAnchors; 
@property (nonatomic,readonly) CPLPlatformObject * platformObject; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id)status;
-(char)openWithError:(id*)arg1 ;
-(unsigned long long)scopeType;
-(id)initWithEngineStore:(id)arg1 name:(id)arg2 ;
-(void)writeTransactionDidFail;
-(void)writeTransactionDidSucceed;
-(void)_clearScopeCache;
-(void)_cacheScope:(id)arg1 ;
-(id)_scopeWithIdentifier:(id)arg1 ;
-(id)scopeWithLocalScopeIndex:(long long)arg1 ;
-(id)scopeWithCloudScopeIndex:(long long)arg1 ;
-(id)_scopeWithStableIndex:(long long)arg1 ;
-(void)_forceSyncManagerPriorityBoost;
-(void)_checkSyncManagerPriorityBoost;
-(id)enumeratorForScopesIncludeInactive:(char)arg1 ;
-(id)enumeratorForScopesNeedingUpdateFromTransport;
-(id)enumeratorForScopesNeedingToPushHighPriorityChangesToTransport;
-(char)hasScopesNeedingToPushHighPriorityChangesToTransport;
-(id)enumeratorForScopesNeedingToPushChangesToTransport;
-(char)hasScopesNeedingToPushChangesToTransport;
-(char)setScopeHasChangesToPushToTransport:(id)arg1 error:(id*)arg2 ;
-(long long)pushToTransportTaskForScope:(id)arg1 ;
-(char)setScope:(id)arg1 hasCompletedPushToTransportTask:(long long)arg2 error:(id*)arg3 ;
-(char)doesScopeNeedToPushChangesToTransport:(id)arg1 ;
-(id)enumeratorForScopesNeedingToPullChangesFromTransport;
-(char)hasScopesNeedingToPullChangesFromTransport;
-(char)setScopeHasChangesToPullFromTransport:(id)arg1 error:(id*)arg2 ;
-(char)setAllScopesHasChangesToPullFromTransportWithError:(id*)arg1 ;
-(long long)pullFromTransportTaskForScope:(id)arg1 ;
-(char)setScope:(id)arg1 hasCompletedPullFromTransportTask:(long long)arg2 error:(id*)arg3 ;
-(char)doesScopeNeedToPullChangesFromTransport:(id)arg1 ;
-(char)setPullFromTransportExpirationInterval:(double)arg1 scope:(id)arg2 error:(id*)arg3 ;
-(char)doScopesNeedMetadataSync:(id)arg1 ;
-(id)_scopeChangeToBePulledByClientForScope:(id)arg1 ;
-(id)scopeChangesNeedingToBePulledByClientWithMaximumCount:(unsigned long long)arg1 ;
-(char)clientAcknowledegedScopeChanges:(id)arg1 error:(id*)arg2 ;
-(char)setScopeNeedsToBePulledByClient:(id)arg1 error:(id*)arg2 ;
-(char)doesScopeNeedToBePulledByClient:(id)arg1 ;
-(char)doesScopeSupportToBePulledByClient:(id)arg1 ;
-(id)enumeratorForScopesNeedingToUpdateTransport;
-(id)_createScopeFromScopeChange:(id)arg1 error:(id*)arg2 ;
-(char)updateScopeWithChange:(id)arg1 error:(id*)arg2 ;
-(char)hasScopesNeedingToUpdateTransport;
-(char)setScopeNeedsToUpdateTransport:(id)arg1 error:(id*)arg2 ;
-(long long)transportUpdateTaskForScope:(id)arg1 ;
-(char)setScope:(id)arg1 hasCompletedTransportUpdate:(long long)arg2 error:(id*)arg3 ;
-(char)doesScopeNeedToUpdateTransport:(id)arg1 ;
-(id)allScopeIdentifiersIncludeInactive:(char)arg1 ;
-(void)_resetGlobalsForMainScope;
-(char)_handledDisabledFeaturesForScopeIfNecessary:(id)arg1 type:(long long)arg2 error:(id*)arg3 ;
-(id)createScopeWithIdentifier:(id)arg1 scopeType:(long long)arg2 flags:(long long)arg3 transportScope:(id)arg4 error:(id*)arg5 ;
-(char)deleteScopeWithIdentifier:(id)arg1 error:(id*)arg2 ;
-(char)_setScopeType:(long long)arg1 forScope:(id)arg2 error:(id*)arg3 ;
-(id)scopedIdentifierForLocalScopedIdentifier:(id)arg1 ;
-(id)scopedIdentifierForCloudScopedIdentifier:(id)arg1 ;
-(long long)indexForLocalScopeIdentifier:(id)arg1 ;
-(long long)indexForCloudScopeIdentifier:(id)arg1 ;
-(id)scopeIdentifierForLocalScopeIndex:(long long)arg1 ;
-(id)scopeIdentifierForCloudScopeIndex:(long long)arg1 ;
-(char)setLocalScopeIndexOnChange:(id)arg1 ;
-(char)setCloudScopeIndexOnChange:(id)arg1 ;
-(id)validLocalScopeIndexes;
-(id)validCloudScopeIndexes;
-(long long)stableScopeIndexForScopeIdentifier:(id)arg1 ;
-(char)_resetLocalSyncStateForScope:(id)arg1 error:(id*)arg2 ;
-(char)resetLocalSyncStateForScope:(id)arg1 error:(id*)arg2 ;
-(char)_resetCompleteSyncStateForScope:(id)arg1 error:(id*)arg2 ;
-(char)resetCompleteSyncStateForScope:(id)arg1 error:(id*)arg2 ;
-(char)resetCompleteSyncStateIncludingIDMappingForScope:(id)arg1 error:(id*)arg2 ;
-(char)resetSyncAnchorForScope:(id)arg1 error:(id*)arg2 ;
-(char)resetLocalRecordsForScopeWithIdentifier:(id)arg1 error:(id*)arg2 ;
-(char)resetCloudRecordsForScopeWithIdentifier:(id)arg1 error:(id*)arg2 ;
-(char)resetStableRecordsForScopeWithIdentifier:(id)arg1 error:(id*)arg2 ;
-(id)flagsForScope:(id)arg1 ;
-(char)updateFlags:(id)arg1 forScope:(id)arg2 error:(id*)arg3 ;
-(char)setValue:(char)arg1 forFlag:(long long)arg2 forScope:(id)arg3 error:(id*)arg4 ;
-(char)valueForFlag:(long long)arg1 forScope:(id)arg2 ;
-(id)disabledDateForScope:(id)arg1 ;
-(char)setDisabledDate:(id)arg1 forScope:(id)arg2 error:(id*)arg3 ;
-(id)deleteDateForScope:(id)arg1 ;
-(char)setDeleteDate:(id)arg1 forScope:(id)arg2 error:(id*)arg3 ;
-(char)resetSyncStateForScope:(id)arg1 error:(id*)arg2 ;
-(id)uploadTransportGroupForScope:(id)arg1 ;
-(id)downloadTransportGroupForScope:(id)arg1 ;
-(char)setupInitialSyncTransportGroupsForScope:(id)arg1 error:(id*)arg2 ;
-(char)updateInitialSyncTransportGroupEstimatedSize:(unsigned long long)arg1 assetCount:(unsigned long long)arg2 forScope:(id)arg3 error:(id*)arg4 ;
-(char)setupResetSyncTransportGroupForScope:(id)arg1 error:(id*)arg2 ;
-(char)setupAnchorResetTransportGroupForScope:(id)arg1 error:(id*)arg2 ;
-(char)clearTransportGroupsForScope:(id)arg1 error:(id*)arg2 ;
-(id)scopeWithIdentifier:(id)arg1 ;
-(char)setScopeNeedsUpdateFromTransport:(id)arg1 error:(id*)arg2 ;
-(id)transportScopeForScope:(id)arg1 ;
-(char)setTransportScope:(id)arg1 forScope:(id)arg2 error:(id*)arg3 ;
-(id)scopeChangeForScope:(id)arg1 ;
-(char)storeScopeChange:(id)arg1 forScope:(id)arg2 error:(id*)arg3 ;
-(char)didDropSomeRecordsForScope:(id)arg1 ;
-(char)setDidDropSomeRecordsForScope:(id)arg1 error:(id*)arg2 ;
-(id)syncAnchorForScope:(id)arg1 ;
-(char)setSyncAnchor:(id)arg1 forScope:(id)arg2 error:(id*)arg3 ;
-(char)commitSyncAnchorForScope:(id)arg1 error:(id*)arg2 ;
-(char)discardStagedSyncAnchorForScope:(id)arg1 error:(id*)arg2 ;
-(char)discardStagedSyncAnchorWithScopeFilter:(id)arg1 error:(id*)arg2 ;
-(char)hasStagedSyncAnchorForScope:(id)arg1 ;
-(char)hasStagedSyncAnchors;
-(id)transientSyncAnchorForScope:(id)arg1 ;
-(char)storeTransientSyncAnchor:(id)arg1 forScope:(id)arg2 error:(id*)arg3 ;
-(char)disableInitialQueriesForScope:(id)arg1 error:(id*)arg2 ;
-(unsigned long long)_indexOfCurrentClassForInitialQueriesForScope:(id)arg1 ;
-(Class)classOfRecordsForInitialQueryForScope:(id)arg1 ;
-(char)markInitialQueryIsDoneForRecordsOfClass:(Class)arg1 forScope:(id)arg2 error:(id*)arg3 ;
-(char)hasScopeFetchedInitialSyncAnchor:(id)arg1 ;
-(char)setHasFetchedInitialSyncAnchor:(char)arg1 forScope:(id)arg2 error:(id*)arg3 ;
-(char)setInitialSyncAnchor:(id)arg1 forScope:(id)arg2 error:(id*)arg3 ;
-(id)initialSyncAnchorForScope:(id)arg1 ;
-(char)resetInitialSyncAnchorForScope:(id)arg1 error:(id*)arg2 ;
-(id)remainingClassesForInitialQueryForScope:(id)arg1 ;
-(char)hasFinishedInitialSyncForScope:(id)arg1 ;
-(char)hasFinishedAFullSyncForScope:(id)arg1 ;
-(id)lastDateOfClearedPushRepositoryForScope:(id)arg1 ;
-(char)storeLastDateOfClearedPushRepository:(id)arg1 forScope:(id)arg2 error:(id*)arg3 ;
-(id)lastDateOfCompletedPullFromTransportForScope:(id)arg1 ;
-(unsigned long long)supportedFeatureVersionInLastSyncForScope:(id)arg1 ;
-(char)storeSupportedFeatureVersionInLastSync:(unsigned long long)arg1 forScope:(id)arg2 error:(id*)arg3 ;
-(char)supportedFeatureVersionIsMostRecentForScope:(id)arg1 ;
-(char)storeEstimatedSize:(unsigned long long)arg1 estimatedAssetCount:(unsigned long long)arg2 forScope:(id)arg3 error:(id*)arg4 ;
-(unsigned long long)estimatedSizeForScope:(id)arg1 ;
-(unsigned long long)estimatedAssetCountForScope:(id)arg1 ;
-(char)upgradeScopesWithNewLibraryOptions:(unsigned long long)arg1 error:(id*)arg2 ;
-(id)statusDictionaryForScope:(id)arg1 ;
-(id)primaryScope;
-(char)enablePrimaryScopeWithError:(id*)arg1 ;
-(char)disablePrimaryScopeWithError:(id*)arg1 ;
-(char)_forceClientToPullScopeIfNecessary:(id)arg1 error:(id*)arg2 ;
-(char)activateScope:(id)arg1 error:(id*)arg2 ;
-(char)deactivateScope:(id)arg1 error:(id*)arg2 ;
-(id)scopeListSyncAnchor;
-(char)storeScopeListSyncAnchor:(id)arg1 error:(id*)arg2 ;
-(id)filterForIncludedScopeIdentifiers:(id)arg1 ;
-(id)filterForExcludedScopeIdentifiers:(id)arg1 ;
-(id)filterOnScopesAllowingMingling;
-(void)excludeScopeIdentifierFromMingling:(id)arg1 ;
-(void)includeScopeIdentifierInMingling:(id)arg1 ;
-(void)forceExcludeScopeIdentifierFromMingling:(id)arg1 ;
-(void)forceIncludeScopeIdentifierInMingling:(id)arg1 ;
@end

