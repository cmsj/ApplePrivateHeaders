/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:43 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/AVFCapture.framework/Versions/A/AVFCapture
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <AVFCapture/AVFCapture-Structs.h>
@class AVCaptureConnectionInternal_Tundra, NSArray, AVCaptureOutput_Tundra, AVCaptureVideoPreviewLayer_Tundra;

@interface AVCaptureConnection_Tundra : NSObject {

	AVCaptureConnectionInternal_Tundra* _internal;
	char _videoStabilizationEnabled;
	char _enablesVideoStabilizationWhenAvailable;

}

@property (nonatomic,readonly) NSArray * inputPorts; 
@property (nonatomic,readonly) AVCaptureOutput_Tundra * output; 
@property (nonatomic,readonly) AVCaptureVideoPreviewLayer_Tundra * videoPreviewLayer; 
@property (assign,getter=isEnabled,nonatomic) char enabled; 
@property (getter=isActive,nonatomic,readonly) char active; 
@property (nonatomic,readonly) NSArray * audioChannels; 
@property (getter=isVideoMirroringSupported,nonatomic,readonly) char supportsVideoMirroring; 
@property (assign,getter=isVideoMirrored,nonatomic) char videoMirrored; 
@property (assign,nonatomic) char automaticallyAdjustsVideoMirroring; 
@property (getter=isVideoOrientationSupported,nonatomic,readonly) char supportsVideoOrientation; 
@property (assign,nonatomic) long long videoOrientation; 
@property (getter=isVideoFieldModeSupported,nonatomic,readonly) char supportsVideoFieldMode; 
@property (assign,nonatomic) long long videoFieldMode; 
@property (getter=isVideoMinFrameDurationSupported,nonatomic,readonly) char supportsVideoMinFrameDuration; 
@property (assign,nonatomic) SCD_Struct_AV0 videoMinFrameDuration; 
@property (getter=isVideoMaxFrameDurationSupported,nonatomic,readonly) char supportsVideoMaxFrameDuration; 
@property (assign,nonatomic) SCD_Struct_AV0 videoMaxFrameDuration; 
@property (nonatomic,readonly) double videoMaxScaleAndCropFactor; 
@property (assign,nonatomic) double videoScaleAndCropFactor; 
@property (assign,nonatomic) long long preferredVideoStabilizationMode; 
@property (nonatomic,readonly) long long activeVideoStabilizationMode; 
@property (getter=isVideoStabilizationSupported,nonatomic,readonly) char supportsVideoStabilization; 
@property (getter=isVideoStabilizationEnabled,nonatomic,readonly) char videoStabilizationEnabled;                                        //@synthesize videoStabilizationEnabled=_videoStabilizationEnabled - In the implementation block
@property (assign,nonatomic) char enablesVideoStabilizationWhenAvailable;                                                                //@synthesize enablesVideoStabilizationWhenAvailable=_enablesVideoStabilizationWhenAvailable - In the implementation block
@property (getter=isCameraIntrinsicMatrixDeliverySupported,nonatomic,readonly) char cameraIntrinsicMatrixDeliverySupported; 
@property (assign,getter=isCameraIntrinsicMatrixDeliveryEnabled,nonatomic) char cameraIntrinsicMatrixDeliveryEnabled; 
+(b)resolveClassMethod:;
+(b)resolveInstanceMethod:;
+(void)initialize;
+(id)connectionWithInputPorts:(id)arg1 output:(id)arg2 ;
+(id)connectionWithInputPort:(id)arg1 videoPreviewLayer:(id)arg2 ;
-(b)conformsToProtocol:(id)arg1 ;
-(b)isMemberOfClass:(Class)arg1 ;
-(b)isKindOfClass:(Class)arg1 ;
-(Class)class;
-(void)dealloc;
-(id)description;
-(id)init;
-(void)setEnabled:(char)arg1 ;
-(char)isEnabled;
-(char)isActive;
-(void)setActive:(char)arg1 ;
-(id)mediaType;
-(char)isLive;
-(NSArray *)inputPorts;
-(long long)videoFieldMode;
-(void)setVideoFieldMode:(long long)arg1 ;
-(AVCaptureOutput_Tundra *)output;
-(long long)videoOrientation;
-(float)getAvgAudioLevelForChannel:(id)arg1 ;
-(float)getPeakAudioLevelForChannel:(id)arg1 ;
-(NSArray *)audioChannels;
-(char)automaticallyAdjustsVideoMirroring;
-(SCD_Struct_AV0)videoMinFrameDuration;
-(SCD_Struct_AV0)videoMaxFrameDuration;
-(double)videoMaxScaleAndCropFactor;
-(double)videoScaleAndCropFactor;
-(long long)preferredVideoStabilizationMode;
-(long long)activeVideoStabilizationMode;
-(id)initWithInputPorts:(id)arg1 output:(id)arg2 ;
-(id)initWithInputPort:(id)arg1 videoPreviewLayer:(id)arg2 ;
-(AVCaptureVideoPreviewLayer_Tundra *)videoPreviewLayer;
-(char)isVideoStabilizationSupported;
-(char)isVideoMirroringSupported;
-(char)isVideoOrientationSupported;
-(char)isCameraIntrinsicMatrixDeliverySupported;
-(void)setCameraIntrinsicMatrixDeliveryEnabled:(char)arg1 ;
-(char)isVideoMirrored;
-(void)setVideoMirrored:(char)arg1 ;
-(void)_setVideoMirrored:(char)arg1 ;
-(void)setAutomaticallyAdjustsVideoMirroring:(char)arg1 ;
-(void)setVideoOrientation:(long long)arg1 ;
-(char)isVideoMinFrameDurationSupported;
-(void)setVideoMinFrameDuration:(SCD_Struct_AV0)arg1 ;
-(char)isVideoMaxFrameDurationSupported;
-(void)setVideoMaxFrameDuration:(SCD_Struct_AV0)arg1 ;
-(void)setVideoScaleAndCropFactor:(double)arg1 ;
-(char)isVideoStabilizationEnabled;
-(char)enablesVideoStabilizationWhenAvailable;
-(void)setEnablesVideoStabilizationWhenAvailable:(char)arg1 ;
-(void)setPreferredVideoStabilizationMode:(long long)arg1 ;
-(char)isCameraIntrinsicMatrixDeliveryEnabled;
-(char)isVideoFieldModeSupported;
-(void)detachFromAudioSplitterAndMixerNodes;
-(void)setGraph:(OpaqueCMIOGraphRef)arg1 node:(int)arg2 element:(unsigned)arg3 scope:(unsigned)arg4 ;
-(id)firstActiveInputPort;
-(void)attachToSplitterNode:(int)arg1 audioMixerNode:(int)arg2 ;
-(void)setMostRecentlySeenClientSequenceID:(void*)arg1 ;
-(void*)copyClientSequenceID;
-(void*)mostRecentlySeenClientSequenceID;
-(unsigned)writerElement;
-(void)_splitterNodeFormatDescriptionDidChange;
-(void)initCommonStorage;
-(void)_clearAudioPropertyListeners;
-(id)firstInputPort;
-(void)_updateAudioChannelsArrayCount;
-(void)_applySplitterChannelMapFromAudioChannelsEnabled;
-(void)_applyVolumeFromAudioChannel:(id)arg1 ;
-(opaqueCMFormatDescriptionRef)_copySourceSummaryAudioFormatDescription;
-(void)_rebuildEnabledAudioChannelsArray;
-(int*)_splitterAudioChannelMapWithSize:(unsigned long long*)arg1 ;
-(id)_audioLevelsForPropertyID:(unsigned)arg1 ;
-(void)_updateAudioPeakLevelsArray;
-(void)_updateAudioAvgLevelsArray;
-(char)_audioChannelsAreAllEnabled;
-(opaqueCMFormatDescriptionRef)_copyExpandedSourceSummaryAudioFormatDescription;
-(opaqueCMFormatDescriptionRef)_copySourceSummaryAudioFormatDescriptionWithOptionalExpansion:(char)arg1 ;
-(void)setWriterElement:(unsigned)arg1 ;
-(void*)incrementClientSequenceIDAndRetain;
-(void)_mixerNodeFormatDescriptionDidChange;
-(void)setEnabled:(char)arg1 forChannel:(id)arg2 ;
-(void)setVolume:(float)arg1 forChannel:(id)arg2 ;
-(int*)splitterAudioChannelMapWithSize:(unsigned long long*)arg1 ;
-(opaqueCMFormatDescriptionRef)copyPostSplitSummaryAudioFormatDescription;
@end

