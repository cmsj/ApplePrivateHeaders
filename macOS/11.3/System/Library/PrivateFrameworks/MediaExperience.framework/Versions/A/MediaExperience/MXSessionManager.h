/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:07 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/MediaExperience.framework/Versions/A/MediaExperience
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue;
#import <MediaExperience/MediaExperience-Structs.h>
@class AURATranslator, NSObject;

@interface MXSessionManager : NSObject {

	AURATranslator* _auraTranslator;
	shared_ptr<caulk::reactor<mx::IProcessManager *>>* _processManager;
	NSObject*<OS_dispatch_queue> _responseQueue;
	map<unsigned int, MXPlayerSession *, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, MXPlayerSession *>>>* _sessionTokenMap;

}
+(id)sharedInstance;
-(shared_ptr<caulk::reactor<mx::IClientProcess *>>*)findOrCreateClientProcess:(ProcessToken)arg1 auditToken:(SCD_Struct_MX15)arg2 sessionToken:(unsigned)arg3 ;
-(void)destroyClientProcess:(ProcessToken)arg1 sessionToken:(unsigned)arg2 ;
-(basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)getClientProcessName:(const SCD_Struct_MX16*)arg1 ;
-(void)processStateChanged:(const SCD_Struct_MX16*)arg1 processState:(int)arg2 ;
-(vector<MXAuRAIOControllerPayload *, std::__1::allocator<MXAuRAIOControllerPayload *>>*)ioControllersForSession:(unsigned)arg1 ;
-(vector<MXAuRAVirtualPortPayload *, std::__1::allocator<MXAuRAVirtualPortPayload *>>*)virtualPortsForSession:(unsigned)arg1 ;
-(error_code*)activate:(const SCD_Struct_MX16*)arg1 completionHandler:(/*^block*/id)arg2 ;
-(expected<std::__1::map<aura::IOControllerType, std::__1::vector<MXAuRAVirtualPortPayload *, std::__1::allocator<MXAuRAVirtualPortPayload *>>, std::__1::less<aura::IOControllerType>, std::__1::allocator<std::__1::pair<const aura::IOControllerType, std::__1::vector<MXAuRAVirtualPortPayload *, std::__1::allocator<MXAuRAVirtualPortPayload *>>>>>, std::__1::error_code>*)eligiblePorts:(const SCD_Struct_MX16*)arg1 ;
-(error_code*)deactivate:(const SCD_Struct_MX16*)arg1 options:(unsigned long long)arg2 completionHandler:(/*^block*/id)arg3 ;
-(int)getProcessState:(const SCD_Struct_MX16*)arg1 ;
-(BOOL)hasAssertionsToStartPlayback:(const SCD_Struct_MX16*)arg1 mixablePlayback:(BOOL)arg2 ;
-(BOOL)hasSessionProxyingEntitlement:(const SCD_Struct_MX16*)arg1 ;
-(void)updateRunningState:(const SCD_Struct_MX16*)arg1 ;
-(SecTaskRef)getSecurityTask:(const SCD_Struct_MX16*)arg1 ;
-(error_code*)preflightBeginInterruption:(const SCD_Struct_MX16*)arg1 ;
-(BOOL)anyOtherClientsActive:(unsigned)arg1 ;
-(char)wantsToPauseSpokenAudio:(id)arg1 ;
-(char)requiresInterruption:(const SCD_Struct_MX16*)arg1 victim:(const SCD_Struct_MX16*)arg2 ;
-(void)updateRouteConfigurationForAllPlayerSessions:(const unsigned*)arg1 ;
-(error_code*)registerIOProc:(unsigned)arg1 iocType:(unsigned char)arg2 ioProc:(const function<void (unsigned int, const AMCP::Proc_Cycle_Info &, unsigned long, AMCP::Proc_Stream *, unsigned long, AMCP::Proc_Stream *)>Ref)arg3 ;
-(char)categoryIsRingtone:(id)arg1 ;
-(char)categoryIsAlarm:(id)arg1 ;
-(char)categoryIsProcessing:(id)arg1 ;
-(char)isDoingSpokenAudio:(id)arg1 ;
-(char)categoryIsVoiceOver:(id)arg1 ;
-(char)categoryIsRecording:(id)arg1 ;
-(BOOL)sessionIsAllowedToStopOthers:(const DerivedBehaviors*)arg1 sessionState:(const SCD_Struct_MX16*)arg2 ;
-(id)getProcessStateString:(int)arg1 ;
-(char)categoryIsManual:(id)arg1 ;
-(char)wantsToDuckOthers:(id)arg1 ;
-(void)postNotificationToAffectedSessionsAfterRouteChange:(id)arg1 ;
-(id)init;
-(error_code*)registerSession:(id)arg1 ;
-(expected<std::__1::map<unsigned int, aura_SimulatedConfigurationChangeDescription *, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, aura_SimulatedConfigurationChangeDescription *>>>, std::__1::error_code>*)simulate:(const SCD_Struct_MX16*)arg1 ;
-(id)createPlayerSessionWithSessionToken:(unsigned)arg1 withProcessToken:(ProcessToken)arg2 withAuditToken:(SCD_Struct_MX15)arg3 withInterruptionHandler:(/*^block*/id)arg4 ;
-(void)setAURA:(id)arg1 processManager:(shared_ptr<caulk::reactor<mx::IProcessManager *>>*)arg2 ;
-(error_code*)unregisterSession:(id)arg1 ;
@end

