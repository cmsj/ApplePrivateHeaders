/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:38 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/NewsCore.framework/Versions/A/NewsCore
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Foundation/NSOperation.h>
#import <libobjc.A.dylib/FCOperationCanceling.h>
#import <libobjc.A.dylib/FCOperationIdentifying.h>
#import <libobjc.A.dylib/FCOperationPrioritizing.h>

@protocol OS_dispatch_group;
@class NSString, NSMutableArray, NFUnfairLock, FCOnce, NSObject, NSDictionary;

@interface FCOperation : NSOperation <FCOperationCanceling, FCOperationIdentifying, FCOperationPrioritizing> {

	Ac _executing;
	Ac _finished;
	char _isBackgroundDownloadOperation;
	char _childOperationsCancelled;
	NSString* _shortOperationDescription;
	long long _relativePriority;
	unsigned long long _retryCount;
	double _timeoutDuration;
	NSString* _purpose;
	NSString* _operationID;
	double _operationStartTime;
	/*^block*/id _timedOutTest;
	NSMutableArray* _childOperations;
	NFUnfairLock* _childOperationsLock;
	FCOnce* _startOnce;
	NSObject*<OS_dispatch_group> _finishedGroup;

}

@property (assign,nonatomic) double operationStartTime;                           //@synthesize operationStartTime=_operationStartTime - In the implementation block
@property (assign,nonatomic) unsigned long long retryCount;                       //@synthesize retryCount=_retryCount - In the implementation block
@property (assign,nonatomic) double timeoutDuration;                              //@synthesize timeoutDuration=_timeoutDuration - In the implementation block
@property (assign,nonatomic) char isBackgroundDownloadOperation;                  //@synthesize isBackgroundDownloadOperation=_isBackgroundDownloadOperation - In the implementation block
@property (nonatomic,copy) NSString * purpose;                                    //@synthesize purpose=_purpose - In the implementation block
@property (nonatomic,readonly) FCOperation * proxyOperation; 
@property (nonatomic,copy,readonly) NSString * operationID;                       //@synthesize operationID=_operationID - In the implementation block
@property (nonatomic,readonly) char hasOperationStarted; 
@property (nonatomic,copy,readonly) NSDictionary * errorUserInfo; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) NSString * shortOperationDescription;              //@synthesize shortOperationDescription=_shortOperationDescription - In the implementation block
@property (nonatomic,readonly) NSString * longOperationDescription; 
@property (assign,nonatomic) long long relativePriority;                          //@synthesize relativePriority=_relativePriority - In the implementation block
-(void)dealloc;
-(id)init;
-(void)setQualityOfService:(long long)arg1 ;
-(void)start;
-(void)cancel;
-(char)isFinished;
-(char)isExecuting;
-(char)isAsynchronous;
-(unsigned long long)retryCount;
-(void)addCompletionHandler:(/*^block*/id)arg1 ;
-(NSString *)operationID;
-(void)setPurpose:(NSString *)arg1 ;
-(void)setRetryCount:(unsigned long long)arg1 ;
-(void)performOperation;
-(NSString *)purpose;
-(NSDictionary *)errorUserInfo;
-(long long)relativePriority;
-(unsigned long long)maxRetries;
-(void)prepareOperation;
-(char)waitUntilFinishedWithTimeout:(double)arg1 ;
-(void)setTimeoutDuration:(double)arg1 ;
-(double)timeoutDuration;
-(double)operationStartTime;
-(void)setOperationStartTime:(double)arg1 ;
-(NSString *)shortOperationDescription;
-(void)setRelativePriority:(long long)arg1 ;
-(void)finishedPerformingOperationWithError:(id)arg1 ;
-(void)associateChildOperation:(id)arg1 ;
-(char)validateOperation;
-(void)operationWillFinishWithError:(id)arg1 ;
-(void)cancelChildOperations;
-(unsigned long long)propertiesInheritedByChildOperations;
-(void)finishFromEarlyCancellation;
-(NSString *)longOperationDescription;
-(char)shouldStartThrottlingWithError:(id)arg1 retryAfter:(double*)arg2 ;
-(char)canRetryWithError:(id)arg1 retryAfter:(id*)arg2 ;
-(id)throttleGroup;
-(void)resetForRetry;
-(void)operationDidFinishWithError:(id)arg1 ;
-(void)startIfNeeded;
-(void)associateChildOperations:(id)arg1 ;
-(char)hasOperationStarted;
-(char)isBackgroundDownloadOperation;
-(void)setIsBackgroundDownloadOperation:(char)arg1 ;
-(FCOperation *)proxyOperation;
@end

