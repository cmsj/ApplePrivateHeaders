/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:37 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/NewsCore.framework/Versions/A/NewsCore
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/FCTagsFetchOperationDelegate.h>
#import <libobjc.A.dylib/FCCoreConfigurationObserving.h>
#import <libobjc.A.dylib/FCOperationThrottlerDelegate.h>
#import <libobjc.A.dylib/FCJSONEncodableObjectProviding.h>

@protocol FCCoreConfigurationManager;
@class FCCKContentDatabase, FCAssetManager, FCTagRecordSource, NSCache, FCOperationThrottler, NSMutableDictionary, NSString;

@interface FCTagController : NSObject <FCTagsFetchOperationDelegate, FCCoreConfigurationObserving, FCOperationThrottlerDelegate, FCJSONEncodableObjectProviding> {

	FCCKContentDatabase* _contentDatabase;
	FCAssetManager* _assetManager;
	FCTagRecordSource* _tagRecordSource;
	id<FCCoreConfigurationManager> _configurationManager;
	NSCache* _fastCache;
	FCOperationThrottler* _tagPrefetchThrottler;
	NSMutableDictionary* _prefetchedTags;

}

@property (assign,nonatomic) char shouldPrefetchGlobalTags; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(char)isTagAllowed:(id)arg1 ;
+(char)isTagAllowedInContentStoreFront:(id)arg1 ;
-(void)dealloc;
-(id)init;
-(void)operationThrottler:(id)arg1 performAsyncOperationWithCompletion:(/*^block*/id)arg2 ;
-(void)fetchTagsForTagIDs:(id)arg1 cachePolicy:(id)arg2 qualityOfService:(long long)arg3 callbackQueue:(id)arg4 completionHandler:(/*^block*/id)arg5 ;
-(id)fetchOperationForTagsWithIDs:(id)arg1 ;
-(void)fetchTagsForTagIDs:(id)arg1 maximumCachedAge:(double)arg2 qualityOfService:(long long)arg3 callbackQueue:(id)arg4 completionHandler:(/*^block*/id)arg5 ;
-(id)tagsForTagIDs:(id)arg1 predicate:(/*^block*/id)arg2 ;
-(void)saveTagsToCache:(id)arg1 ;
-(id)jsonEncodableObject;
-(void)tagsFetchOperation:(id)arg1 didFetchTags:(id)arg2 ;
-(void)configurationManager:(id)arg1 configurationDidChange:(id)arg2 ;
-(id)initWithContentDatabase:(id)arg1 assetManager:(id)arg2 tagRecordSource:(id)arg3 configurationManager:(id)arg4 ;
-(id)fastCachedTagForID:(id)arg1 ;
-(id)fastCachedTagsForIDs:(id)arg1 ;
-(id)slowCachedTagForID:(id)arg1 ;
-(id)slowCachedTagsForIDs:(id)arg1 ;
-(id)expectedFastCachedTagForID:(id)arg1 ;
-(id)fetchOperationForTagsWithIDs:(id)arg1 includeParents:(char)arg2 ;
-(id)fetchOperationForTagsWithIDs:(id)arg1 includeChildren:(char)arg2 ;
-(id)fetchOperationForTagsIncludingChildrenWithIDs:(id)arg1 softMaxAge:(double)arg2 ;
-(void)fetchTagsForTagIDs:(id)arg1 qualityOfService:(long long)arg2 callbackQueue:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)fetchTagForTagID:(id)arg1 qualityOfService:(long long)arg2 callbackQueue:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(id)tagsForTagIDs:(id)arg1 ;
-(char)shouldPrefetchGlobalTags;
-(void)setShouldPrefetchGlobalTags:(char)arg1 ;
@end

