/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:35 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/ProactiveSupport.framework/Versions/A/ProactiveSupport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol _PASSqliteErrorHandlerProtocol;
#import <ProactiveSupport/ProactiveSupport-Structs.h>
@class NSObject, NSString, NSMutableArray, NSMutableDictionary, NSCache;

@interface _PASSqliteDatabase : NSObject {

	sqlite3Ref _db;
	int _transactionDepth;
	char _transactionRolledback;
	atomic_flag _isClosed;
	NSObject*<_PASSqliteErrorHandlerProtocol> _errorHandler;
	NSString* _filename;
	opaque_pthread_mutex_t _lock;
	NSMutableArray* _statementsToFinalizeAsync;
	char _currentExclusivity;
	NSMutableDictionary* _explainedQueryForPlan;
	NSCache* _explainedQueriesLogged;
	_sFILE* _explainedQueriesLogFile;
	char _isInMemory;
	long long _contentProtectionType;

}

@property (nonatomic,readonly) sqlite3Ref handle; 
@property (nonatomic,readonly) long long contentProtectionType;              //@synthesize contentProtectionType=_contentProtectionType - In the implementation block
@property (nonatomic,readonly) NSString * filename;                          //@synthesize filename=_filename - In the implementation block
@property (nonatomic,readonly) char isInMemory;                              //@synthesize isInMemory=_isInMemory - In the implementation block
+(char)contentProtectionTypeRequiresDeviceToHaveBeenUnlockedOnce:(long long)arg1 ;
+(char)contentProtectionTypeRequiresDeviceToBeUnlocked:(long long)arg1 ;
+(id)corruptionMarkerPathForPath:(id)arg1 ;
+(id)sqliteDatabaseWithFilename:(id)arg1 contentProtection:(long long)arg2 errorHandler:(id)arg3 error:(id*)arg4 ;
+(char)isInMemoryPath:(id)arg1 ;
+(id)initializeDatabase:(id)arg1 withContentProtection:(long long)arg2 newDatabaseCreated:(char*)arg3 errorHandler:(id)arg4 ;
+(id)initializeDatabase:(id)arg1 withContentProtection:(long long)arg2 newDatabaseCreated:(char*)arg3 ;
+(id)initializeDatabase:(id)arg1 withProtection:(char)arg2 newDatabaseCreated:(char*)arg3 ;
+(id)recreateCorruptDatabase:(id)arg1 withContentProtection:(long long)arg2 ;
+(id)sqliteDatabaseWithFilename:(id)arg1 flags:(int)arg2 error:(id*)arg3 errorHandler:(id)arg4 ;
+(id)sqliteDatabaseWithFilename:(id)arg1 flags:(int)arg2 error:(id*)arg3 ;
+(id)sqliteDatabaseWithFilename:(id)arg1 error:(id*)arg2 errorHandler:(id)arg3 ;
+(id)sqliteDatabaseWithFilename:(id)arg1 error:(id*)arg2 ;
+(id)sqliteDatabaseWithFilename:(id)arg1 contentProtection:(long long)arg2 error:(id*)arg3 ;
+(id)sqliteDatabaseInMemoryWithError:(id*)arg1 errorHandler:(id)arg2 ;
+(id)sqliteDatabaseInMemoryWithError:(id*)arg1 ;
+(id)protectedDatabaseWithFilename:(id)arg1 error:(id*)arg2 errorHandler:(id)arg3 ;
+(id)protectedDatabaseWithFilename:(id)arg1 error:(id*)arg2 ;
+(id)inMemoryPath;
+(id)randomlyNamedInMemoryPathWithBaseName:(id)arg1 ;
+(void)truncateDatabaseAtPath:(id)arg1 ;
+(void)runDebugCommand:(const char*)arg1 onDbWithHandle:(id)arg2 ;
-(void)dealloc;
-(id)description;
-(id)init;
-(sqlite3Ref)handle;
-(void)clearCaches;
-(NSString *)filename;
-(unsigned)userVersion;
-(char)setUserVersion:(unsigned)arg1 ;
-(void)writeTransaction:(/*^block*/id)arg1 ;
-(char)prepAndRunQuery:(id)arg1 onPrep:(/*^block*/id)arg2 onRow:(/*^block*/id)arg3 onError:(/*^block*/id)arg4 ;
-(char)frailWriteTransaction:(/*^block*/id)arg1 ;
-(long long)contentProtectionType;
-(void)placeCorruptionMarker;
-(char)isInMemory;
-(id)freeSpace;
-(id)dbErrorWithCode:(unsigned long long)arg1 sqliteReturnValue:(int)arg2 lastErrno:(int)arg3 query:(id)arg4 ;
-(char)handleError:(long long)arg1 sqliteError:(int)arg2 forQuery:(id)arg3 onError:(/*^block*/id)arg4 ;
-(PASDBTransactionCompletion_)writeTransactionWithFailableBlock:(/*^block*/id)arg1 ;
-(PASDBTransactionCompletion_)readTransactionWithFailableBlock:(/*^block*/id)arg1 ;
-(void)readTransaction:(/*^block*/id)arg1 ;
-(void)closePermanently;
-(char)prepAndRunNonDataQueries:(id)arg1 onError:(/*^block*/id)arg2 ;
-(id)initWithFilename:(id)arg1 flags:(int)arg2 error:(id*)arg3 errorHandler:(id)arg4 ;
-(id)initWithFilename:(id)arg1 flags:(int)arg2 error:(id*)arg3 ;
-(void)simulateOnDiskDatabase;
-(long long)lastInsertRowId;
-(char)runQuery:(id)arg1 onRow:(/*^block*/id)arg2 onError:(/*^block*/id)arg3 ;
-(char)runQuery:(id)arg1 onRow:(/*^block*/id)arg2 ;
-(void)_logQueryPlanForQuery:(id)arg1 ;
-(char)_isLikelySQLStatementContainedInString:(const char*)arg1 ;
-(char)prepQuery:(id)arg1 onPrep:(/*^block*/id)arg2 onError:(/*^block*/id)arg3 ;
-(void)_prepAndRunQuery:(id)arg1 columns:(id)arg2 dictionary:(id)arg3 onError:(/*^block*/id)arg4 ;
-(void)updateTable:(id)arg1 dictionary:(id)arg2 whereClause:(id)arg3 onError:(/*^block*/id)arg4 ;
-(void)insertOrReplaceIntoTable:(id)arg1 dictionary:(id)arg2 onError:(/*^block*/id)arg3 ;
-(void)insertIntoTable:(id)arg1 dictionary:(id)arg2 ;
-(id)selectColumns:(id)arg1 fromTable:(id)arg2 whereClause:(id)arg3 onPrep:(/*^block*/id)arg4 onError:(/*^block*/id)arg5 ;
-(char)frailReadTransaction:(/*^block*/id)arg1 ;
-(void)_txnBegin;
-(void)_txnBeginExclusive;
-(void)_txnRollback;
-(void)_txnEnd;
-(PASDBTransactionCompletion_)_transactionWithExclusivity:(char)arg1 transaction:(/*^block*/id)arg2 ;
-(char)createSnapshot:(id)arg1 ;
-(char)hasTableNamed:(id)arg1 ;
-(id)tablesWithColumnNamed:(id)arg1 ;
-(char)hasColumnOnTable:(id)arg1 named:(id)arg2 ;
-(char)hasIndexNamed:(id)arg1 ;
-(unsigned long long)numberOfRowsInTable:(id)arg1 ;
-(void)withDbLockExecuteBlock:(/*^block*/id)arg1 ;
-(void)finalizeLater:(sqlite3_stmtRef)arg1 ;
-(id)languageForFTSTable:(id)arg1 ;
-(char)enableQueryPlanLoggingWithPath:(id)arg1 ;
-(void)disableQueryPlanLogging;
@end

