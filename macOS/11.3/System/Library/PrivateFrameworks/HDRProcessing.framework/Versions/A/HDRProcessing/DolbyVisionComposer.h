/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:13 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/HDRProcessing.framework/Versions/A/HDRProcessing
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol MTLDeviceSPI, MTLLibrary, MTLTexture, MTLBuffer;
#import <HDRProcessing/HDRProcessing-Structs.h>
@class ComposerShader;

@interface DolbyVisionComposer : NSObject {

	unsigned long long _frameIndex;
	id<MTLDeviceSPI> _device;
	id<MTLLibrary> _defaultLibrary;
	ComposerShader* _horizontalHalfLumaKernel;
	ComposerShader* _verticalHalfLumaKernel;
	ComposerShader* _verticalResampleKernel;
	ComposerShader* _horizontalResampleKernel;
	ComposerShader* _composeLumaKernel;
	ComposerShader* _composeChromaKernel;
	ComposerShader* _composeYUVKernel;
	ComposerShader* _sdr2cif10;
	ComposerShader* _packedDolbyIPT_ptv;
	ComposerShader* _packed422DolbyIPT_ptv;
	ComposerShader* _unpackedHDR10_ptv;
	ComposerShader* _packedHDR10_ptv;
	ComposerShader* _packed422HDR10_ptv;
	ComposerShader* _unpackedHLG_ptv;
	ComposerShader* _packedHLG_ptv;
	ComposerShader* _packed422HLG_ptv;
	ComposerShader* _packedHDR10toRGB;
	ComposerShader* _packed422HDR10toRGB;
	ComposerShader* _unpackedHDR10toRGB;
	ComposerShader* _packedHDR10toRGB_YUVTM;
	ComposerShader* _packed422HDR10toRGB_YUVTM;
	ComposerShader* _unpackedHDR10toRGB_YUVTM;
	ComposerShader* _packedHLGtoRGB_YUVTM;
	ComposerShader* _packedHLGtoRGB_YUVTM_flip;
	ComposerShader* _packedHLGtoRGB_YUVTM_rotate;
	ComposerShader* _packed422HLGtoRGB_YUVTM;
	ComposerShader* _packed422HLGtoRGB_YUVTM_flip;
	ComposerShader* _packed422HLGtoRGB_YUVTM_rotate;
	ComposerShader* _unpackedHLG8toRGB_YUVTM;
	ComposerShader* _unpackedHLG10toRGB_YUVTM;
	ComposerShader* _packedDolbyYUVtoRGB_YUVTM[4];
	ComposerShader* _packedDolbyYUVtoRGB_IPTTM_HLGOOTF;
	ComposerShader* _packedDolbyYUVtoRGB_IPTTM_YScale;
	ComposerShader* _packed422DolbyYUVtoRGB_YUVTM[4];
	ComposerShader* _packed422DolbyYUVtoRGB_IPTTM_HLGOOTF;
	ComposerShader* _packed422DolbyYUVtoRGB_IPTTM_YScale;
	ComposerShader* _packedDolbyIPTtoRGB_YUVTM[4];
	ComposerShader* _packedDolbyIPTtoRGB_IPTTM_HLGOOTF;
	ComposerShader* _packedDolbyIPTtoRGB_IPTTM_YScale;
	ComposerShader* _packed422DolbyIPTtoRGB_YUVTM[4];
	ComposerShader* _packed422DolbyIPTtoRGB_IPTTM_HLGOOTF;
	ComposerShader* _packed422DolbyIPTtoRGB_IPTTM_YScale;
	ComposerShader* _singleLayerIntegratedKernel[4];
	ComposerShader* _singleLayerIntegratedIPTKernel[4];
	ComposerShader* _singleLayerIntegratedKernelPlanar[4];
	ComposerShader* _singleLayerIntegratedIPTKernelPlanar[4];
	ComposerShader* _singleLayerIntegratedKernelPackedPlanar[4];
	ComposerShader* _singleLayerIntegratedKernelPackedPlanar_flip[4];
	ComposerShader* _singleLayerIntegratedKernelPackedPlanar_rotate[4];
	ComposerShader* _singleLayerIntegratedIPTKernelPackedPlanar[4];
	ComposerShader* _yuvP422PackedPlanar[4];
	ComposerShader* _yuvP422PackedPlanar_flip[4];
	ComposerShader* _yuvP422PackedPlanar_rotate[4];
	ComposerShader* _iptP422PackedPlanar[4];
	ComposerShader* _packedHDR10Cif10[4];
	ComposerShader* _packed422HDR10Cif10[4];
	ComposerShader* _packedHLGCif10[4];
	ComposerShader* _packed422HLGCif10[4];
	ComposerShader* _singleLayer16bit444Kernel;
	ComposerShader* _unpackedX420HLG_outL10r_Panel;
	ComposerShader* _unpackedX420HLG_outL10r_J290;
	ComposerShader* _inL10rHLG_outL10r_DM;
	ComposerShader* _in420vHLG_outL10r_DM;
	ComposerShader* _inY416HLG_outL10r_DM;
	ComposerShader* _inX444HLG_outL10r_DM;
	ComposerShader* _inRGhAHLG_outL10r_DM;
	ComposerShader* _in422HLG_outL10r_DM;
	ComposerShader* _unpackedX420HDR10FP16_Panel;
	ComposerShader* _unpackedX420HDR10FP16_J290;
	ComposerShader* _unpackedX420HDR10FP16_PassThrough;
	ComposerShader* _unpackedX444HDR10FP16;
	ComposerShader* _allHDR10FP16;
	ComposerShader* _allHDR10FP16_PassThrough;
	ComposerShader* _yuv422HDR10FP16;
	ComposerShader* _yuv422HDR10FP16_PassThrough;
	ComposerShader* _RGhAHDR10FP16;
	ComposerShader* _singleLayerIntegratedKernel_PassThrough;
	ComposerShader* _singleLayerIntegratedIPTKernel_PassThrough;
	ComposerShader* _unpackedX420Dolby84[4];
	ComposerShader* _unpackedX420Dolby84OOTF[4];
	float _ambientHeadroomAdaptationLut[2000];
	id<MTLTexture> _polynomialTables[3];
	id<MTLTexture> _currentPolynomialTable;
	id<MTLBuffer> _dequantizelTable;
	id<MTLBuffer> _configBuffers[3];
	id<MTLBuffer> _config;
	id<MTLTexture> _blTexture;
	id<MTLTexture> _blTextureUV;
	id<MTLTexture> _blSubsampledTempTexture;
	id<MTLTexture> _blSubsampledTexture;
	id<MTLTexture> _elTexture;
	id<MTLTexture> _elTextureUV;
	id<MTLTexture> _outputTexture[3];
	id<MTLTexture> _outputTextureUV;
	id<MTLTexture> _inputTexturePool[32];
	int _inputTexturePoolIdx;
	id<MTLTexture> _outputTexturePool[4];
	int _outputTexturePoolIdx;
	id<MTLTexture> _pq2LTable;
	unsigned _pq2LTableSize;
	id<MTLTexture> _pq2LTableForPassThrough;
	id<MTLTexture> _hlg2LTable;
	unsigned _hlg2LTableSize;
	id<MTLTexture> _yuvScalingFactorTable;
	float _yuvScalingFactorTableBuffer[2048];
	id<MTLTexture> _scalingFactorTable;
	float _scalingFactorTableBuffer[1024];
	id<MTLTexture> _sat2FactorTable;
	float _sat2FactorTableBuffer[1024];
	id<MTLTexture> _lumaMixFactorTable;
	float _lumaMixFactorTableBuffer[512];
	id<MTLTexture> _xferToLinear;
	unsigned _l2PQTableSize;
	float _l2PQMidPoint;
	float _l2PQMaxPoint;
	char _dumpPolynomialResult;
	unsigned _srcFormat;
	unsigned _dstFormat;
	unsigned _inputPixelFormat;
	unsigned _outputPixelFormat;
	unsigned long long _inputProtectionOptions;
	unsigned long long _outputProtectionOptions;
	char _isPackedInputBuffer;
	_sFILE* _polynomialDumpFile;
	CVPixelBufferPoolRef _polynomialDumpOutputPool;
	id<MTLTexture> _dumpTextureY;
	id<MTLTexture> _dumpTextureUV;
	float _timeArray[300];
	float _cached_target_white;
	float _cached_target_black;
	float _cached_source_white;
	float _cached_source_black;
	unsigned long long _iosurface_ReadOnlyTextureAlignmentBytes;
	SCD_Struct_Do57 _prev;
	char _yuvCombinedCompose;
	char _preSubsampleLumaForMMR;
	char _bypassDisplayManagement;

}

@property (assign) char yuvCombinedCompose;                   //@synthesize yuvCombinedCompose=_yuvCombinedCompose - In the implementation block
@property (assign) char preSubsampleLumaForMMR;               //@synthesize preSubsampleLumaForMMR=_preSubsampleLumaForMMR - In the implementation block
@property (assign) char bypassDisplayManagement;              //@synthesize bypassDisplayManagement=_bypassDisplayManagement - In the implementation block
-(id)initWithDevice:(id)arg1 ;
-(long long)encodeToCommandBuffer:(id)arg1 BL:(IOSurfaceRef)arg2 EL:(IOSurfaceRef)arg3 Output:(IOSurfaceRef)arg4 ComposerData:(SCD_Struct_HD43*)arg5 DM:(id)arg6 DMData:(SCD_Struct_HD42*)arg7 tcControl:(ToneCurve_Control*)arg8 hdrControl:(SCD_Struct_HD40*)arg9 hdr10InfoFrame:(SCD_Struct_HD23*)arg10 ;
-(void)setupMetal;
-(void)createPQ2LTable;
-(void)createL2PQTable;
-(id)createShaderWithName:(id)arg1 dolby84:(BOOL)arg2 forLLDovi:(BOOL)arg3 ;
-(void)initBuffers;
-(void)createHLG2LTable;
-(void)createScalingTable_YUVTM;
-(void)initDMConfigCache;
-(void)initPolynomiaResultDump;
-(void)macCreateKernels;
-(long long)setupInputTexturesWithBL:(IOSurfaceRef)arg1 EL:(IOSurfaceRef)arg2 Output:(IOSurfaceRef)arg3 MetaData:(SCD_Struct_HD43*)arg4 ;
-(long long)setupOutputTexturesWithBuffer:(IOSurfaceRef)arg1 orientation:(int)arg2 ptvMode:(char)arg3 ;
-(void)setupInputBuffersWithMetadata:(SCD_Struct_HD43*)arg1 ;
-(void)encodeDualLayerToCommandBuffer:(id)arg1 BL:(IOSurfaceRef)arg2 EL:(IOSurfaceRef)arg3 Output:(IOSurfaceRef)arg4 MetaData:(SCD_Struct_HD43*)arg5 tcControl:(ToneCurve_Control*)arg6 ;
-(void)encodeSingleLayerToCommandBuffer:(id)arg1 BL:(IOSurfaceRef)arg2 Output:(IOSurfaceRef)arg3 ComposerData:(SCD_Struct_HD43*)arg4 DM:(id)arg5 DMData:(SCD_Struct_HD42*)arg6 tcControl:(ToneCurve_Control*)arg7 hdrControl:(SCD_Struct_HD40*)arg8 hdr10InfoFrame:(SCD_Struct_HD23*)arg9 ;
-(void)checkInputFormats:(unsigned)arg1 returnInput1:(char*)arg2 returnInput2:(char*)arg3 returnInput3:(char*)arg4 outputFormat:(unsigned)arg5 returnOutput1:(char*)arg6 returnOutput2:(char*)arg7 returnOutput3:(char*)arg8 returnOutput4:(char*)arg9 ;
-(void)checkForContent:(unsigned)arg1 contentReturn1:(char*)arg2 contentReturn2:(char*)arg3 contentReturn3:(char*)arg4 forDisplay:(unsigned)arg5 displayReturn1:(char*)arg6 displayReturn2:(char*)arg7 displayReturn3:(char*)arg8 displayReturn4:(char*)arg9 displayReturn5:(char*)arg10 ;
-(void)macSetupToneMappingWithContent:(char)arg1 Output:(IOSurfaceRef)arg2 DM:(id)arg3 DMData:(SCD_Struct_HD42*)arg4 tcControl:(ToneCurve_Control*)arg5 hdrControl:(SCD_Struct_HD40*)arg6 hdr10InfoFrame:(SCD_Struct_HD23*)arg7 dmConfig:(SCD_Struct_Do58*)arg8 hdr10OnMac:(char)arg9 hlgOnMac:(char)arg10 ;
-(void)macSetupEncoderForCommandBuffer:(id)arg1 tcControl:(ToneCurve_Control*)arg2 hdrControl:(SCD_Struct_HD40*)arg3 DMData:(SCD_Struct_HD42*)arg4 dmConfig:(id)arg5 isHdr10OnMac:(char)arg6 isHlgOnMac:(char)arg7 macOSGamma:(char)arg8 ;
-(void)fillInScalingTable_YUVTM:(SCD_Struct_Do58*)arg1 target_White:(float)arg2 target_Black:(float)arg3 source_White:(float)arg4 source_Black:(float)arg5 satBoost:(float)arg6 scalingFactor:(char)arg7 ;
-(void)createLUTFromDMConfig:(SCD_Struct_Do58*)arg1 TCControl:(ToneCurve_Control*)arg2 HDRControl:(SCD_Struct_HD40*)arg3 ;
-(id)getComputePipeLineStateForShader:(id)arg1 ;
-(void)macComputePassThroughMatrix:(SCD_Struct_Do58*)arg1 ;
-(BOOL)Dolby84Stream_Conformant:(SCD_Struct_HD40*)arg1 ;
-(void)macDumpInputYUVandOutputRGB:(id)arg1 chromaTextureIn:(id)arg2 rgbTextureOut:(id)arg3 frame_idx:(int)arg4 ;
-(void)encodeSubsampleLumaHorizontalToCommandBuffer:(id)arg1 ;
-(void)encodeSubsampleLumaVerticalToCommandBuffer:(id)arg1 ;
-(void)encodeComposeCombinedToCommandBuffer:(id)arg1 ;
-(void)encodeComposeLumaToCommandBuffer:(id)arg1 ;
-(void)encodeComposeChromaToCommandBuffer:(id)arg1 withMetaData:(SCD_Struct_HD43*)arg2 ;
-(void)setupComposerKernelConfiguration:(SCD_Struct_Do60*)arg1 fromMetaData:(SCD_Struct_HD43*)arg2 ;
-(id)getTextureFromCachedPool:(IOSurfaceRef)arg1 format:(unsigned long long)arg2 input:(BOOL)arg3 ;
-(void)addTextureToCachedPool:(id)arg1 input:(BOOL)arg2 ;
-(BOOL)hdr10_tm_configChanged:(HDR10TMParam*)arg1 HDRControl:(SCD_Struct_HD40*)arg2 EdrAdaptationParam:(EdrAdaptationParam*)arg3 AmbAdaptationParam:(AmbAdaptationParam*)arg4 ;
-(void)hdr10_tm_createLUTFromDMConfig:(HDR10TMParam*)arg1 EdrAdaptationParam:(EdrAdaptationParam*)arg2 AmbAdaptationParam:(AmbAdaptationParam*)arg3 dmConfig:(SCD_Struct_Do58*)arg4 ;
-(void)hdr10_tm_updateLUT;
-(void)hdr10_tm_reserveConfig:(HDR10TMParam*)arg1 HDRControl:(SCD_Struct_HD40*)arg2 EdrAdaptationParam:(EdrAdaptationParam*)arg3 AmbAdaptationParam:(AmbAdaptationParam*)arg4 ;
-(BOOL)hlg_tm_configChanged:(SCD_Struct_Do58*)arg1 HDRControl:(SCD_Struct_HD40*)arg2 TMParam:(HLGTMParam*)arg3 EdrAdaptationParam:(EdrAdaptationParam*)arg4 AmbAdaptationParam:(AmbAdaptationParam*)arg5 ;
-(void)hlg_tm_createLUTFromDMConfig:(SCD_Struct_Do58*)arg1 TMParam:(HLGTMParam*)arg2 EdrAdaptationParam:(EdrAdaptationParam*)arg3 AmbAdaptationParam:(AmbAdaptationParam*)arg4 TMMode:(int)arg5 ;
-(void)hlg_tm_updateLUT;
-(void)hlg_tm_reserveConfig:(SCD_Struct_Do58*)arg1 HDRControl:(SCD_Struct_HD40*)arg2 TMParam:(HLGTMParam*)arg3 EdrAdaptationParam:(EdrAdaptationParam*)arg4 AmbAdaptationParam:(AmbAdaptationParam*)arg5 ;
-(BOOL)dovi_tm_configChanged:(SCD_Struct_Do58*)arg1 HDRControl:(SCD_Struct_HD40*)arg2 EdrAdaptationParam:(EdrAdaptationParam*)arg3 AmbAdaptationParam:(AmbAdaptationParam*)arg4 ;
-(void)dovi_tm_createLUTFromDMConfig:(SCD_Struct_Do58*)arg1 HDRControl:(SCD_Struct_HD40*)arg2 TMParam:(DoViTMParam*)arg3 EdrAdaptationParam:(EdrAdaptationParam*)arg4 AmbAdaptationParam:(AmbAdaptationParam*)arg5 HlgOOTFCombined:(BOOL)arg6 IsDoVi84:(BOOL)arg7 ;
-(void)dovi_tm_updateLUT;
-(void)dovi_tm_reserveConfig:(SCD_Struct_Do58*)arg1 HDRControl:(SCD_Struct_HD40*)arg2 EdrAdaptationParam:(EdrAdaptationParam*)arg3 AmbAdaptationParam:(AmbAdaptationParam*)arg4 ;
-(void)hdr10_createLUTFromDMConfig:(SCD_Struct_Do58*)arg1 HDRControl:(SCD_Struct_HD40*)arg2 TMParam:(HDR10TMParam*)arg3 EdrAdaptationParam:(EdrAdaptationParam*)arg4 AmbAdaptationParam:(AmbAdaptationParam*)arg5 ;
-(void)hlg_createLUTFromDMConfig:(SCD_Struct_Do58*)arg1 HDRControl:(SCD_Struct_HD40*)arg2 TMParam:(HLGTMParam*)arg3 EdrAdaptationParam:(EdrAdaptationParam*)arg4 AmbAdaptationParam:(AmbAdaptationParam*)arg5 TMMode:(int)arg6 ;
-(void)dovi_createLUTFromDMConfig:(SCD_Struct_Do58*)arg1 HDRControl:(SCD_Struct_HD40*)arg2 TMParam:(DoViTMParam*)arg3 EdrAdaptationParam:(EdrAdaptationParam*)arg4 AmbAdaptationParam:(AmbAdaptationParam*)arg5 HlgOOTFCombined:(BOOL)arg6 IsDoVi84:(BOOL)arg7 ;
-(id)createNullShader;
-(void)embeddedSetupToneMappingWithContent:(char)arg1 Output:(IOSurfaceRef)arg2 DM:(id)arg3 DMData:(SCD_Struct_HD42*)arg4 tcControl:(ToneCurve_Control*)arg5 hdrControl:(SCD_Struct_HD40*)arg6 hdr10InfoFrame:(SCD_Struct_HD23*)arg7 dmConfig:(SCD_Struct_Do58*)arg8 hdr10OnPad:(char)arg9 useYUVScalingTable:(char)arg10 ;
-(void)embeddedSetupEncoderForCommandBuffer:(id)arg1 DMData:(SCD_Struct_HD42*)arg2 dmConfig:(id)arg3 isInput422:(char)arg4 hasThreeOutputPlane:(char)arg5 isSdrOnDolbyOrHDR10:(char)arg6 isHDR10OnHDR10TV:(char)arg7 isDolbyOnHDR10TV:(char)arg8 isHDR10OnDolby:(char)arg9 isHDR10OnPad:(char)arg10 isHLGOnPad:(char)arg11 isDoviOnPad:(char)arg12 isDoviOnLLDovi:(char)arg13 isHDR10OnLLDovi:(char)arg14 isHLGOnHDR10TV:(char)arg15 isHLGOnDolbyTV:(char)arg16 isHLGOnLLDovi:(char)arg17 isPtvMode:(char)arg18 orientation:(int)arg19 isDolby84:(char)arg20 dovi50toHDR10TVMode:(unsigned)arg21 ;
-(CVBufferRef)setupPolynomiaResultTextures;
-(void)dumpPolynomialMappingResult:(CVBufferRef)arg1 ;
-(char)yuvCombinedCompose;
-(void)setYuvCombinedCompose:(char)arg1 ;
-(char)preSubsampleLumaForMMR;
-(void)setPreSubsampleLumaForMMR:(char)arg1 ;
-(char)bypassDisplayManagement;
-(void)setBypassDisplayManagement:(char)arg1 ;
@end

