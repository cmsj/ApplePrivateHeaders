/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:07 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/Safari.framework/Versions/A/Safari
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Safari/Safari-Structs.h>
#import <Safari/WebViewController.h>
#import <libobjc.A.dylib/AppExtensionContentScriptMessageReceiver.h>
#import <libobjc.A.dylib/AutoFillFunctionBarProviderDelegate.h>
#import <libobjc.A.dylib/AutomaticBugCaptureObserver.h>
#import <libobjc.A.dylib/BookmarksViewControllerDelegate.h>
#import <libobjc.A.dylib/BrowserViewControllerLoading.h>
#import <libobjc.A.dylib/BrowserViewIconLoadingDelegate.h>
#import <libobjc.A.dylib/FormAutoFillCompletionControllerObserver.h>
#import <libobjc.A.dylib/FormMetadataObserver.h>
#import <libobjc.A.dylib/PagePreviewAnimationControllerDelegate.h>
#import <libobjc.A.dylib/ReaderStateObserver.h>
#import <libobjc.A.dylib/RemoteNotificationControllerClient.h>
#import <libobjc.A.dylib/RemoteNotificationPermissionHandler.h>
#import <Safari/SandboxExtensionPresentationDelegate.h>
#import <libobjc.A.dylib/TabDialogPresentationManagerDelegate.h>
#import <libobjc.A.dylib/WBSCertificateWarningPageHandler.h>
#import <libobjc.A.dylib/DefaultBrowserBannerDelegate.h>
#import <libobjc.A.dylib/WBSTranslationContextDelegate.h>
#import <libobjc.A.dylib/WBSTranslationConsentAlertHelperDelegate.h>
#import <libobjc.A.dylib/AuthenticationSheetRequestDelegate.h>
#import <libobjc.A.dylib/DimmingViewDelegate.h>
#import <libobjc.A.dylib/MutableMediaSource.h>
#import <libobjc.A.dylib/ReaderActivationDelegate.h>
#import <libobjc.A.dylib/ReaderAvailabilityDelegate.h>
#import <libobjc.A.dylib/SearchableWKViewCancelDelegate.h>
#import <libobjc.A.dylib/TabDialogPresenter.h>
#import <libobjc.A.dylib/WBSFluidProgressStateSource.h>

@protocol FormAutoFiller, AppExtensionMessageReceiver, RemoteNotificationStateObserver, PrintHelper, WBSCertificateWarningPagePresenter, TranslationAnalyticsMessageReceiver, WKUIDelegate, WBSSandboxExtensionToken, AuthenticationSessionNavigationHandling;
@class NSString, NSURL, BrowserDiagnosticLoggingDelegate, BrowserInspectorDelegate, NSTimer, NSMutableArray, PrintSheetSuppressionManager, JavaScriptDialogSuppressionManager, ResponsiveDesignViewController, WBSFormMetadata, NSDictionary, NSMutableSet, NSMutableDictionary, _WKRemoteObjectInterface, TextFieldInformation, PrivateBrowsingExplanationBanner, DefaultBrowserBanner, WebCrashBanner, AppLinkBannerController, Banner, NewExtensionBanner, BookmarksViewController, FullscreenUnifiedFieldWindowController, NSHashTable, TabDialogPresentationManager, PagePreviewAnimationController, AutoFillFunctionBarProvider, SecIdentitiesCache, CKContextCompleter, WBSHistoryContextController, WBSMutableOrderedSet, _WKWebAuthenticationAssertionResponse, StartPageViewController, BrowserDocument, BrowserNavigationDelegate, BrowserResourceLoadDelegate, NSDate, WBSURLSpoofingMitigator, CKContextResponse, NSSet, NSURLRequest, BackgroundLoad, PassDownloadSuppressionManager, BrowserTabPersistentState, WBSFluidProgressState, WBSMultiRoundAutoFillManager, WBSCreditCardData, StatusMessage, WBSSameDocumentNavigationToHistoryVisitCorrelator, WBSHistoryVisit, WBSTranslationContext, BrowserTabViewItem, ReadingListItem, ContinuousReadingListPageItem, PointerLockBanner, BrowserWKView, NSWindow, BrowserWindowController, BrowserContainerViewController, TabContentView, SearchableWKView, NSData, NSArray, NSPrintInfo, ContinuousReadingListViewController, NSView, TabDialogViewController;

@interface BrowserViewController : WebViewController <AppExtensionContentScriptMessageReceiver, AutoFillFunctionBarProviderDelegate, AutomaticBugCaptureObserver, BookmarksViewControllerDelegate, BrowserViewControllerLoading, BrowserViewIconLoadingDelegate, FormAutoFillCompletionControllerObserver, FormMetadataObserver, PagePreviewAnimationControllerDelegate, ReaderStateObserver, RemoteNotificationControllerClient, RemoteNotificationPermissionHandler, SandboxExtensionPresentationDelegate, TabDialogPresentationManagerDelegate, WBSCertificateWarningPageHandler, DefaultBrowserBannerDelegate, WBSTranslationContextDelegate, WBSTranslationConsentAlertHelperDelegate, AuthenticationSheetRequestDelegate, DimmingViewDelegate, MutableMediaSource, ReaderActivationDelegate, ReaderAvailabilityDelegate, SearchableWKViewCancelDelegate, TabDialogPresenter, WBSFluidProgressStateSource> {

	URLRequest* _initialContents;
	char _isBetweenSidebarAnimationInformationGatheringSteps;
	char _waitingToForcePauseWebProcess;
	RefPtr<Safari::SheetRequest, WTF::RawPtrTraits<Safari::SheetRequest>, WTF::DefaultRefDerefTraits<Safari::SheetRequest>>* _sheetRequest;
	RefPtr<Safari::ReaderController, WTF::RawPtrTraits<Safari::ReaderController>, WTF::DefaultRefDerefTraits<Safari::ReaderController>>* _readerController;
	NSURL* _navigationURLFromClientRedirect;
	char _clientRedirectWasDoneDuringPageNavigation;
	char _alwaysInitiateLoadsInContinuousModeUsingCurrentController;
	char _shouldStayInContinuousModeOnNextNavigationToBackForwardListItem;
	unique_ptr<Safari::QueuedNavigation, std::__1::default_delete<Safari::QueuedNavigation>>* _queuedNavigation;
	BrowserDiagnosticLoggingDelegate* _diagnosticLoggingDelegate;
	unique_ptr<Safari::BrowserPageFormClient, std::__1::default_delete<Safari::BrowserPageFormClient>>* _pageFormClient;
	BrowserInspectorDelegate* _inspectorDelegate;
	NSTimer* _sessionStateUpdatePageLoadSafetyTimer;
	char _hasDisplayedValidURL;
	int _currentPageType;
	int _expectedPageType;
	int _previousPageType;
	NSURL* _pendingBrowserInitiatedURL;
	NSString* _httpReferrerForFallbackURLs;
	unique_ptr<WTF::Deque<NSURL *, 0>, std::__1::default_delete<WTF::Deque<NSURL *, 0>>>* _fallbackURLs;
	BackForwardListItem* _previousItem;
	NSURL* _previousWebPageURL;
	/*^block*/id _completionHandlerForTryingToCloseBeforeCommittingToBackgroundLoad;
	char _didDetermineReaderAvailability;
	long long _initiateLoadOperation;
	/*^block*/id _initiateLoadBlock;
	NSMutableArray* _authenticationChallengeQueue;
	NSString* _committedEVCertificateOrganizationName;
	long long _tabLabelLifetime;
	char _shouldResetDialogSuppressionOnNextCommit;
	PrintSheetSuppressionManager* _printSheetSuppressionManager;
	JavaScriptDialogSuppressionManager* _showModalDialogSuppressionManager;
	NSString* _internetAccountDomain;
	NSString* _internetAccountUsername;
	NSString* _internetAccountPassword;
	char _readyToDisplayInternetAccountSetupPrompt;
	char _shouldDisplayInternetAccountSetupPrompt;
	BackForwardListItem* _searchResultsForSnapBack;
	ResponsiveDesignViewController* _responsiveDesignModeViewController;
	NSString* _userAgentBeforeResponsiveMode;
	long long _autoplaySignalToSend;
	double _timestampOfLastPageCommit;
	RefPtr<Safari::FormAutoFillCompletionController, WTF::RawPtrTraits<Safari::FormAutoFillCompletionController>, WTF::DefaultRefDerefTraits<Safari::FormAutoFillCompletionController>>* _formCompletionController;
	unsigned long long _formTextStatusValidationRequestIdentifier;
	HashMap<Safari::WK::BackForwardListItem, WTF::RetainPtr<NSString>, WTF::DefaultHash<Safari::WK::BackForwardListItem>, WTF::HashTraits<Safari::WK::BackForwardListItem>, WTF::HashTraits<WTF::RetainPtr<NSString>>>* _backForwardItemToGeneratedPasswordMap;
	WBSFormMetadata* _unsubmittedFormMetadata;
	NSDictionary* _unsubmittedPasswordGenerationCredentials;
	Frame* _unsubmittedFormSourceFrame;
	NSMutableSet* _navigationsNeedingNewProcess;
	NSMutableDictionary* _frameHandlesToUniqueIDsOfControlsThatWereAutoFilled;
	id<FormAutoFiller> _formAutoFillerProxy;
	_WKRemoteObjectInterface* _formMetadataObserverInterface;
	TextFieldInformation* _editedPasswordFieldInformation;
	PrivateBrowsingExplanationBanner* _privateBrowsingExplanationBanner;
	DefaultBrowserBanner* _defaultBrowserBanner;
	WebCrashBanner* _webCrashBanner;
	AppLinkBannerController* _appLinkBannerController;
	Banner* _appLinkBanner;
	NewExtensionBanner* _newExtensionBanner;
	BookmarksViewController* _bookmarksViewController;
	FullscreenUnifiedFieldWindowController* _fullscreenWindowController;
	NSURL* _openSearchURLToProcessAfterBackgroundLoadIsCommitted;
	NSMutableArray* _pagePreviewHistoryOperations;
	NSTimer* _updateAudioUITimer;
	char _shouldGoBackAfterBackgroundNavigationIsCommitted;
	NSHashTable* _spawnedTabsBrowserViewControllers;
	HashSet<Safari::WK::BackForwardListItem, WTF::DefaultHash<Safari::WK::BackForwardListItem>, WTF::HashTraits<Safari::WK::BackForwardListItem>>* _invalidatedBackForwardItems;
	TabDialogPresentationManager* _tabDialogPresentationManager;
	char _didCrashOrWasTerminatedForBeingUnresponsiveInTheBackground;
	char _shouldResetOriginatingWindowWithPossibleJavaScriptAccessOnNextCommit;
	PagePreviewAnimationController* _pagePreviewAnimationController;
	NSMutableSet* _pagePreviewBrowserViewControllers;
	char _pagePreviewNeedsReloadOnTabTransition;
	HashMap<Safari::WK::Frame, WTF::RetainPtr<WBSFormAutoFillMetadataCorrector>, WTF::DefaultHash<Safari::WK::Frame>, WTF::HashTraits<Safari::WK::Frame>, WTF::HashTraits<WTF::RetainPtr<WBSFormAutoFillMetadataCorrector>>>* _formAutoFillMetadataCorrectorsByFrame;
	AutoFillFunctionBarProvider* _autoFillFunctionBarProvider;
	char _hasCheckedForPIPBeforePageUnloadForCurrentNavigation;
	id<AppExtensionMessageReceiver> _appExtensionMessageReceiverProxy;
	_WKRemoteObjectInterface* _appExtensionContentScriptMessageReceiverInterface;
	RefPtr<Safari::RemoteNotificationVerificationRequest, WTF::RawPtrTraits<Safari::RemoteNotificationVerificationRequest>, WTF::DefaultRefDerefTraits<Safari::RemoteNotificationVerificationRequest>>* _remoteNotificationVerificationRequest;
	id<RemoteNotificationStateObserver> _remoteNotificationStateObserverProxy;
	_WKRemoteObjectInterface* _remoteNotificationStateObserverInterface;
	_WKRemoteObjectInterface* _remoteNotificationPermissionHandlerInterface;
	_WKRemoteObjectInterface* _readerStateObserverInterface;
	id<PrintHelper> _printHelperProxy;
	unique_ptr<Safari::PerformanceCollector, std::__1::default_delete<Safari::PerformanceCollector>>* _performanceCollector;
	RefPtr<Safari::PerformanceTesting, WTF::RawPtrTraits<Safari::PerformanceTesting>, WTF::DefaultRefDerefTraits<Safari::PerformanceTesting>>* _performanceTesting;
	_WKRemoteObjectInterface* _certicateWarningPageHandlerInterface;
	NSDictionary* _certificateWarningContext;
	id<WBSCertificateWarningPagePresenter> _certificateWarningPagePresenterProxy;
	unsigned long long _snapshotsNextRequestIdentifier;
	NSMutableDictionary* _webViewSnapshotRequestsToCompletionHandlers;
	unsigned long long _postVisuallyNonEmptyLayoutBlockRequestIdentifier;
	NSMutableDictionary* _postVisuallyNonEmptyLayoutBlocks;
	unsigned long long _visibleContentsNextRequestIdentifier;
	NSMutableDictionary* _visibleContentsAsDataURLRequestsToCompletionHandlers;
	NSMutableDictionary* _visibleContentsSnapshotRequestsToCompletionHandlers;
	_WKRemoteObjectInterface* _automaticBugCaptureObserver;
	SecIdentitiesCache* _secIdentitiesCache;
	NSMutableArray* _sheetsToDismissOnNavigation;
	CKContextCompleter* _cachedContextCompleter;
	WBSHistoryContextController* _contextController;
	Optional<SearchSuggestionNavigation> _searchSuggestionNavigation;
	NSString* _domainWhereUserDeclinedAutomaticStrongPassword;
	NSMutableSet* _downloadURLs;
	NSMutableDictionary* _downloadDomainsToPendingPermissionDecisionHandlers;
	NSMutableArray* _blockedPopUpWindowConfigurations;
	WBSMutableOrderedSet* _allowedPopUpWindowDomainCache;
	char _isObservingKeyValueChanges;
	unsigned long long _clientsWaitingOnSandboxPresentationControllerBeforeFileLoadBegins;
	NSURL* _urlAssociatedWithScreenTimeShield;
	char _shouldIgnoreURLAsAnalyticsImpression;
	char _shouldNotifyImpressionAnalyticsRecorder;
	char _shouldNotifyImpressionAnalyticsRecorderWhenDisplayedToUser;
	char _wantsToShowDefaultBrowserBanner;
	/*^block*/id _webAuthenticationDialogCompletionHandler;
	long long _currentAuthenticatorAlertDialogConfigurationType;
	/*^block*/id _webAuthenticationPINHandler;
	long long _responseSource;
	_WKWebAuthenticationAssertionResponse* _assertionResponse;
	/*^block*/id _selectAssertionResponseHandler;
	/*^block*/id _localAuthenticatorPolicyHandler;
	char _useSecurityKeyOptionInWebAuthenticationDialogIsSelected;
	char _localAuthenticatorIsSelected;
	NSMutableDictionary* _extensionIdentifierToDynamicallyInjectedStyleSheets;
	NSMutableArray* _webExtensionTabLanguageIsDetectedCompletionHandlers;
	char _isWaitingForWebpageToDetectLanguage;
	NSMutableSet* _potentialDownloadURLsFromReader;
	id<TranslationAnalyticsMessageReceiver> _translationAnalyticsMessageReceiverProxy;
	NSTimer* _heightPercentageUpdateTimer;
	char _isUserInitiatedNavigation;
	char _playingMutableMedia;
	char _mediaCaptureMuted;
	char _screenCapturePaused;
	char _tryingToClose;
	char _shouldShowOriginalURLInsteadOfExpectedURLInUnifiedField;
	char _webPageIsUnresponsive;
	char _mainDocumentDidFirstLayout;
	char _mainDocumentDidFirstVisuallyNonEmptyLayout;
	char _mainDocumentDidFirstMeaningfulPaint;
	char _mainDocumentDidLoad;
	char _webProcessForcePaused;
	char _swapProcessesOnNavigation;
	char _redirectOccurredWhileRecoveringFromWebProcessCrash;
	char _waitingForSamplingProfilerOutput;
	char _mainFrameLoadEndedInError;
	char _shouldDownloadNextPage;
	char _tryingToCloseBeforeCommittingToBackgroundLoad;
	char _hasEverBeenVisible;
	char _sensitiveFormFieldHasEverHadFocus;
	char _committedExtendedValidationCertificateOrganizationNameHasBeenDetermined;
	char _restoringFromSessionStateData;
	char _shouldStartEmpty;
	char _shouldBlockAllMouseEvents;
	char _shouldBlockAllKeyEvents;
	char _shouldBlockFirstResponder;
	char _windowFocusDisabled;
	char _movingToAnotherWindow;
	char _wasFormTextEdited;
	char _meetsEditedFormTextWarningCriteria;
	char _preFillFormWasDeferred;
	char _presentingSheetToSaveCredentials;
	char _suppressingBeforeUnloadPrompts;
	char _readerShouldBeShownIfPossible;
	char _readerViewStale;
	char _shouldReflectTranslationProgressAsFluidProgress;
	char _isObscuredForDigitalHealth;
	char _pendingBrowserInitiatedLoadWasForDownload;
	char _showingWebGLPolicyDialog;
	char _inContinuousMode;
	char _blockedFromKeyViewLoop;
	char _pointerLocked;
	char _shouldHideTransientBannerOnNextUserInitiatedNavigation;
	char _shouldHideTransientBannerOnVisuallyNonEmptyLayout;
	char _waitingToContinueUserActivity;
	char _overrideMaintainsInactiveSelectionForVoiceOver;
	char _suppressJavaScriptDialogPresentation;
	char _waitingForBytecodeProfile;
	char _loadingWebExtensionURLWithoutRelatedWebView;
	char _canShowBlockedPageContentDialog;
	char _performingAccountSecurityUpgrade;
	char _skipAnimationsWhenDismissingPendingTabDialogs;
	unsigned _tabIdentifier;
	int _loadingStatus;
	StartPageViewController* _startPageViewController;
	NSString* _authenticationHost;
	unsigned long long _mutableMediaState;
	long long _mutedState;
	BrowserDocument* _document;
	BrowserViewController* _originatingContentViewControllerWithPossibleJavaScriptAccess;
	BrowserNavigationDelegate* _navigationDelegate;
	BrowserResourceLoadDelegate* _resourceLoadDelegate;
	id<WKUIDelegate> _UIDelegate;
	NSDate* _dateFinishedLoading;
	NSString* _originalURLString;
	NSString* _provisionalOriginalURLString;
	WBSURLSpoofingMitigator* _urlSpoofingMitigator;
	CKContextResponse* _contextResponse;
	NSString* _readerText;
	NSURL* _urlOfMostRecentFirstVisuallyNonEmptyLayout;
	/*^block*/id _backgroundDocumentFirstVisuallyNonEmptyLayoutHandler;
	/*^block*/id _backgroundDocumentFirstMeaningfulPaintHandler;
	double _bestWidthForCurrentPage;
	NSSet* _allowedKnownTrackingThirdParties;
	NSSet* _preventedKnownTrackingThirdParties;
	id<WBSSandboxExtensionToken> _sandboxExtensionToken;
	NSURLRequest* _currentRequest;
	long long _currentRequestResponseCode;
	long long _lastBackgroundTerminationReason;
	BackgroundLoad* _backgroundNavigationBackgroundLoad;
	long long _urlImpressionProvenance;
	PassDownloadSuppressionManager* _passDownloadSuppressionManager;
	BrowserTabPersistentState* _pendingTabStateToRestore;
	NSURL* _unifiedFieldFallbackURLForAboutBlank;
	WBSFluidProgressState* _fluidProgressState;
	WBSMultiRoundAutoFillManager* _multiRoundAutoFillManager;
	WBSCreditCardData* _lastFilledCreditCardData;
	NSSet* _lastFilledCreditCardDataTypes;
	StatusMessage* _statusMessage;
	JavaScriptDialogSuppressionManager* _javaScriptDialogSuppressionManager;
	WBSSameDocumentNavigationToHistoryVisitCorrelator* _sameDocumentNavigationToHistoryVisitCorrelator;
	WBSHistoryVisit* _lastVisit;
	NSDictionary* _initialReaderArticleScrollPositionAsDictionary;
	WBSTranslationContext* _translationContext;
	PagePreviewAnimationController* _parentPagePreviewAnimationController;
	NSString* _requestedTabLabel;
	NSString* _provisionalTabLabel;
	NSString* _committedTabLabel;
	BrowserTabViewItem* _parentTab;
	BackForwardListItem* _backForwardListItemForReturningToParentTab;
	ReadingListItem* _currentlyLoadedReadingListItem;
	unsigned long long _currentlyLoadedReadingListItemPageNumber;
	ContinuousReadingListPageItem* _readingListPageItemToLoadInContinuousMode;
	PointerLockBanner* _pointerLockBanner;
	BrowserViewController* _originatingModalDialogContentViewController;
	BrowserViewController* _blockingModalDialogContentViewController;
	PageLoadTestViewController* _pageLoadTestViewController;
	id<AuthenticationSessionNavigationHandling> _authenticationSessionNavigationHandler;
	unsigned long long _phishingURLClassification;
	Vector<unsigned int, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc>* _ancestorTabIdentifiers;

}

@property (setter=_setStatusMessage:,nonatomic,retain) StatusMessage * statusMessage;                                                                                       //@synthesize statusMessage=_statusMessage - In the implementation block
@property (assign,setter=_setShouldDownloadNextPage:,nonatomic) char shouldDownloadNextPage;                                                                                //@synthesize shouldDownloadNextPage=_shouldDownloadNextPage - In the implementation block
@property (setter=_setOriginalURLString:,nonatomic,copy) NSString * originalURLString;                                                                                      //@synthesize originalURLString=_originalURLString - In the implementation block
@property (setter=_setCommittedTabLabel:,nonatomic,copy) NSString * committedTabLabel;                                                                                      //@synthesize committedTabLabel=_committedTabLabel - In the implementation block
@property (assign,nonatomic) char skipAnimationsWhenDismissingPendingTabDialogs;                                                                                            //@synthesize skipAnimationsWhenDismissingPendingTabDialogs=_skipAnimationsWhenDismissingPendingTabDialogs - In the implementation block
@property (assign,setter=_setShouldShowOriginalURLInsteadOfExpectedURLInUnifiedField:,nonatomic) char shouldShowOriginalURLInsteadOfExpectedURLInUnifiedField;              //@synthesize shouldShowOriginalURLInsteadOfExpectedURLInUnifiedField=_shouldShowOriginalURLInsteadOfExpectedURLInUnifiedField - In the implementation block
@property (nonatomic,retain) CKContextResponse * contextResponse;                                                                                                           //@synthesize contextResponse=_contextResponse - In the implementation block
@property (assign,getter=isTryingToClose,nonatomic) char tryingToClose;                                                                                                     //@synthesize tryingToClose=_tryingToClose - In the implementation block
@property (nonatomic,readonly) BrowserWKView * browserView; 
@property (nonatomic,__weak,readonly) BrowserDocument * document;                                                                                                           //@synthesize document=_document - In the implementation block
@property (nonatomic,readonly) unsigned tabIdentifier;                                                                                                                      //@synthesize tabIdentifier=_tabIdentifier - In the implementation block
@property (nonatomic,readonly) Vector<unsigned int ancestorTabIdentifiers;                                                                                                  //@synthesize ancestorTabIdentifiers=_ancestorTabIdentifiers - In the implementation block
@property (nonatomic,readonly) NSWindow * hostWindow; 
@property (assign,nonatomic,__weak) BrowserViewController * originatingContentViewControllerWithPossibleJavaScriptAccess;                                                   //@synthesize originatingContentViewControllerWithPossibleJavaScriptAccess=_originatingContentViewControllerWithPossibleJavaScriptAccess - In the implementation block
@property (nonatomic,readonly) char isDisposable; 
@property (nonatomic,readonly) BrowserWindowController * browserWindowController; 
@property (nonatomic,readonly) BrowserContainerViewController * parentBrowserContainerViewController; 
@property (nonatomic,readonly) id<BrowserContentLoaderDelegate> contentLoaderDelegate; 
@property (nonatomic,readonly) BrowserViewControllerWKAdapter* browserViewControllerWKAdapter; 
@property (nonatomic,readonly) BrowserTabViewItem * tabViewItem; 
@property (nonatomic,readonly) TabContentView * tabContentView; 
@property (nonatomic,readonly) SearchableWKView * frontmostContentView; 
@property (nonatomic,readonly) unsigned long long browsingMode; 
@property (nonatomic,readonly) char usesPrivateBrowsing; 
@property (getter=isControlledByAutomation,nonatomic,readonly) char controlledByAutomation; 
@property (nonatomic,readonly) BrowserNavigationDelegate * navigationDelegate;                                                                                              //@synthesize navigationDelegate=_navigationDelegate - In the implementation block
@property (nonatomic,readonly) BrowserResourceLoadDelegate * resourceLoadDelegate;                                                                                          //@synthesize resourceLoadDelegate=_resourceLoadDelegate - In the implementation block
@property (nonatomic,readonly) id<WKUIDelegate> UIDelegate;                                                                                                                 //@synthesize UIDelegate=_UIDelegate - In the implementation block
@property (nonatomic,readonly) id<_WKInspectorDelegate> inspectorDelegate;                                                                                                  //@synthesize inspectorDelegate=_inspectorDelegate - In the implementation block
@property (nonatomic,readonly) NSDate * dateFinishedLoading;                                                                                                                //@synthesize dateFinishedLoading=_dateFinishedLoading - In the implementation block
@property (assign,nonatomic) char webPageIsUnresponsive;                                                                                                                    //@synthesize webPageIsUnresponsive=_webPageIsUnresponsive - In the implementation block
@property (nonatomic,readonly) NSString * currentPageTitle; 
@property (nonatomic,copy,readonly) NSString * mediaMenuItemTitle; 
@property (nonatomic,readonly) NSString * pageName; 
@property (nonatomic,readonly) NSString * displayName; 
@property (nonatomic,readonly) NSString * expectedOrCurrentOriginalURLString; 
@property (nonatomic,copy) NSString * provisionalOriginalURLString;                                                                                                         //@synthesize provisionalOriginalURLString=_provisionalOriginalURLString - In the implementation block
@property (nonatomic,readonly) NSURL * expectedURL; 
@property (nonatomic,readonly) NSURL * expectedOrCurrentURL; 
@property (nonatomic,readonly) NSURL * expectedOrCurrentURLOrLastActiveURLIfCrashed; 
@property (nonatomic,readonly) NSURL * failedURL; 
@property (nonatomic,readonly) NSURL * failedOrCurrentURL; 
@property (nonatomic,readonly) WBSURLSpoofingMitigator * urlSpoofingMitigator;                                                                                              //@synthesize urlSpoofingMitigator=_urlSpoofingMitigator - In the implementation block
@property (nonatomic,readonly) NSString * currentPageHostName; 
@property (nonatomic,readonly) NSURL * currentBackForwardItemURL; 
@property (nonatomic,readonly) NSString * readerText;                                                                                                                       //@synthesize readerText=_readerText - In the implementation block
@property (assign,nonatomic) char mainDocumentDidFirstLayout;                                                                                                               //@synthesize mainDocumentDidFirstLayout=_mainDocumentDidFirstLayout - In the implementation block
@property (assign,nonatomic) char mainDocumentDidFirstVisuallyNonEmptyLayout;                                                                                               //@synthesize mainDocumentDidFirstVisuallyNonEmptyLayout=_mainDocumentDidFirstVisuallyNonEmptyLayout - In the implementation block
@property (assign,nonatomic) char mainDocumentDidFirstMeaningfulPaint;                                                                                                      //@synthesize mainDocumentDidFirstMeaningfulPaint=_mainDocumentDidFirstMeaningfulPaint - In the implementation block
@property (assign,nonatomic) char mainDocumentDidLoad;                                                                                                                      //@synthesize mainDocumentDidLoad=_mainDocumentDidLoad - In the implementation block
@property (nonatomic,readonly) char shouldFinishFluidProgress; 
@property (nonatomic,retain) NSURL * urlOfMostRecentFirstVisuallyNonEmptyLayout;                                                                                            //@synthesize urlOfMostRecentFirstVisuallyNonEmptyLayout=_urlOfMostRecentFirstVisuallyNonEmptyLayout - In the implementation block
@property (nonatomic,copy) id backgroundDocumentFirstVisuallyNonEmptyLayoutHandler;                                                                                         //@synthesize backgroundDocumentFirstVisuallyNonEmptyLayoutHandler=_backgroundDocumentFirstVisuallyNonEmptyLayoutHandler - In the implementation block
@property (nonatomic,copy) id backgroundDocumentFirstMeaningfulPaintHandler;                                                                                                //@synthesize backgroundDocumentFirstMeaningfulPaintHandler=_backgroundDocumentFirstMeaningfulPaintHandler - In the implementation block
@property (nonatomic,readonly) char hasOnlySecureContent; 
@property (nonatomic,readonly) double bestWidthForCurrentPage;                                                                                                              //@synthesize bestWidthForCurrentPage=_bestWidthForCurrentPage - In the implementation block
@property (nonatomic,copy) NSSet * allowedKnownTrackingThirdParties;                                                                                                        //@synthesize allowedKnownTrackingThirdParties=_allowedKnownTrackingThirdParties - In the implementation block
@property (nonatomic,copy) NSSet * preventedKnownTrackingThirdParties;                                                                                                      //@synthesize preventedKnownTrackingThirdParties=_preventedKnownTrackingThirdParties - In the implementation block
@property (nonatomic,readonly) char supportsTextEncoding; 
@property (nonatomic,copy) NSString * customTextEncodingName; 
@property (assign,getter=isWebProcessForcePaused,nonatomic) char webProcessForcePaused;                                                                                     //@synthesize webProcessForcePaused=_webProcessForcePaused - In the implementation block
@property (assign,nonatomic) char swapProcessesOnNavigation;                                                                                                                //@synthesize swapProcessesOnNavigation=_swapProcessesOnNavigation - In the implementation block
@property (assign,nonatomic) char redirectOccurredWhileRecoveringFromWebProcessCrash;                                                                                       //@synthesize redirectOccurredWhileRecoveringFromWebProcessCrash=_redirectOccurredWhileRecoveringFromWebProcessCrash - In the implementation block
@property (assign,getter=isWaitingForSamplingProfilerOutput,nonatomic) char waitingForSamplingProfilerOutput;                                                               //@synthesize waitingForSamplingProfilerOutput=_waitingForSamplingProfilerOutput - In the implementation block
@property (nonatomic,readonly) int loadingStatus;                                                                                                                           //@synthesize loadingStatus=_loadingStatus - In the implementation block
@property (nonatomic,readonly) char isLoadingSingleResource; 
@property (nonatomic,readonly) char isLoadingOrWaitingToLoadPage; 
@property (nonatomic,readonly) char isLoadingProvisionally; 
@property (assign,nonatomic) char mainFrameLoadEndedInError;                                                                                                                //@synthesize mainFrameLoadEndedInError=_mainFrameLoadEndedInError - In the implementation block
@property (nonatomic,readonly) char canReload; 
@property (nonatomic,readonly) char shouldSuppressJavaScriptDialogsDueToProvisionalLoad; 
@property (nonatomic,readonly) char shouldSuppressOpenPanelDueToProvisionalLoad; 
@property (nonatomic,retain) id<WBSSandboxExtensionToken> sandboxExtensionToken;                                                                                            //@synthesize sandboxExtensionToken=_sandboxExtensionToken - In the implementation block
@property (nonatomic,readonly) NSURLRequest * currentRequest;                                                                                                               //@synthesize currentRequest=_currentRequest - In the implementation block
@property (assign,nonatomic) long long currentRequestResponseCode;                                                                                                          //@synthesize currentRequestResponseCode=_currentRequestResponseCode - In the implementation block
@property (nonatomic,readonly) char didLoadCurrentURLWithContentBlockersEnabled; 
@property (nonatomic,readonly) SessionState* sessionState; 
@property (nonatomic,readonly) NSData * sessionStateDataFilteringURLs; 
@property (nonatomic,readonly) BackgroundLoad * backgroundLoad; 
@property (nonatomic,readonly) char isBackgroundLoadContentViewController; 
@property (assign,getter=isTryingToCloseBeforeCommittingToBackgroundLoad,nonatomic) char tryingToCloseBeforeCommittingToBackgroundLoad;                                     //@synthesize tryingToCloseBeforeCommittingToBackgroundLoad=_tryingToCloseBeforeCommittingToBackgroundLoad - In the implementation block
@property (assign,nonatomic) long long lastBackgroundTerminationReason;                                                                                                     //@synthesize lastBackgroundTerminationReason=_lastBackgroundTerminationReason - In the implementation block
@property (assign,nonatomic) char hasEverBeenVisible;                                                                                                                       //@synthesize hasEverBeenVisible=_hasEverBeenVisible - In the implementation block
@property (nonatomic,__weak,readonly) BackgroundLoad * backgroundNavigationBackgroundLoad;                                                                                  //@synthesize backgroundNavigationBackgroundLoad=_backgroundNavigationBackgroundLoad - In the implementation block
@property (nonatomic,readonly) char canGoBack; 
@property (nonatomic,readonly) char canGoForward; 
@property (assign,nonatomic) long long urlImpressionProvenance;                                                                                                             //@synthesize urlImpressionProvenance=_urlImpressionProvenance - In the implementation block
@property (nonatomic,readonly) char canSaveAsWebArchive; 
@property (nonatomic,readonly) char canSaveAsPDF; 
@property (nonatomic,readonly) NSArray * certificateChain; 
@property (nonatomic,readonly) CertificateInfo* certificateInfo; 
@property (nonatomic,readonly) char isPageEligibileToShowNotSecureWarning; 
@property (nonatomic,readonly) char sensitiveFormFieldHasEverHadFocus;                                                                                                      //@synthesize sensitiveFormFieldHasEverHadFocus=_sensitiveFormFieldHasEverHadFocus - In the implementation block
@property (nonatomic,readonly) SecTrustRef serverTrust; 
@property (nonatomic,readonly) char extendedValidationCertificateAvailableForPage; 
@property (nonatomic,readonly) char committedExtendedValidationCertificateOrganizationNameHasBeenDetermined;                                                                //@synthesize committedExtendedValidationCertificateOrganizationNameHasBeenDetermined=_committedExtendedValidationCertificateOrganizationNameHasBeenDetermined - In the implementation block
@property (nonatomic,copy) NSString * extendedValidationCertificateOrganizationName; 
@property (nonatomic,readonly) PassDownloadSuppressionManager * passDownloadSuppressionManager;                                                                             //@synthesize passDownloadSuppressionManager=_passDownloadSuppressionManager - In the implementation block
@property (assign,getter=isRestoringFromSessionStateData,nonatomic) char restoringFromSessionStateData;                                                                     //@synthesize restoringFromSessionStateData=_restoringFromSessionStateData - In the implementation block
@property (getter=isSuppressingDownloads,nonatomic,readonly) char suppressingDownloads; 
@property (nonatomic,readonly) BrowserTabPersistentState * pendingTabStateToRestore;                                                                                        //@synthesize pendingTabStateToRestore=_pendingTabStateToRestore - In the implementation block
@property (nonatomic,readonly) char hasTabDataPendingForRestoration; 
@property (nonatomic,readonly) char shouldDeferRestorationUntilSelected; 
@property (nonatomic,readonly) char hasQueuedNavigation; 
@property (nonatomic,readonly) QueuedNavigation* queuedNavigation; 
@property (getter=isShowingWebView,nonatomic,readonly) char showingWebView; 
@property (nonatomic,readonly) char willShowWebView; 
@property (getter=isShowingEmptyPage,nonatomic,readonly) char showingEmptyPage; 
@property (getter=isShowingExtensionPage,nonatomic,readonly) char showingExtensionPage; 
@property (getter=isShowingHTMLPage,nonatomic,readonly) char showingHTMLPage; 
@property (getter=isShowingLoadErrorPage,nonatomic,readonly) char showingLoadErrorPage; 
@property (getter=isShowingSecurePage,nonatomic,readonly) char showingSecurePage; 
@property (getter=isShowingPDFDocument,nonatomic,readonly) char showingPDFDocument; 
@property (getter=isShowingWebArchive,nonatomic,readonly) char showingWebArchive; 
@property (getter=isShowingSecurityWarningPage,nonatomic,readonly) char showingSecurityWarningPage; 
@property (getter=isShowingOtherPage,nonatomic,readonly) char showingOtherPage; 
@property (getter=isShowingWebContent,nonatomic,readonly) char showingWebContent; 
@property (getter=isShowingInitialPage,nonatomic,readonly) char showingInitialPage; 
@property (getter=isShowingCertificateWarning,nonatomic,readonly) char showingCertificateWarning; 
@property (assign,nonatomic) char shouldStartEmpty;                                                                                                                         //@synthesize shouldStartEmpty=_shouldStartEmpty - In the implementation block
@property (nonatomic,readonly) NSURL * unifiedFieldURL; 
@property (nonatomic,retain) NSURL * unifiedFieldFallbackURLForAboutBlank;                                                                                                  //@synthesize unifiedFieldFallbackURLForAboutBlank=_unifiedFieldFallbackURLForAboutBlank - In the implementation block
@property (nonatomic,readonly) NSURL * committedURLOfEarliestOriginatingContentViewControllerWithPossibleJavaScriptAccess; 
@property (nonatomic,readonly) NSString * titleForUnifiedFieldURL; 
@property (nonatomic,copy,readonly) NSString * authenticationHost;                                                                                                          //@synthesize authenticationHost=_authenticationHost - In the implementation block
@property (assign,nonatomic) char shouldBlockAllMouseEvents;                                                                                                                //@synthesize shouldBlockAllMouseEvents=_shouldBlockAllMouseEvents - In the implementation block
@property (assign,nonatomic) char shouldBlockAllKeyEvents;                                                                                                                  //@synthesize shouldBlockAllKeyEvents=_shouldBlockAllKeyEvents - In the implementation block
@property (assign,nonatomic) char shouldBlockFirstResponder;                                                                                                                //@synthesize shouldBlockFirstResponder=_shouldBlockFirstResponder - In the implementation block
@property (assign,getter=isWindowFocusDisabled,nonatomic) char windowFocusDisabled;                                                                                         //@synthesize windowFocusDisabled=_windowFocusDisabled - In the implementation block
@property (assign,getter=isMovingToAnotherWindow,nonatomic) char movingToAnotherWindow;                                                                                     //@synthesize movingToAnotherWindow=_movingToAnotherWindow - In the implementation block
@property (nonatomic,readonly) WBSFluidProgressState * fluidProgressState;                                                                                                  //@synthesize fluidProgressState=_fluidProgressState - In the implementation block
@property (nonatomic,readonly) char wasFormTextEdited;                                                                                                                      //@synthesize wasFormTextEdited=_wasFormTextEdited - In the implementation block
@property (nonatomic,readonly) char meetsEditedFormTextWarningCriteria;                                                                                                     //@synthesize meetsEditedFormTextWarningCriteria=_meetsEditedFormTextWarningCriteria - In the implementation block
@property (nonatomic,readonly) char shouldWarnAboutUnsavedCredentials; 
@property (nonatomic,readonly) char canAutoFill; 
@property (nonatomic,readonly) WBSMultiRoundAutoFillManager * multiRoundAutoFillManager;                                                                                    //@synthesize multiRoundAutoFillManager=_multiRoundAutoFillManager - In the implementation block
@property (assign,nonatomic) char preFillFormWasDeferred;                                                                                                                   //@synthesize preFillFormWasDeferred=_preFillFormWasDeferred - In the implementation block
@property (nonatomic,readonly) id<FormAutoFiller> formAutoFiller; 
@property (assign,getter=isPresentingSheetToSaveCredentials,nonatomic) char presentingSheetToSaveCredentials;                                                               //@synthesize presentingSheetToSaveCredentials=_presentingSheetToSaveCredentials - In the implementation block
@property (nonatomic,retain) WBSCreditCardData * lastFilledCreditCardData;                                                                                                  //@synthesize lastFilledCreditCardData=_lastFilledCreditCardData - In the implementation block
@property (nonatomic,retain) NSSet * lastFilledCreditCardDataTypes;                                                                                                         //@synthesize lastFilledCreditCardDataTypes=_lastFilledCreditCardDataTypes - In the implementation block
@property (nonatomic,readonly) JavaScriptDialogSuppressionManager * javaScriptDialogSuppressionManager;                                                                     //@synthesize javaScriptDialogSuppressionManager=_javaScriptDialogSuppressionManager - In the implementation block
@property (nonatomic,readonly) char currentPageHasJavaScriptDialogsSuppressed; 
@property (assign,getter=isSuppressingBeforeUnloadPrompts,nonatomic) char suppressingBeforeUnloadPrompts;                                                                   //@synthesize suppressingBeforeUnloadPrompts=_suppressingBeforeUnloadPrompts - In the implementation block
@property (nonatomic,readonly) WBSSameDocumentNavigationToHistoryVisitCorrelator * sameDocumentNavigationToHistoryVisitCorrelator;                                          //@synthesize sameDocumentNavigationToHistoryVisitCorrelator=_sameDocumentNavigationToHistoryVisitCorrelator - In the implementation block
@property (nonatomic,retain) WBSHistoryVisit * lastVisit;                                                                                                                   //@synthesize lastVisit=_lastVisit - In the implementation block
@property (nonatomic,readonly) BookmarksViewController * bookmarksViewController; 
@property (nonatomic,readonly) char canShowBookmarks; 
@property (nonatomic,readonly) char isShowingBookmarks; 
@property (nonatomic,readonly) char canShowHistory; 
@property (nonatomic,readonly) char isShowingHistory; 
@property (nonatomic,readonly) char canSetCurrentPageToHomePage; 
@property (getter=isShowingStartPage,nonatomic,readonly) char showingStartPage; 
@property (getter=isLoadingStartPage,nonatomic,readonly) char loadingStartPage; 
@property (getter=isShowingOrWillShowStartPageView,nonatomic,readonly) char showingOrWillShowStartPageView; 
@property (nonatomic,readonly) StartPageViewController * startPageViewController;                                                                                           //@synthesize startPageViewController=_startPageViewController - In the implementation block
@property (getter=isShowingReader,nonatomic,readonly) char showingReader; 
@property (nonatomic,readonly) ReaderController* readerController; 
@property (assign,nonatomic) char readerShouldBeShownIfPossible;                                                                                                            //@synthesize readerShouldBeShownIfPossible=_readerShouldBeShownIfPossible - In the implementation block
@property (nonatomic,copy) NSDictionary * initialReaderArticleScrollPositionAsDictionary;                                                                                   //@synthesize initialReaderArticleScrollPositionAsDictionary=_initialReaderArticleScrollPositionAsDictionary - In the implementation block
@property (assign,getter=isReaderViewStale,nonatomic) char readerViewStale;                                                                                                 //@synthesize readerViewStale=_readerViewStale - In the implementation block
@property (nonatomic,readonly) WBSTranslationContext * translationContext;                                                                                                  //@synthesize translationContext=_translationContext - In the implementation block
@property (nonatomic,readonly) char shouldReflectTranslationProgressAsFluidProgress;                                                                                        //@synthesize shouldReflectTranslationProgressAsFluidProgress=_shouldReflectTranslationProgressAsFluidProgress - In the implementation block
@property (nonatomic,readonly) unsigned long long numberOfBlockedPopUpWindows; 
@property (assign,nonatomic) char isObscuredForDigitalHealth;                                                                                                               //@synthesize isObscuredForDigitalHealth=_isObscuredForDigitalHealth - In the implementation block
@property (assign,nonatomic) char pendingBrowserInitiatedLoadWasForDownload;                                                                                                //@synthesize pendingBrowserInitiatedLoadWasForDownload=_pendingBrowserInitiatedLoadWasForDownload - In the implementation block
@property (nonatomic,readonly) BackForwardList* backForwardList; 
@property (nonatomic,readonly) char hasNonEmptyBackForwardList; 
@property (getter=isNavigatingViaBackForwardList,nonatomic,readonly) char navigatingViaBackForwardList; 
@property (getter=isNavigatingToCachedPageInBackForwardList,nonatomic,readonly) char navigatingToCachedPageInBackForwardList; 
@property (nonatomic,readonly) NSString * titleOfPrintMenuItem; 
@property (nonatomic,readonly) NSPrintInfo * printInfo; 
@property (nonatomic,copy,readonly) NSSet * pagePreviewBrowserViewControllers; 
@property (getter=isForPagePreviews,nonatomic,readonly) char forPagePreviews; 
@property (assign,nonatomic,__weak) PagePreviewAnimationController * parentPagePreviewAnimationController;                                                                  //@synthesize parentPagePreviewAnimationController=_parentPagePreviewAnimationController - In the implementation block
@property (nonatomic,copy) NSString * requestedTabLabel;                                                                                                                    //@synthesize requestedTabLabel=_requestedTabLabel - In the implementation block
@property (nonatomic,copy) NSString * provisionalTabLabel;                                                                                                                  //@synthesize provisionalTabLabel=_provisionalTabLabel - In the implementation block
@property (nonatomic,readonly) char canSharePage; 
@property (getter=isPlayingVideoInPIP,nonatomic,readonly) char playingVideoInPIP; 
@property (nonatomic,__weak,readonly) BrowserTabViewItem * parentTab;                                                                                                       //@synthesize parentTab=_parentTab - In the implementation block
@property (assign,nonatomic) BackForwardListItem* backForwardListItemForReturningToParentTab;                                                                               //@synthesize backForwardListItemForReturningToParentTab=_backForwardListItemForReturningToParentTab - In the implementation block
@property (getter=isNavigatingToSpawnedTabParentURL,nonatomic,readonly) char navigatingToSpawnedTabParentURL; 
@property (assign,getter=isShowingWebGLPolicyDialog,nonatomic) char showingWebGLPolicyDialog;                                                                               //@synthesize showingWebGLPolicyDialog=_showingWebGLPolicyDialog - In the implementation block
@property (getter=isDisposableAfterNavigation,nonatomic,readonly) char disposableAfterNavigation; 
@property (nonatomic,readonly) char isPinnedStateToggleable; 
@property (nonatomic,readonly) char canAddBookmark; 
@property (nonatomic,readonly) NSURL * urlForNewBookmark; 
@property (nonatomic,readonly) NSString * titleForNewBookmark; 
@property (nonatomic,readonly) char canAddReadingListItem; 
@property (getter=isCurrentPageLoadedFromReadingList,nonatomic,readonly) char currentPageLoadedFromReadingList; 
@property (getter=isShowingReadingListItemArchive,nonatomic,readonly) char showingReadingListItemArchive; 
@property (getter=isShowingReadingListItemArchiveURL,nonatomic,readonly) char showingReadingListItemArchiveURL; 
@property (nonatomic,readonly) ReadingListItem * currentlyLoadedReadingListItem;                                                                                            //@synthesize currentlyLoadedReadingListItem=_currentlyLoadedReadingListItem - In the implementation block
@property (nonatomic,readonly) unsigned long long currentlyLoadedReadingListItemPageNumber;                                                                                 //@synthesize currentlyLoadedReadingListItemPageNumber=_currentlyLoadedReadingListItemPageNumber - In the implementation block
@property (assign,getter=isInContinuousMode,nonatomic) char inContinuousMode;                                                                                               //@synthesize inContinuousMode=_inContinuousMode - In the implementation block
@property (nonatomic,readonly) char isInactiveContinuousReadingView; 
@property (nonatomic,readonly) ContinuousReadingListViewController * continuousReadingListViewController; 
@property (nonatomic,readonly) ContinuousReadingListPageItem * readingListPageItemToLoadInContinuousMode;                                                                   //@synthesize readingListPageItemToLoadInContinuousMode=_readingListPageItemToLoadInContinuousMode - In the implementation block
@property (assign,nonatomic) char alwaysInitiateLoadsInContinuousModeUsingCurrentController;                                                                                //@synthesize alwaysInitiateLoadsInContinuousModeUsingCurrentController=_alwaysInitiateLoadsInContinuousModeUsingCurrentController - In the implementation block
@property (assign,getter=isBlockedFromKeyViewLoop,nonatomic) char blockedFromKeyViewLoop;                                                                                   //@synthesize blockedFromKeyViewLoop=_blockedFromKeyViewLoop - In the implementation block
@property (nonatomic,readonly) NSView * keyView; 
@property (nonatomic,readonly) char canViewSource; 
@property (getter=isShowingWebInspector,nonatomic,readonly) char showingWebInspector; 
@property (getter=isShowingResponsiveDesignView,nonatomic,readonly) char showingResponsiveDesignView; 
@property (nonatomic,readonly) char canShowResponsiveDesignView; 
@property (nonatomic,readonly) char isShowingAnyBanner; 
@property (nonatomic,readonly) PointerLockBanner * pointerLockBanner;                                                                                                       //@synthesize pointerLockBanner=_pointerLockBanner - In the implementation block
@property (getter=isShowingPointerLockBanner,nonatomic,readonly) char showingPointerLockBanner; 
@property (assign,getter=isPointerLocked,nonatomic) char pointerLocked;                                                                                                     //@synthesize pointerLocked=_pointerLocked - In the implementation block
@property (nonatomic,readonly) WebCrashBanner * webCrashBanner;                                                                                                             //@synthesize webCrashBanner=_webCrashBanner - In the implementation block
@property (getter=isShowingWebCrashBanner,nonatomic,readonly) char showingWebCrashBanner; 
@property (nonatomic,readonly) char shouldHideTransientBannerOnNextUserInitiatedNavigation;                                                                                 //@synthesize shouldHideTransientBannerOnNextUserInitiatedNavigation=_shouldHideTransientBannerOnNextUserInitiatedNavigation - In the implementation block
@property (assign,nonatomic) char shouldHideTransientBannerOnVisuallyNonEmptyLayout;                                                                                        //@synthesize shouldHideTransientBannerOnVisuallyNonEmptyLayout=_shouldHideTransientBannerOnVisuallyNonEmptyLayout - In the implementation block
@property (nonatomic,readonly) PrivateBrowsingExplanationBanner * privateBrowsingExplanationBanner;                                                                         //@synthesize privateBrowsingExplanationBanner=_privateBrowsingExplanationBanner - In the implementation block
@property (getter=isShowingPrivateBrowsingExplanationBanner,nonatomic,readonly) char showingPrivateBrowsingExplanationBanner; 
@property (assign,getter=isWaitingToContinueUserActivity,nonatomic) char waitingToContinueUserActivity;                                                                     //@synthesize waitingToContinueUserActivity=_waitingToContinueUserActivity - In the implementation block
@property (getter=isShowingDefaultBrowserBanner,nonatomic,readonly) char showingDefaultBrowserBanner; 
@property (nonatomic,readonly) char canSnapBackToSearchResults; 
@property (assign,nonatomic) char overrideMaintainsInactiveSelectionForVoiceOver;                                                                                           //@synthesize overrideMaintainsInactiveSelectionForVoiceOver=_overrideMaintainsInactiveSelectionForVoiceOver - In the implementation block
@property (assign,nonatomic) char suppressJavaScriptDialogPresentation;                                                                                                     //@synthesize suppressJavaScriptDialogPresentation=_suppressJavaScriptDialogPresentation - In the implementation block
@property (getter=isSuppressingJavaScriptShowModalDialogPresentation,nonatomic,readonly) char suppressJavaScriptShowModalDialogPresentation; 
@property (assign,nonatomic,__weak) BrowserViewController * originatingModalDialogContentViewController;                                                                    //@synthesize originatingModalDialogContentViewController=_originatingModalDialogContentViewController - In the implementation block
@property (assign,nonatomic,__weak) BrowserViewController * blockingModalDialogContentViewController;                                                                       //@synthesize blockingModalDialogContentViewController=_blockingModalDialogContentViewController - In the implementation block
@property (nonatomic,readonly) char isUnresponsiveDueToJavaScriptDialogRunningInProcess; 
@property (nonatomic,readonly) TabDialogViewController * tabDialogViewController; 
@property (assign,getter=isWaitingForBytecodeProfile,nonatomic) char waitingForBytecodeProfile;                                                                             //@synthesize waitingForBytecodeProfile=_waitingForBytecodeProfile - In the implementation block
@property (nonatomic,readonly) PerformanceCollector* performanceCollector; 
@property (nonatomic,readonly) PerformanceTesting* performanceTesting; 
@property (assign,nonatomic) PageLoadTestViewController* pageLoadTestViewController;                                                                                        //@synthesize pageLoadTestViewController=_pageLoadTestViewController - In the implementation block
@property (nonatomic,readonly) id<AppExtensionMessageReceiver> appExtensionMessageReceiver; 
@property (assign,getter=isLoadingWebExtensionURLWithoutRelatedWebView,nonatomic) char loadingWebExtensionURLWithoutRelatedWebView;                                         //@synthesize loadingWebExtensionURLWithoutRelatedWebView=_loadingWebExtensionURLWithoutRelatedWebView - In the implementation block
@property (assign,nonatomic,__weak) id<AuthenticationSessionNavigationHandling> authenticationSessionNavigationHandler;                                                     //@synthesize authenticationSessionNavigationHandler=_authenticationSessionNavigationHandler - In the implementation block
@property (getter=isShowingAutomaticStrongPasswordExplanation,nonatomic,readonly) char showingAutomaticStrongPasswordExplanation; 
@property (nonatomic,readonly) char canShowBlockedPageContentDialog;                                                                                                        //@synthesize canShowBlockedPageContentDialog=_canShowBlockedPageContentDialog - In the implementation block
@property (assign,nonatomic) unsigned long long phishingURLClassification;                                                                                                  //@synthesize phishingURLClassification=_phishingURLClassification - In the implementation block
@property (assign,nonatomic) char performingAccountSecurityUpgrade;                                                                                                         //@synthesize performingAccountSecurityUpgrade=_performingAccountSecurityUpgrade - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,copy,readonly) NSString * userVisibleMediaOrigin; 
@property (nonatomic,readonly) unsigned long long mutableMediaState;                                                                                                        //@synthesize mutableMediaState=_mutableMediaState - In the implementation block
@property (getter=isPlayingMutableMedia,nonatomic,readonly) char playingMutableMedia;                                                                                       //@synthesize playingMutableMedia=_playingMutableMedia - In the implementation block
@property (getter=isMuted,nonatomic,readonly) char muted; 
@property (assign,nonatomic) long long mutedState;                                                                                                                          //@synthesize mutedState=_mutedState - In the implementation block
@property (assign,getter=isMediaCaptureMuted,nonatomic) char mediaCaptureMuted;                                                                                             //@synthesize mediaCaptureMuted=_mediaCaptureMuted - In the implementation block
@property (assign,getter=isScreenCapturePaused,nonatomic) char screenCapturePaused;                                                                                         //@synthesize screenCapturePaused=_screenCapturePaused - In the implementation block
@property (getter=isShowingTabDialog,nonatomic,readonly) char showingTabDialog; 
@property (nonatomic,readonly) long long currentTabDialogType; 
+(id)browserViewControllerForPage:(const Page*)arg1 ;
+(void)enumerateBrowserViewControllersUsingBlock:(/*^block*/id)arg1 ;
+(id)browserViewControllersWithMutableMediaState:(unsigned long long)arg1 ;
+(id)resourceDirectoryURLForToken:(id)arg1 ;
+(void)enumerateBrowserContentViewControllersSharingWebProcessWithPID:(int)arg1 skippingContentViewController:(id)arg2 usingBlock:(/*^block*/id)arg3 ;
+(id)resourceDirectoryURLForToken:(id)arg1 developMenuController:(id)arg2 ;
+(id)browserViewControllerForWebView:(id)arg1 ;
+(id)findAutoSelectableBrowserViewControllerWithURL:(id)arg1 windowPolicy:(long long)arg2 tabPlacementHint:(const TabPlacementHint*)arg3 ;
+(id)findBrowserViewControllerForSafariPage:(id)arg1 ;
+(id)javaScriptDialogTitleForURL:(id)arg1 ;
+(id)test_javaScriptDialogTitleForSecurityOrigin:(const SecurityOrigin*)arg1 ;
-(void)invalidate;
-(void)close;
-(NSString *)displayName;
-(void)runModal;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(BrowserDocument *)document;
-(void)viewDidChangeEffectiveAppearance;
-(void)viewDidLoad;
-(void)dismissViewController:(id)arg1 ;
-(void)viewDidAppear;
-(NSPrintInfo *)printInfo;
-(void)_close;
-(BrowserTabViewItem *)tabViewItem;
-(void)stopLoading;
-(NSURLRequest *)currentRequest;
-(SecTrustRef)serverTrust;
-(WBSHistoryVisit *)lastVisit;
-(void)setLastVisit:(WBSHistoryVisit *)arg1 ;
-(char)isMuted;
-(SessionState*)sessionState;
-(void)reload;
-(void)setSandboxExtensionToken:(id<WBSSandboxExtensionToken>)arg1 ;
-(id<WBSSandboxExtensionToken>)sandboxExtensionToken;
-(StatusMessage *)statusMessage;
-(NSWindow *)hostWindow;
-(void)loadURLRequest:(const URLRequest*)arg1 ;
-(BrowserResourceLoadDelegate *)resourceLoadDelegate;
-(void)_printOperationDidRun:(id)arg1 success:(char)arg2 contextInfo:(void*)arg3 ;
-(char)canGoBack;
-(char)canGoForward;
-(void)goBack;
-(void)goForward;
-(id<WKUIDelegate>)UIDelegate;
-(char)supportsTextEncoding;
-(void)reloadFromOrigin;
-(NSString *)customTextEncodingName;
-(BackForwardList*)backForwardList;
-(void)setCustomTextEncodingName:(NSString *)arg1 ;
-(double)estimatedProgress;
-(NSString *)originalURLString;
-(char)canSaveAsWebArchive;
-(void)autoFill;
-(char)hasOnlySecureContent;
-(void)goToBackForwardListItem:(const BackForwardListItem*)arg1 ;
-(NSArray *)certificateChain;
-(BrowserNavigationDelegate *)navigationDelegate;
-(void)didReceiveAuthenticationChallenge:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)disableFrameSizeUpdates;
-(void)enableFrameSizeUpdates;
-(char)canSave;
-(void)goHome;
-(char)isShowingReader;
-(Vector<unsigned int)ancestorTabIdentifiers;
-(char)usesPrivateBrowsing;
-(void)didDetermineReaderAvailability:(id)arg1 ;
-(void)loadURL:(id)arg1 ;
-(BrowserWKView *)browserView;
-(void)setPageLoadTestViewController:(PageLoadTestViewController*)arg1 ;
-(PageLoadTestViewController*)pageLoadTestViewController;
-(NSURL *)expectedOrCurrentURL;
-(BrowserTabPersistentState *)pendingTabStateToRestore;
-(char)willShowWebView;
-(void)beginPendingNavigation;
-(char)hasTabDataPendingForRestoration;
-(char)isShowingWebView;
-(char)isShowingEmptyPage;
-(SearchableWKView *)frontmostContentView;
-(char)isLoadingOrWaitingToLoadPage;
-(void)setWaitingToContinueUserActivity:(char)arg1 ;
-(BrowserWindowController *)browserWindowController;
-(char)isWaitingToContinueUserActivity;
-(void)loadURLRequest:(const URLRequest*)arg1 tabLabel:(id)arg2 ;
-(void)applyCloudTabReaderPropertiesIfNeeded:(id)arg1 ;
-(void)setUrlImpressionProvenance:(long long)arg1 ;
-(unsigned long long)browsingMode;
-(void)sessionStateDidChange;
-(char)isShowingStartPage;
-(char)isShowingOrWillShowStartPageView;
-(NSString *)pageName;
-(unsigned long long)mutableMediaState;
-(char)isPlayingMutableMedia;
-(void)setMutedState:(long long)arg1 ;
-(void)setMediaCaptureMuted:(char)arg1 ;
-(void)startListeningForWebRequestEvents;
-(void)stopListeningForWebRequestEvents;
-(char)isBackgroundLoadContentViewController;
-(NSURL *)currentBackForwardItemURL;
-(char)isRestoringFromSessionStateData;
-(void)terminateWithoutReloadingPageDueToUnresponsiveWebProcess;
-(char)isTryingToClose;
-(char)isTryingToCloseBeforeCommittingToBackgroundLoad;
-(void)setTryingToCloseBeforeCommittingToBackgroundLoad:(char)arg1 ;
-(void)setTryingToClose:(char)arg1 ;
-(void)triedToCloseBeforeCommittingToBackgroundLoadWithResult:(long long)arg1 ;
-(BackgroundLoad *)backgroundLoad;
-(char)isShowingLoadErrorPage;
-(char)isShowingSecurityWarningPage;
-(void)terminateAndReloadPageDueToUnresponsiveWebProcess;
-(char)tryClose;
-(void)runAlertAsSheet:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)promptToAllowDownloadFileOnDomain:(id)arg1 originatingURLString:(id)arg2 withDecisionHandler:(/*^block*/id)arg3 ;
-(char)didWantToDownloadURL:(id)arg1 ;
-(char)downloadIsFromReader:(id)arg1 ;
-(ReaderController*)readerController;
-(BrowserTabViewItem *)parentTab;
-(void)wantsDownloadURL:(id)arg1 ;
-(void)showOrUpdateDigitalHealthOverlayWithPolicy:(long long)arg1 animated:(char)arg2 ;
-(void)hideDigitalHealthOverlayAnimated:(char)arg1 ;
-(void)dispatchMessageWithName:(id)arg1 toExtensionWithIdentifier:(id)arg2 userInfo:(id)arg3 ;
-(void)setContextMenuUserInfo:(id)arg1 forExtensionWithIdentifier:(id)arg2 ;
-(void)setPerformingAccountSecurityUpgrade:(char)arg1 ;
-(SheetRequest*)_sheetRequest;
-(void)didCompleteAuthenticationSheetRequest:(AuthenticationSheetRequest*)arg1 ;
-(char)isAwaitingBiometricAuthentication;
-(char)isTextFieldFocused;
-(void)showFunctionBarForProvider:(id)arg1 ;
-(void)hideFunctionBarForProvider:(id)arg1 ;
-(void)functionBarProvider:(id)arg1 didSelectCompletionListItem:(CompletionListItem*)arg2 ;
-(void)formAutoFillController:(id)arg1 didRefreshCompletionListItems:(const Vector<WTF::RefPtr<Safari::CompletionListItem, WTF::RawPtrTraits<Safari::CompletionListItem>, WTF::DefaultRefDerefTraits<Safari::CompletionListItem>>, 0, WTF::CrashOnOverflow, 16, WTF::FastMalloc>*)arg2 formURL:(id)arg3 ;
-(void)setPendingBrowserInitiatedLoadWasForDownload:(char)arg1 ;
-(char)isSuppressingDownloads;
-(void)setRequestedTabLabel:(NSString *)arg1 ;
-(void)setMainDocumentDidFirstLayout:(char)arg1 ;
-(void)setMainDocumentDidFirstVisuallyNonEmptyLayout:(char)arg1 ;
-(void)setMainDocumentDidFirstMeaningfulPaint:(char)arg1 ;
-(void)setMainDocumentDidLoad:(char)arg1 ;
-(void)setURLOfMostRecentFirstVisuallyNonEmptyLayout:(id)arg1 ;
-(void)clearPendingBrowserInitiatedLoad;
-(id<BrowserContentLoaderDelegate>)contentLoaderDelegate;
-(void)showErrorPageWithTemplate:(int)arg1 pageURL:(id)arg2 title:(id)arg3 messageHTML:(id)arg4 ;
-(char)isNavigatingToURLFromClientRedirectDuringPageNavigation:(id)arg1 ;
-(ContinuousReadingListPageItem *)readingListPageItemToLoadInContinuousMode;
-(id)startSpawnedTabBackgroundNavigationWithURL:(id)arg1 shouldGoBackAfterBackgroundNavigationIsCommitted:(char)arg2 ;
-(void)restoreParentTabSessionState;
-(void)transferStateFromBrowserContentViewControllerSpawnedFromPinnedTab:(id)arg1 ;
-(void)setUpSpawnedTabFromParentTab:(id)arg1 ;
-(void)invalidateBackForwardHistoryItem:(const BackForwardListItem*)arg1 ;
-(void)setCurrentlyLoadedReadingListItem:(id)arg1 pageNumber:(unsigned long long)arg2 ;
-(char)shouldFinishFluidProgress;
-(char)isInContinuousMode;
-(char)isForPagePreviews;
-(BrowserViewController *)originatingContentViewControllerWithPossibleJavaScriptAccess;
-(void)didOpenURLExternally;
-(void)reloadIfShowingErrorPage;
-(void)locationChangeDoneForWebView:(id)arg1 isMainFrame:(char)arg2 pageLoadType:(int)arg3 error:(id)arg4 ;
-(NSURL *)failedOrCurrentURL;
-(char)canAuthenticateAgainstProtectionSpace:(id)arg1 ;
-(void)collectFormMetadataForPreFillingFormIfNecessaryAtURL:(id)arg1 ;
-(char)isShowingSecurePage;
-(char)isShowingCertificateWarning;
-(char)isShowingBookmarks;
-(void)clearBlockedWindowConfigurationCaches;
-(NSString *)readerText;
-(void)didDecideNavigationPolicy:(long long)arg1 inMainFrameForNavigationAction:(id)arg2 ;
-(char)handleAuthenticationSessionNavigationToURL:(id)arg1 ;
-(char)shouldDoNavigationInNewProcess:(id)arg1 ;
-(void)willNavigateInNewProcess:(id)arg1 ;
-(WBSURLSpoofingMitigator *)urlSpoofingMitigator;
-(void)setRestoringFromSessionStateData:(char)arg1 ;
-(char)isLoadingWebExtensionURLWithoutRelatedWebView;
-(void)setLoadingWebExtensionURLWithoutRelatedWebView:(char)arg1 ;
-(char)canShowBookmarks;
-(char)canShowHistory;
-(void)scheduleCorrectButAbandonedParsecFeedbackIfPossible;
-(void)prepareNavigationIfFirstNavigationInTabCreatedFromParentTab;
-(void)setPagePreviewNeedsReloadOnTabTransition;
-(void)addReadingListItemFromMouseLocationWithTitle:(id)arg1 label:(id)arg2 URL:(id)arg3 ;
-(ReadingListItem *)currentlyLoadedReadingListItem;
-(void)cancelBackgroundNavigation;
-(char)shouldSpawnNewTabOnNavigationFromPinnedTabWithDestinationURL:(id)arg1 ;
-(id)browserContentViewControllerForNavigationPurposes;
-(void)willReloadContinuousReadingViewPage;
-(char)shouldConfirmUnloadingPageWithPIPDuringNavigation;
-(void)confirmUnloadingPageWithPIPDuringNavigationWithCompletionHandler:(/*^block*/id)arg1 isReload:(char)arg2 ;
-(WBSTranslationContext *)translationContext;
-(void)setCurrentRequestResponseCode:(long long)arg1 ;
-(char)shouldDownloadNextPage;
-(PassDownloadSuppressionManager *)passDownloadSuppressionManager;
-(void)clearSheetsToDismissOnNavigation;
-(char)shouldHideTransientBannerOnNextUserInitiatedNavigation;
-(void)setShouldHideTransientBannerOnVisuallyNonEmptyLayout:(char)arg1 ;
-(void)setProvisionalOriginalURLString:(NSString *)arg1 ;
-(void)setRedirectOccurredWhileRecoveringFromWebProcessCrash:(char)arg1 ;
-(void)pageTitleHasChanged;
-(void)setMainFrameLoadEndedInError:(char)arg1 ;
-(void)provisionalURLHasChanged;
-(NSString *)requestedTabLabel;
-(void)setProvisionalTabLabel:(NSString *)arg1 ;
-(NSString *)provisionalTabLabel;
-(NSString *)provisionalOriginalURLString;
-(NSString *)committedTabLabel;
-(void)loadingStatusHasChanged;
-(char)shouldWarnAboutUnsavedCredentials;
-(char)isShowingAutomaticStrongPasswordExplanation;
-(void)warnAboutUnsavedCredentialsWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)didFailProvisionalLoad;
-(void)invalidatePageLoadTest:(const char*)arg1 ;
-(void)didFinishNavigation:(id)arg1 withError:(id)arg2 ;
-(void)didCommitLoadForFrame:(const Frame*)arg1 ;
-(void)updateFrequentlyVisitedSiteTitleIfNecessary;
-(void)fetchTouchIconsIfNecessary;
-(void)fetchTemplateIconMetadataIfNecessary;
-(void)fetchParsecMediaServiceSubscriptionInformation;
-(ContinuousReadingListViewController *)continuousReadingListViewController;
-(void)handlePossibleChangeToProvisionalURLClearingReaderAvailability:(char)arg1 ;
-(char)mainDocumentDidLoad;
-(char)mainDocumentDidFirstLayout;
-(void)didReplaceNavigationState;
-(void)resetEditedFormTextStatus;
-(WBSSameDocumentNavigationToHistoryVisitCorrelator *)sameDocumentNavigationToHistoryVisitCorrelator;
-(void)didFinishNavigationProgressForURL:(id)arg1 ;
-(char)mainDocumentDidFirstMeaningfulPaint;
-(void)authenticationChallenge:(id)arg1 clickThroughURL:(id)arg2 shouldAllowLegacyTLS:(/*^block*/id)arg3 ;
-(void)authenticationChallengeDidNegotiateModernTLS:(id)arg1 ;
-(NSURL *)expectedURL;
-(void)clearMultiRoundAutoFillManager;
-(void)mutableMediaPlayingStateDidChange;
-(void)setDidCrashOrWasTerminatedForBeingUnresponsiveInTheBackground:(char)arg1 ;
-(void)setLastBackgroundTerminationReason:(long long)arg1 ;
-(void)hideAllBannersAnimated:(char)arg1 ;
-(void)recoverFromWebProcessExit;
-(void)showWebCrashBannerAnimated:(char)arg1 terminationReason:(long long)arg2 ;
-(char)returnToParentTabIfNeededForNavigationToBackForwardListItem:(id)arg1 ;
-(void)setPhishingURLClassification:(unsigned long long)arg1 ;
-(void)backForwardListDidChange:(id)arg1 ;
-(void)willNavigateToBackForwardListItem:(id)arg1 inPageCache:(char)arg2 ;
-(char)canShowBlockedPageContentDialog;
-(void)hideAppLinkBanner;
-(void)showBannerForAppLink:(id)arg1 ;
-(char)isControlledByAutomation;
-(char)isNavigatingViaBackForwardList;
-(char)didLoadCurrentURLWithContentBlockersEnabled;
-(TabContentView *)tabContentView;
-(void)updateBackForwardReferencesFromBrowserViewController:(id)arg1 oldBackForwardListItemsToNewBackForwardListItemsMap:(const HashMap<Safari::WK::BackForwardListItem, Safari::WK::BackForwardListItem, WTF::DefaultHash<Safari::WK::BackForwardListItem>, WTF::HashTraits<Safari::WK::BackForwardListItem>, WTF::HashTraits<Safari::WK::BackForwardListItem>>*)arg2 ;
-(id)_tabLabel;
-(void)setBackgroundDocumentFirstVisuallyNonEmptyLayoutHandler:(id)arg1 ;
-(void)setBackgroundDocumentFirstMeaningfulPaintHandler:(id)arg1 ;
-(char)tryToCloseBeforeCommittingToBackgroundLoadWithDeferredCompletionHandler:(/*^block*/id)arg1 ;
-(void)processOpenSearchURLAfterBackgroundLoadHasBeenCommittedIfNecessary;
-(void)loadURL:(id)arg1 tabLabel:(id)arg2 httpReferrer:(id)arg3 inNewProcess:(char)arg4 ;
-(id)tryMultipleURLs:(unique_ptr<WTF::Deque<NSURL *, 0>, std::__1::default_delete<WTF::Deque<NSURL *, 0>>>*)arg1 httpReferrer:(id)arg2 ;
-(void)uninstallBanner:(id)arg1 animated:(char)arg2 ;
-(void)bannerContainerView:(id)arg1 didInstallBanner:(id)arg2 ;
-(void)bannerContainerView:(id)arg1 willUninstallBanner:(id)arg2 ;
-(id)openWindowWithConfiguration:(id)arg1 ;
-(void)_didReceiveNetworkChangeNotification:(id)arg1 ;
-(void)_stopObservingNetworkChangeNotifications;
-(char)shouldUsePrivateBrowsingInBookmarksViewController:(id)arg1 ;
-(char)isShowingHistory;
-(void)bookmarksViewControllerDidChangePageTitle:(id)arg1 ;
-(id)bookmarksUndoControllerForBookmarksViewController:(id)arg1 ;
-(void)textDidChangeInTextFieldDelayCompletedForTextFieldWithUniqueID:(id)arg1 inFrame:(id)arg2 ;
-(void)textDidChangeInTextFieldWithMetadata:(id)arg1 formMetadata:(id)arg2 inFrame:(id)arg3 ;
-(void)passwordFieldFocusedInFrame:(id)arg1 formMetadata:(id)arg2 passwordFieldMetadata:(id)arg3 ;
-(void)passwordFieldBlurredInFrame:(id)arg1 formMetadata:(id)arg2 passwordFieldMetadata:(id)arg3 ;
-(void)creditCardFieldFocusedInFrame:(id)arg1 formMetadata:(id)arg2 creditCardFieldMetadata:(id)arg3 ;
-(void)creditCardFieldBlurredInFrame:(id)arg1 formMetadata:(id)arg2 creditCardFieldMetadata:(id)arg3 ;
-(void)usernameFieldFocusedInFrame:(id)arg1 formMetadata:(id)arg2 usernameFieldMetadata:(id)arg3 ;
-(void)usernameFieldBlurredInFrame:(id)arg1 formMetadata:(id)arg2 usernameFieldMetadata:(id)arg3 ;
-(void)sensitiveFieldFocusedInFrame:(id)arg1 ;
-(void)autoFilledFormWithMetadata:(id)arg1 inFrame:(id)arg2 shouldSubmit:(char)arg3 ;
-(void)addressBookAutoFillableFieldFocused:(id)arg1 textFieldMetadata:(id)arg2 formMetadata:(id)arg3 inFrame:(id)arg4 ;
-(void)addressBookAutoFillableFieldBlurredInFrame:(id)arg1 textFieldMetadata:(id)arg2 ;
-(void)oneTimeCodeFieldFocused:(id)arg1 textFieldMetadata:(id)arg2 formMetadata:(id)arg3 inFrame:(id)arg4 ;
-(void)oneTimeCodeFieldBlurredInFrame:(id)arg1 textFieldMetadata:(id)arg2 ;
-(void)otherCreditCardFieldOrUnidentifiedFieldFocusedInFrame:(id)arg1 formMetadata:(id)arg2 textFieldMetadata:(id)arg3 ;
-(void)otherCreditCardFieldOrUnidentifiedFieldBlurredInFrame:(id)arg1 formMetadata:(id)arg2 textFieldMetadata:(id)arg3 ;
-(void)defersPageLoadingCountDidUnderflow;
-(void)deferredLoadingWatchdogTimerFired;
-(BrowserViewControllerWKAdapter*)browserViewControllerWKAdapter;
-(void)didCollectFormsMetadata:(const Array*)arg1 forManualAutoFillInFrames:(const Array*)arg2 ;
-(void)didCollectMetadataForPrefillingFormInFrames:(const Array*)arg1 metadataForAllForms:(const Array*)arg2 isInitialCollectionAtPageLoad:(char)arg3 ;
-(void)didCollectFormsMetadata:(const Array*)arg1 afterPreFillingFormInFrames:(const Array*)arg2 ;
-(void)didCollectFormsMetadata:(const Array*)arg1 forSafeAutoFillConfirmationInFrames:(const Array*)arg2 contactProperty:(const String*)arg3 contactIdentifier:(const String*)arg4 contactLabel:(const String*)arg5 ;
-(void)didCollectDataForSavingPageInliningOrDiscardingExternalResources:(id)arg1 ;
-(void)textFieldDidEndEditingInFrame:(const Frame*)arg1 textFieldMetadata:(const Data*)arg2 ;
-(char)shouldPerformActionInFormTextFieldWithMetadata:(const Data*)arg1 formMetadata:(const Data*)arg2 inFrame:(const Frame*)arg3 uncheckedActionType:(unsigned long long)arg4 ;
-(void)didClearFormMetadataDueToLoadForFrameContainingFocusedTextField;
-(void)textDidChangeInTextArea;
-(void)modifiedGeneratedPasswordContentInFormOrFieldWithFormMetadata:(const Data*)arg1 inFrame:(const Frame*)arg2 ;
-(void)didCommitTopSites;
-(void)didCommitFavorites;
-(char)shouldDeferLoadingWhileSavingFormDataInFrame:(const Frame*)arg1 sourceFrame:(const Frame*)arg2 ;
-(void)saveUnsubmittedFormDataFromRemovedFrameIfNecessaryInFrame:(const Frame*)arg1 sourceFrame:(const Frame*)arg2 ;
-(void)didCreateVisibleContentsSnapshot:(const Image*)arg1 forRequestWithIdentifier:(unsigned long long)arg2 ;
-(void)didCreateVisibleContentsSnapshotForSharing:(id)arg1 forRequestWithIdentifier:(unsigned long long)arg2 ;
-(void)didCreateSnapshot:(id)arg1 forURL:(id)arg2 forRequestWithIdentifier:(unsigned long long)arg3 ;
-(void)didCalculateBestWidthForPage:(double)arg1 ;
-(void)didCollectPageBoundsInformation:(const Dictionary*)arg1 ;
-(void)didChangeContentSize:(CGSize)arg1 ;
-(void)didCollectPageLayoutInformationForSidebarAnimationBeforeResize;
-(void)didForceContentRepaintAndCollectPageLayoutInformationForSidebarAnimationAfterResize:(id)arg1 ;
-(void)handleInternetAccountSetupForDomain:(id)arg1 shouldPrompt:(char)arg2 ;
-(void)didCreateSnapshotOfContinuousReadingViewForRubberBandingArea:(const Image*)arg1 ;
-(void)didFirstFlushForHeaderLayer;
-(void)didCollectTouchIconURLStrings:(id)arg1 ;
-(void)didCollectTemplateIconMetadataForPageURL:(id)arg1 iconURL:(id)arg2 themeColorComponents:(id)arg3 ;
-(void)didCollectParsecMediaServiceSubscriptionInformation:(id)arg1 ;
-(void)didDeterminePresenceOfSchemaOrgMarkup:(char)arg1 ;
-(void)didAutoDetectSearchURLTemplateString:(id)arg1 inFrame:(const Frame*)arg2 ;
-(void)didCollectOpenSearchURL:(id)arg1 ;
-(void)didRunJavaScriptForSharingExtension:(id)arg1 forRequestWithIdentifier:(unsigned long long)arg2 ;
-(void)willPerformClientRedirectForFrame:(const Frame*)arg1 toURL:(id)arg2 ;
-(void)didCancelClientRedirectForFrame:(const Frame*)arg1 ;
-(void)willSubmitFormInFrame:(const Frame*)arg1 targetURL:(id)arg2 ;
-(char)_isAutoSelectableWithURL:(id)arg1 ;
-(NSURL *)expectedOrCurrentURLOrLastActiveURLIfCrashed;
-(id)initWithDocument:(id)arg1 configuration:(id)arg2 browsingMode:(unsigned long long)arg3 ;
-(void)_commonInitializationWithDocument:(id)arg1 ;
-(void)_updateTopContentInset;
-(void)setOverrideMaintainsInactiveSelectionForVoiceOver:(char)arg1 ;
-(void)setShouldBlockAllMouseEvents:(char)arg1 ;
-(void)setShouldBlockAllKeyEvents:(char)arg1 ;
-(void)setShouldBlockFirstResponder:(char)arg1 ;
-(void)_installWebKitDelegates;
-(void)requestRemoteNotificationPermissionForAPIURL:(id)arg1 websiteIdentifier:(id)arg2 queryParameters:(id)arg3 ;
-(void)didDetermineAdditionalTextSamples:(id)arg1 ;
-(void)didExtractReaderText:(id)arg1 pageMetadata:(id)arg2 wasDeterminingAvailability:(char)arg3 ;
-(void)goBackButtonClicked;
-(void)visitInsecureWebsite;
-(void)visitInsecureWebsiteWithTemporaryBypass;
-(void)showCertificateInformation;
-(void)openClockSettings;
-(void)_perSiteAutomaticReaderActivationPreferenceDidChange:(id)arg1 ;
-(void)_perSiteContentBlockersPreferenceDidChange:(id)arg1 ;
-(void)_autoplayPreferenceDidChange:(id)arg1 ;
-(void)_resetKnownTrackingThirdParties;
-(void)_flushKnownTrackingThirdPartiesAfterITPPreferenceUpdated;
-(void)_notifyImpressionAnalyticsRecorderIfNeededIsInViewDidAppear:(char)arg1 ;
-(char)isUnresponsiveDueToJavaScriptDialogRunningInProcess;
-(char)currentPageHasJavaScriptDialogsSuppressed;
-(void)_invalidateUpdateAudioUITimer;
-(NSString *)currentPageHostName;
-(void)_removeQueuedNavigation;
-(void)reportCurrentAutoplaySignalIfNecessary;
-(void)_cancelCheckForConfirmationPage;
-(void)disconnectParentTabFromSpawnedTabs;
-(void)_setSheetRequest:(RefPtr<Safari::SheetRequest, WTF::RawPtrTraits<Safari::SheetRequest>, WTF::DefaultRefDerefTraits<Safari::SheetRequest>>*)arg1 ;
-(void)_clearWebKitDelegates;
-(void)_didVerifyEditedFormTextStatus;
-(void)_completeSidebarAnimationIfNecessary;
-(void)didDismissModalDialogContentViewController:(id)arg1 ;
-(void)dismissAllDialogs;
-(void)_callWebExtensionsCompletionHandlersWithLanguage:(id)arg1 ;
-(char)contentIsCapableOfZoom;
-(unsigned)tabIdentifier;
-(char)_isBackForwardListItemDisposable:(const BackForwardListItem*)arg1 ;
-(void)_updateWKViewLayoutModeForWindow:(id)arg1 ;
-(void)_showDefaultBrowserBannerIfNeeded;
-(void)_startObservingWKWebViewKeyValueChanges;
-(void)_stopObservingWKWebViewKeyValueChanges;
-(void)_informExtensionsAboutWebpageLanguage:(id)arg1 ;
-(BrowserViewController *)originatingModalDialogContentViewController;
-(void)didPresentModalDialogContentViewController:(id)arg1 ;
-(NSString *)currentPageTitle;
-(id)_displayNameForFileURL:(id)arg1 ;
-(id)_emptyPageName;
-(NSURL *)unifiedFieldURL;
-(QueuedNavigation*)queuedNavigation;
-(void)_hideTransientBannerDueToUserInitiatedNavigationOrVisuallyNonEmptyLayout;
-(void)_displayInternetAccountSetupPromptIfAppropriate;
-(void)_previewPageDidFirstMeaningfulPaint;
-(void)_requestDigitalHealthPoliciesForCurrentOrExpectedURL;
-(void)_dispatchBlocksWaitingForVisuallyNonEmptyLayoutAfterQueuedNavigation;
-(void)_previewPageDidLoadMainDocument;
-(char)mainFrameLoadEndedInError;
-(void)_updateExpectedPageType;
-(PagePreviewAnimationController *)parentPagePreviewAnimationController;
-(id)previewTitleForURL:(id)arg1 ;
-(char)redirectOccurredWhileRecoveringFromWebProcessCrash;
-(void)hideWebCrashBannerAnimated:(char)arg1 ;
-(void)updateKnownTrackingThirdPartiesWithITPEnabled:(char)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)_setWebProcessForcePaused:(char)arg1 ;
-(void)_initiateLoad;
-(void)_reloadAfterWebProcessExit;
-(void)_clearCurrentUnsubmittedFormInformation;
-(void)setAlwaysInitiateLoadsInContinuousModeUsingCurrentController:(char)arg1 ;
-(char)isShowingWebContent;
-(char)isShowingPDFDocument;
-(id)_urlRequestWithURL:(id)arg1 httpReferrer:(id)arg2 ;
-(id)_loadURLRequest:(const URLRequest*)arg1 tabLabel:(id)arg2 lifetime:(long long)arg3 allowJavaScript:(char)arg4 waitInQueue:(char)arg5 clearFallbackURLs:(char)arg6 inNewProcess:(char)arg7 ;
-(void)loadURLRequest:(const URLRequest*)arg1 tabLabel:(id)arg2 inNewProcess:(char)arg3 ;
-(void)loadURLRequest:(const URLRequest*)arg1 tabLabel:(id)arg2 lifetime:(long long)arg3 allowJavaScript:(char)arg4 waitInQueue:(char)arg5 inNewProcess:(char)arg6 ;
-(char)isLoadingProvisionally;
-(id)_loadNextFallbackURL;
-(void)_setShouldDownloadNextPage:(char)arg1 ;
-(id)_tryToInitiateLoad:(long long)arg1 initiateLoadBlock:(/*^block*/id)arg2 ;
-(void)saveContinuousReadingListItemForCurrentBackForwardItemIfNecessary:(id)arg1 ;
-(void)loadViewIfNeeded;
-(id)_unresponsiveWebProcessDialogTitle;
-(id)_unresponsiveWebProcessDialogTerminateButtonTitle;
-(void)_abortInitiateLoad;
-(void)dismissDialogsBlockingNavigation;
-(char)_pageLoadOperationUsesBackForwardList:(long long)arg1 ;
-(void)_didStartBrowserInitiatedLoadUsingBackForwardList:(char)arg1 ;
-(id)_otherContentViewControllersThatAreShowingWebContent;
-(id)_unresponsiveWebProcessDialogTitleForSingleOtherPageWithName:(id)arg1 ;
-(id)_unresponsiveWebProcessDialogTitleWithNumberOfOtherPages:(unsigned long long)arg1 ;
-(void)_stopLoadingPage;
-(char)canReload;
-(void)_willReload;
-(NSURL *)failedURL;
-(void)_performReloadWithInvertedContentBlockersEnabledSetting;
-(void)_reloadWithInvertedContentBlockersEnabledSetting;
-(int)_computeLoadingStatus;
-(void)clearCachedContextCompleter;
-(void)setContextResponse:(CKContextResponse *)arg1 ;
-(void)_setOriginalURLString:(id)arg1 ;
-(void)_updateCachedPageTypesAfterCommit;
-(void)clearAllStatus;
-(void)dismissFormCompletionList;
-(void)dismissReaderAppearanceCustomizationPopover;
-(void)_showOutlineView;
-(void)_loadOutlineViewWithBookmarks;
-(void)_loadOutlineViewWithHistory;
-(void)_installContinuousReadingListView;
-(void)_installWebView;
-(char)_mainContentViewDiffersFromPreviousPage;
-(char)_isPageTypeSameAsPreviousPage;
-(void)_currentURLHasChangedWithPreviousOriginalURL:(id)arg1 ;
-(void)_setCommittedTabLabel:(id)arg1 ;
-(void)setSearchResultsForSnapBackToCurrentPage;
-(void)_dismissAllDialogsOnCommit;
-(void)setOriginatingContentViewControllerWithPossibleJavaScriptAccess:(BrowserViewController *)arg1 ;
-(void)setUnifiedFieldFallbackURLForAboutBlank:(NSURL *)arg1 ;
-(char)isInactiveContinuousReadingView;
-(void)_updateAudioUINow:(id)arg1 ;
-(void)setReaderShouldBeShownIfPossible:(char)arg1 ;
-(void)setInitialReaderArticleScrollPositionAsDictionary:(NSDictionary *)arg1 ;
-(void)_clearFallbackURLs;
-(void)setRequestedTabLabel:(id)arg1 lifetime:(long long)arg2 ;
-(void)evaluateJavaScript:(id)arg1 ;
-(void)clearQueuedNavigation:(QueuedNavigation*)arg1 ;
-(void)_setDeferredNavigation:(unique_ptr<Safari::QueuedNavigation, std::__1::default_delete<Safari::QueuedNavigation>>*)arg1 shouldInformQueuedNavigationController:(char)arg2 ;
-(void)addNavigationNeedingNewProcess:(id)arg1 ;
-(void)_sessionStateUpdatePageLoadSafetyTimerDidFire:(id)arg1 ;
-(char)_hasFallbackURLs;
-(char)hasQueuedNavigation;
-(BackForwardListItem*)backForwardListItemForReturningToParentTab;
-(void)clearParentTab;
-(char)_handleCertificateError:(id)arg1 forWebView:(id)arg2 isMainFrame:(char)arg3 ;
-(void)_terminateSafariFromWebProcessCrashIfNeededForError:(id)arg1 ;
-(char)isCurrentPageLoadedFromReadingList;
-(unsigned long long)currentlyLoadedReadingListItemPageNumber;
-(id)_computeErrorPageTitleForError:(id)arg1 ;
-(id)_computeEscapedErrorPageMessageForError:(id)arg1 ;
-(int)_computeErrorPageTemplateForError:(id)arg1 ;
-(id)_templateStringForPageLoadErrorTemplate:(int)arg1 ;
-(char)_isOnlyTabInWebProcessThatIsShowingWebContent;
-(id)_generatePageHTMLForErrorTemplate:(int)arg1 withTitle:(id)arg2 messageHTML:(id)arg3 ;
-(void)_startObservingNetworkChangeNotifications;
-(char)isValidBackHistoryItem:(const BackForwardListItem*)arg1 ;
-(char)isValidBackForwardItem:(const BackForwardListItem*)arg1 ;
-(void)clearIgnoredNavigationURL;
-(void)updateCustomSwipeViews;
-(char)_analyticsRecorderShouldIgnoreURLWithNavigationPolicy:(long long)arg1 forNavigationAction:(id)arg2 ;
-(unsigned long long)_defaultDatabaseQuota;
-(void)dismissTabDialog;
-(void)presentTabDialogWithConfiguration:(id)arg1 dismissalBlock:(/*^block*/id)arg2 blocksWebProcessUntilDismissed:(char)arg3 cancellationExemptions:(id)arg4 ;
-(char)isObscuredForDigitalHealth;
-(char)isShowingWebArchive;
-(void)_requestVisibleContentsWithRequestIdentifier:(unsigned long long)arg1 ;
-(id)_performBlockNowOrOnVisuallyNonEmptyLayoutAfterPerformingQueuedNavigation:(/*^block*/id)arg1 ;
-(void)didGetVisibleContentsAsDataURLString:(id)arg1 forRequestWithIdentifier:(unsigned long long)arg2 ;
-(char)extendedValidationCertificateAvailableForPage;
-(void)_handleErrorForWebView:(id)arg1 isMainFrame:(char)arg2 pageLoadType:(int)arg3 error:(id)arg4 getIsTryingFallbackURLs:(char*)arg5 ;
-(char)_shouldPersistIdentityPreferencesToKeychain;
-(void)_continueHTTPSConnectionWithIdentitySheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void*)arg3 ;
-(void)_logInvalidCertificateErrorWithErrorCode:(long long)arg1 trustIncludesRevokedCertificate:(char)arg2 ;
-(void)_loadCertificateWarningPageForError:(id)arg1 failingTrust:(SecTrustRef)arg2 failingURL:(id)arg3 certificateWarningContext:(id)arg4 ;
-(id)_certificateWarningPagePresenterProxy;
-(char)shouldDeferRestorationUntilSelected;
-(void)_beginPendingNavigation;
-(void)_restorePendingState;
-(void)_initiateQueuedNavigation;
-(void)restoreFromSessionStateData:(const Data*)arg1 expectedURL:(id)arg2 ;
-(void)_restoreTabIdentifiersWithPersistentTabState:(id)arg1 ;
-(char)isDisposable;
-(void)setWindowFocusDisabled:(char)arg1 ;
-(void)_enqueueRestoredNavigation:(id)arg1 withTabState:(id)arg2 ;
-(void)_checkIfPageContainsCalendarEventNow:(id)arg1 ;
-(BackForwardListItem*)_previousWebPageBackForwardListItem;
-(int)_computePageTypeFromURL:(id)arg1 ;
-(void)_sheetRequestConditionsChanged:(id)arg1 ;
-(char)_displayRequestedSheetNowIfAppropriate;
-(void)_stopObservingNotificationsThatMightDisplayRequestedSheet;
-(void)_startObservingNotificationsThatMightDisplayRequestedSheet;
-(char)_shouldDisplayRequestedSheet;
-(TabDialogViewController *)tabDialogViewController;
-(void)setIsObscuredForDigitalHealth:(char)arg1 ;
-(BrowserContainerViewController *)parentBrowserContainerViewController;
-(long long)currentTabDialogType;
-(char)isShowingTabDialog;
-(void)_enqueueDownloadsDecisionHandler:(/*^block*/id)arg1 forDomain:(id)arg2 ;
-(void)_fulfillDownloadsPendingPermissionDecisionHandlerForDomain:(id)arg1 permitted:(char)arg2 ;
-(void)willStartDownloadingURL:(id)arg1 ;
-(id)createBrowserViewControllerFromWindowConfiguration:(id)arg1 ;
-(char)_windowCanBeResized:(id)arg1 ;
-(void)_addDomainToAllowedPopUpWindowDomainCache:(id)arg1 ;
-(char)_shouldCreateTabForNewPageForWindowFeatures:(id)arg1 ;
-(char)_shouldLinkSpawnedTabToParentTabForURLRequest:(id)arg1 ;
-(void)willPresentModalDialogContentViewController:(id)arg1 ;
-(void)setOriginatingModalDialogContentViewController:(BrowserViewController *)arg1 ;
-(void)setBlockingModalDialogContentViewController:(BrowserViewController *)arg1 ;
-(NSURL *)committedURLOfEarliestOriginatingContentViewControllerWithPossibleJavaScriptAccess;
-(void)_didRemoveBackForwardHistoryItems:(id)arg1 ;
-(void)clearParentTabIfNecessary;
-(void)_invalidatedBackForwardItemsDidChange;
-(void)setBackForwardListItemForReturningToParentTab:(BackForwardListItem*)arg1 ;
-(char)canFocusContentSearchField;
-(void)_focusSearchFieldInOutlineView;
-(void)focusContentSearchField;
-(char)isShowingResponsiveDesignView;
-(char)_isCurrentPageSearchable;
-(char)canPrint;
-(void)_handleNextPrintRequestWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)_printFrame:(const Frame*)arg1 waitUntilDone:(char)arg2 completionHandler:(/*^block*/id)arg3 ;
-(Frame*)_frameFromHandle:(id)arg1 ;
-(void)printFrame:(const Frame*)arg1 waitUntilDone:(char)arg2 isUserInitiated:(char)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)_showPrintSheetBlockedDialogForFrame:(const Frame*)arg1 waitUntilDone:(char)arg2 completionHandler:(/*^block*/id)arg3 ;
-(char)isShowingHTMLPage;
-(char)_isHTMLPage;
-(id)_printHelper;
-(void)_getPrintInfoForFrame:(const Frame*)arg1 completionHandler:(/*^block*/id)arg2 ;
-(Frame*)_printingMailingFrame;
-(char)isTopContentInsetCurrentlyUsed;
-(char)isShowingReadingListItemArchiveURL;
-(char)shouldShowOriginalURLInsteadOfExpectedURLInUnifiedField;
-(id)_previousBackForwardItemTitle;
-(void)_updateMaxVisibleHeightPercentageUserDriven:(char)arg1 ;
-(void)_runImageClassifierIfNeeded;
-(void)browserWKViewDidMoveToNewWindow;
-(void)loadCertificateWarningPageForLegacyTLSWithURL:(id)arg1 clickThroughURL:(id)arg2 ;
-(RetainPtr<__SecIdentity *>*)_preferredIdentityForURL:(id)arg1 ;
-(void)_useClientCertificatesForAuthenticationChallengeInfo:(id)arg1 ;
-(void)_handleNextAuthenticationChallenge;
-(void)_showHTTPAuthenticationDialogForChallenge:(id)arg1 ;
-(void)_allowUserToPickCertificateForAuthenticationChallengeInfo:(id)arg1 ;
-(NSString *)expectedOrCurrentOriginalURLString;
-(void)_pickCertificateForAuthenticationChallengeSheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void*)arg3 ;
-(WBSFluidProgressState *)fluidProgressState;
-(id<FormAutoFiller>)formAutoFiller;
-(void)confirmReloadingWithPIPIfNecessaryWithOption:(long long)arg1 ;
-(void)reloadWithOption:(long long)arg1 ;
-(void)_didEditFormText;
-(void)_tearDownFormCompletionMachinery;
-(void)_passwordFieldTextDidChangeWithMetadata:(id)arg1 inFrame:(id)arg2 ;
-(void)_usernameFieldTextDidChangeWithMetadata:(id)arg1 ;
-(void)_updateUnsubmittedFormDataInFrame:(const Frame*)arg1 formMetadata:(id)arg2 ;
-(void)_autocompleteInTextFieldInFrame:(const Frame*)arg1 textFieldMetaData:(id)arg2 formMetaData:(id)arg3 ;
-(char)_createFormCompletionControllerAndFunctionBarProviderIfNeededForFrame:(const Frame*)arg1 textFieldMetadata:(id)arg2 formMetadata:(id)arg3 ;
-(char)_shouldTryUsingFormCredentialsCompletionControllerToPerformAction:(unsigned)arg1 textFieldMetadata:(id)arg2 ;
-(void)clearUnsubmittedInformationInFormWithID:(double)arg1 sourceFrame:(const Frame*)arg2 ;
-(void)_sensitiveFormFieldDidFocusOnPage;
-(char)_passwordFieldHasAutomaticStrongPasswordTreatment:(id)arg1 form:(id)arg2 frame:(id)arg3 ;
-(id)_previouslyGeneratedPassword;
-(char)_didUserDeclineAutomaticStrongPasswordForCurrentDomain;
-(void)didGeneratePassword:(id)arg1 ;
-(void)_createAutoFillFunctionBarProviderIfNeeded;
-(char)_shouldOfferCreditCardDataAfterUserHasFilledCreditCardData:(id)arg1 inForm:(id)arg2 ;
-(void)_manualAutoFillButtonClickedInCredentialFieldMetadata:(id)arg1 formMetadata:(id)arg2 inFrame:(const Frame*)arg3 ;
-(void)_manualAutoFillButtonClickedInCreditCardFieldMetadata:(id)arg1 formMetadata:(id)arg2 inFrame:(const Frame*)arg3 ;
-(void)_manualAutoFillButtonClickedInAddressBookAutoFillableFieldMetadata:(id)arg1 formMetadata:(id)arg2 inFrame:(const Frame*)arg3 ;
-(id)_correctMetadata:(id)arg1 forFormInFrame:(const Frame*)arg2 ;
-(id)_correctControlMetadata:(id)arg1 inFrame:(const Frame*)arg2 ;
-(id)_autoFillMetadataCorrectorForFrame:(const Frame*)arg1 createIfNeeded:(char)arg2 ;
-(id)_metadataProviderForForms:(const Array*)arg1 inFrames:(const Array*)arg2 ;
-(void)_focusFieldForStreamlinedLoginWithFormDataController:(id)arg1 metadataProvider:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(char)isPageEligibileToShowNotSecureWarning;
-(void)_simulateCarriageReturnKeyEventInBrowserView;
-(void)updateUnsubmittedPasswordGenerationCredentialsWithUsername:(id)arg1 suggestedPassword:(id)arg2 ;
-(void)_uninstallAlternativeWebViewFunctionBarProvider;
-(void)_createFormCompletionControllerIfNeededForFrame:(const Frame*)arg1 textFieldMetadata:(id)arg2 formMetadata:(id)arg3 ;
-(void)_installAlternativeWebViewFunctionBarProvider:(id)arg1 ;
-(char)_shouldTrackFormMetadataForUnsubmittedFormData:(id)arg1 ;
-(void)_setStatusMessage:(id)arg1 ;
-(void)_willPresentTabDialog;
-(void)_didDismissTabDialogs;
-(BookmarksViewController *)bookmarksViewController;
-(void)hideResponsiveDesignView;
-(id)_startPageView;
-(void)_createStartPageViewControllerIfNeeded;
-(void)_installStartPage;
-(void)_installStartPageWithPreservingFirstResponder:(char)arg1 ;
-(void)_showStartPageView;
-(char)isShowingInitialPage;
-(void)createReaderControllerIfNeeded;
-(char)isNavigatingToCachedPageInBackForwardList;
-(char)_isFluidProgressAnimating;
-(void)_requestQueryResultsForText:(id)arg1 contentType:(long long)arg2 pageMetadata:(id)arg3 ;
-(void)_cacheSecIdentityIfNeeded:(SecIdentityRef)arg1 forURL:(id)arg2 ;
-(void)_continueAuthenticationChallenge:(id)arg1 withCertificateIdentity:(SecIdentityRef)arg2 ;
-(char)readerShouldBeShownIfPossible;
-(char)_shouldReportProgressForCurrentURL;
-(void)commitAllPagePreviewHistoryOperations;
-(void)_updateTitlesInResponseToLabelChange;
-(char)_canPerformAnySharingAction;
-(NSURL *)urlForNewBookmark;
-(char)canSharePage;
-(void)_reportSignalAfterAutoplayPreferenceDidChange:(long long)arg1 ;
-(void)_setPageMutedState;
-(unsigned long long)_pageMutableMediaState;
-(char)isMediaCaptureMuted;
-(char)isScreenCapturePaused;
-(void)updatePageMutedState;
-(void)notifyContentMediaPlayingStateChangedFromPreviousMutableMediaState:(unsigned long long)arg1 ;
-(void)_removeSpawnedTabBrowserViewController:(id)arg1 ;
-(char)_returnToParentTabAndOptionallyCloseTab:(char)arg1 ;
-(void)_addSpawnedTabBrowserViewController:(id)arg1 ;
-(void)clearForwardHistory;
-(NSString *)titleForUnifiedFieldURL;
-(NSString *)titleForNewBookmark;
-(CKContextResponse *)contextResponse;
-(char)isShowingReadingListItemArchive;
-(void)startReadingListHopAnimationFromMouseLocation;
-(void)startReadingListAnimationsUsingHopAnimationStartPoint:(CGPoint)arg1 ;
-(char)canShowWebInspector;
-(void)viewSourceForFrame:(const Frame*)arg1 ;
-(void)toggleWebInspector;
-(char)isShowingAnyBanner;
-(void)hideTransientBannerAnimated:(char)arg1 ;
-(id)_viewBelowBanner;
-(char)isShowingPrivateBrowsingExplanationBanner;
-(char)isShowingDefaultBrowserBanner;
-(char)isShowingBanner:(id)arg1 ;
-(char)isShowingPointerLockBanner;
-(void)hidePointerLockBannerAnimated:(char)arg1 ;
-(PointerLockBanner *)pointerLockBanner;
-(char)_canShowPointerLockBanner;
-(void)setPointerLocked:(char)arg1 ;
-(void)showPointerLockBannerAnimated:(char)arg1 ;
-(WebCrashBanner *)webCrashBanner;
-(void)_showWebCrashBannerAnimated:(char)arg1 type:(long long)arg2 ;
-(char)_canShowWebCrashBanner;
-(char)isShowingWebCrashBanner;
-(void)_showWebCrashBanner:(id)arg1 animated:(char)arg2 ;
-(void)_hidePrivateBrowsingExplanationBannerAnimated:(char)arg1 ;
-(void)hideDefaultBrowserBannerAnimated:(char)arg1 ;
-(void)hideNewExtensionBannerAnimated:(char)arg1 ;
-(PrivateBrowsingExplanationBanner *)privateBrowsingExplanationBanner;
-(void)_checkIfPageContainsCalendarEventSoon:(char)arg1 ;
-(PerformanceCollector*)performanceCollector;
-(void)_cancelPostQueuedNavigationEnqueuedBlockWithToken:(id)arg1 ;
-(void)_requestSnapshotWithMaximumSize:(CGSize)arg1 requestIdentifier:(unsigned long long)arg2 ;
-(void)_didCreateSnapshot:(id)arg1 forURL:(id)arg2 forRequestWithIdentifier:(unsigned long long)arg3 ;
-(void)_showDefaultBrowserBannerAnimated:(char)arg1 ;
-(StartPageViewController *)startPageViewController;
-(char)canSnapBackToSearchResults;
-(void)pagePinnedStateDidChange;
-(void)hasOnlySecureContentDidChange;
-(void)setWebPageIsUnresponsive:(char)arg1 ;
-(void)_setShouldShowOriginalURLInsteadOfExpectedURLInUnifiedField:(char)arg1 ;
-(BrowserViewController *)blockingModalDialogContentViewController;
-(void)_prepareToCancelOwnDialogs;
-(void)_denyAllPendingDownloads;
-(id)_cachedContextCompleter;
-(void)_processOpenSearchURL:(id)arg1 ;
-(void)addSheetToDismissOnNavigation:(id)arg1 ;
-(void)userDidDecideRemoteNotificationPolicy:(char)arg1 forPermissionRequest:(unsigned long long)arg2 ;
-(void)removeSheetToDismissOnNavigation:(id)arg1 ;
-(id)_remoteNotificationStateObserver;
-(void)_decidePolicyForRemoteNotificationPermissionRequestWithID:(unsigned long long)arg1 websiteName:(id)arg2 lowResIconData:(id)arg3 highResIconData:(id)arg4 ;
-(void)_loadPageBypassingCertificateWarning:(id)arg1 ;
-(void)_presentTranslationConsentAlertWithType:(unsigned long long)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)_updateMaxVisibleHeightPercentageNowUserDriven:(char)arg1 ;
-(id)_translationAnalyticsMessageReceiver;
-(void)browserView:(id)arg1 didFindIconWithParameters:(id)arg2 downloadHandler:(/*^block*/id)arg3 ;
-(id)makePreviewBrowserViewControllerForPagePreviewAnimationController:(id)arg1 ;
-(void)pagePreviewAnimationController:(id)arg1 didFinishPreviewWithBrowserViewController:(id)arg2 ;
-(void)pagePreviewAnimationController:(id)arg1 handleClickInPreviewBrowserViewController:(id)arg2 ;
-(void)pagePreviewAnimationController:(id)arg1 addURLToReadingList:(id)arg2 ;
-(void)dismissPagePreviewAnimationController:(id)arg1 ;
-(void)agentDidVerifyRemoteNotificationProvider:(char)arg1 withWebsiteName:(id)arg2 lowResolutionIconData:(id)arg3 highResolutionIconData:(id)arg4 forPermissionRequest:(unsigned long long)arg5 ;
-(void)agentDidRegisterRemoteNotificationsWithAllowedDomains:(id)arg1 deviceToken:(id)arg2 forPermissionRequest:(unsigned long long)arg3 ;
-(void)agentDidUnregisterRemoteNotificationsWithDisallowedDomains:(id)arg1 forPermissionRequest:(unsigned long long)arg2 ;
-(void)sandboxExtensionPresentationController:(id)arg1 configureOpenPanel:(id)arg2 forURL:(id)arg3 ;
-(id)sandboxExtensionPresentationController:(id)arg1 windowForURL:(id)arg2 ;
-(char)tabDialogPresentationManagerShouldSkipAnimations:(id)arg1 ;
-(char)tabDialogPresentationManagerShouldDisplayDialogs:(id)arg1 ;
-(int)tabDialogPresentationManagerWebProcessID:(id)arg1 ;
-(id)tabDialogInstallationTargetForTabDialogPresentationManager:(id)arg1 ;
-(void)tabDialogPresentationManagerWillPresentTabDialogs:(id)arg1 ;
-(void)tabDialogPresentationManagerDidDismissTabDialogs:(id)arg1 ;
-(void)userDidDismissDefaultBrowserBanner:(id)arg1 ;
-(void)defaultBrowserBanner:(id)arg1 presentViewControllerAsSheet:(id)arg2 ;
-(void)translationContextReloadPageInOriginalLanguage:(id)arg1 ;
-(char)translationContextIsUsingPrivateBrowsing:(id)arg1 ;
-(void)translationContext:(id)arg1 urlForCurrentPageWithCompletionHandler:(/*^block*/id)arg2 ;
-(void)translationContext:(id)arg1 showFirstTimeConsentAlertWithCompletionHandler:(/*^block*/id)arg2 ;
-(void)translationContext:(id)arg1 showFeedbackConsentAlertWithCompletionHandler:(/*^block*/id)arg2 ;
-(id)safariApplicationVersionForTranslationContext:(id)arg1 ;
-(void)translationContext:(id)arg1 showTranslationErrorAlertWithTitle:(id)arg2 message:(id)arg3 ;
-(void)translationContext:(id)arg1 shouldReportProgressInUnifiedField:(char)arg2 ;
-(void)translationContextNeedsScrollHeightVisibilityUpdate:(id)arg1 ;
-(void)translationConsentAlertDidClickHelpButton;
-(void)didMouseUpOrPerformAccessibilityPressWithDimmingView:(id)arg1 ;
-(NSString *)userVisibleMediaOrigin;
-(NSString *)mediaMenuItemTitle;
-(long long)mutedState;
-(void)setScreenCapturePaused:(char)arg1 ;
-(id)installationTargetForReaderController:(const ReaderController*)arg1 ;
-(char)readerControllerShouldActivateUponDeterminingAvailability:(const ReaderController*)arg1 ;
-(char)readerControllerShouldDeactivateFromUserAction:(const ReaderController*)arg1 ;
-(void)readerControllerWillActivate:(const ReaderController*)arg1 ;
-(void)readerControllerDidActivate:(const ReaderController*)arg1 ;
-(void)readerControllerWillDeactivate:(const ReaderController*)arg1 ;
-(void)readerControllerDidDeactivate:(const ReaderController*)arg1 ;
-(void)readerControllerDidBecomeUnavailableUnexpectedly:(const ReaderController*)arg1 ;
-(char)handleCancelForSearchableWKView:(id)arg1 ;
-(char)createFluidProgressState;
-(void)clearFluidProgressState;
-(id)progressState;
-(char)hasFailedURL;
-(id)initWithDefaultWebViewConfigurationWithDocument:(id)arg1 browsingMode:(unsigned long long)arg2 ;
-(id)_createWebViewWithConfiguration:(id)arg1 ;
-(Ref<Safari::WebViewControllerWKAdapter, WTF::RawPtrTraits<Safari::WebViewControllerWKAdapter>>*)createContentViewController;
-(void)transferStateFromBrowserContentViewController:(id)arg1 ;
-(void)didMoveToDocument:(id)arg1 ;
-(void)resetTabIdentifier;
-(void)setAncestorTabIdentifiersWithRelatedTab:(id)arg1 relationType:(unsigned long long)arg2 ;
-(char)hasAncestorWithTabIdentifier:(unsigned)arg1 ;
-(void)updateWKViewLayoutMode;
-(void)insertCSSWithSource:(id)arg1 sourceURL:(id)arg2 details:(id)arg3 fromExtension:(id)arg4 ;
-(void)removeCSSWithSource:(id)arg1 details:(id)arg2 fromExtension:(id)arg3 ;
-(void)queueRequestForExtensionWithIdentifier:(id)arg1 forWebpageLanguageWithCompletionHandler:(/*^block*/id)arg2 ;
-(void)calculateBestWidthForCurrentPage;
-(void)setWebProcessForcePaused:(char)arg1 ;
-(void)forceCrashWebProcess;
-(char)isLoadingSingleResource;
-(char)shouldSuppressJavaScriptDialogsDueToProvisionalLoad;
-(char)shouldSuppressOpenPanelDueToProvisionalLoad;
-(void)loadURL:(id)arg1 waitInQueue:(char)arg2 ;
-(void)loadURLTryingToReuseBackForwardItem:(id)arg1 ;
-(void)reuseForURLRequest:(id)arg1 ;
-(id)tryDownloadWithMultipleURLs:(unique_ptr<WTF::Deque<NSURL *, 0>, std::__1::default_delete<WTF::Deque<NSURL *, 0>>>*)arg1 httpReferrer:(id)arg2 ;
-(NSData *)sessionStateDataFilteringURLs;
-(void)noteNavigationFromSearchSuggestionsIncludingParsecResults:(char)arg1 queryID:(unsigned long long)arg2 ;
-(char)_supportsNetworkDiagnostics;
-(void)commitOrCancelBackgroundNavigationLoadAsAppropriate;
-(void)showErrorPageForJavaScriptInUnifiedField:(id)arg1 ;
-(void)goToOverridePageForWebExtensionWithComposedIdentifier:(id)arg1 ;
-(void)decideStorageQuotaForURL:(id)arg1 originDisplayName:(id)arg2 currentQuota:(unsigned long long)arg3 currentOriginUsage:(unsigned long long)arg4 currentDatabaseUsage:(unsigned long long)arg5 expectedUsage:(unsigned long long)arg6 completionHandler:(/*^block*/id)arg7 ;
-(char)canSaveAsPDF;
-(char)_isSavingAsWebArchive;
-(void)_presentSaveDialog;
-(void)generatePDFDataForExport;
-(void)getVisibleContentsAsDataURLStringWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)getVisibleContentsSnapshotWithCompletionHandler:(/*^block*/id)arg1 ;
-(CertificateInfo*)certificateInfo;
-(NSString *)extendedValidationCertificateOrganizationName;
-(void)setExtendedValidationCertificateOrganizationName:(NSString *)arg1 ;
-(void)getExtendedValidationCertificateOrganizationNameWithCompletionHandler:(/*^block*/id)arg1 ;
-(id)_computeExtendedValidationCertificateOrganizationName;
-(void)showPassBlockedDialogForDownload:(id)arg1 ;
-(void)enqueuePendingNavigationIfNeeded;
-(void)restorePersistentState:(id)arg1 allowJavaScript:(char)arg2 waitInQueue:(char)arg3 ;
-(char)isShowingExtensionPage;
-(char)isShowingOtherPage;
-(void)runPageContentInitializationErrorSheet:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(char)didAllowPopUpWindowsForDomain:(id)arg1 ;
-(unsigned long long)numberOfBlockedPopUpWindows;
-(void)addBlockedPopUpWindowConfiguration:(id)arg1 ;
-(void)openBlockedPopUpWindows;
-(char)hasNonEmptyBackForwardList;
-(id)displayTitleForBackForwardListItem:(const BackForwardListItem*)arg1 showURL:(char)arg2 ;
-(char)shouldSaveBackForwardListItemInTabState:(const BackForwardListItem*)arg1 ;
-(void)clearBackForwardList;
-(char)historyClientShouldIgnoreNavigationToURL:(id)arg1 ;
-(NSString *)titleOfPrintMenuItem;
-(void)printFrameHandle:(id)arg1 waitUntilDone:(char)arg2 isUserInitiated:(char)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)_printFrame:(const Frame*)arg1 withPrintInfo:(id)arg2 waitUntilDone:(char)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)printPage;
-(void)setShouldStartEmpty:(char)arg1 ;
-(void)setInitialContents:(const URLRequest*)arg1 ;
-(URLRequest*)initialContents;
-(void)displayInitialContents;
-(NSURL *)unifiedFieldFallbackURLForAboutBlank;
-(char)willHandleEvent:(id)arg1 ;
-(void)pageDidScroll;
-(void)hadFirstPotentiallyCompromisingInteraction;
-(void)setMovingToAnotherWindow:(char)arg1 ;
-(void)bringTabAndWindowToFront;
-(void)browserViewWillMoveToWindow:(id)arg1 ;
-(void)browserViewVisibilityChanged;
-(void)browserViewDidMoveToWindow;
-(void)hostWindowDidResize;
-(void)forgetAllAuthenticationChallenges;
-(void)animateProgressForPreloadedDocument;
-(void)verifyEditedFormTextStatus;
-(void)confirmReloadingWithEditedFormTextWithOption:(long long)arg1 ;
-(void)handleAutoplayEvent:(long long)arg1 flags:(unsigned long long)arg2 ;
-(char)canAutoFill;
-(void)autoFillWillStart;
-(char)hasFrameBeenAutoFilled:(const Frame*)arg1 ;
-(id)uniqueIDsOfControlsThatWereAutoFilledInFrame:(const Frame*)arg1 ;
-(void)autoFillFormInFrame:(id)arg1 withValues:(id)arg2 fieldToFocus:(id)arg3 autoFillType:(long long)arg4 shouldSubmit:(char)arg5 recursivelyClearFormMetadata:(char)arg6 ;
-(void)removeAutomaticStrongPasswordVisualTreatment;
-(void)userDeclinedAutomaticStrongPasswordForCurrentDomain;
-(void)userChoseToUseGeneratedPassword;
-(void)manualAutoFillButtonClickedInTextFieldWithMetadataAsData:(id)arg1 formMetadataAsData:(id)arg2 inFrameHandle:(id)arg3 autoFillButtonType:(long long)arg4 ;
-(void)setStatusForMouseoverWithUserData:(id)arg1 modifiers:(unsigned long long)arg2 forPage:(const Page*)arg3 ;
-(RetainPtr<CGImage *>*)generateSnapshotFromWindowBackingStore;
-(id)test_hostContentViewControllerForManager:(id)arg1 ;
-(void)showBookmarks;
-(void)preloadBookmarksUI;
-(void)hideBookmarks;
-(void)showHistory;
-(void)hideHistory;
-(char)canSetCurrentPageToHomePage;
-(char)isLoadingStartPage;
-(void)goToStartPage;
-(void)didCreateSnapshot:(id)arg1 withScaleFactor:(double)arg2 ofTopSiteWithURL:(id)arg3 ;
-(void)deactivateReaderFromWebProcessUserAction;
-(void)deactivateReaderNowOnNavigation;
-(void)deactivateReaderAfterAnimationWithDeactivationMode:(int)arg1 ;
-(void)loadURLFromReader:(id)arg1 ;
-(id)pagePreviewAnimationControllerWithURL:(id)arg1 originRect:(CGRect)arg2 ofView:(id)arg3 ;
-(void)hidePagePreviewControllerIfNeeded;
-(NSSet *)pagePreviewBrowserViewControllers;
-(void)setParentPagePreviewAnimationController:(PagePreviewAnimationController *)arg1 ;
-(void)enqueuePagePreviewHistoryOperation:(id)arg1 ;
-(id)computeTabLabelIncludingDebuggingContent:(char)arg1 ;
-(void)showSharingServicePickerAtBottomOfView:(id)arg1 ;
-(void)sharePageViaMail;
-(void)runJavaScript:(id)arg1 forSharingExtensionNamed:(id)arg2 requestIdentifier:(unsigned long long)arg3 preserveScriptWorld:(char)arg4 ;
-(void)finalizeJavaScriptForSharingExtensionNamed:(id)arg1 arguments:(id)arg2 ;
-(void)createVisibleContentsSnapshotForSharingWithRequestIdentifier:(unsigned long long)arg1 ;
-(void)stopAllMediaPlayback;
-(char)isPlayingVideoInPIP;
-(void)preparePageToReturnFromFullscreenToInline;
-(void)updateBackItemAfterSwappingBrowserViewControllerIfNeeded;
-(void)didClickGoBackFromSafeBrowsingWarning;
-(char)isNavigatingToSpawnedTabParentURL;
-(char)isDisposableAfterNavigation;
-(void)loadStateOfBrowserViewController:(id)arg1 ;
-(char)shouldSpawnNewTabOnBrowserUIInitiatedNavigationFromPinnedTabWithDestinationURL:(id)arg1 ;
-(void)pinnedTabContentDidMoveFromBrowserTabViewItem:(id)arg1 toBrowserTabViewItem:(id)arg2 ;
-(char)isPinnedStateToggleable;
-(char)canAddBookmark;
-(id)makeBookmark;
-(char)canAddReadingListItem;
-(void)loadReadingListItemInContinuousMode:(id)arg1 ;
-(void)setBlockedFromKeyViewLoop:(char)arg1 ;
-(NSView *)keyView;
-(char)canViewSource;
-(void)viewMainFrameSource;
-(char)isShowingWebInspector;
-(void)showWebInspector;
-(void)closeWebInspector;
-(void)detachWebInspector;
-(char)canShowResponsiveDesignView;
-(void)showResponsiveDesignView;
-(void)displayInternetAccountSetupPromptOnNextLoadForDomain:(id)arg1 username:(id)arg2 password:(id)arg3 ;
-(void)bannerContainerView:(id)arg1 bannerDidUninstall:(id)arg2 ;
-(char)requestPointerLock;
-(void)didLosePointerLock;
-(void)didExceedBackgroundResourceLimitWhileInForegroundWithLimit:(long long)arg1 ;
-(void)showPrivateBrowsingExplanationBannerAnimated:(char)arg1 ;
-(void)showNewExtensionBannerForExtensionsWithIdentifiers:(id)arg1 ;
-(void)showProcessIDsInPageTitlesPreferenceHasChanged;
-(PerformanceTesting*)performanceTesting;
-(void)collectMetadataJSONForActiveFormWithMode:(long long)arg1 ;
-(void)collectDataForSavingPageInliningOrDiscardingExternalResources;
-(id)performBlockNowOrAfterVisuallyNonEmptyLayoutCommittingQueuedNavigationIfNecessary:(/*^block*/id)arg1 ;
-(void)cancelPostQueuedNavigationBlockWithToken:(id)arg1 ;
-(id)requestSnapshotWithSize:(CGSize)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)cancelSnapshotRequestWithToken:(id)arg1 ;
-(void)showDefaultBrowserBanner;
-(void)snapBackToSearchResults;
-(void)clearSearchResultsForSnapBack;
-(char)isSuppressingJavaScriptShowModalDialogPresentation;
-(void)dismissDialogsBlockingActivation;
-(id)querySuggestionsForSearchString:(id)arg1 ;
-(char)doesPageReferenceSiriSuggestion:(id)arg1 ;
-(void)logEngagementWithSiriSuggestion:(id)arg1 forInput:(id)arg2 ;
-(void)logNumberOfDisplayedSiriSuggestions:(unsigned long long)arg1 numberOfSuppressedSuggestions:(unsigned long long)arg2 ;
-(void)searchableWKViewWillEnterFullscreenWindow:(id)arg1 ;
-(void)searchableWKViewDidEnterFullscreenWindow:(id)arg1 ;
-(void)searchableWKViewDidReturnFromFullscreenWindow:(id)arg1 ;
-(void)showJavaScriptAlertWithMessage:(id)arg1 origin:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)showJavaScriptConfirmWithMessage:(id)arg1 origin:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)showJavaScriptPromptWithPrompt:(id)arg1 defaultText:(id)arg2 origin:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)showWebAuthenticationDialogForPanel:(id)arg1 presentationBlock:(/*^block*/id)arg2 ;
-(void)updateWebAuthenticationPanel:(id)arg1 update:(long long)arg2 ;
-(void)requestWebAuthenticationPINForPanel:(id)arg1 remainingRetries:(unsigned long long)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)selectWebAuthenticationAssertionResponseForPanel:(id)arg1 responses:(id)arg2 source:(long long)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)decideWebAuthenticationLocalAuthenticatorPolicyForPanel:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(id<AppExtensionMessageReceiver>)appExtensionMessageReceiver;
-(char)isAuthenticationSession;
-(NSString *)authenticationHost;
-(id<_WKInspectorDelegate>)inspectorDelegate;
-(NSDate *)dateFinishedLoading;
-(char)webPageIsUnresponsive;
-(char)mainDocumentDidFirstVisuallyNonEmptyLayout;
-(NSURL *)urlOfMostRecentFirstVisuallyNonEmptyLayout;
-(void)setUrlOfMostRecentFirstVisuallyNonEmptyLayout:(NSURL *)arg1 ;
-(id)backgroundDocumentFirstVisuallyNonEmptyLayoutHandler;
-(id)backgroundDocumentFirstMeaningfulPaintHandler;
-(double)bestWidthForCurrentPage;
-(NSSet *)allowedKnownTrackingThirdParties;
-(void)setAllowedKnownTrackingThirdParties:(NSSet *)arg1 ;
-(NSSet *)preventedKnownTrackingThirdParties;
-(void)setPreventedKnownTrackingThirdParties:(NSSet *)arg1 ;
-(char)isWebProcessForcePaused;
-(char)swapProcessesOnNavigation;
-(void)setSwapProcessesOnNavigation:(char)arg1 ;
-(char)isWaitingForSamplingProfilerOutput;
-(void)setWaitingForSamplingProfilerOutput:(char)arg1 ;
-(int)loadingStatus;
-(long long)currentRequestResponseCode;
-(long long)lastBackgroundTerminationReason;
-(char)hasEverBeenVisible;
-(void)setHasEverBeenVisible:(char)arg1 ;
-(BackgroundLoad *)backgroundNavigationBackgroundLoad;
-(long long)urlImpressionProvenance;
-(char)sensitiveFormFieldHasEverHadFocus;
-(char)committedExtendedValidationCertificateOrganizationNameHasBeenDetermined;
-(char)shouldStartEmpty;
-(char)shouldBlockAllMouseEvents;
-(char)shouldBlockAllKeyEvents;
-(char)shouldBlockFirstResponder;
-(char)isWindowFocusDisabled;
-(char)isMovingToAnotherWindow;
-(char)wasFormTextEdited;
-(char)meetsEditedFormTextWarningCriteria;
-(WBSMultiRoundAutoFillManager *)multiRoundAutoFillManager;
-(char)preFillFormWasDeferred;
-(void)setPreFillFormWasDeferred:(char)arg1 ;
-(char)isPresentingSheetToSaveCredentials;
-(void)setPresentingSheetToSaveCredentials:(char)arg1 ;
-(WBSCreditCardData *)lastFilledCreditCardData;
-(void)setLastFilledCreditCardData:(WBSCreditCardData *)arg1 ;
-(NSSet *)lastFilledCreditCardDataTypes;
-(void)setLastFilledCreditCardDataTypes:(NSSet *)arg1 ;
-(JavaScriptDialogSuppressionManager *)javaScriptDialogSuppressionManager;
-(char)isSuppressingBeforeUnloadPrompts;
-(void)setSuppressingBeforeUnloadPrompts:(char)arg1 ;
-(NSDictionary *)initialReaderArticleScrollPositionAsDictionary;
-(char)isReaderViewStale;
-(void)setReaderViewStale:(char)arg1 ;
-(char)shouldReflectTranslationProgressAsFluidProgress;
-(char)pendingBrowserInitiatedLoadWasForDownload;
-(char)isShowingWebGLPolicyDialog;
-(void)setShowingWebGLPolicyDialog:(char)arg1 ;
-(void)setInContinuousMode:(char)arg1 ;
-(char)alwaysInitiateLoadsInContinuousModeUsingCurrentController;
-(char)isBlockedFromKeyViewLoop;
-(char)isPointerLocked;
-(char)shouldHideTransientBannerOnVisuallyNonEmptyLayout;
-(char)overrideMaintainsInactiveSelectionForVoiceOver;
-(char)suppressJavaScriptDialogPresentation;
-(void)setSuppressJavaScriptDialogPresentation:(char)arg1 ;
-(char)isWaitingForBytecodeProfile;
-(void)setWaitingForBytecodeProfile:(char)arg1 ;
-(id<AuthenticationSessionNavigationHandling>)authenticationSessionNavigationHandler;
-(void)setAuthenticationSessionNavigationHandler:(id<AuthenticationSessionNavigationHandling>)arg1 ;
-(unsigned long long)phishingURLClassification;
-(char)performingAccountSecurityUpgrade;
-(char)skipAnimationsWhenDismissingPendingTabDialogs;
-(void)setSkipAnimationsWhenDismissingPendingTabDialogs:(char)arg1 ;
@end

