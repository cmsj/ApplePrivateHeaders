/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:08 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/Safari.framework/Versions/A/Safari
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <Safari/Safari-Structs.h>
#import <libobjc.A.dylib/DownloadProgressEntryDelegate.h>
#import <libobjc.A.dylib/PassFileDownloadDelegate.h>
#import <libobjc.A.dylib/AuthenticationSheetRequestDelegate.h>
#import <libobjc.A.dylib/DownloadAlertsManagerDataSource.h>
#import <libobjc.A.dylib/DownloadViewControllerDataSource.h>
#import <libobjc.A.dylib/DownloadViewControllerDelegate.h>
#import <libobjc.A.dylib/_WKDownloadDelegate.h>

@protocol DownloadsManagerDecisionResponder, DownloadsManagerDelegate;
@class NSMutableArray, NSMapTable, NSMutableDictionary, NSMutableSet, WBSCoalescedAsynchronousWriter, NSTimer, NSString;

@interface DownloadsManager : NSObject <DownloadProgressEntryDelegate, PassFileDownloadDelegate, AuthenticationSheetRequestDelegate, DownloadAlertsManagerDataSource, DownloadViewControllerDataSource, DownloadViewControllerDelegate, _WKDownloadDelegate> {

	NSMutableArray* _entries;
	NSMapTable* _downloadToEntry;
	NSMutableDictionary* _wkDownloadToEntry;
	NSMutableDictionary* _identifierToEntry;
	NSMutableSet* _openableDownloadURLs;
	NSMutableDictionary* _wkDownloadToPassFileDownload;
	NSMutableSet* _passFileDownloadURLs;
	NSMutableSet* _urlsOfPendingDownloadsInitiatedFromPrivateBrowsing;
	WBSCoalescedAsynchronousWriter* _historyWriter;
	char _loadedDownloadHistory;
	char _hadEntriesOnDisk;
	char _isPlanningToWriteOnQuit;
	char _hasStartedLoadingDownloadHistory;
	NSMutableArray* _blocksToExecuteWhenDownloadHistoryIsLoaded;
	unique_ptr<SafariShared::SuddenTerminationDisabler, std::__1::default_delete<SafariShared::SuddenTerminationDisabler>>* _suddenTerminationDisabler;
	float _totalProgress;
	NSTimer* _updateTotalProgressTimer;
	NSTimer* _removeDownloadsAfterOneDayTimer;
	unsigned _downloadsAssertion;
	id<DownloadsManagerDecisionResponder> _decisionResponder;
	id<DownloadsManagerDelegate> _delegate;

}

@property (assign,nonatomic,__weak) id<DownloadsManagerDecisionResponder> decisionResponder;              //@synthesize decisionResponder=_decisionResponder - In the implementation block
@property (assign,nonatomic,__weak) id<DownloadsManagerDelegate> delegate;                                //@synthesize delegate=_delegate - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)downloadBundleExtension;
-(void)dealloc;
-(id)init;
-(id<DownloadsManagerDelegate>)delegate;
-(void)setDelegate:(id<DownloadsManagerDelegate>)arg1 ;
-(int)total;
-(void)_downloadDidStart:(id)arg1 ;
-(void)_download:(id)arg1 didReceiveResponse:(id)arg2 ;
-(void)_download:(id)arg1 didWriteData:(unsigned long long)arg2 totalBytesWritten:(unsigned long long)arg3 totalBytesExpectedToWrite:(unsigned long long)arg4 ;
-(void)_download:(id)arg1 decideDestinationWithSuggestedFilename:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)_downloadDidFinish:(id)arg1 ;
-(void)_download:(id)arg1 didFailWithError:(id)arg2 ;
-(void)_downloadDidCancel:(id)arg1 ;
-(void)_download:(id)arg1 didReceiveServerRedirectToURL:(id)arg2 ;
-(void)_download:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(char)_download:(id)arg1 shouldDecodeSourceDataOfMIMEType:(id)arg2 ;
-(void)_download:(id)arg1 didCreateDestination:(id)arg2 ;
-(void)_downloadProcessDidCrash:(id)arg1 ;
-(void)savePendingChangesBeforeTermination;
-(void)_removeEntry:(id)arg1 ;
-(void)setDecisionResponder:(id<DownloadsManagerDecisionResponder>)arg1 ;
-(void)stopAllDownloads;
-(void)addPendingDownloadURLInitiatedFromPrivateBrowsing:(id)arg1 ;
-(void)didCompleteAuthenticationSheetRequest:(AuthenticationSheetRequest*)arg1 ;
-(int)totalBusy;
-(void)showQueuedPassFromDownload:(id)arg1 ;
-(void)startDownloadForRequest:(id)arg1 mayOpenWhenDone:(char)arg2 shouldAvoidPersistingIdentifyingInformation:(char)arg3 originatingWebView:(id)arg4 ;
-(void)resumeDownloadAtPath:(id)arg1 ;
-(void)removeIdleEntries;
-(void)removeEntriesAddedAfterDate:(id)arg1 ;
-(void)downloadMayBeOpenedForURL:(id)arg1 ;
-(void)addPassFileDownloadURL:(id)arg1 ;
-(void)downloadProgressEntry:(id)arg1 didResumeWithWK2Download:(id)arg2 ;
-(void)downloadProgressEntryDidStop:(id)arg1 ;
-(void)downloadProgressEntryDidFinish:(id)arg1 shouldClear:(char)arg2 ;
-(void)downloadProgressEntry:(id)arg1 didUpdateFractionCompletedForPath:(id)arg2 fractionCompleted:(float)arg3 ;
-(void)downloadProgressEntry:(id)arg1 didMarkDownloadBundleAsInProgressAtBundlePath:(id)arg2 creationDate:(id)arg3 ;
-(void)_downloadEntryStageChanged:(id)arg1 ;
-(void)_downloadsClearingPolicyDidChange:(id)arg1 ;
-(void)_removeEntriesFinishedOverOneDayAgoAndUpdateTimerIfAppropriate;
-(void)startDownloadForRequest:(id)arg1 mayOpenWhenDone:(char)arg2 allowOverwrite:(char)arg3 shouldAvoidPersistingIdentifyingInformation:(char)arg4 path:(id)arg5 tags:(id)arg6 isUsingSavePanel:(char)arg7 originatingWebView:(id)arg8 ;
-(id)_createEntryForWKDownload:(id)arg1 allowOverwrite:(char)arg2 shouldAvoidPersistingIdentifyingInformation:(char)arg3 addEntry:(char)arg4 ;
-(void)_loadDownloadHistoryIfNeededWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)_cancelDownloadForEntry:(id)arg1 withError:(id)arg2 ;
-(void)_wkDownload:(id)arg1 entry:(id)arg2 didFailWithError:(id)arg3 wasCanceled:(char)arg4 ;
-(char)_isDownloadURLStringHTTPFamilyURL:(id)arg1 ;
-(char)_areDownloadURLsHTTPFamilyURLs:(id)arg1 ;
-(void)_reportInvalidDownloadFileErrorForPath:(id)arg1 ;
-(void)_addEntry:(id)arg1 withNotification:(char)arg2 ;
-(id)_validEntriesFromEntries:(id)arg1 forBooleanKey:(id)arg2 ;
-(void)_insertEntry:(id)arg1 atIndex:(unsigned)arg2 withNotification:(char)arg3 removeOld:(char)arg4 ;
-(void)_removeEntries:(id)arg1 withNotification:(char)arg2 removeQuarantineHistoryEntry:(char)arg3 ;
-(void)getEntriesWithCompletionHandler:(/*^block*/id)arg1 ;
-(id)_busyEntries;
-(char)_needToWriteHistoryFileOnQuit;
-(void)_saveDownloadHistory;
-(id)_downloadMetadataIOQueue;
-(char)_shouldCleanupHistoryAfterOneDay;
-(void)_cancelRemoveDownloadsAfterOneDayTimer;
-(char)_shouldClearHistoryOnQuit;
-(void)_updateSuddenTerminationSetting;
-(void)_removeEntriesFinishedBeforeDate:(id)arg1 ;
-(void)_scheduleCleanupOfOldestDownload;
-(id)_downloadHistoryFile;
-(id)_prepareToWriteDownloadHistory;
-(void)_startUpdateTotalProgressTimerIfNeeded;
-(void)_noteDownloadsChanged;
-(void)_setEntry:(id)arg1 forWK2Download:(id)arg2 ;
-(void)_addHistoryEntryFromLoadedDownloadHistory:(id)arg1 ;
-(char)_shouldRequestSpaceFromStorageManagerForEntry:(id)arg1 ;
-(void)_reportInsufficientDiskSpaceSheetForDownload:(id)arg1 ;
-(void)_requestFreeSpaceFromStorageManagerFromEntry:(id)arg1 completion:(/*^block*/id)arg2 ;
-(char)_downloadFailsDueToNotEnoughFreeDiskSpaceForEntry:(id)arg1 error:(id)arg2 ;
-(void)_requestSpaceOrShowSheetForInsufficientDiskSpaceErrorForEntry:(id)arg1 ;
-(void)_notifyAboutStartingDownloadEntryAndUpdateProgressTimer:(id)arg1 notificationToSend:(id)arg2 voiceOverMessage:(id)arg3 ;
-(void)_updateTotalProgress:(id)arg1 ;
-(float)_calculateTotalProgress;
-(void)_cancelDownloadForEntry:(id)arg1 ;
-(void)removePassFileDownloadForWKDownload:(id)arg1 ;
-(unsigned long long)_indexOfEntry:(id)arg1 ;
-(void)_removeEntries:(id)arg1 ;
-(void)_insertEntry:(id)arg1 atIndex:(unsigned)arg2 ;
-(id)_passFileDownloadForWKDownload:(id)arg1 ;
-(id)_createEntryForWKDownload:(id)arg1 addEntry:(char)arg2 ;
-(id)_downloadStartedString;
-(void)_didStartDownloadEntry:(id)arg1 withNotification:(id)arg2 voiceOverMessage:(id)arg3 ;
-(void)wkDownload:(id)arg1 willResumeWithResponse:(const URLResponse*)arg2 fromByte:(long long)arg3 ;
-(char)_promptForDownloadPath:(id*)arg1 filename:(id*)arg2 withSuggestedFilename:(id)arg3 ;
-(void)passFileDownload:(id)arg1 downloadDidEnd:(id)arg2 ;
-(unsigned long long)numberOfBusyEntriesForDownloadAlertsManager:(id)arg1 ;
-(id)downloadFilenameInProgressForDownloadAlertsManager:(id)arg1 ;
-(id)downloadViewControllerGetEntries:(id)arg1 ;
-(id)downloadViewController:(id)arg1 validEntriesFromEntries:(id)arg2 withBooleanKey:(id)arg3 ;
-(unsigned long long)downloadViewController:(id)arg1 indexForEntry:(id)arg2 ;
-(void)downloadViewController:(id)arg1 didRemoveEntries:(id)arg2 ;
-(void)downloadViewController:(id)arg1 didUndoRemovingEntry:(id)arg2 atIndex:(unsigned long long)arg3 ;
-(void)downloadViewControllerDidRemoveIdleEntries:(id)arg1 ;
-(void)downloadViewController:(id)arg1 didAcceptURLs:(id)arg2 ;
-(void)_setEntry:(id)arg1 forDownload:(id)arg2 ;
-(id<DownloadsManagerDecisionResponder>)decisionResponder;
@end

