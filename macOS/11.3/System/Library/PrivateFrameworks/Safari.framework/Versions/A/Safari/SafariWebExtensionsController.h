/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:08 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/Safari.framework/Versions/A/Safari
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <SafariSharedUI/WBSWebExtensionsController.h>
#import <libobjc.A.dylib/WBSWebExtensionsControllerSelectorForwarderDelegate.h>
#import <libobjc.A.dylib/ExtensionToolbarItemProviding.h>

@class _WKRemoteObjectInterface, NSMutableDictionary, NSTimer, NSArray, NSString;

@interface SafariWebExtensionsController : WBSWebExtensionsController <WBSWebExtensionsControllerSelectorForwarderDelegate, ExtensionToolbarItemProviding> {

	_WKRemoteObjectInterface* _messageSender;
	NSMutableDictionary* _nativeRequestIdentifiersToCompletionHandlers;
	NSTimer* _checkIfNoBrowserWindowIsFocusedTimer;

}

@property (nonatomic,readonly) NSArray * webExtensionsForPerSitePreferences; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) NSArray * toolbarItemIdentifiers; 
+(id)sharedController;
+(id)_composedIdentifierForStateOfExtensionWithBundleIdentifier:(id)arg1 developerIdentifier:(id)arg2 ;
+(id)extensionIdentifierToBaseURIMapBundleParameterKey;
+(id)extensionsCrashReporterMessageBundleParameterKey;
+(id)webExtensionLoadedBundleParameterKey;
+(double)temporarySiteAccessTimeInterval;
+(id)_extensionsCrashReporterMessage;
+(id)_extensionStateEnabledDateKey;
+(double)pendingSiteAccessTimeoutInterval;
+(id)extensionURLScheme;
+(Class)_extensionDataClass;
+(id)_skipLoadingEnabledExtensionsAtLaunchPreferenceKey;
-(void)dealloc;
-(void)applicationDidBecomeActive;
-(void)applicationDidResignActive;
-(void)applicationWillTerminate;
-(unsigned long long)toolbarItemIdealPointSize;
-(char)hasShownPerSiteAccessPopoverForExtension:(id)arg1 ;
-(char)showAllWebsiteAccessRequestsAsAlerts;
-(void)didShowPerSiteAccessPopoverForExtension:(id)arg1 ;
-(void)didAllowAccessToOneSiteForExtension:(id)arg1 ;
-(void)didSelectTab:(id)arg1 ;
-(char)needsWebRequestCallbacks;
-(id)webExtensionForExtensionIdentifier:(id)arg1 ;
-(void)browserTabViewItem:(id)arg1 currentURLMayHaveChanged:(id)arg2 previousURL:(id)arg3 ;
-(id)webExtensionForComposedIdentifier:(id)arg1 ;
-(void)disableUnsignedExtensionsIfNecessary;
-(char)extensionsEnabled;
-(void)_updateExtensionsCrashReporterMessage;
-(void)_updateExtensionStateIfPermissionsIncreased:(id)arg1 ;
-(id)_computeCodeSigningDictionaryOnDiskForExtension:(id)arg1 attemptRetryOnFailure:(char)arg2 ;
-(id)_developerIdentifierForExtension:(id)arg1 ;
-(char)_isExtensionBlockedByBlocklist:(id)arg1 developerIdentifier:(id)arg2 ;
-(void)_replaceExtensionsObsoletedByExtension:(id)arg1 developerIdentifier:(id)arg2 ;
-(void)_validateContainingAppOfExtensionIfNecessary:(id)arg1 attemptRetryOnFailure:(char)arg2 ;
-(void)_showNewExtensionBannerIfNecessaryForExtensions:(id)arg1 ;
-(void)didOpenTab:(id)arg1 ;
-(void)didCloseTab:(id)arg1 windowIsClosing:(char)arg2 ;
-(void)clearToolbarItemStateForTab:(id)arg1 ;
-(void)fireOnUpdatedEventForTab:(id)arg1 withChangedProperties:(unsigned long long)arg2 ;
-(id)webExtensionForBaseURIHost:(id)arg1 ;
-(void)didMoveTab:(id)arg1 fromIndex:(unsigned long long)arg2 toIndex:(unsigned long long)arg3 ;
-(void)didMoveTab:(id)arg1 fromWindowWithID:(double)arg2 indexInOldWindow:(unsigned long long)arg3 ;
-(char)handleKeyboardEvent:(id)arg1 forWindowController:(id)arg2 ;
-(void)didOpenWindow:(id)arg1 ;
-(void)didCloseWindow:(id)arg1 ;
-(void)didActivateWindow:(id)arg1 ;
-(void)didDeactivateWindow:(id)arg1 ;
-(id)_persistentStateURLForExtensionURL:(id)arg1 ;
-(id)_extensionURLToLoadFromPersistentStateURL:(id)arg1 ;
-(id)_versionNumberForExtension:(id)arg1 ;
-(id)_displayVersionForExtension:(id)arg1 ;
-(id)_displayNameForExtension:(id)arg1 ;
-(void)_replaceAppExtensionsWithWebExtension:(id)arg1 developerIdentifier:(id)arg2 ;
-(id)_updatedExtensionStateForCurrentPermissions:(id)arg1 previousExtensionState:(id)arg2 ;
-(char)_shouldDisableExtensionIfAdditionalPermissionsAreRequired:(id)arg1 previousExtensionState:(id)arg2 ;
-(id)webExtensionForExtension:(id)arg1 ;
-(void)reloadEnabledExtensions;
-(char)showOptionsForExtension:(id)arg1 ;
-(void)browserViewController:(id)arg1 resourceLoad:(id)arg2 didSendRequest:(id)arg3 ;
-(void)browserViewController:(id)arg1 resourceLoad:(id)arg2 didPerformHTTPRedirection:(id)arg3 newRequest:(id)arg4 ;
-(void)browserViewController:(id)arg1 resourceLoad:(id)arg2 didReceiveChallenge:(id)arg3 ;
-(void)browserViewController:(id)arg1 resourceLoad:(id)arg2 didReceiveResponse:(id)arg3 ;
-(void)browserViewController:(id)arg1 resourceLoad:(id)arg2 didCompleteWithError:(id)arg3 response:(id)arg4 ;
-(id)toolbarItemForIdentifier:(id)arg1 browserWindowController:(id)arg2 ;
-(NSArray *)toolbarItemIdentifiers;
-(void)_cancelCheckIfNoBrowserWindowIsFocusedTimer;
-(id)_currentWindowControllerForWebView:(id)arg1 withExtension:(id)arg2 ;
-(void)sendMessage:(id)arg1 toApplicationWithID:(id)arg2 fromExtensionWithIdentifier:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)fireOnUpdatedEventForTab:(id)arg1 toExtension:(id)arg2 withChangedProperties:(unsigned long long)arg3 ;
-(void)_notifyExtensionsSoonIfNoBrowserWindowIsFocused;
-(void)_notifyExtensionsIfNecessaryThatFocusChangedToWindowWithID:(double)arg1 isPopupWindow:(char)arg2 ;
-(void)_notifyExtensionsIfNoBrowserWindowIsFocused;
-(id)_tabForTabID:(id)arg1 webView:(id)arg2 extension:(id)arg3 ;
-(id)_windowForWindowID:(id)arg1 webView:(id)arg2 extension:(id)arg3 ;
-(id)_browserTabViewItemForTabID:(id)arg1 webView:(id)arg2 extension:(id)arg3 ;
-(void)_relateOpenerTabIfExistsToTab:(id)arg1 properties:(id)arg2 ;
-(id)_findBrowserTabViewItemOrCreateNewWindowForNewTabWithBrowsingMode:(unsigned long long)arg1 URL:(id)arg2 shouldMakeNewTabActive:(char)arg3 shouldMakeKeyNewWindow:(char)arg4 ;
-(void)_pinTab:(id)arg1 ;
-(id)_findTabInAnyWindowWithID:(double)arg1 ;
-(void)_relateParentTab:(id)arg1 toTab:(id)arg2 ;
-(id)_browserWindowControllerForWindowID:(id)arg1 webView:(id)arg2 extension:(id)arg3 ;
-(id)_createNewWindowFromCreateData:(id)arg1 ;
-(id)_loadAndCreateNewTabsIfNecessaryForURLs:(id)arg1 forWebExtension:(id)arg2 inBrowserWindowController:(id)arg3 shouldReuseFirstTab:(char)arg4 ;
-(void)_updateWindowLayoutForBrowserWindowController:(id)arg1 withUpdateInfo:(id)arg2 ;
-(id)_filteredOriginsRemovingAllHostsPatterns:(id)arg1 containedAllHostsPattern:(char*)arg2 ;
-(void)_updateWebExtensionDataMapForExtension:(id)arg1 ;
-(id)_frameInfoFromNode:(id)arg1 parent:(id)arg2 ;
-(id)_getFrameInfoInFrameSubtree:(id)arg1 parent:(id)arg2 frameID:(int)arg3 ;
-(void)_addFrameInfoFromFrameSubtree:(id)arg1 parent:(id)arg2 toArray:(id)arg3 ;
-(char)_extensionHasWebRequestPermissionRemovingListenerIfNot:(id)arg1 ;
-(char)_extensionHasWebRequestPermission:(id)arg1 andAccessToBrowserViewController:(id)arg2 loadingResourceURL:(id)arg3 withResourceLoadInfo:(id)arg4 ;
-(void)captureVisibleTabInWindow:(id)arg1 format:(id)arg2 quality:(id)arg3 extensionIdentifier:(id)arg4 webView:(id)arg5 completionHandler:(/*^block*/id)arg6 ;
-(void)createTabWithProperties:(id)arg1 extensionIdentifier:(id)arg2 webView:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)detectLanguageForTab:(id)arg1 extensionIdentifier:(id)arg2 webView:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)getZoomForTab:(id)arg1 extensionIdentifier:(id)arg2 webView:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)goBackInTab:(id)arg1 extensionIdentifier:(id)arg2 webView:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)goForwardInTab:(id)arg1 extensionIdentifier:(id)arg2 webView:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)insertCSSWithDetails:(id)arg1 fromExtensionWithID:(id)arg2 toTabWithID:(id)arg3 webView:(id)arg4 completionHandler:(/*^block*/id)arg5 ;
-(void)reloadTab:(id)arg1 reloadFromOrigin:(char)arg2 extensionIdentifier:(id)arg3 webView:(id)arg4 completionHandler:(/*^block*/id)arg5 ;
-(void)removeCSSWithDetails:(id)arg1 fromExtensionWithID:(id)arg2 toTabWithID:(id)arg3 webView:(id)arg4 completionHandler:(/*^block*/id)arg5 ;
-(void)setZoomForTab:(id)arg1 zoomFactor:(id)arg2 extensionIdentifier:(id)arg3 webView:(id)arg4 completionHandler:(/*^block*/id)arg5 ;
-(void)updateTab:(id)arg1 properties:(id)arg2 extensionIdentifier:(id)arg3 webView:(id)arg4 completionHandler:(/*^block*/id)arg5 ;
-(void)createWindowWithCreateData:(id)arg1 extensionIdentifier:(id)arg2 webView:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)removeWindow:(id)arg1 extensionIdentifier:(id)arg2 webView:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)updateWindow:(id)arg1 withInfo:(id)arg2 extensionIdentifier:(id)arg3 webView:(id)arg4 completionHandler:(/*^block*/id)arg5 ;
-(void)_updateExtensionStateIfThisVersionOfSafariIsNotSupported:(id)arg1 ;
-(id)_allWindows;
-(id)_tabForWebView:(id)arg1 ;
-(char)_canSendMessageFromWebView:(id)arg1 ;
-(id)lastFocusedWindow;
-(void)_sendMessage:(id)arg1 toApplicationWithID:(id)arg2 fromExtensionWithIdentifier:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)_clearNewTabPreferenceIfNecessaryForRemovedExtensionWithComposedIdentifier:(id)arg1 ;
-(void)_fireOnUpdatedEventForTabsMatchingOriginPatterns:(id)arg1 toExtension:(id)arg2 ;
-(void)closeTabsWithIDs:(id)arg1 extensionIdentifier:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)duplicateTab:(id)arg1 extensionIdentifier:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)requestPermissions:(id)arg1 origins:(id)arg2 extensionIdentifier:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)removePermissions:(id)arg1 origins:(id)arg2 extensionIdentifier:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)getFrameInfoInTabWithID:(double)arg1 frameWithID:(int)arg2 extensionIdentifier:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)getAllFramesInfoInTabWithID:(double)arg1 extensionIdentifier:(id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(char)hasAllowedAccessToOneSiteForExtension:(id)arg1 ;
-(NSArray *)webExtensionsForPerSitePreferences;
@end

