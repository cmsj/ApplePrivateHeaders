/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:52 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/SiriVOX.framework/Versions/A/SiriVOX
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/AFHomeAnnouncementListening.h>
#import <libobjc.A.dylib/SVXMyriadResponseDelegate.h>
#import <libobjc.A.dylib/SVXModuleInstance.h>
#import <libobjc.A.dylib/AFNotifyObserverDelegate.h>
#import <libobjc.A.dylib/AFQueueDelegate.h>
#import <libobjc.A.dylib/SVXSessionDelegate.h>
#import <libobjc.A.dylib/SVXSpeechSynthesisListening.h>
#import <libobjc.A.dylib/AFNowPlayingListening.h>
#import <libobjc.A.dylib/SOClockAlarmListening.h>
#import <libobjc.A.dylib/SOClockTimerListening.h>
#import <libobjc.A.dylib/SVXSystemVolumeListening.h>
#import <libobjc.A.dylib/SVXPrewarmHandling.h>
#import <libobjc.A.dylib/SVXActivationHandling.h>
#import <libobjc.A.dylib/SVXDeactivationHandling.h>
#import <libobjc.A.dylib/SVXMyriadEventHandling.h>
#import <libobjc.A.dylib/SVXMyriadRequestHandling.h>

@protocol SVXTaskTracking, OS_dispatch_queue;
@class SVXModule, AFNotifyObserver, AFNowPlayingObserver, SVXSpeechSynthesizer, SVXServiceCommandHandler, SOClockAlarmObserver, SOClockTimerObserver, AFHomeAnnouncementObserver, SVXMyriadDeviceManager, NSDate, AFSiriTether, AFExperimentContext, SVXSession, SVXSessionActivationAnnouncer, SVXAudioPowerUpdateAnnouncer, SVXSessionActivityAnnouncer, AFQueue, SVXDeviceSetupContext, AFSpeechSynthesisRecord, SVXDeviceProblemsState, AFClockAlarmSnapshot, AFClockTimerSnapshot, NSObject, NSString;

@interface SVXSessionManager : NSObject <AFHomeAnnouncementListening, SVXMyriadResponseDelegate, SVXModuleInstance, AFNotifyObserverDelegate, AFQueueDelegate, SVXSessionDelegate, SVXSpeechSynthesisListening, AFNowPlayingListening, SOClockAlarmListening, SOClockTimerListening, SVXSystemVolumeListening, SVXPrewarmHandling, SVXActivationHandling, SVXDeactivationHandling, SVXMyriadEventHandling, SVXMyriadRequestHandling> {

	SVXModule* _module;
	AFNotifyObserver* _borealisTriggerNotifyObserver;
	AFNotifyObserver* _earlyDetectNotifyObserver;
	AFNotifyObserver* _deviceProblemsNotifyObserver;
	AFNowPlayingObserver* _nowPlayingObserver;
	SVXSpeechSynthesizer* _speechSynthesizer;
	SVXServiceCommandHandler* _serviceCommandHandler;
	SOClockAlarmObserver* _clockAlarmObserver;
	SOClockTimerObserver* _clockTimerObserver;
	AFHomeAnnouncementObserver* _homeAnnouncementObserver;
	float _mediaPlaybackVolume;
	id _myriadToken;
	SVXMyriadDeviceManager* _myriadDeviceManager;
	id<SVXTaskTracking> _currentMyriadCoordinatedRequestAssertion;
	char _myriadDuckingAllowed;
	NSDate* _lastStereoPartnerMyriadWin;
	AFSiriTether* _tether;
	AFExperimentContext* _experimentContext;
	SVXSession* _currentSession;
	SVXSessionActivationAnnouncer* _activationAnnouncer;
	SVXAudioPowerUpdateAnnouncer* _audioPowerUpdateAnnouncer;
	SVXSessionActivityAnnouncer* _activityAnnouncer;
	AFQueue* _queuedOperations;
	double _lastSessionResignActiveTimestamp;
	SVXDeviceSetupContext* _deviceSetupContext;
	long long _nowPlayingPlaybackState;
	double _nowPlayingPlaybackStateRecordTime;
	AFSpeechSynthesisRecord* _speechSynthesisRecord;
	long long _speechSynthesisState;
	SVXDeviceProblemsState* _deviceProblemsState;
	AFClockAlarmSnapshot* _clockAlarmSnapshot;
	AFClockTimerSnapshot* _clockTimerSnapshot;
	unsigned long long _homeAnnouncementState;
	NSObject*<OS_dispatch_queue> _coreDuetQueue;
	char _needsClearContext;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id)initWithModule:(id)arg1 ;
-(void)queue:(id)arg1 didEnqueueObjects:(id)arg2 ;
-(void)nowPlayingObserver:(id)arg1 playbackStateDidChangeFrom:(long long)arg2 to:(long long)arg3 ;
-(void)notifyObserver:(id)arg1 didReceiveNotificationWithToken:(int)arg2 ;
-(void)notifyObserver:(id)arg1 didChangeStateFrom:(unsigned long long)arg2 to:(unsigned long long)arg3 ;
-(void)homeAnnouncementObserver:(id)arg1 stateDidUpdateFrom:(unsigned long long)arg2 to:(unsigned long long)arg3 ;
-(void)homeAnnouncementObserver:(id)arg1 snapshotDidUpdateFrom:(id)arg2 to:(id)arg3 ;
-(void)sessionDidInvalidate:(id)arg1 ;
-(void)clockAlarmObserver:(id)arg1 snapshotDidUpdateFrom:(id)arg2 to:(id)arg3 ;
-(void)clockAlarmObserver:(id)arg1 alarmDidDismiss:(id)arg2 ;
-(void)clockAlarmObserver:(id)arg1 alarmDidFire:(id)arg2 ;
-(void)clockTimerObserver:(id)arg1 snapshotDidUpdateFrom:(id)arg2 to:(id)arg3 ;
-(void)clockTimerObserver:(id)arg1 timerDidDismiss:(id)arg2 ;
-(void)clockTimerObserver:(id)arg1 timerDidFire:(id)arg2 ;
-(void)getCurrentSessionUsingBlock:(/*^block*/id)arg1 ;
-(void)startWithModuleInstanceProvider:(id)arg1 platformDependencies:(id)arg2 ;
-(void)stopWithModuleInstanceProvider:(id)arg1 ;
-(void)speechSynthesizerDidBecomeBusy:(id)arg1 ;
-(void)speechSynthesizerDidBecomeIdle:(id)arg1 ;
-(void)speechSynthesizer:(id)arg1 willEnqueueRequest:(id)arg2 taskTracker:(id)arg3 ;
-(void)speechSynthesizer:(id)arg1 willStartRequest:(id)arg2 taskTracker:(id)arg3 ;
-(void)speechSynthesizer:(id)arg1 didStartRequest:(id)arg2 record:(id)arg3 taskTracker:(id)arg4 ;
-(void)speechSynthesizer:(id)arg1 didFinishRequest:(id)arg2 utteranceInfo:(id)arg3 record:(id)arg4 taskTracker:(id)arg5 ;
-(void)speechSynthesizer:(id)arg1 didCancelRequest:(id)arg2 taskTracker:(id)arg3 ;
-(void)speechSynthesizer:(id)arg1 didInterruptRequest:(id)arg2 taskTracker:(id)arg3 ;
-(void)speechSynthesizer:(id)arg1 didFailRequest:(id)arg2 taskTracker:(id)arg3 error:(id)arg4 ;
-(void)deviceWonMyriadElection;
-(void)deviceLostMyriadElection;
-(void)deactivateWithContext:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)initiateEmergency:(/*^block*/id)arg1 ;
-(void)addActivationListener:(id)arg1 ;
-(void)addAudioPowerUpdateListener:(id)arg1 ;
-(void)addActivityListener:(id)arg1 ;
-(void)_updateDeviceSetupContext:(id)arg1 ;
-(void)removeActivationListener:(id)arg1 ;
-(void)removeAudioPowerUpdateListener:(id)arg1 ;
-(void)removeActivityListener:(id)arg1 ;
-(void)fetchCurrentStateWithCompletion:(/*^block*/id)arg1 ;
-(void)fetchCurrentActivityStateWithCompletion:(/*^block*/id)arg1 ;
-(void)fetchCurrentAlarmAndTimerFiringContextWithCompletion:(/*^block*/id)arg1 ;
-(void)preheatWithActivationSource:(long long)arg1 ;
-(void)prewarmWithContext:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)activateWithContext:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)fetchCurrentAudioPowerWithType:(long long)arg1 completion:(/*^block*/id)arg2 ;
-(void)continuousVoiceTriggerDetectedWithCompletion:(/*^block*/id)arg1 ;
-(void)_preheatWithActivationSource:(long long)arg1 ;
-(void)_fetchCurrentStateWithCompletion:(/*^block*/id)arg1 ;
-(void)_fetchCurrentActivityStateWithCompletion:(/*^block*/id)arg1 ;
-(void)_fetchCurrentAudioPowerWithType:(long long)arg1 completion:(/*^block*/id)arg2 ;
-(id)_currentSession:(char)arg1 ;
-(void)_fetchStereoPartnerLastMyriadWinDate;
-(void)attachToTether;
-(void)_attachToTether;
-(void)_fetchExperimentContext;
-(void)_invalidateCurrentSession;
-(void)_handleDeviceProblemsStateChanged:(id)arg1 ;
-(void)_handleSession:(id)arg1 willChangeFromState:(long long)arg2 toState:(long long)arg3 ;
-(void)_handleSession:(id)arg1 didChangeFromState:(long long)arg2 toState:(long long)arg3 ;
-(void)_handleSession:(id)arg1 willBeginUpdateAudioPowerWithType:(long long)arg2 wrapper:(id)arg3 ;
-(void)_handleSession:(id)arg1 didEndUpdateAudioPowerWithType:(long long)arg2 ;
-(void)_handleSession:(id)arg1 willStartSoundWithID:(long long)arg2 ;
-(void)_handleSession:(id)arg1 didStartSoundWithID:(long long)arg2 ;
-(void)_handleSession:(id)arg1 didStopSoundWithID:(long long)arg2 error:(id)arg3 ;
-(void)_handleSession:(id)arg1 willBecomeActiveWithActivationContext:(id)arg2 activityUUID:(id)arg3 ;
-(void)_handleSession:(id)arg1 didBecomeActiveWithActivationContext:(id)arg2 activityUUID:(id)arg3 ;
-(void)_handleSession:(id)arg1 willResignActiveWithOptions:(unsigned long long)arg2 duration:(double)arg3 activityUUID:(id)arg4 ;
-(void)_handleSession:(id)arg1 didResignActiveWithDeactivationContext:(id)arg2 activityUUID:(id)arg3 ;
-(void)_handleSession:(id)arg1 willActivateWithContext:(id)arg2 ;
-(void)_handleSession:(id)arg1 didActivateWithContext:(id)arg2 ;
-(void)_handleSession:(id)arg1 didNotActivateWithContext:(id)arg2 error:(id)arg3 ;
-(void)_handleSession:(id)arg1 willDeactivateWithContext:(id)arg2 ;
-(void)_handleSession:(id)arg1 didDeactivateWithContext:(id)arg2 ;
-(void)_handleSession:(id)arg1 audioSessionWillBecomeActive:(char)arg2 activationContext:(id)arg3 deactivationContext:(id)arg4 ;
-(void)_handleSession:(id)arg1 audioSessionDidBecomeActive:(char)arg2 activationContext:(id)arg3 deactivationContext:(id)arg4 ;
-(void)_handleSessionDidInvalidate:(id)arg1 ;
-(void)_prewarmWithContext:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_handleSpeechSynthesizer:(id)arg1 willStartRequest:(id)arg2 taskTracker:(id)arg3 ;
-(void)_handleSpeechSynthesizer:(id)arg1 didStartRequest:(id)arg2 record:(id)arg3 taskTracker:(id)arg4 ;
-(void)_handleSpeechSynthesizer:(id)arg1 didFinishRequest:(id)arg2 utteranceInfo:(id)arg3 record:(id)arg4 taskTracker:(id)arg5 ;
-(void)_handleSpeechSynthesizer:(id)arg1 didCancelRequest:(id)arg2 taskTracker:(id)arg3 ;
-(void)_handleSpeechSynthesizer:(id)arg1 didInterruptRequest:(id)arg2 taskTracker:(id)arg3 ;
-(void)_handleSpeechSynthesizer:(id)arg1 didFailRequest:(id)arg2 taskTracker:(id)arg3 error:(id)arg4 ;
-(void)_handleNowPlayingObserver:(id)arg1 playbackStateDidChangeFrom:(long long)arg2 to:(long long)arg3 ;
-(void)_handleSystemVolumeDataSource:(id)arg1 didChangeVolumeForAudioCategory:(id)arg2 from:(float)arg3 toLevel:(float)arg4 ;
-(void)_handleClockAlarmsObserver:(id)arg1 snapshotDidUpdateFrom:(id)arg2 to:(id)arg3 ;
-(void)_handleClockTimersObserver:(id)arg1 snapshotDidUpdateFrom:(id)arg2 to:(id)arg3 ;
-(void)_handleHomeAnnouncementObserver:(id)arg1 stateDidUpdateFrom:(unsigned long long)arg2 to:(unsigned long long)arg3 ;
-(void)_processNextOperations;
-(void)updateDeviceSetupContext:(id)arg1 ;
-(void)_activateWithContext:(id)arg1 activityState:(long long)arg2 completion:(/*^block*/id)arg3 ;
-(void)_deactivateWithContext:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_handleFetchedExperimentContext:(id)arg1 ;
-(void)_handleMyriadForActivationContext:(id)arg1 ;
-(void)_handleFetchedStereoPartnerLastMyriadWinDate:(id)arg1 ;
-(void)unduckDevice;
-(void)session:(id)arg1 willChangeFromState:(long long)arg2 toState:(long long)arg3 ;
-(void)session:(id)arg1 didChangeFromState:(long long)arg2 toState:(long long)arg3 ;
-(void)session:(id)arg1 willBeginUpdateAudioPowerWithType:(long long)arg2 wrapper:(id)arg3 ;
-(void)session:(id)arg1 didEndUpdateAudioPowerWithType:(long long)arg2 ;
-(void)session:(id)arg1 willStartSoundWithID:(long long)arg2 ;
-(void)session:(id)arg1 didStartSoundWithID:(long long)arg2 ;
-(void)session:(id)arg1 didStopSoundWithID:(long long)arg2 error:(id)arg3 ;
-(void)session:(id)arg1 willBecomeActiveWithActivationContext:(id)arg2 activityUUID:(id)arg3 ;
-(void)session:(id)arg1 didBecomeActiveWithActivationContext:(id)arg2 activityUUID:(id)arg3 ;
-(void)session:(id)arg1 willResignActiveWithOptions:(unsigned long long)arg2 duration:(double)arg3 activityUUID:(id)arg4 ;
-(void)session:(id)arg1 didResignActiveWithDeactivationContext:(id)arg2 activityUUID:(id)arg3 ;
-(void)session:(id)arg1 willActivateWithContext:(id)arg2 ;
-(void)session:(id)arg1 didActivateWithContext:(id)arg2 ;
-(void)session:(id)arg1 didNotActivateWithContext:(id)arg2 error:(id)arg3 ;
-(void)session:(id)arg1 willDeactivateWithContext:(id)arg2 ;
-(void)session:(id)arg1 didDeactivateWithContext:(id)arg2 ;
-(void)session:(id)arg1 audioSessionWillBecomeActive:(char)arg2 activationContext:(id)arg3 deactivationContext:(id)arg4 ;
-(void)session:(id)arg1 audioSessionDidBecomeActive:(char)arg2 activationContext:(id)arg3 deactivationContext:(id)arg4 ;
-(void)systemVolumeDataSource:(id)arg1 didChangeVolumeForAudioCategory:(id)arg2 from:(float)arg3 toLevel:(float)arg4 ;
-(void)getAudioSessionProviderWithCompletion:(/*^block*/id)arg1 ;
-(void)_myriadStereoPartnerDataChanged;
-(void)_fetchStereoPairStateWithCompletion:(/*^block*/id)arg1 ;
@end

