/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:20 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/DTXConnectionServices.framework/Versions/A/DTXConnectionServices
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <DTXConnectionServices/DTXConnectionRemoteReceiveQueueCalls.h>
#import <DTXConnectionServices/DTXMessenger.h>

@protocol OS_dispatch_queue, OS_dispatch_semaphore, DTXRateLimiter, DTXBlockCompressor;
@class NSString, NSObject, DTXTransport, NSSet, NSMutableDictionary, NSMutableArray, NSDictionary, DTXResourceTracker, DTXMessageParser, DTXMessageTransmitter, DTXChannel;

@interface DTXConnection : NSObject <DTXConnectionRemoteReceiveQueueCalls, DTXMessenger> {

	NSString* _label;
	NSObject*<OS_dispatch_queue> _outgoing_message_queue;
	NSObject*<OS_dispatch_queue> _outgoing_control_queue;
	DTXTransport* _controlTransport;
	NSSet* _permittedBlockCompressors;
	NSObject*<OS_dispatch_queue> _receive_queue;
	NSObject*<OS_dispatch_queue> _handler_queue;
	unsigned _nextChannelCode;
	NSMutableDictionary* _channelsByCode;
	NSMutableDictionary* _unconfiguredChannelsByCode;
	NSMutableDictionary* _handlersByIdentifier;
	NSMutableArray* _protocolHandlers;
	NSMutableDictionary* _localCapabilityVersions;
	NSMutableDictionary* _localCapabilityClasses;
	NSDictionary* _remoteCapabilityVersions;
	NSMutableArray* _capabilityOverrideBlocks;
	DTXResourceTracker* _resourceTracker;
	DTXResourceTracker* _incomingResourceTracker;
	NSObject*<OS_dispatch_semaphore> _firstMessageSem;
	DTXMessageParser* _incomingParser;
	DTXMessageTransmitter* _outgoingTransmitter;
	DTXChannel* _defaultChannel;
	char _tracer;
	char _remoteTracer;
	int _connectionIndex;
	/*^block*/id _channelHandler;
	id<DTXRateLimiter> _defaultRateLimiter;
	unsigned long long _logMessageCallstackSizeThreshold;
	int _remoteCompressionCapabilityVersion;
	int _newChannelCompressionHint;
	int _compressionTypeForUnspecified;
	unsigned long long _compressionMinSizeThreshold;
	id<DTXBlockCompressor> _compressor;

}

@property (nonatomic,retain,readonly) DTXChannel * defaultChannel; 
@property (nonatomic,readonly) int atomicConnectionNumber;                       //@synthesize connectionIndex=_connectionIndex - In the implementation block
@property (assign,nonatomic) char tracer;                                        //@synthesize tracer=_tracer - In the implementation block
@property (assign,nonatomic) char remoteTracer;                                  //@synthesize remoteTracer=_remoteTracer - In the implementation block
@property (assign,nonatomic) unsigned long long maximumEnqueueSize; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,copy) NSString * label;                                     //@synthesize label=_label - In the implementation block
+(void)initialize;
+(void)registerTransport:(Class)arg1 forScheme:(id)arg2 ;
+(id)connectionToAddress:(id)arg1 ;
+(void)observeDecompressionExceptionLogging:(/*^block*/id)arg1 ;
-(void)dealloc;
-(NSString *)description;
-(void)resume;
-(NSString *)label;
-(void)setLabel:(NSString *)arg1 ;
-(void)cancel;
-(void)suspend;
-(void)setMessageHandler:(/*^block*/id)arg1 ;
-(void)setDispatchTarget:(id)arg1 ;
-(void)sendControlAsync:(id)arg1 replyHandler:(/*^block*/id)arg2 ;
-(void)_receiveQueueSetCompressionHint:(unsigned)arg1 onChannel:(id)arg2 ;
-(void)_notifyCompressionHint:(unsigned)arg1 forChannelCode:(unsigned)arg2 ;
-(char)sendMessage:(id)arg1 fromChannel:(id)arg2 sendMode:(int)arg3 syncWithReply:(char)arg4 replyHandler:(/*^block*/id)arg5 ;
-(id)initWithTransport:(id)arg1 ;
-(void)_routeMessage:(id)arg1 ;
-(void)_handleMessageParseException:(id)arg1 forChannelCode:(unsigned)arg2 messageID:(unsigned)arg3 fragmentCount:(unsigned)arg4 withPayloadBytes:(const void*)arg5 ofLength:(unsigned long long)arg6 ;
-(void)_setupWireProtocols;
-(char)publishCapability:(id)arg1 withVersion:(int)arg2 forClass:(Class)arg3 error:(id*)arg4 ;
-(int)atomicConnectionNumber;
-(id)_sendHeartbeatAsyncWithTimeout:(double)arg1 ;
-(void)_handleMissingRemoteCapabilities;
-(void)_notifyOfPublishedCapabilities:(id)arg1 ;
-(void)registerDisconnectHandler:(/*^block*/id)arg1 ;
-(void)_cancelInternal:(/*^block*/id)arg1 ;
-(void)_scheduleMessage:(id)arg1 toChannel:(id)arg2 ;
-(void)sendControlSync:(id)arg1 replyHandler:(/*^block*/id)arg2 ;
-(char)sendMessageAsync:(id)arg1 replyHandler:(/*^block*/id)arg2 ;
-(void)sendMessage:(id)arg1 replyHandler:(/*^block*/id)arg2 ;
-(void)sendMessageSync:(id)arg1 replyHandler:(/*^block*/id)arg2 ;
-(char)_addHandler:(/*^block*/id)arg1 forMessage:(unsigned)arg2 channel:(id)arg3 ;
-(void)_requestChannelWithCode:(unsigned)arg1 identifier:(id)arg2 ;
-(void)_setTracerState:(unsigned)arg1 ;
-(void)_channelCanceled:(unsigned)arg1 ;
-(void)publishServicesInImagePath:(id)arg1 ;
-(void)setCompressionHint:(int)arg1 forChannel:(id)arg2 ;
-(id)publishedAddresses;
-(void)setMaximumEnqueueSize:(unsigned long long)arg1 ;
-(unsigned long long)maximumEnqueueSize;
-(void)publishCapability:(id)arg1 withVersion:(int)arg2 forClass:(Class)arg3 ;
-(id)localCapabilities;
-(double)preflightSynchronouslyWithTimeout:(double)arg1 ;
-(int)remoteCapabilityVersion:(id)arg1 ;
-(void)registerCapabilityOverrideBlock:(/*^block*/id)arg1 ;
-(id)remoteCapabilityVersions;
-(void)throttleBandwidthBytesPerSecond:(unsigned long long)arg1 ;
-(void)setChannelHandler:(/*^block*/id)arg1 ;
-(void)cancelWithSerializedTransport:(/*^block*/id)arg1 ;
-(id)makeChannelWithIdentifier:(id)arg1 ;
-(void)setRemoteTracer:(char)arg1 ;
-(void)_unregisterChannel:(id)arg1 ;
-(void)setTracer:(char)arg1 ;
-(char)tracer;
-(char)remoteTracer;
-(void)_handleProxyRequestForInterface:(id)arg1 interfaceName:(id)arg2 peerInterface:(id)arg3 peerInterfaceName:(id)arg4 handler:(/*^block*/id)arg5 ;
-(id)_makeProxyChannelWithRemoteInterface:(id)arg1 remoteInterfaceName:(id)arg2 exportedInterface:(id)arg3 exportedInterfaceName:(id)arg4 ;
-(void)handleProxyRequestForInterface:(id)arg1 peerInterface:(id)arg2 handler:(/*^block*/id)arg3 ;
-(void)handleProxyRequestForInterface:(id)arg1 interfaceName:(id)arg2 peerInterface:(id)arg3 peerInterfaceName:(id)arg4 handler:(/*^block*/id)arg5 ;
-(id)makeProxyChannelWithRemoteInterface:(id)arg1 exportedInterface:(id)arg2 ;
-(id)makeProxyChannelWithRemoteInterface:(id)arg1 remoteInterfaceName:(id)arg2 exportedInterface:(id)arg3 exportedInterfaceName:(id)arg4 ;
-(id)_testing_remoteCapabilityVersions;
-(void)overridePermittedBlockCompressors:(id)arg1 ;
-(void)replaceCompressorForCompression:(id)arg1 ;
-(void)replaceCompressorForDecompression:(id)arg1 ;
-(DTXChannel *)defaultChannel;
@end

