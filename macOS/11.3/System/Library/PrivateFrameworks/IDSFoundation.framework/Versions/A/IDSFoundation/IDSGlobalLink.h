/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:10 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/IDSFoundation.framework/Versions/A/IDSFoundation
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <IDSFoundation/IDSFoundation-Structs.h>
#import <IDSFoundation/IDSLink.h>
#import <IDSFoundation/IDSLinkDelegate.h>
#import <IDSFoundation/IDSStunCandidatePairDelegate.h>

@protocol IDSLinkDelegate, OS_dispatch_source;
@class NSString, IDSUDPLink, IDSTCPLink, NSMutableDictionary, NSObject, NSMutableArray, NSData, IDSGlobalLinkBlocks;

@interface IDSGlobalLink : NSObject <IDSLink, IDSLinkDelegate, IDSStunCandidatePairDelegate> {

	IDSUDPLink* _udpLink;
	IDSUDPLink* _udpLinkv6;
	IDSTCPLink* _tcpLink;
	IDSTCPLink* _tcpSSLLink;
	unsigned short _startPort;
	int _portRange;
	id<IDSLinkDelegate> _delegate;
	id<IDSLinkDelegate> _alternateDelegate;
	/*^block*/id _connectReadyHandler;
	/*^block*/id _disconnectCompletionHandler;
	long long _clientType;
	char _allowOnlyOneQR;
	char _allowP2P;
	char _disallowWiFi;
	char _disallowCellular;
	char _preferCellularForCallSetup;
	char _allowConcurrentQRSetup;
	tagIDSQRSendInfoListRef _sendInfoList;
	char _linkIDCounter;
	double _natMappingTimeout;
	double _inviteSentTime;
	double _inviteRecvTime;
	unsigned _acceptDelayU32;
	double _allocbindStartTime;
	double _allocbindEndTime;
	double _linkConnectTime;
	double _firstClientPacketTime;
	double _firstDataReceivedTime;
	char _reportClientPacketTime;
	char _reportDataReceivedTime;
	IDSNAT64PrefixCache_Ref _nat64PrefixCache;
	NSMutableDictionary* _tokenToCandidatePairs;
	NSMutableDictionary* _linkIDToCandidatePairs;
	NSMutableDictionary* _channelToCandidatePairs;
	NSMutableDictionary* _startTimeToStunReqID;
	NSMutableDictionary* _tokenToStunReqID;
	IDSSimpleUInt16List* _channelNumberList;
	IDSSimpleUInt16List* _reallocChannelList;
	NSMutableDictionary* _tokenToReallocBlocks;
	NSMutableDictionary* _reallocNewCandidatePairToOldCandidatePair;
	NSMutableDictionary* _unallocbindRequestToReason;
	NSObject*<OS_dispatch_source> _disconnectTimer;
	NSObject*<OS_dispatch_source> _activityTimer;
	NSMutableDictionary* _tokenToReorderedPackets;
	NSMutableDictionary* _tokenToRequestTimeStampAndRTT;
	NSMutableDictionary* _tokenToHBCounter;
	NSMutableArray* _connectedLinkIDs;
	NSMutableArray* _activeProbingLinkIDs;
	NSMutableDictionary* _connectingCandidatePairSessionInfo;
	NSMutableArray* _interfaceAddressArray;
	char _isInitiator;
	int _nominateCount;
	NSMutableArray* _localCandidateList;
	NSMutableArray* _remoteCandidateList;
	NSMutableDictionary* _tokenToStunCheckPairs;
	char _enableSKE;
	NSData* _skeData;
	char _recvRemoteSKEData;
	char _delaySessionConnected;
	char _skeToRemoteComplete;
	double _skeStartTime;
	NSString* _acceptedRelaySessionID;
	NSMutableArray* _nonAcceptedQRSessions;
	char _isSessionAcceptedWithNoCandidatePair;
	long long _remoteCapabilityFlag;
	char _delayedConnData;
	int _localConnDataCounter;
	int _remoteConnDataCounter;
	NSMutableArray* _delayedCellInterfaces;
	char _hasPendingAllocation;
	NSMutableArray* _targetedAllocations;
	char _useSecureControlMessage;
	NSData* _controlMessageKey;
	char _basebandPacketLinkID;
	unsigned short _basebandPacketChannelNumber;
	IDSGlobalLinkBlocks* _qraBlocks;
	NSMutableArray* _allocateTimeReportBlocks;
	char _hasPendingSelfAllocation;
	NSMutableArray* _selfAllocateRequestIDs;
	NSString* _cbuuid;
	NSString* _deviceUniqueID;
	unsigned long long _headerOverhead;
	unsigned long long _state;
	unsigned char _clientUUID[16];
	NSString* _idsSessionID;
	unsigned long long _totalBytesSent;
	unsigned long long _totalPacketsSent;
	unsigned long long _totalBytesReceived;
	unsigned long long _totalPacketsReceived;
	unsigned long long _previousBytesSent;
	unsigned long long _previousPacketsSent;
	unsigned long long _previousBytesReceived;
	unsigned long long _previousPacketsReceived;
	double _previousReportTime;
	double _calleeAcceptTime;
	char _isSecondOrLaterParticipant;
	unsigned _probingTimeout;
	os_unfair_lock_s _lock;
	short _remoteGlobalLinkVersion;
	char _reduceCellularUsage;
	char _reduceRelayLinkCreation;
	char _shouldProcessBasebandNotification;
	char _supportChannelData;
	char _islocalCellAttributeInexpensive;
	char _receivedAllocbindResponse;
	NSMutableDictionary* _retryCountPerLinkType;
	unsigned _remoteDeviceVersion;
	long long _delayFirstConnectionData;

}

@property (retain) NSString * cbuuid;                                              //@synthesize cbuuid=_cbuuid - In the implementation block
@property (retain) NSString * deviceUniqueID;                                      //@synthesize deviceUniqueID=_deviceUniqueID - In the implementation block
@property (getter=linkTypeString,readonly) NSString * linkTypeString; 
@property (readonly) unsigned long long state;                                     //@synthesize state=_state - In the implementation block
@property (readonly) unsigned long long headerOverhead;                            //@synthesize headerOverhead=_headerOverhead - In the implementation block
@property (__weak) id<IDSLinkDelegate> delegate;                                   //@synthesize delegate=_delegate - In the implementation block
@property (__weak) id<IDSLinkDelegate> alternateDelegate;                          //@synthesize alternateDelegate=_alternateDelegate - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(Class)getGLClassWithOptions:(id)arg1 ;
-(void)dealloc;
-(void)invalidate;
-(id<IDSLinkDelegate>)delegate;
-(void)setDelegate:(id<IDSLinkDelegate>)arg1 ;
-(unsigned long long)state;
-(NSString *)cbuuid;
-(void)startWithOptions:(id)arg1 ;
-(void)disconnectWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)_sendSessionDisconnectedCommand;
-(void)_startDisconnectTimer;
-(void)_sendSKEDataWithSelectedCandidatePair;
-(void)_sendSKEDataToSucceededCandidatePairs;
-(void)_nominateCandidatePair:(id)arg1 ;
-(char)_setupNewQRLinkIfNecessary:(id)arg1 ;
-(void)_requestNewTwoWayQRAllocation:(id)arg1 ;
-(char)_postProcessAllocbindResponse:(id)arg1 candidatePair:(id)arg2 candidatePairToken:(id)arg3 ;
-(void)setHasPendingAllocation:(char)arg1 ;
-(void)sendSKEData:(id)arg1 ;
-(void)setDefaultUnderlyingLink:(char)arg1 ;
-(void)_resetRetryCountForCandidatePair:(id)arg1 ;
-(void)sendProbingRequestWithoptions:(id)arg1 candidatePairToken:(id)arg2 ;
-(void)disconnectCandidatePair:(id)arg1 ;
-(void)sendAllocbindRequest:(id)arg1 isRealloc:(char)arg2 inResponseToNoSessionState:(char)arg3 ;
-(void)candidatePair:(id)arg1 didReceiveStunErrorResponse:(long long)arg2 errorCode:(unsigned short)arg3 ;
-(void)candidatePair:(id)arg1 didReceiveSessionInfo:(id)arg2 success:(char)arg3 ;
-(void)candidatePair:(id)arg1 didAddQREvent:(id)arg2 ;
-(id)initWithDeviceUniqueID:(id)arg1 cbuuid:(id)arg2 ;
-(void)_stopAllocbindFailoverTimer:(id)arg1 ;
-(void)_stopDisconnectTimer;
-(void)_stopActivityTimer;
-(void)setRemoteDeviceVersion:(unsigned)arg1 ;
-(id)_createInterfaceAddressArray:(unsigned long long)arg1 wantsWiFi:(char)arg2 wantsCellular:(char)arg3 ;
-(id)_delayProcessingCellularInterfaces:(id)arg1 ;
-(void)_getNAT64PrefixForInterface:(int)arg1 interfaceName:(id)arg2 completionBlock:(/*^block*/id)arg3 ;
-(void)_updateInterfaceAddressesWithAddList:(id)arg1 removeList:(id)arg2 ;
-(void)_parseClientUUID:(id)arg1 ;
-(id)_addSocketAndInterfaceAddress:(unsigned long long)arg1 wantsWiFi:(char)arg2 wantsCellular:(char)arg3 ;
-(void)_connectWithSessionInfo:(id)arg1 interfaceAddress:(id)arg2 joinSession:(char)arg3 allocbindFailover:(char)arg4 completionHandler:(/*^block*/id)arg5 withLocalInterfacePreference:(int)arg6 ;
-(char)_hasCandidatePairInState:(unsigned long long)arg1 anotherState:(unsigned long long)arg2 relayCandidatePairsOnly:(char)arg3 excludeSelfAlloc:(char)arg4 ;
-(void)connectWithSessionInfo:(id)arg1 interfaceAddress:(id)arg2 joinSession:(char)arg3 completionHandler:(/*^block*/id)arg4 withLocalInterfacePreference:(int)arg5 ;
-(unsigned)_getExternalIPAddressRAT:(id)arg1 ;
-(void)_addQRAAWDBlock:(id)arg1 allocateRequestTime:(double)arg2 inferredExternalRAT:(unsigned)arg3 stunTransport:(long long)arg4 relayProviderType:(long long)arg5 idsSessionID:(id)arg6 reportingDataBlob:(id)arg7 isInitiator:(char)arg8 ;
-(void)_sendAllocbindRequestForExtIP:(id)arg1 startTime:(double)arg2 ;
-(void)_discardSelfAllocateCandidatePairs;
-(char)_isAcceptedRelaySessionForAllocationRequestID:(id)arg1 acceptedRelaySessionID:(id)arg2 ;
-(char)_synthesizeNAT64ForAddress:(sockaddr*)arg1 withPrefix:(SCD_Struct_ID12*)arg2 toAddress:(sockaddr*)arg3 ;
-(long long)_sendStunMessage:(id)arg1 sourceIfIndex:(int)arg2 source:(sockaddr*)arg3 destination:(sockaddr*)arg4 stunTransport:(long long)arg5 token:(id)arg6 ;
-(char)_addCandidate:(id)arg1 isRemoteCandidate:(char)arg2 ;
-(void)_sendAllocbindRequest:(id)arg1 stunMessage:(id)arg2 isRealloc:(char)arg3 inResponseToNoSessionState:(char)arg4 ;
-(void)_reportAWDAllocateTime;
-(void)_discardCandidatePairsWithOption:(char)arg1 ;
-(void)_removePacketNotificationFilter;
-(char)_hasCandidatePairInState:(unsigned long long)arg1 relayCandidatePairsOnly:(char)arg2 excludeSelfAlloc:(char)arg3 ;
-(void)_sendUnallocbindRequest:(id)arg1 stunMessage:(id)arg2 reason:(unsigned char)arg3 ;
-(void)_notifyCandidatePairDisconnected:(id)arg1 withReason:(unsigned char)arg2 ;
-(void)_notifyLinkDisconnectedWithError:(long long)arg1 reason:(unsigned char)arg2 ;
-(id)_getCandidatePairsWithSessionID:(id)arg1 inState:(unsigned long long)arg2 ;
-(void)_sendCommandMessage:(long long)arg1 stunMessage:(id)arg2 options:(id)arg3 candidatePairToken:(id)arg4 ;
-(int)_getExpensiveLinkFlags:(char)arg1 candidatePair:(id)arg2 ;
-(char)_isInterfaceConstrainedWithInterfaceIndex:(unsigned)arg1 ;
-(char)_isInterfaceDelegatedWithInterfaceIndex:(unsigned)arg1 ;
-(void)_notifyDefaultUnderlyingLinkChanged:(id)arg1 error:(long long)arg2 ;
-(void)_sendConnectionDataWithRemovedAddressList:(id)arg1 ;
-(void)_callDisconnectCompletionHandler:(id)arg1 ;
-(char)_isExtIPDiscoveryDone;
-(void)_updateDefaultCandidatePair:(id)arg1 ;
-(id)_getAllocbindReportingDataBlob:(id)arg1 ;
-(void)_setChannelToCandidatePair:(id)arg1 localAddress:(sockaddr*)arg2 remoteAddress:(sockaddr*)arg3 channelNumber:(unsigned short)arg4 ;
-(void)_setFirstDefaultCandidatePair:(id)arg1 ;
-(void)_processXORMappedAddress:(id)arg1 arrivalTime:(double)arg2 ;
-(double)_startTimeForStunRequest:(id)arg1 ;
-(char)_processIncomingIndicationData:(char*)arg1 length:(int)arg2 candidatePairToken:(id)arg3 arrivalTime:(double)arg4 ;
-(long long)_getQRAllocateType;
-(char)_processBindingRequest:(id)arg1 fromDevice:(id)arg2 localIfIndex:(unsigned)arg3 localAddress:(sockaddr*)arg4 remmoteAddress:(sockaddr*)arg5 candidatePairToken:(id)arg6 arrivalTime:(double)arg7 ;
-(char)_processBindingResponse:(id)arg1 fromDevice:(id)arg2 localIfIndex:(unsigned)arg3 localAddress:(sockaddr*)arg4 remmoteAddress:(sockaddr*)arg5 candidatePairToken:(id)arg6 arrivalTime:(double)arg7 ;
-(char)_processAllocbindResponse:(id)arg1 fromDevice:(id)arg2 localIfIndex:(unsigned)arg3 localAddress:(sockaddr*)arg4 remmoteAddress:(sockaddr*)arg5 candidatePairToken:(id)arg6 arrivalTime:(double)arg7 ;
-(char)_processUnallocbindResponse:(id)arg1 fromDevice:(id)arg2 localIfIndex:(unsigned)arg3 localAddress:(sockaddr*)arg4 remmoteAddress:(sockaddr*)arg5 candidatePairToken:(id)arg6 arrivalTime:(double)arg7 ;
-(char)_processReallocIndication:(id)arg1 fromDevice:(id)arg2 localIfIndex:(unsigned)arg3 localAddress:(sockaddr*)arg4 remoteAddress:(sockaddr*)arg5 candidatePairToken:(id)arg6 arrivalTime:(double)arg7 ;
-(char)_processDataIndication:(id)arg1 fromDevice:(id)arg2 localIfIndex:(unsigned)arg3 localAddress:(sockaddr*)arg4 remoteAddress:(sockaddr*)arg5 candidatePairToken:(id)arg6 arrivalTime:(double)arg7 ;
-(char)_processGoAwayIndication:(id)arg1 fromDevice:(id)arg2 localIfIndex:(unsigned)arg3 localAddress:(sockaddr*)arg4 remoteAddress:(sockaddr*)arg5 candidatePairToken:(id)arg6 arrivalTime:(double)arg7 ;
-(void)_removeStunRequest:(id)arg1 ;
-(void)_notifyCandidatePairConnected:(id)arg1 ;
-(void)_processDataOnReallocChannel:(unsigned short)arg1 localAddress:(sockaddr*)arg2 remoteAddress:(sockaddr*)arg3 ;
-(id)_getLink:(int)arg1 stunTransport:(long long)arg2 ;
-(unsigned long long)headerOverhead;
-(unsigned long long)sendPacketBuffer:(SCD_Struct_ID8*)arg1 toDeviceUniqueID:(id)arg2 cbuuid:(id)arg3 ;
-(void)_updateSendStatsWithResult:(unsigned long long)arg1 bytesSent:(long long)arg2 packetsSent:(int)arg3 linkID:(char)arg4 token:(id)arg5 useRelay:(char)arg6 isClientData:(char)arg7 sendTime:(double)arg8 stunTransport:(long long)arg9 ;
-(void)_saveStunRequest:(id)arg1 startTime:(double)arg2 token:(id)arg3 ;
-(char)_hasConnectingRelayCandidatePair;
-(void)_startAllocbindFailoverTimerOnCandidatePair:(id)arg1 ;
-(char)_isInterfaceExpensiveWithInterfaceIndex:(unsigned)arg1 ;
-(char)_skipCommandMessage:(long long)arg1 candidatePair:(id)arg2 timeNow:(double)arg3 ;
-(char)_shouldSkipCommand:(long long)arg1 withCandidatePair:(id)arg2 connectionDataCounter:(int)arg3 ;
-(id)_createCommandData:(long long)arg1 options:(id)arg2 candidatePair:(id)arg3 ;
-(void)_processCommandConnected:(id)arg1 candidatePairToken:(id)arg2 ;
-(void)_processCommandDisconnected:(id)arg1 candidatePairToken:(id)arg2 ;
-(void)_processCommandHeartbeat:(id)arg1 candidatePairToken:(id)arg2 arrivalTime:(double)arg3 ;
-(void)_processCommandConnectionData:(id)arg1 candidatePairToken:(id)arg2 ;
-(void)_processCommandNominate:(id)arg1 candidatePairToken:(id)arg2 ;
-(void)link:(id)arg1 didConnectForDeviceUniqueID:(id)arg2 cbuuid:(id)arg3 ;
-(void)_discardNonAcceptedCandidatePairs;
-(void)_startActivityTimer;
-(void)_startExtIPDiscovery;
-(void)_selectBetterDefaultCandidatePair:(id)arg1 ;
-(void)_convergeSharedSessions:(id)arg1 ;
-(void)_setRemoteGlobalLinkVersionWithCommand:(long long)arg1 receivedRemoteVersion:(char)arg2 versionValue:(unsigned short)arg3 receivedSKE:(char)arg4 ;
-(void)_notifyQRSessionConnected:(id)arg1 ;
-(void)_discardAllCandidatePairs;
-(void)_processRemoteCandidates:(id)arg1 ;
-(void)_setupRelayConnectionForNetworkAddressChanges;
-(void)_updateNominatedCandidatePair:(id)arg1 ;
-(void)_sendNowConnectionDataWithRemovedAddressList:(id)arg1 ;
-(void)_handleDisconnectTimer;
-(void)_startHB:(id)arg1 ;
-(void)_handleNoRemotePacket;
-(void)_handleActivityTimer;
-(void)_startStunCheck:(id)arg1 ;
-(void)_addStunCheckPair:(id)arg1 isRemoteCandidate:(char)arg2 excludeLocalAddress:(sockaddr*)arg3 ;
-(void)_handleAllocbindFailoverTimer:(id)arg1 failoverTimerOnCandidatePair:(id)arg2 onInterface:(int)arg3 ;
-(void)_addStunCheckPair:(id)arg1 isRemoteCandidate:(char)arg2 ;
-(char)_IsExtIPDiscoveryNeeded:(sockaddr*)arg1 candidatePairList:(id)arg2 ;
-(void)_handleSelfAllocationTimeout:(id)arg1 ;
-(char)_requestSelfAllocationForInterfaceAddress:(id)arg1 ;
-(void)_processNewRemoteCandidates:(id)arg1 ;
-(void)_processRemovedRemoteCandidates:(id)arg1 ;
-(void)_sendBindingRequest:(id)arg1 stunMessage:(id)arg2 ;
-(char)_isCellularInterfaceForCandidatePair:(id)arg1 localAddress:(sockaddr*)arg2 ;
-(void)_processRemoteLinkUUID:(id)arg1 candidatePair:(id)arg2 ;
-(char)_hasActiveAllocbindFailoverTimerForSessionID:(id)arg1 ;
-(void)_processNewLocalAddressList:(id)arg1 ;
-(char)_processRemovedLocalAddressList:(id)arg1 ;
-(void)_handleNewRATChange;
-(void)_processDelayedCellularInterfaces;
-(unsigned long long)defaultLinkType;
-(void)_reportSessionSetupTime;
-(char)_getPacketBufferSendInfo:(SCD_Struct_ID8*)arg1 channelNumber:(unsigned short*)arg2 transport:(long long*)arg3 ;
-(unsigned long long)sendPacketBufferArray:(/*function pointer*/void**)arg1 arraySize:(int)arg2 toDeviceUniqueID:(id)arg3 cbuuid:(id)arg4 ;
-(void)_requestNonUDPRelayAllocation:(long long)arg1 relaySessionID:(id)arg2 ;
-(void)currentCellularSignalStrength:(int*)arg1 signalStrength:(int*)arg2 signalGrade:(int*)arg3 ;
-(void)setWiFiAssistState:(char)arg1 ;
-(char)_getSessionParticipants:(id)arg1 relaySessionID:(id)arg2 options:(id)arg3 ;
-(char)_getSessionStreamInfo:(id)arg1 relaySessionID:(id)arg2 options:(id)arg3 ;
-(void)_notifySessionInfoReceived:(id)arg1 relayGroupID:(id)arg2 relaySessionID:(id)arg3 success:(char)arg4 ;
-(void)_processReallocChannelData:(SCD_Struct_ID8*)arg1 channelNumber:(unsigned short)arg2 fromDeviceUniqueID:(id)arg3 cbuuid:(id)arg4 arrivalTime:(double)arg5 ;
-(char)_processStunPacket:(SCD_Struct_ID8*)arg1 fromDeviceUniqueID:(id)arg2 cbuuid:(id)arg3 arrivalTime:(double)arg4 headerOverhead:(unsigned long long)arg5 ;
-(char)link:(id)arg1 didReceivePacket:(SCD_Struct_ID8*)arg2 fromDeviceUniqueID:(id)arg3 cbuuid:(id)arg4 ;
-(char)_qrLinkLimitExceededWithNewLinkType:(unsigned char)arg1 cellularRelayLinkCount:(unsigned short)arg2 wifiRelayLinkCount:(unsigned short)arg3 ;
-(unsigned char)_getNewLinkType:(id)arg1 remoteInterface:(int*)arg2 ;
-(id)_findCandidatePairWithRelaySessionID:(id)arg1 ;
-(void)_removeChannelFromChannelToCandidatePair:(id)arg1 ;
-(void)_handleRemapping:(id)arg1 ;
-(id)generateLinkReport:(double)arg1 isCurrentLink:(char)arg2 ;
-(id)copyLinkStatsDict;
-(void)setCbuuid:(NSString *)arg1 ;
-(NSString *)deviceUniqueID;
-(void)setDeviceUniqueID:(NSString *)arg1 ;
-(NSString *)linkTypeString;
-(id<IDSLinkDelegate>)alternateDelegate;
-(void)setAlternateDelegate:(id<IDSLinkDelegate>)arg1 ;
-(void)link:(id)arg1 didDisconnectForDeviceUniqueID:(id)arg2 cbuuid:(id)arg3 ;
-(char)hasReachableInterface:(unsigned long long)arg1 ;
-(void)_setDefaultCandidatePairForNonFT;
-(void)handleNetworkAddressChanges:(char)arg1 hasIPv6AddressChange:(char)arg2 ;
-(void)handleCellularRATChange;
-(char)remoteHostAwake;
-(void)setAcceptedRelaySession:(id)arg1 options:(id)arg2 ;
-(void)setPacketNotificationFilter:(char)arg1 uniqueTag:(unsigned)arg2 isEnabled:(char)arg3 ;
-(void)dropIPPackets:(char)arg1 payloadArray:(id)arg2 ;
-(void)updateProtocolQualityOfService:(char)arg1 isGood:(char)arg2 ;
-(void)stopKeepAlive:(id)arg1 ;
-(void)startLinkProbing:(id)arg1 ;
-(void)stopLinkProbing:(id)arg1 ;
-(void)queryLinkProbingStatus:(id)arg1 ;
-(void)flushLinkProbingStatus:(id)arg1 ;
-(void)getSessionInfo:(id)arg1 relaySessionID:(id)arg2 requestType:(long long)arg3 options:(id)arg4 ;
-(void)updateSessionParticipants:(id)arg1 relaySessionID:(id)arg2 participants:(id)arg3 ;
@end

