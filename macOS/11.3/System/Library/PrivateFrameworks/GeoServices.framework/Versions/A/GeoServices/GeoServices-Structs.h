/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:15 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/GeoServices.framework/Versions/A/GeoServices
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct {
	int( field1;
	/*function pointer*/void* field2;
	= field3;
	int field4;
	int field5;
	int) field6;
} SCD_Struct_GE0;

typedef struct {
	double field1;
	double field2;
} SCD_Struct_GE1;

typedef struct _NSZone* NSZoneRef;

typedef struct {
	int field1;
	int field2;
	int field3;
} SCD_Struct_GE3;

typedef struct {
	int field1;
	union field2;
} SCD_Struct_GE4;

typedef struct os_unfair_lock_s {
	unsigned _os_unfair_lock_opaque;
} os_unfair_lock_s;

typedef struct GEOOnce_s {
	os_unfair_lock_s lock;
	char didRun;
} GEOOnce_s;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *>>;

typedef struct _compressed_pair<unsigned long, std::__1::hash<geo::TransitEdgePiece>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::hash<geo::TransitEdgePiece>>;

typedef struct _compressed_pair<float, std::__1::equal_to<geo::TransitEdgePiece>> {
	float __value_;
} compressed_pair<float, std::__1::equal_to<geo::TransitEdgePiece>>;

typedef struct _hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> {
	__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *>, std::__1::allocator<std::__1::__hash_node<geo::TransitEdgePiece, void *>>> {
	hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *>, std::__1::allocator<std::__1::__hash_node<geo::TransitEdgePiece, void *>>>;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *>> {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *>> __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *>>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *>>> {
	__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *>> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *>>>;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *>>> {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *>>> __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *>>>;

typedef struct _hash_table<geo::TransitEdgePiece, std::__1::hash<geo::TransitEdgePiece>, std::__1::equal_to<geo::TransitEdgePiece>, std::__1::allocator<geo::TransitEdgePiece>> {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *> *>>> __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<geo::TransitEdgePiece, void *> *>, std::__1::allocator<std::__1::__hash_node<geo::TransitEdgePiece, void *>>> __p1_;
	compressed_pair<unsigned long, std::__1::hash<geo::TransitEdgePiece>> __p2_;
	compressed_pair<float, std::__1::equal_to<geo::TransitEdgePiece>> __p3_;
} hash_table<geo::TransitEdgePiece, std::__1::hash<geo::TransitEdgePiece>, std::__1::equal_to<geo::TransitEdgePiece>, std::__1::allocator<geo::TransitEdgePiece>>;

typedef struct unordered_set<geo::TransitEdgePiece, std::__1::hash<geo::TransitEdgePiece>, std::__1::equal_to<geo::TransitEdgePiece>, std::__1::allocator<geo::TransitEdgePiece>> {
	hash_table<geo::TransitEdgePiece, std::__1::hash<geo::TransitEdgePiece>, std::__1::equal_to<geo::TransitEdgePiece>, std::__1::allocator<geo::TransitEdgePiece>> __table_;
} unordered_set<geo::TransitEdgePiece, std::__1::hash<geo::TransitEdgePiece>, std::__1::equal_to<geo::TransitEdgePiece>, std::__1::allocator<geo::TransitEdgePiece>>;

typedef struct {
	unsigned list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_GE17;

typedef struct GEOCoarseLocationLatLng {
	double _lat;
	double _lng;
} GEOCoarseLocationLatLng;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<LoadItem, void *>>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<LoadItem, void *>>>;

typedef struct _list_node_base<LoadItem, void *> {
	__list_node_base<LoadItem, void *> __prev_;
	__list_node_base<LoadItem, void *> __next_;
} list_node_base<LoadItem, void *>;

typedef struct list<LoadItem, std::__1::allocator<LoadItem>> {
	list_node_base<LoadItem, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<LoadItem, void *>>> __size_alloc_;
} list<LoadItem, std::__1::allocator<LoadItem>>;

typedef struct _compressed_pair<geo::DispatchTimer *, std::__1::default_delete<geo::DispatchTimer>> {
	DispatchTimer __value_;
} compressed_pair<geo::DispatchTimer *, std::__1::default_delete<geo::DispatchTimer>>;

typedef struct unique_ptr<geo::DispatchTimer, std::__1::default_delete<geo::DispatchTimer>> {
	compressed_pair<geo::DispatchTimer *, std::__1::default_delete<geo::DispatchTimer>> __ptr_;
} unique_ptr<geo::DispatchTimer, std::__1::default_delete<geo::DispatchTimer>>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<_CacheRequester<void ()(unsigned long long)>, void *>>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<_CacheRequester<void ()(unsigned long long)>, void *>>>;

typedef struct _list_node_base<_CacheRequester<void ()(unsigned long long)>, void *> {
	__list_node_base<_CacheRequester<void ()(unsigned long long)>, void *> __prev_;
	__list_node_base<_CacheRequester<void ()(unsigned long long)>, void *> __next_;
} list_node_base<_CacheRequester<void ()(unsigned long long)>, void *>;

typedef struct list<_CacheRequester<void ()(unsigned long long)>, std::__1::allocator<_CacheRequester<void ()(unsigned long long)>>> {
	list_node_base<_CacheRequester<void ()(unsigned long long)>, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<_CacheRequester<void ()(unsigned long long)>, void *>>> __size_alloc_;
} list<_CacheRequester<void ()(unsigned long long)>, std::__1::allocator<_CacheRequester<void ()(unsigned long long)>>>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<ErrorInfo>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<ErrorInfo>>;

typedef struct _compressed_pair<ErrorInfo **, std::__1::allocator<ErrorInfo *>> {
	ErrorInfo __value_;
} compressed_pair<ErrorInfo **, std::__1::allocator<ErrorInfo *>>;

typedef struct _split_buffer<ErrorInfo *, std::__1::allocator<ErrorInfo *>> {
	ErrorInfo __first_;
	ErrorInfo __begin_;
	ErrorInfo __end_;
	compressed_pair<ErrorInfo **, std::__1::allocator<ErrorInfo *>> __end_cap_;
} split_buffer<ErrorInfo *, std::__1::allocator<ErrorInfo *>>;

typedef struct deque<ErrorInfo, std::__1::allocator<ErrorInfo>> {
	split_buffer<ErrorInfo *, std::__1::allocator<ErrorInfo *>> __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<ErrorInfo>> __size_;
} deque<ErrorInfo, std::__1::allocator<ErrorInfo>>;

typedef struct {
	unsigned long long field1;
	id field2;
	unsigned long long field3;
	unsigned long long field4[5];
} SCD_Struct_GE31;

typedef struct {
	double field1;
	double field2;
	double field3;
} SCD_Struct_GE32;

typedef struct {
	id field1;
	char* field2;
	unsigned long long field3;
	unsigned long long field4;
	unsigned long long field5;
	unsigned long long field6;
	unsigned field7;
	unsigned long long field8;
	char field9;
	unsigned long long field10;
	float field11;
	unsigned long long field12;
	id field13;
	int field14;
} SCD_Struct_GE33;

typedef struct {
	float field1;
	float field2;
} SCD_Struct_GE34;

typedef struct {
	SCD_Struct_GE3 field1;
	3 field2;
	SCD_Struct_GE3 field3;
	4 field4;
	float field5;
	float field6;
	float field7;
	SCD_Struct_GE3 field8;
	4 field9;
	unsigned long long field10;
	unsigned long long field11;
	unsigned long long field12;
	unsigned long long field13;
	short field14;
	short field15;
	unsigned char field16;
	float field17;
	float field18;
	unsigned field19;
	unsigned field20;
	unsigned field21;
	unsigned field22;
	unsigned char field23;
	unsigned char field24;
	unsigned char field25;
	unsigned char field26;
	char field27;
	char field28;
	char field29;
	char field30;
	char field31;
	char field32;
	char field33;
	char field34;
} SCD_Struct_GE35;

typedef struct {
	GEOCoarseLocationLatLng origin;
	GEOCoarseLocationLatLng size;
} SCD_Struct_GE36;

typedef struct {
	unsigned currentUserTime : 1;
	unsigned time : 1;
	unsigned type : 1;
} SCD_Struct_GE37;

typedef struct GEOTimepoint {
	double _currentUserTime;
	double _time;
	int _type;
	SCD_Struct_GE37 _has;
} GEOTimepoint;

typedef struct opaque_pthread_mutex_t {
	long long __sig;
	char __opaque[56];
} opaque_pthread_mutex_t;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CacheItem, void *>>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CacheItem, void *>>>;

typedef struct _list_node_base<CacheItem, void *> {
	__list_node_base<CacheItem, void *> __prev_;
	__list_node_base<CacheItem, void *> __next_;
} list_node_base<CacheItem, void *>;

typedef struct list<CacheItem, std::__1::allocator<CacheItem>> {
	list_node_base<CacheItem, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CacheItem, void *>>> __size_alloc_;
} list<CacheItem, std::__1::allocator<CacheItem>>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> *>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> *>>;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, hashkey, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, hashkey, true>>;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, eqkey, true>> {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, eqkey, true>>;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *>>> {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *>>>;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> *>> {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> *>> __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> *>>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> *>>> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> *>> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> *>>>;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> *>>> {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> *>>> __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> *>>>;

typedef struct _hash_table<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, hashkey, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, eqkey, true>, std::__1::allocator<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>>> {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *> *>>> __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, void *>>> __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, hashkey, true>> __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, eqkey, true>> __p3_;
} hash_table<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, hashkey, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, eqkey, true>, std::__1::allocator<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>>>;

typedef struct unordered_map<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, eqkey, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>>> {
	hash_table<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, hashkey, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>, eqkey, true>, std::__1::allocator<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>>> __table_;
} unordered_map<_GEOTileKey, std::__1::__list_iterator<CacheItem, void *>, hashkey, eqkey, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::__list_iterator<CacheItem, void *>>>>;

typedef struct NSRange {
	unsigned long long location;
	unsigned long long length;
} NSRange;

typedef struct {
	unsigned field1;
	double field2;
} SCD_Struct_GE55;

typedef struct GEOStandardTileKey {
	unsigned reserved : 40;
	unsigned z : 6;
	unsigned x : 26;
	unsigned y : 26;
	unsigned type : 14;
	unsigned pixelSize : 4;
	unsigned textScale : 4;
} GEOStandardTileKey;

typedef struct GEOGloriaQuadIDTileKey {
	unsigned z : 6;
	unsigned quadKey : 64;
	unsigned type : 14;
	unsigned padding : 36;
} GEOGloriaQuadIDTileKey;

typedef struct GEORegionalResourceKey {
	unsigned index : 32;
	unsigned scenarios : 8;
	unsigned type : 6;
	unsigned pixelSize : 8;
	unsigned textScale : 8;
	unsigned forceRefetch : 1;
	unsigned padding : 57;
} GEORegionalResourceKey;

typedef struct GEOSputnikMetadataKey {
	unsigned part : 32;
	unsigned region : 24;
	unsigned type : 14;
	unsigned pixelSize : 8;
	unsigned padding : 42;
} GEOSputnikMetadataKey;

typedef struct GEOFlyoverKey {
	unsigned z : 6;
	unsigned x : 26;
	unsigned y : 26;
	unsigned h : 8;
	unsigned region : 24;
	unsigned type : 14;
	unsigned pixelSize : 8;
	unsigned textScale : 8;
} GEOFlyoverKey;

typedef struct GEOTransitLineSelectionKey {
	unsigned z : 6;
	unsigned x : 25;
	unsigned y : 25;
	unsigned muid : 64;
} GEOTransitLineSelectionKey;

typedef struct GEOPolygonSelectionKey {
	unsigned z : 6;
	unsigned x : 25;
	unsigned y : 25;
	unsigned polyId : 64;
} GEOPolygonSelectionKey;

typedef struct GEOTileOverlayKey {
	unsigned z : 6;
	unsigned x : 26;
	unsigned y : 26;
	unsigned contentScale : 8;
	unsigned providerId : 32;
	unsigned padding : 22;
} GEOTileOverlayKey;

typedef struct GEOIdentifiedResourceKey {
	unsigned identifier;
	unsigned char levelOfDetail;
	unsigned char type;
	unsigned padding : 64;
	unsigned padding2 : 8;
} GEOIdentifiedResourceKey;

typedef struct GEOMuninMeshKey {
	unsigned pointId : 64;
	unsigned buildId : 32;
	unsigned bucketId : 16;
	unsigned cameraId : 5;
	unsigned lod : 3;
} GEOMuninMeshKey;

typedef struct GEOTileKey {
	unsigned provider : 7;
	unsigned expires : 1;
	/*function pointer*/void* ;
	GEOStandardTileKey standard;
	GEOGloriaQuadIDTileKey gloriaQuad;
	GEORegionalResourceKey regional;
	GEOSputnikMetadataKey sputnikMetadata;
	GEOFlyoverKey flyover;
	GEOTransitLineSelectionKey transitLineSelection;
	GEOPolygonSelectionKey polygonSelection;
	GEOTileOverlayKey tileOverlay;
	GEOIdentifiedResourceKey identifiedResource;
	GEOMuninMeshKey) muninMesh;
} GEOTileKey;

typedef struct sqlite3* sqlite3Ref;

typedef struct sqlite3_stmt* sqlite3_stmtRef;

typedef struct {
	long long list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_GE69;

typedef struct {
	float list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_GE70;

typedef struct {
	float field1;
	float field2;
	float field3;
	float field4;
} SCD_Struct_GE71;

typedef struct {
	unsigned short field1[2];
	unsigned short field2[2];
} SCD_Struct_GE72;

typedef struct {
	SCD_Struct_GE3 field1;
	4 field2;
	SCD_Struct_GE3 field3;
	4 field4;
} SCD_Struct_GE73;

typedef struct {
	SCD_Struct_GE3 field1;
	3 field2;
	unsigned long long field3;
	unsigned long long field4;
	int field5;
	int field6;
	int field7;
	unsigned long long field8;
	unsigned long long field9;
	unsigned field10;
	unsigned( field11;
	/*function pointer*/void* field12;
	= field13;
	NSRange field14;
	SCD_Struct_GE71) field15;
	/*function pointer*/void* field16;
	SCD_Struct_GE72 field17;
	unsigned char field18;
	char field19;
	unsigned char field20;
	char field21;
	char field22;
	unsigned char field23;
	char field24;
	unsigned short field25;
	_ field26;
	SCD_Struct_GE73 field27;
	char field28;
	unsigned field29;
} SCD_Struct_GE74;

typedef struct {
	unsigned bTHFPAvailableAtEndOfNav : 1;
	unsigned bTHFPRoutesAvailable : 1;
	unsigned currentRouteHFPEnabledAtEndOfNav : 1;
	unsigned currentRouteTypeAtEndOfNav : 1;
	unsigned everManuallyChangedRoute : 1;
	unsigned everManuallyEnabledHFPRoute : 1;
	unsigned everViewedAudioSheet : 1;
	unsigned everViewedAudioSheetBTAny : 1;
	unsigned everViewedAudioSheetBTHFP : 1;
	unsigned manuallyChangedRouteCount : 1;
	unsigned manuallyDisabledHFPCount : 1;
	unsigned manuallyEnabledHFPCount : 1;
	unsigned pauseSpokenAudioEnabled : 1;
	unsigned spokenPromptsCount : 1;
	unsigned viewedAudioSheet : 1;
	unsigned viewedAudioSheetBTAny : 1;
	unsigned viewedAudioSheetBTHFP : 1;
	unsigned wirelessRoutesAvailable : 1;
} SCD_Struct_GE75;

typedef struct GEONavigationAudioFeedback {
	char _bTHFPAvailableAtEndOfNav;
	char _bTHFPRoutesAvailable;
	char _currentRouteHFPEnabledAtEndOfNav;
	int _currentRouteTypeAtEndOfNav;
	char _everManuallyChangedRoute;
	char _everManuallyEnabledHFPRoute;
	char _everViewedAudioSheet;
	char _everViewedAudioSheetBTAny;
	char _everViewedAudioSheetBTHFP;
	unsigned _manuallyChangedRouteCount;
	unsigned _manuallyDisabledHFPCount;
	unsigned _manuallyEnabledHFPCount;
	char _pauseSpokenAudioEnabled;
	unsigned _spokenPromptsCount;
	char _viewedAudioSheet;
	char _viewedAudioSheetBTAny;
	char _viewedAudioSheetBTHFP;
	char _wirelessRoutesAvailable;
	SCD_Struct_GE75 _has;
} GEONavigationAudioFeedback;

typedef struct GEOSessionID {
	unsigned long long _high;
	unsigned long long _low;
} GEOSessionID;

typedef struct shared_ptr<geo::MapNodeTransit> {
	MapNodeTransit __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<geo::MapNodeTransit>;

typedef struct shared_ptr<geo::MapAccessPointFeature> {
	MapAccessPointFeature __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<geo::MapAccessPointFeature>;

typedef struct shared_ptr<geo::MapEdgeTransit> {
	MapEdgeTransit __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<geo::MapEdgeTransit>;

typedef struct _compressed_pair<GEOLocationCoordinate2D *, std::__1::allocator<GEOLocationCoordinate2D>> {
	/*function pointer*/void* __value_;
} compressed_pair<GEOLocationCoordinate2D *, std::__1::allocator<GEOLocationCoordinate2D>>;

typedef struct vector<GEOLocationCoordinate2D, std::__1::allocator<GEOLocationCoordinate2D>> {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<GEOLocationCoordinate2D *, std::__1::allocator<GEOLocationCoordinate2D>> __end_cap_;
} vector<GEOLocationCoordinate2D, std::__1::allocator<GEOLocationCoordinate2D>>;

typedef struct {
	/*function pointer*/void* field1;
	unsigned long long field2;
	unsigned long long field3;
	unsigned long long field4;
	unsigned long long field5;
	/*function pointer*/void* field6;
	/*function pointer*/void* field7;
} SCD_Struct_GE83;

typedef struct {
	unsigned index;
	float offset;
} SCD_Struct_GE84;

typedef struct {
	unsigned field1;
	void field2;
} SCD_Struct_GE85;

typedef struct {
	int list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_GE86;

typedef struct {
	int type;
	/*function pointer*/void* subtype;
	int raw;
	int tile;
	i) placeRequest;
} SCD_Struct_GE87;

typedef struct {
	unsigned long long list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_GE88;

typedef struct os_unfair_recursive_lock_s {
	os_unfair_lock_s ourl_lock;
	unsigned ourl_count;
} os_unfair_recursive_lock_s;

typedef struct atomic_flag {
	AB _Value;
} atomic_flag;

typedef union {
	atomic_flag flag;
	int dummy;
} SCD_Union_GE91;

typedef struct __CFBinaryHeap* CFBinaryHeapRef;

typedef struct {
	double list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_GE93;

typedef struct {
	double x;
	double y;
	double z;
} SCD_Struct_GE94;

typedef struct GEOOrientedPosition {
	SCD_Struct_GE94 position;
	float yaw;
	float pitch;
	float roll;
} GEOOrientedPosition;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct GEOLensModel {
	float fovS;
	float fovH;
	float k2;
	float k3;
	float k4;
	float cx;
	float cy;
	float lx;
	float ly;
} GEOLensModel;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *>>;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::hash<unsigned int>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::hash<unsigned int>, true>>;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::equal_to<unsigned int>, true>> {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::equal_to<unsigned int>, true>>;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *>>> {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *>>>;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *>> {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *>> __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *>>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *>>> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *>> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *>>>;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *>>> {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *>>> __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *>>>;

typedef struct _hash_table<std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned long>>> {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *> *>>> __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long>, void *>>> __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::hash<unsigned int>, true>> __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::equal_to<unsigned int>, true>> __p3_;
} hash_table<std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned long>>>;

typedef struct unordered_map<unsigned int, unsigned long, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long>>> {
	hash_table<std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned long>>> __table_;
} unordered_map<unsigned int, unsigned long, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long>>>;

typedef struct {
	SCD_Struct_GE74 field1;
	unsigned long long field2;
	unsigned long long field3;
	char field4;
	char field5;
} SCD_Struct_GE108;

typedef struct CAARiseTransitSetDetails {
	BOOL bRiseValid;
	double Rise;
	BOOL bTransitValid;
	BOOL bTransitAboveHorizon;
	double Transit;
	BOOL bSetValid;
	double Set;
} CAARiseTransitSetDetails;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<geo::TransitEdgePiece>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<geo::TransitEdgePiece>>;

typedef struct _compressed_pair<geo::TransitEdgePiece **, std::__1::allocator<geo::TransitEdgePiece *>> {
	TransitEdgePiece __value_;
} compressed_pair<geo::TransitEdgePiece **, std::__1::allocator<geo::TransitEdgePiece *>>;

typedef struct _split_buffer<geo::TransitEdgePiece *, std::__1::allocator<geo::TransitEdgePiece *>> {
	TransitEdgePiece __first_;
	TransitEdgePiece __begin_;
	TransitEdgePiece __end_;
	compressed_pair<geo::TransitEdgePiece **, std::__1::allocator<geo::TransitEdgePiece *>> __end_cap_;
} split_buffer<geo::TransitEdgePiece *, std::__1::allocator<geo::TransitEdgePiece *>>;

typedef struct deque<geo::TransitEdgePiece, std::__1::allocator<geo::TransitEdgePiece>> {
	split_buffer<geo::TransitEdgePiece *, std::__1::allocator<geo::TransitEdgePiece *>> __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<geo::TransitEdgePiece>> __size_;
} deque<geo::TransitEdgePiece, std::__1::allocator<geo::TransitEdgePiece>>;

typedef struct shared_ptr<geo::MapEdgeRoad> {
	MapEdgeRoad __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<geo::MapEdgeRoad>;

typedef struct _compressed_pair<GEOPosition2f *, std::__1::allocator<GEOPosition2f>> {
	/*function pointer*/void* __value_;
} compressed_pair<GEOPosition2f *, std::__1::allocator<GEOPosition2f>>;

typedef struct vector<GEOPosition2f, std::__1::allocator<GEOPosition2f>> {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<GEOPosition2f *, std::__1::allocator<GEOPosition2f>> __end_cap_;
} vector<GEOPosition2f, std::__1::allocator<GEOPosition2f>>;

typedef struct _compressed_pair<geo::PolylineCoordinate *, std::__1::allocator<geo::PolylineCoordinate>> {
	PolylineCoordinate __value_;
} compressed_pair<geo::PolylineCoordinate *, std::__1::allocator<geo::PolylineCoordinate>>;

typedef struct vector<geo::PolylineCoordinate, std::__1::allocator<geo::PolylineCoordinate>> {
	PolylineCoordinate __begin_;
	PolylineCoordinate __end_;
	compressed_pair<geo::PolylineCoordinate *, std::__1::allocator<geo::PolylineCoordinate>> __end_cap_;
} vector<geo::PolylineCoordinate, std::__1::allocator<geo::PolylineCoordinate>>;

typedef struct {
	unsigned duration : 1;
	unsigned startTime : 1;
} SCD_Struct_GE119;

typedef struct GEOPDTimeRange {
	unsigned _duration;
	unsigned _startTime;
	SCD_Struct_GE119 _has;
} GEOPDTimeRange;

typedef struct _compressed_pair<(anonymous namespace)::Timestamp *, std::__1::allocator<(anonymous namespace)::Timestamp>> {
	Timestamp __value_;
} compressed_pair<(anonymous namespace)::Timestamp *, std::__1::allocator<(anonymous namespace)::Timestamp>>;

typedef struct vector<(anonymous namespace)::Timestamp, std::__1::allocator<(anonymous namespace)::Timestamp>> {
	Timestamp __begin_;
	Timestamp __end_;
	compressed_pair<(anonymous namespace)::Timestamp *, std::__1::allocator<(anonymous namespace)::Timestamp>> __end_cap_;
} vector<(anonymous namespace)::Timestamp, std::__1::allocator<(anonymous namespace)::Timestamp>>;

typedef struct {
	unsigned referenceFrame : 1;
} SCD_Struct_GE123;

typedef struct Matrix<float, 2, 1> {
	float _e[2];
} Matrix<float, 2, 1>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *>>;

typedef struct _compressed_pair<unsigned long, std::__1::hash<GEOTileKey>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::hash<GEOTileKey>>;

typedef struct _compressed_pair<float, std::__1::equal_to<GEOTileKey>> {
	float __value_;
} compressed_pair<float, std::__1::equal_to<GEOTileKey>>;

typedef struct _hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> {
	__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *>, std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *>>> {
	hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *>, std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *>>>;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *>> {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *>> __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *>>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *>>> {
	__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *>> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *>>>;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *>>> {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *>>> __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *>>>;

typedef struct _hash_table<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey>> {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *> *>>> __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<_GEOTileKey, void *> *>, std::__1::allocator<std::__1::__hash_node<_GEOTileKey, void *>>> __p1_;
	compressed_pair<unsigned long, std::__1::hash<GEOTileKey>> __p2_;
	compressed_pair<float, std::__1::equal_to<GEOTileKey>> __p3_;
} hash_table<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey>>;

typedef struct unordered_set<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey>> {
	hash_table<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey>> __table_;
} unordered_set<_GEOTileKey, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<_GEOTileKey>>;

typedef struct _compressed_pair<gloria::DB *, std::__1::default_delete<gloria::DB>> {
	DB __value_;
} compressed_pair<gloria::DB *, std::__1::default_delete<gloria::DB>>;

typedef struct unique_ptr<gloria::DB, std::__1::default_delete<gloria::DB>> {
	compressed_pair<gloria::DB *, std::__1::default_delete<gloria::DB>> __ptr_;
} unique_ptr<gloria::DB, std::__1::default_delete<gloria::DB>>;

typedef struct {
	unsigned field1;
	unsigned field2;
	/*function pointer*/void* field3;
} SCD_Struct_GE137;

typedef union {
	ControlPoint zilch;
	/*function pointer*/void* basic;
	void data;
} SCD_Union_GE138;

typedef struct {
	unsigned field1;
	float field2;
	float field3;
	unsigned char field4;
	unsigned char field5;
} SCD_Struct_GE139;

typedef struct {
	unsigned char field1;
	float field2;
} SCD_Struct_GE140;

typedef struct {
	unsigned field1;
	SCD_Struct_GE1 field2;
	4 field3;
	0 field4;
	SCD_Struct_GE1 field5;
	4 field6;
	0 field7;
} SCD_Struct_GE141;

typedef struct {
	unsigned char field1;
	unsigned char field2;
	unsigned char field3;
	unsigned char( field4;
	/*function pointer*/void* field5;
	= field6;
	SCD_Struct_GE1 field7;
	3 field8;
	9 field9;
	SCD_Struct_GE1 field10;
	os_unfair_lock_s field11;
	4 field12;
	1) field13;
	float field14;
	float field15;
} SCD_Struct_GE142;

typedef struct {
	unsigned char field1;
	/*function pointer*/void* field2;
	unsigned long long field3;
	float field4;
	_ field5;
	NSRange field6;
	unsigned long long field7;
	unsigned long long field8;
	/*function pointer*/void* field9;
	_ field10;
	NSRange field11;
} SCD_Struct_GE143;

typedef struct {
	SCD_Struct_GE3 field1;
	SCD_Struct_GE3 field2;
	4 field3;
	char field4;
	char field5;
	unsigned char field6;
	unsigned long long field7;
	unsigned long long field8;
	SCD_Struct_GE74 field9;
	4 field10;
	unsigned long long field11;
} SCD_Struct_GE144;

typedef struct {
	SCD_Struct_GE3 field1;
	unsigned long long field2;
	SCD_Struct_GE74 field3;
	4 field4;
	char* field5;
	char* field6;
} SCD_Struct_GE145;

typedef struct {
	SCD_Struct_GE3 field1;
	unsigned long long field2;
	unsigned long long field3;
	short field4;
	SCD_Struct_GE74 field5;
	4 field6;
	unsigned long long field7;
} SCD_Struct_GE146;

typedef struct {
	unsigned long long field1;
	long long field2;
	BOOL field3;
	BOOL field4;
	unsigned long long field5;
	char* field6;
	char* field7;
	unsigned long long field8;
	unsigned long long field9;
} SCD_Struct_GE147;

typedef struct {
	unsigned long long field1;
	unsigned char field2;
	unsigned long long field3;
	unsigned long long field4;
	BOOL field5;
	unsigned long long field6;
	unsigned long long field7;
} SCD_Struct_GE148;

typedef struct {
	SCD_Struct_GE3 field1;
	3 field2;
	char* field3;
	unsigned long long field4;
} SCD_Struct_GE149;

typedef struct {
	unsigned char field1;
	unsigned char field2;
	unsigned char field3;
	BOOL field4;
	unsigned char field5;
	char field6;
	SCD_Struct_GE3 field7;
	4 field8;
} SCD_Struct_GE150;

typedef struct {
	unsigned short field1;
} SCD_Struct_GE151;

typedef struct {
	unsigned field1;
	unsigned field2;
	unsigned field3;
	unsigned field4;
} SCD_Struct_GE152;

typedef struct {
	unsigned short field1;
	unsigned short field2;
	float field3;
	char field4;
	unsigned char field5;
} SCD_Struct_GE153;

typedef struct {
	float field1;
	float field2;
	float field3;
	float field4;
	float field5;
	float field6;
} SCD_Struct_GE154;

typedef struct {
	unsigned char field1;
	/*function pointer*/void* field2;
	unsigned long long field3;
	float field4;
	_ field5;
	NSRange field6;
	unsigned long long field7;
} SCD_Struct_GE155;

typedef struct {
	unsigned long long field1;
	unsigned long long field2;
	char* field3;
} SCD_Struct_GE156;

typedef struct {
	char* field1;
	char* field2;
	unsigned field3;
} SCD_Struct_GE157;

typedef struct {
	unsigned long long field1;
	unsigned long long field2;
	char* field3;
	unsigned field4 : 1;
} SCD_Struct_GE158;

typedef struct {
	unsigned char field1;
	unsigned short field2;
} SCD_Struct_GE159;

typedef struct {
	unsigned field1;
	int field2;
	float field3;
	char field4;
	char field5;
	char field6;
	char field7;
	char field8;
	SCD_Struct_GE159 field9[16];
} SCD_Struct_GE160;

typedef struct {
	SCD_Struct_GE1 field1;
	5 field2;
	2 field3;
	SCD_Struct_GE1 field4;
	6 field5;
	0 field6;
} SCD_Struct_GE161;

typedef struct {
	SCD_Struct_GE3 field1;
	3 field2;
	unsigned char field3;
	unsigned char field4;
	unsigned char field5;
	unsigned char field6;
	unsigned field7;
	float field8;
	unsigned field9;
	unsigned field10;
	unsigned field11;
} SCD_Struct_GE162;

typedef struct {
	_ field1;
	NSRange field2;
	unsigned long long field3;
	id field4;
	unsigned long long field5;
	unsigned long long field6;
	char* field7;
	unsigned field8;
} SCD_Struct_GE163;

typedef struct {
	id field1;
	unsigned field2;
	unsigned field3;
	_ field4;
	NSRange field5;
	/*function pointer*/void* field6;
	/*function pointer*/void* field7;
	unsigned long long field8;
	unsigned long long field9;
	_ field10;
	NSRange field11;
	_ field12;
	NSRange field13;
	char field14;
	_ field15;
	NSRange field16;
	_ field17;
	NSRange field18;
	NSRange field19[2_];
	NSRange field20[2_];
} SCD_Struct_GE164;

typedef struct {
	unsigned field1;
	unsigned field2;
} SCD_Struct_GE165;

typedef struct {
	SCD_Struct_GE3 field1;
	3 field2;
	_ field3;
	NSRange field4;
	float field5;
} SCD_Struct_GE166;

typedef struct {
	SCD_Struct_GE3 field1;
	5 field2;
	unsigned long long field3;
	unsigned char field4;
	float field5;
	unsigned short field6;
	float field7;
} SCD_Struct_GE167;

typedef struct {
	unsigned field1;
	unsigned field2;
	unsigned field3;
} SCD_Struct_GE168;

typedef struct {
	unsigned field1;
	int field2;
} SCD_Struct_GE169;

typedef struct {
	unsigned field1;
	unsigned long long field2;
} SCD_Struct_GE170;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *>>;

typedef struct _compressed_pair<unsigned long, std::__1::hash<GEORoadEdge>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::hash<GEORoadEdge>>;

typedef struct _compressed_pair<float, std::__1::equal_to<GEORoadEdge>> {
	float __value_;
} compressed_pair<float, std::__1::equal_to<GEORoadEdge>>;

typedef struct _hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> {
	__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *>, std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *>>> {
	hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *>, std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *>>>;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *>> {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *>> __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *>>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *>>> {
	__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *>> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *>>>;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *>>> {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *>>> __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *>>>;

typedef struct _hash_table<GEORoadEdge, std::__1::hash<GEORoadEdge>, std::__1::equal_to<GEORoadEdge>, std::__1::allocator<GEORoadEdge>> {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *> *>>> __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEORoadEdge, void *> *>, std::__1::allocator<std::__1::__hash_node<GEORoadEdge, void *>>> __p1_;
	compressed_pair<unsigned long, std::__1::hash<GEORoadEdge>> __p2_;
	compressed_pair<float, std::__1::equal_to<GEORoadEdge>> __p3_;
} hash_table<GEORoadEdge, std::__1::hash<GEORoadEdge>, std::__1::equal_to<GEORoadEdge>, std::__1::allocator<GEORoadEdge>>;

typedef struct unordered_set<GEORoadEdge, std::__1::hash<GEORoadEdge>, std::__1::equal_to<GEORoadEdge>, std::__1::allocator<GEORoadEdge>> {
	hash_table<GEORoadEdge, std::__1::hash<GEORoadEdge>, std::__1::equal_to<GEORoadEdge>, std::__1::allocator<GEORoadEdge>> __table_;
} unordered_set<GEORoadEdge, std::__1::hash<GEORoadEdge>, std::__1::equal_to<GEORoadEdge>, std::__1::allocator<GEORoadEdge>>;

typedef struct PolylineCoordinate {
	unsigned index;
	float offset;
} PolylineCoordinate;

typedef struct _compressed_pair<geo::ZilchMapModel *, std::__1::default_delete<geo::ZilchMapModel>> {
	ZilchMapModel __value_;
} compressed_pair<geo::ZilchMapModel *, std::__1::default_delete<geo::ZilchMapModel>>;

typedef struct unique_ptr<geo::ZilchMapModel, std::__1::default_delete<geo::ZilchMapModel>> {
	compressed_pair<geo::ZilchMapModel *, std::__1::default_delete<geo::ZilchMapModel>> __ptr_;
} unique_ptr<geo::ZilchMapModel, std::__1::default_delete<geo::ZilchMapModel>>;

typedef struct shared_ptr<zilch::Message> {
	Message __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<zilch::Message>;

typedef struct {
	float field1;
	float field2;
	float field3;
} SCD_Struct_GE185;

typedef struct {
	SCD_Struct_GE94 origin;
	SCD_Struct_GE94 size;
} SCD_Struct_GE186;

typedef struct Matrix<float, 4, 1> {
	float _e[4];
} Matrix<float, 4, 1>;

typedef struct Color<float, 4, geo::ColorSpace::Linear> {
	Matrix<float, 4, 1> _backing;
} Color<float, 4, geo::ColorSpace::Linear>;

typedef struct {
	unsigned identifier;
	void metadata;
} SCD_Struct_GE189;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, std::__1::less<unsigned int>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, std::__1::less<unsigned int>, true>>;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, void *>>>;

typedef struct _tree<std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, std::__1::less<unsigned int>, true>> __pair3_;
} tree<std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>>>;

typedef struct map<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, _GEOAltitudeTriggerData>>> {
	tree<std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, _GEOAltitudeTriggerData>>> __tree_;
} map<unsigned int, _GEOAltitudeTriggerData, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, _GEOAltitudeTriggerData>>>;

typedef struct _compressed_pair<unsigned char *, std::__1::allocator<unsigned char>> {
	char* __value_;
} compressed_pair<unsigned char *, std::__1::allocator<unsigned char>>;

typedef struct vector<unsigned char, std::__1::allocator<unsigned char>> {
	char* __begin_;
	char* __end_;
	compressed_pair<unsigned char *, std::__1::allocator<unsigned char>> __end_cap_;
} vector<unsigned char, std::__1::allocator<unsigned char>>;

typedef struct GEOPBTransitTimeRange {
	unsigned _duration;
	unsigned _startTime;
	SCD_Struct_GE119 _has;
} GEOPBTransitTimeRange;

typedef struct shared_ptr<geo::MapEdge> {
	MapEdge __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<geo::MapEdge>;

typedef struct {
	float x;
	float y;
} SCD_Struct_GE199;

typedef struct {
	SCD_Struct_GE1 field1;
	9 field2;
	9 field3;
	SCD_Struct_GE1 field4;
	9 field5;
	9 field6;
} SCD_Struct_GE200;

typedef struct {
	SCD_Struct_GE3 field1;
	3 field2;
	unsigned long long field3;
	unsigned long long field4;
	int field5;
	int field6;
	int field7;
	unsigned long long field8;
	unsigned long long field9;
	unsigned field10;
	unsigned( field11;
	/*function pointer*/void* field12;
	= field13;
	NSRange field14;
	SCD_Struct_GE71) field15;
	/*function pointer*/void* field16;
	SCD_Struct_GE72 field17;
	unsigned char field18;
	char field19;
	unsigned char field20;
	char field21;
	char field22;
	unsigned char field23;
	char field24;
	unsigned short field25;
	_ field26;
	SCD_Struct_GE200 field27;
	char field28;
	unsigned field29;
} SCD_Struct_GE201;

typedef struct GEOScreenResolution {
	double _height;
	double _width;
	SCD_Struct_GE119 _has;
} GEOScreenResolution;

typedef struct {
	int field1;
	GEOCoarseLocationLatLng field2;
	double field3;
	double field4;
	double field5;
	double field6;
	double field7;
	double field8;
	double field9;
	double field10;
	int field11;
	double field12;
	int field13;
	GEOCoarseLocationLatLng field14;
	double field15;
	int field16;
	unsigned field17;
	int field18;
	int field19;
	int field20;
	double field21;
} SCD_Struct_GE203;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> *>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> *>>;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, std::__1::hash<GEOTileKey>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, std::__1::hash<GEOTileKey>, true>>;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, std::__1::equal_to<GEOTileKey>, true>> {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, std::__1::equal_to<GEOTileKey>, true>>;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *>>> {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *>>>;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> *>> {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> *>> __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> *>>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> *>>> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> *>> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> *>>>;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> *>>> {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> *>>> __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> *>>>;

typedef struct _hash_table<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, std::__1::hash<GEOTileKey>, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, std::__1::equal_to<GEOTileKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>>> {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *> *>>> __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, void *>>> __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, std::__1::hash<GEOTileKey>, true>> __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, std::__1::equal_to<GEOTileKey>, true>> __p3_;
} hash_table<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, std::__1::hash<GEOTileKey>, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, std::__1::equal_to<GEOTileKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>>>;

typedef struct unordered_map<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>>> {
	hash_table<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, std::__1::hash<GEOTileKey>, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>, std::__1::equal_to<GEOTileKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>>> __table_;
} unordered_map<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>>>;

typedef struct _list_node_base<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *> {
	__list_node_base<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *> __prev_;
	__list_node_base<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *> __next_;
} list_node_base<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>;

typedef struct list<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>>> {
	list_node_base<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>> __size_alloc_;
} list<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>>>;

typedef struct GEOGenericContainer<_GEOTileKey, GEOTileData *, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> {
	mutex _lock;
	list<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>>> _list;
	unordered_map<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, GEOTileData *, _value_ptr>, void *>>>> _map;
	unsigned long long _maxCapacity;
	unsigned long long _maxCost;
	unsigned long long _currentCost;
	unsigned long long _currentCount;
} GEOGenericContainer<_GEOTileKey, GEOTileData *, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> *>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> *>>;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, std::__1::hash<GEOTileKey>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, std::__1::hash<GEOTileKey>, true>>;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, std::__1::equal_to<GEOTileKey>, true>> {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, std::__1::equal_to<GEOTileKey>, true>>;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *>>> {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *>>>;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> *>> {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> *>> __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> *>>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> *>>> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> *>> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> *>>>;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> *>>> {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> *>>> __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> *>>>;

typedef struct _hash_table<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, std::__1::hash<GEOTileKey>, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, std::__1::equal_to<GEOTileKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>>> {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *> *>>> __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, void *>>> __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, std::__1::hash<GEOTileKey>, true>> __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, std::__1::equal_to<GEOTileKey>, true>> __p3_;
} hash_table<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, std::__1::hash<GEOTileKey>, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, std::__1::equal_to<GEOTileKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>>>;

typedef struct unordered_map<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>>> {
	hash_table<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, std::__1::__unordered_map_hasher<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, std::__1::hash<GEOTileKey>, true>, std::__1::__unordered_map_equal<_GEOTileKey, std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>, std::__1::equal_to<GEOTileKey>, true>, std::__1::allocator<std::__1::__hash_value_type<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>>> __table_;
} unordered_map<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>>>;

typedef struct _list_node_base<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> {
	__list_node_base<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> __prev_;
	__list_node_base<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> __next_;
} list_node_base<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>;

typedef struct list<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>>> {
	list_node_base<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>> __size_alloc_;
} list<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>>>;

typedef struct GEOGenericContainer<_GEOTileKey, id, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> {
	mutex _lock;
	list<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>>> _list;
	unordered_map<_GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::__list_iterator<geo::detail::_CacheItem<_GEOTileKey, id, _value_ptr>, void *>>>> _map;
	unsigned long long _maxCapacity;
	unsigned long long _maxCost;
	unsigned long long _currentCost;
	unsigned long long _currentCount;
} GEOGenericContainer<_GEOTileKey, id, std::__1::hash<GEOTileKey>, std::__1::equal_to<GEOTileKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type>;

typedef struct GEOPixelPoint {
	double _x;
	double _y;
	int _z;
	SCD_Struct_GE123 _has;
} GEOPixelPoint;

typedef struct {
	char* field1;
	unsigned long long field2;
	unsigned long long field3;
} SCD_Struct_GE233;

typedef struct CAARiseTransitSetDetails2 {
	int type;
	double JD;
	double Bearing;
	double GeometricAltitude;
	BOOL bAboveHorizon;
} CAARiseTransitSetDetails2;

typedef struct _compressed_pair<unsigned long, _CAARiseTransitSetDetails2IsLessThan> {
	unsigned long long __value_;
} compressed_pair<unsigned long, _CAARiseTransitSetDetails2IsLessThan>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CAARiseTransitSetDetails2, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CAARiseTransitSetDetails2, void *>>>;

typedef struct _tree<CAARiseTransitSetDetails2, _CAARiseTransitSetDetails2IsLessThan, std::__1::allocator<CAARiseTransitSetDetails2>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CAARiseTransitSetDetails2, void *>>> __pair1_;
	compressed_pair<unsigned long, _CAARiseTransitSetDetails2IsLessThan> __pair3_;
} tree<CAARiseTransitSetDetails2, _CAARiseTransitSetDetails2IsLessThan, std::__1::allocator<CAARiseTransitSetDetails2>>;

typedef struct set<CAARiseTransitSetDetails2, _CAARiseTransitSetDetails2IsLessThan, std::__1::allocator<CAARiseTransitSetDetails2>> {
	tree<CAARiseTransitSetDetails2, _CAARiseTransitSetDetails2IsLessThan, std::__1::allocator<CAARiseTransitSetDetails2>> __tree_;
} set<CAARiseTransitSetDetails2, _CAARiseTransitSetDetails2IsLessThan, std::__1::allocator<CAARiseTransitSetDetails2>>;

typedef struct {
	SCD_Struct_GE1 field1;
	SCD_Struct_GE1 field2;
	9 field3;
	9 field4;
	char field5;
	char field6;
	unsigned char field7;
	unsigned long long field8;
	unsigned long long field9;
	SCD_Struct_GE201 field10;
	9 field11;
	9 field12;
	unsigned long long field13;
} SCD_Struct_GE239;

typedef struct {
	SCD_Struct_GE1 field1;
	3 field2;
	SCD_Struct_GE1 field3;
	9 field4;
	9 field5;
	float field6;
	float field7;
	float field8;
	SCD_Struct_GE3 field9;
	9 field10;
	9 field11;
	unsigned long long field12;
	unsigned long long field13;
	unsigned long long field14;
	unsigned long long field15;
	short field16;
	short field17;
	unsigned char field18;
	float field19;
	float field20;
	unsigned field21;
	unsigned field22;
	unsigned field23;
	unsigned field24;
	unsigned char field25;
	unsigned char field26;
	unsigned char field27;
	unsigned char field28;
	char field29;
	char field30;
	char field31;
	char field32;
	char field33;
	char field34;
	char field35;
	char field36;
} SCD_Struct_GE240;

typedef struct {
	SCD_Struct_GE240 field1;
	unsigned long long field2;
	unsigned char field3;
	float field4;
	unsigned short field5;
	float field6;
} SCD_Struct_GE241;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<GEORoadEdge>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<GEORoadEdge>>;

typedef struct _compressed_pair<GEORoadEdge **, std::__1::allocator<GEORoadEdge *>> {
	/*function pointer*/void* __value_;
} compressed_pair<GEORoadEdge **, std::__1::allocator<GEORoadEdge *>>;

typedef struct _split_buffer<GEORoadEdge *, std::__1::allocator<GEORoadEdge *>> {
	/*function pointer*/void* __first_;
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<GEORoadEdge **, std::__1::allocator<GEORoadEdge *>> __end_cap_;
} split_buffer<GEORoadEdge *, std::__1::allocator<GEORoadEdge *>>;

typedef struct deque<GEORoadEdge, std::__1::allocator<GEORoadEdge>> {
	split_buffer<GEORoadEdge *, std::__1::allocator<GEORoadEdge *>> __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<GEORoadEdge>> __size_;
} deque<GEORoadEdge, std::__1::allocator<GEORoadEdge>>;

typedef struct __CFSet* CFSetRef;

typedef struct _compressed_pair<geo::RouteMapMatchingSection *, std::__1::default_delete<geo::RouteMapMatchingSection>> {
	RouteMapMatchingSection __value_;
} compressed_pair<geo::RouteMapMatchingSection *, std::__1::default_delete<geo::RouteMapMatchingSection>>;

typedef struct unique_ptr<geo::RouteMapMatchingSection, std::__1::default_delete<geo::RouteMapMatchingSection>> {
	compressed_pair<geo::RouteMapMatchingSection *, std::__1::default_delete<geo::RouteMapMatchingSection>> __ptr_;
} unique_ptr<geo::RouteMapMatchingSection, std::__1::default_delete<geo::RouteMapMatchingSection>>;

typedef struct shared_ptr<addr_obj::AddressObject> {
	AddressObject __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<addr_obj::AddressObject>;

typedef struct sqlite3_context* sqlite3_contextRef;

typedef struct GEOVLFPositionContextClassification {
	double _indoorProbability;
	double _outdoorProbability;
	int _type;
	SCD_Struct_GE37 _has;
} GEOVLFPositionContextClassification;

typedef struct GEOECEFCoordinate {
	double _x;
	double _y;
	double _z;
	SCD_Struct_GE37 _has;
} GEOECEFCoordinate;

