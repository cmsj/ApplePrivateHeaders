/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:11 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/GeoServices.framework/Versions/A/GeoServices
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <GeoServices/GeoServices-Structs.h>
#import <ProtocolBuffer/PBCodable.h>
#import <libobjc.A.dylib/NSCopying.h>

@class PBDataReader, NSString, GEOCoarseLocationPolygon;

@interface GEOCoarseLocationTerritoryInfo : PBCodable <NSCopying> {

	PBDataReader* _reader;
	SCD_Struct_GE17* _coordinates;
	GEOCoarseLocationLatLng _representativePoint;
	double _areaDegrees;
	double _areaRatio;
	NSString* _countryNameStr;
	unsigned long long _featureId;
	double _maxDistanceMeters;
	GEOCoarseLocationPolygon* _polygon;
	NSString* _regionNameStr;
	unsigned _readerMarkPos;
	unsigned _readerMarkLength;
	os_unfair_lock_s _readerLock;
	unsigned _countryName;
	unsigned _regionName;
	int _representativePointQuality;
	unsigned _revgeoRank;
	int _territoryType;
	char _precise;
	char _shouldRandomize;
	struct {
		unsigned has_representativePoint : 1;
		unsigned has_areaDegrees : 1;
		unsigned has_areaRatio : 1;
		unsigned has_featureId : 1;
		unsigned has_maxDistanceMeters : 1;
		unsigned has_countryName : 1;
		unsigned has_regionName : 1;
		unsigned has_representativePointQuality : 1;
		unsigned has_revgeoRank : 1;
		unsigned has_territoryType : 1;
		unsigned has_precise : 1;
		unsigned has_shouldRandomize : 1;
		unsigned read_coordinates : 1;
		unsigned read_countryNameStr : 1;
		unsigned read_polygon : 1;
		unsigned read_regionNameStr : 1;
		unsigned wrote_anyField : 1;
	}  _flags;

}

@property (assign,nonatomic) char hasTerritoryType; 
@property (assign,nonatomic) int territoryType; 
@property (assign,nonatomic) char hasRegionName; 
@property (assign,nonatomic) unsigned regionName; 
@property (assign,nonatomic) char hasCountryName; 
@property (assign,nonatomic) unsigned countryName; 
@property (nonatomic,readonly) unsigned long long coordinatesCount; 
@property (nonatomic,readonly) unsigned* coordinates; 
@property (assign,nonatomic) char hasPrecise; 
@property (assign,nonatomic) char precise; 
@property (assign,nonatomic) char hasFeatureId; 
@property (assign,nonatomic) unsigned long long featureId; 
@property (assign,nonatomic) char hasRepresentativePoint; 
@property (assign,nonatomic) GEOCoarseLocationLatLng representativePoint; 
@property (assign,nonatomic) char hasAreaDegrees; 
@property (assign,nonatomic) double areaDegrees; 
@property (assign,nonatomic) char hasRevgeoRank; 
@property (assign,nonatomic) unsigned revgeoRank; 
@property (assign,nonatomic) char hasAreaRatio; 
@property (assign,nonatomic) double areaRatio; 
@property (assign,nonatomic) char hasMaxDistanceMeters; 
@property (assign,nonatomic) double maxDistanceMeters; 
@property (nonatomic,readonly) char hasRegionNameStr; 
@property (nonatomic,retain) NSString * regionNameStr; 
@property (nonatomic,readonly) char hasCountryNameStr; 
@property (nonatomic,retain) NSString * countryNameStr; 
@property (nonatomic,readonly) char hasPolygon; 
@property (nonatomic,retain) GEOCoarseLocationPolygon * polygon; 
@property (assign,nonatomic) char hasRepresentativePointQuality; 
@property (assign,nonatomic) int representativePointQuality; 
@property (assign,nonatomic) char hasShouldRandomize; 
@property (assign,nonatomic) char shouldRandomize; 
+(char)isValid:(id)arg1 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(void)dealloc;
-(char)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(id)description;
-(id)init;
-(id)initWithData:(id)arg1 ;
-(id)initWithDictionary:(id)arg1 ;
-(id)dictionaryRepresentation;
-(void)mergeFrom:(id)arg1 ;
-(char)readFrom:(id)arg1 ;
-(void)writeTo:(id)arg1 ;
-(void)copyTo:(id)arg1 ;
-(void)readAll:(char)arg1 ;
-(id)jsonRepresentation;
-(id)initWithJSON:(id)arg1 ;
-(unsigned*)coordinates;
-(NSString *)regionNameStr;
-(NSString *)countryNameStr;
-(GEOCoarseLocationPolygon *)polygon;
-(void)setTerritoryType:(int)arg1 ;
-(void)setRegionName:(unsigned)arg1 ;
-(void)setCountryName:(unsigned)arg1 ;
-(void)addCoordinates:(unsigned)arg1 ;
-(void)setPrecise:(char)arg1 ;
-(void)setFeatureId:(unsigned long long)arg1 ;
-(void)setRepresentativePoint:(GEOCoarseLocationLatLng)arg1 ;
-(void)setAreaDegrees:(double)arg1 ;
-(void)setRevgeoRank:(unsigned)arg1 ;
-(void)setAreaRatio:(double)arg1 ;
-(void)setMaxDistanceMeters:(double)arg1 ;
-(void)setRegionNameStr:(NSString *)arg1 ;
-(void)setCountryNameStr:(NSString *)arg1 ;
-(void)setPolygon:(GEOCoarseLocationPolygon *)arg1 ;
-(void)setRepresentativePointQuality:(int)arg1 ;
-(void)setShouldRandomize:(char)arg1 ;
-(unsigned long long)coordinatesCount;
-(void)clearCoordinates;
-(unsigned)coordinatesAtIndex:(unsigned long long)arg1 ;
-(int)territoryType;
-(void)setHasTerritoryType:(char)arg1 ;
-(char)hasTerritoryType;
-(id)territoryTypeAsString:(int)arg1 ;
-(int)StringAsTerritoryType:(id)arg1 ;
-(unsigned)regionName;
-(void)setHasRegionName:(char)arg1 ;
-(char)hasRegionName;
-(unsigned)countryName;
-(void)setHasCountryName:(char)arg1 ;
-(char)hasCountryName;
-(void)setCoordinates:(unsigned*)arg1 count:(unsigned long long)arg2 ;
-(char)precise;
-(void)setHasPrecise:(char)arg1 ;
-(char)hasPrecise;
-(unsigned long long)featureId;
-(void)setHasFeatureId:(char)arg1 ;
-(char)hasFeatureId;
-(GEOCoarseLocationLatLng)representativePoint;
-(void)setHasRepresentativePoint:(char)arg1 ;
-(char)hasRepresentativePoint;
-(double)areaDegrees;
-(void)setHasAreaDegrees:(char)arg1 ;
-(char)hasAreaDegrees;
-(unsigned)revgeoRank;
-(void)setHasRevgeoRank:(char)arg1 ;
-(char)hasRevgeoRank;
-(double)areaRatio;
-(void)setHasAreaRatio:(char)arg1 ;
-(char)hasAreaRatio;
-(double)maxDistanceMeters;
-(void)setHasMaxDistanceMeters:(char)arg1 ;
-(char)hasMaxDistanceMeters;
-(char)hasRegionNameStr;
-(char)hasCountryNameStr;
-(char)hasPolygon;
-(int)representativePointQuality;
-(void)setHasRepresentativePointQuality:(char)arg1 ;
-(char)hasRepresentativePointQuality;
-(id)representativePointQualityAsString:(int)arg1 ;
-(int)StringAsRepresentativePointQuality:(id)arg1 ;
-(char)shouldRandomize;
-(void)setHasShouldRandomize:(char)arg1 ;
-(char)hasShouldRandomize;
@end

