/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:15 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/GeoServices.framework/Versions/A/GeoServices
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <GeoServices/GeoServices-Structs.h>
#import <ProtocolBuffer/PBCodable.h>
#import <libobjc.A.dylib/NSCopying.h>

@class PBDataReader, PBUnknownFields, GEOCoarseLocationMetadata, GEOLatLng;

@interface GEOLocation : PBCodable <NSCopying> {

	PBDataReader* _reader;
	PBUnknownFields* _unknownFields;
	GEOCoarseLocationMetadata* _coarseMetadata;
	double _courseAccuracy;
	double _course;
	double _heading;
	double _horizontalAccuracy;
	GEOLatLng* _latLng;
	GEOLatLng* _rawCoordinate;
	double _rawCourse;
	double _speedAccuracy;
	double _speed;
	double _timestamp;
	unsigned long long _transitID;
	double _verticalAccuracy;
	unsigned _readerMarkPos;
	unsigned _readerMarkLength;
	os_unfair_lock_s _readerLock;
	int _altitude;
	int _formOfWay;
	int _levelOrdinal;
	int _matchQuality;
	int _referenceFrame;
	int _roadClass;
	int _transportType;
	int _type;
	char _isMatchedLocation;
	char _isShifted;
	struct {
		unsigned has_courseAccuracy : 1;
		unsigned has_course : 1;
		unsigned has_heading : 1;
		unsigned has_horizontalAccuracy : 1;
		unsigned has_rawCourse : 1;
		unsigned has_speedAccuracy : 1;
		unsigned has_speed : 1;
		unsigned has_timestamp : 1;
		unsigned has_transitID : 1;
		unsigned has_verticalAccuracy : 1;
		unsigned has_altitude : 1;
		unsigned has_formOfWay : 1;
		unsigned has_levelOrdinal : 1;
		unsigned has_matchQuality : 1;
		unsigned has_referenceFrame : 1;
		unsigned has_roadClass : 1;
		unsigned has_transportType : 1;
		unsigned has_type : 1;
		unsigned has_isMatchedLocation : 1;
		unsigned has_isShifted : 1;
		unsigned read_unknownFields : 1;
		unsigned read_coarseMetadata : 1;
		unsigned read_latLng : 1;
		unsigned read_rawCoordinate : 1;
		unsigned wrote_anyField : 1;
	}  _flags;

}

@property (nonatomic,readonly) GEOCoarseLocationLatLng coordinate; 
@property (nonatomic,readonly) char hasAccurateCourse; 
@property (assign,nonatomic) char hasCourseAccuracy; 
@property (assign,nonatomic) double courseAccuracy; 
@property (assign,nonatomic) char hasSpeedAccuracy; 
@property (assign,nonatomic) double speedAccuracy; 
@property (assign,nonatomic) char hasIsMatchedLocation; 
@property (assign,nonatomic) char isMatchedLocation; 
@property (assign,nonatomic) char hasIsShifted; 
@property (assign,nonatomic) char isShifted; 
@property (assign,nonatomic) char hasTransitID; 
@property (assign,nonatomic) unsigned long long transitID; 
@property (assign,nonatomic) char hasReferenceFrame; 
@property (assign,nonatomic) int referenceFrame; 
@property (nonatomic,readonly) char hasRawCoordinate; 
@property (nonatomic,retain) GEOLatLng * rawCoordinate; 
@property (assign,nonatomic) char hasRawCourse; 
@property (assign,nonatomic) double rawCourse; 
@property (assign,nonatomic) char hasMatchQuality; 
@property (assign,nonatomic) int matchQuality; 
@property (assign,nonatomic) char hasFormOfWay; 
@property (assign,nonatomic) int formOfWay; 
@property (assign,nonatomic) char hasRoadClass; 
@property (assign,nonatomic) int roadClass; 
@property (assign,nonatomic) char hasTransportType; 
@property (assign,nonatomic) int transportType; 
@property (nonatomic,retain) GEOLatLng * latLng; 
@property (assign,nonatomic) char hasType; 
@property (assign,nonatomic) int type; 
@property (assign,nonatomic) char hasTimestamp; 
@property (assign,nonatomic) double timestamp; 
@property (assign,nonatomic) char hasAltitude; 
@property (assign,nonatomic) int altitude; 
@property (assign,nonatomic) char hasHorizontalAccuracy; 
@property (assign,nonatomic) double horizontalAccuracy; 
@property (assign,nonatomic) char hasVerticalAccuracy; 
@property (assign,nonatomic) double verticalAccuracy; 
@property (assign,nonatomic) char hasSpeed; 
@property (assign,nonatomic) double speed; 
@property (assign,nonatomic) char hasHeading; 
@property (assign,nonatomic) double heading; 
@property (assign,nonatomic) char hasCourse; 
@property (assign,nonatomic) double course; 
@property (assign,nonatomic) char hasLevelOrdinal; 
@property (assign,nonatomic) int levelOrdinal; 
@property (nonatomic,readonly) char hasCoarseMetadata; 
@property (nonatomic,retain) GEOCoarseLocationMetadata * coarseMetadata; 
@property (nonatomic,readonly) PBUnknownFields * unknownFields; 
+(char)isValid:(id)arg1 ;
-(id)_initWithCLClientLocation:(const SCD_Struct_GE203*)arg1 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(char)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(id)description;
-(id)init;
-(void)setType:(int)arg1 ;
-(id)initWithData:(id)arg1 ;
-(int)type;
-(id)initWithDictionary:(id)arg1 ;
-(id)dictionaryRepresentation;
-(double)timestamp;
-(GEOCoarseLocationLatLng)coordinate;
-(void)setSpeed:(double)arg1 ;
-(double)speed;
-(id)initWithLocation:(id)arg1 ;
-(void)mergeFrom:(id)arg1 ;
-(char)readFrom:(id)arg1 ;
-(void)writeTo:(id)arg1 ;
-(void)copyTo:(id)arg1 ;
-(int)altitude;
-(int)transportType;
-(void)setTimestamp:(double)arg1 ;
-(char)hasTimestamp;
-(void)setHasType:(char)arg1 ;
-(char)hasType;
-(id)typeAsString:(int)arg1 ;
-(int)StringAsType:(id)arg1 ;
-(double)horizontalAccuracy;
-(void)setHorizontalAccuracy:(double)arg1 ;
-(double)verticalAccuracy;
-(void)setVerticalAccuracy:(double)arg1 ;
-(void)setAltitude:(int)arg1 ;
-(double)course;
-(void)setCourse:(double)arg1 ;
-(void)setHasHorizontalAccuracy:(char)arg1 ;
-(char)hasHorizontalAccuracy;
-(void)setHasAltitude:(char)arg1 ;
-(char)hasAltitude;
-(void)setHasVerticalAccuracy:(char)arg1 ;
-(char)hasVerticalAccuracy;
-(void)setHasCourse:(char)arg1 ;
-(char)hasCourse;
-(void)setHasSpeed:(char)arg1 ;
-(char)hasSpeed;
-(void)setTransportType:(int)arg1 ;
-(id)initWithLatitude:(double)arg1 longitude:(double)arg2 ;
-(int)referenceFrame;
-(GEOLatLng *)latLng;
-(void)setReferenceFrame:(int)arg1 ;
-(void)readAll:(char)arg1 ;
-(id)jsonRepresentation;
-(id)initWithJSON:(id)arg1 ;
-(GEOLatLng *)rawCoordinate;
-(PBUnknownFields *)unknownFields;
-(void)clearUnknownFields:(char)arg1 ;
-(void)clearSensitiveFields;
-(int)roadClass;
-(int)formOfWay;
-(void)setHasTimestamp:(char)arg1 ;
-(unsigned long long)transitID;
-(void)setLatLng:(GEOLatLng *)arg1 ;
-(void)setHeading:(double)arg1 ;
-(char)hasTransportType;
-(double)heading;
-(void)setHasTransportType:(char)arg1 ;
-(id)transportTypeAsString:(int)arg1 ;
-(int)StringAsTransportType:(id)arg1 ;
-(id)initWithGEOCoordinate:(GEOCoarseLocationLatLng)arg1 ;
-(double)courseAccuracy;
-(char)isMatchedLocation;
-(double)rawCourse;
-(void)setCoarseMetadata:(GEOCoarseLocationMetadata *)arg1 ;
-(void)setHasHeading:(char)arg1 ;
-(char)hasHeading;
-(void)setLevelOrdinal:(int)arg1 ;
-(void)setHasLevelOrdinal:(char)arg1 ;
-(char)hasCoarseMetadata;
-(void)setHasReferenceFrame:(char)arg1 ;
-(char)hasReferenceFrame;
-(id)referenceFrameAsString:(int)arg1 ;
-(int)StringAsReferenceFrame:(id)arg1 ;
-(id)initWithLocation:(id)arg1 floorOrdinal:(int)arg2 ;
-(id)initWithLocation:(id)arg1 isUserLocation:(char)arg2 floorOrdinal:(int)arg3 ;
-(id)initWithLatitude:(double)arg1 longitude:(double)arg2 floorOrdinal:(int)arg3 ;
-(id)initWithGEOCoordinate:(GEOCoarseLocationLatLng)arg1 isUserLocation:(char)arg2 floorOrdinal:(int)arg3 ;
-(id)initWithLatitude:(double)arg1 longitude:(double)arg2 isUserLocation:(char)arg3 floorOrdinal:(int)arg4 ;
-(char)hasCourseAccuracy;
-(id)initWithGEOCoordinate:(GEOCoarseLocationLatLng)arg1 isUserLocation:(char)arg2 ;
-(id)initWithGEOCoordinate:(GEOCoarseLocationLatLng)arg1 floorOrdinal:(int)arg2 ;
-(char)hasAccurateCourse;
-(char)hasLevelOrdinal;
-(int)levelOrdinal;
-(void)setTransitID:(unsigned long long)arg1 ;
-(void)clearSensitiveFieldsForCoarseLocation;
-(void)applyCoarseLocationRandomizationWithMaximumDistance:(double)arg1 ;
-(char)hasIsShifted;
-(char)isShifted;
-(void)setCourseAccuracy:(double)arg1 ;
-(void)setHasCourseAccuracy:(char)arg1 ;
-(void)setSpeedAccuracy:(double)arg1 ;
-(void)setHasSpeedAccuracy:(char)arg1 ;
-(void)setRawCoordinate:(GEOLatLng *)arg1 ;
-(void)setRawCourse:(double)arg1 ;
-(void)setHasRawCourse:(char)arg1 ;
-(void)setIsShifted:(char)arg1 ;
-(char)hasTransitID;
-(char)hasRawCoordinate;
-(char)hasRawCourse;
-(GEOCoarseLocationMetadata *)coarseMetadata;
-(void)setIsMatchedLocation:(char)arg1 ;
-(void)setMatchQuality:(int)arg1 ;
-(void)setFormOfWay:(int)arg1 ;
-(void)setRoadClass:(int)arg1 ;
-(char)hasSpeedAccuracy;
-(char)hasIsMatchedLocation;
-(char)hasMatchQuality;
-(char)hasFormOfWay;
-(char)hasRoadClass;
-(double)speedAccuracy;
-(void)setHasIsMatchedLocation:(char)arg1 ;
-(void)setHasIsShifted:(char)arg1 ;
-(void)setHasTransitID:(char)arg1 ;
-(int)matchQuality;
-(void)setHasMatchQuality:(char)arg1 ;
-(id)matchQualityAsString:(int)arg1 ;
-(int)StringAsMatchQuality:(id)arg1 ;
-(void)setHasFormOfWay:(char)arg1 ;
-(id)formOfWayAsString:(int)arg1 ;
-(int)StringAsFormOfWay:(id)arg1 ;
-(void)setHasRoadClass:(char)arg1 ;
-(id)roadClassAsString:(int)arg1 ;
-(int)StringAsRoadClass:(id)arg1 ;
@end

