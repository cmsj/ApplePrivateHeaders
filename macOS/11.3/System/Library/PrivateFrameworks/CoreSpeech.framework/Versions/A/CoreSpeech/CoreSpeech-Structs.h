/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:17 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/CoreSpeech.framework/Versions/A/CoreSpeech
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct OpaqueExtAudioFile* OpaqueExtAudioFileRef;

typedef struct AudioStreamBasicDescription {
	double mSampleRate;
	unsigned mFormatID;
	unsigned mFormatFlags;
	unsigned mBytesPerPacket;
	unsigned mFramesPerPacket;
	unsigned mBytesPerFrame;
	unsigned mChannelsPerFrame;
	unsigned mBitsPerChannel;
	unsigned mReserved;
} AudioStreamBasicDescription;

typedef struct _NSZone* NSZoneRef;

typedef struct BTSessionImpl* BTSessionImplRef;

typedef struct BTLocalDeviceImpl* BTLocalDeviceImplRef;

typedef struct BTDeviceImpl* BTDeviceImplRef;

typedef struct OpaqueAudioConverter* OpaqueAudioConverterRef;

typedef struct IONotificationPort* IONotificationPortRef;

typedef struct OpaqueFFTSetup* OpaqueFFTSetupRef;

typedef struct __CFRunLoopSource* CFRunLoopSourceRef;

typedef struct _compressed_pair<SmartSiriVolume *, std::__1::default_delete<SmartSiriVolume>> {
	SmartSiriVolume __value_;
} compressed_pair<SmartSiriVolume *, std::__1::default_delete<SmartSiriVolume>>;

typedef struct unique_ptr<SmartSiriVolume, std::__1::default_delete<SmartSiriVolume>> {
	compressed_pair<SmartSiriVolume *, std::__1::default_delete<SmartSiriVolume>> __ptr_;
} unique_ptr<SmartSiriVolume, std::__1::default_delete<SmartSiriVolume>>;

typedef struct _compressed_pair<float *, std::__1::allocator<float>> {
	float __value_;
} compressed_pair<float *, std::__1::allocator<float>>;

typedef struct vector<float, std::__1::allocator<float>> {
	float __begin_;
	float __end_;
	compressed_pair<float *, std::__1::allocator<float>> __end_cap_;
} vector<float, std::__1::allocator<float>>;

typedef struct _compressed_pair<BatchBeepCanceller *, std::__1::default_delete<BatchBeepCanceller>> {
	BatchBeepCanceller __value_;
} compressed_pair<BatchBeepCanceller *, std::__1::default_delete<BatchBeepCanceller>>;

typedef struct unique_ptr<BatchBeepCanceller, std::__1::default_delete<BatchBeepCanceller>> {
	compressed_pair<BatchBeepCanceller *, std::__1::default_delete<BatchBeepCanceller>> __ptr_;
} unique_ptr<BatchBeepCanceller, std::__1::default_delete<BatchBeepCanceller>>;

typedef struct _compressed_pair<short *, std::__1::allocator<short>> {
	short __value_;
} compressed_pair<short *, std::__1::allocator<short>>;

typedef struct vector<short, std::__1::allocator<short>> {
	short __begin_;
	short __end_;
	compressed_pair<short *, std::__1::allocator<short>> __end_cap_;
} vector<short, std::__1::allocator<short>>;

typedef struct _compressed_pair<corespeech::CSAudioCircularBufferImpl<unsigned char> *, std::__1::default_delete<corespeech::CSAudioCircularBufferImpl<unsigned char>>> {
	CSAudioCircularBufferImpl<unsigned char> __value_;
} compressed_pair<corespeech::CSAudioCircularBufferImpl<unsigned char> *, std::__1::default_delete<corespeech::CSAudioCircularBufferImpl<unsigned char>>>;

typedef struct unique_ptr<corespeech::CSAudioCircularBufferImpl<unsigned char>, std::__1::default_delete<corespeech::CSAudioCircularBufferImpl<unsigned char>>> {
	compressed_pair<corespeech::CSAudioCircularBufferImpl<unsigned char> *, std::__1::default_delete<corespeech::CSAudioCircularBufferImpl<unsigned char>>> __ptr_;
} unique_ptr<corespeech::CSAudioCircularBufferImpl<unsigned char>, std::__1::default_delete<corespeech::CSAudioCircularBufferImpl<unsigned char>>>;

typedef struct AudioBuffer {
	unsigned mNumberChannels;
	unsigned mDataByteSize;
	void mData;
} AudioBuffer;

typedef struct AudioBufferList {
	unsigned mNumberBuffers;
	AudioBuffer mBuffers[1];
} AudioBufferList;

