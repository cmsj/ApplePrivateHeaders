/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:15 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/FileProviderDaemon.framework/Versions/A/FileProviderDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/FPCancellable.h>

@protocol OS_dispatch_queue, OS_dispatch_semaphore;
@class FPDMoveOperation, FPMoveInfo, FPDActionOperationQueue, FPDMoveWriter, NSMutableSet, NSError, NSObject;

@interface FPDMoveReader : NSObject <FPCancellable> {

	FPDMoveOperation* _operation;
	FPMoveInfo* _info;
	FPDActionOperationQueue* _moveQueue;
	FPDMoveWriter* _writer;
	char _startedPreflight;
	char _finishedPreflight;
	char _willMaterializeTargetFolder;
	char _isTargetFolderMaterialized;
	unsigned long long _depth;
	NSMutableSet* _cancelledRoots;
	char __cancelled;
	NSError* _error;
	NSObject*<OS_dispatch_queue> _queue;
	unsigned long long _logSection;
	NSObject*<OS_dispatch_semaphore> _clientUnblockSema;
	/*^block*/id _rootPreflightCompletionBlock;
	/*^block*/id _preflightCompletionBlock;
	/*^block*/id _startDownloadBlock;
	/*^block*/id _errorBlock;

}

@property (nonatomic,copy) id rootPreflightCompletionBlock;              //@synthesize rootPreflightCompletionBlock=_rootPreflightCompletionBlock - In the implementation block
@property (nonatomic,copy) id preflightCompletionBlock;                  //@synthesize preflightCompletionBlock=_preflightCompletionBlock - In the implementation block
@property (nonatomic,copy) id startDownloadBlock;                        //@synthesize startDownloadBlock=_startDownloadBlock - In the implementation block
@property (nonatomic,copy) id errorBlock;                                //@synthesize errorBlock=_errorBlock - In the implementation block
+(char)_hasDiskWriterSupportForDomain:(id)arg1 ;
-(id)init;
-(void)start;
-(void)cancel;
-(char)_isCancelled;
-(id)errorBlock;
-(void)setErrorBlock:(id)arg1 ;
-(void)_run;
-(void)_finishWithError:(id)arg1 ;
-(void)dumpStateTo:(id)arg1 ;
-(void)cancelRoot:(id)arg1 ;
-(id)initWithMoveWriter:(id)arg1 operation:(id)arg2 queue:(id)arg3 ;
-(void)setRootPreflightCompletionBlock:(id)arg1 ;
-(void)setPreflightCompletionBlock:(id)arg1 ;
-(void)setStartDownloadBlock:(id)arg1 ;
-(void)_t_unblock;
-(void)_progressComputationPreflight:(id)arg1 ;
-(void)verifyTargetURL:(/*^block*/id)arg1 ;
-(long long)_filesizeBitsSupportAtPath:(id)arg1 ;
-(char)_shouldCheckFileSystemBitsForRoot:(id)arg1 targetFolderURL:(id)arg2 ;
-(char)_shouldCheckSpaceForRoot:(id)arg1 targetFolderURL:(id)arg2 ;
-(char)_isRootCancelled:(id)arg1 ;
-(id)rootPreflightCompletionBlock;
-(char)_isSpaceAvailableForWrite:(long long)arg1 atTargetPath:(id)arg2 ;
-(id)preflightCompletionBlock;
-(id)_getTargetFolderFor:(id)arg1 root:(id)arg2 error:(id*)arg3 ;
-(id)_targetNameForSource:(id)arg1 ;
-(id)startDownloadBlock;
-(char)_shouldUseDiskWriterToPerformMoveForItem:(id)arg1 ;
-(char)_isSingleMoveForRoot:(id)arg1 ;
-(char)_enqueueItem:(id)arg1 forRoot:(id)arg2 atomically:(char)arg3 useDiskWriter:(char)arg4 ;
-(void)_t_waitForUnblock;
-(void)_bailOutOfRoot:(id)arg1 ;
-(void)_enqueueAtomsForRoot:(id)arg1 ;
@end

