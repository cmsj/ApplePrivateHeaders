/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:17 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/NeutrinoCore.framework/Versions/A/NeutrinoCore
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue;
@class NSObject, NSMutableDictionary;

@interface NUGlobalSettings : NSObject {

	NSObject*<OS_dispatch_queue> _queue;
	NSMutableDictionary* _settings;

}
+(void)reset;
+(id)globalSettings;
+(void)setCacheNodeDirectoryURL:(id)arg1 ;
+(char)deviceDisableMetal;
+(char)deviceDisableOpenGL;
+(char)devicePrintRenderer;
+(void)setDevicePrintRenderer:(char)arg1 ;
+(long long)deviceDefaultSampleMode;
+(void)setDeviceDefaultSampleMode:(long long)arg1 ;
+(long long)storagePoolNonPurgeableLimit;
+(void)setStoragePoolNonPurgeableLimit:(long long)arg1 ;
+(long long)storagePoolPurgeableLimit;
+(void)setStoragePoolPurgeableLimit:(long long)arg1 ;
+(double)storagePoolMigrationDelay;
+(void)setStoragePoolMigrationDelay:(double)arg1 ;
+(char)surfaceStorageFactoryUsePool;
+(void)setSurfaceStorageFactoryUsePool:(char)arg1 ;
+(char)bufferStorageFactoryUsePool;
+(void)setBufferStorageFactoryUsePool:(char)arg1 ;
+(char)imageRenderJobUseSurfaceRenderer;
+(void)setImageRenderJobUseSurfaceRenderer:(char)arg1 ;
+(char)imageRenderJobUseTextureRenderer;
+(void)setImageRenderJobUseTextureRenderer:(char)arg1 ;
+(double)renderJSPipelineTimeout;
+(void)setRenderJSPipelineTimeout:(double)arg1 ;
+(char)rendererUseHalfFloat;
+(void)setRendererUseHalfFloat:(char)arg1 ;
+(char)rendererClampToAlpha;
+(void)setRendererClampToAlpha:(char)arg1 ;
+(char)rendererUseP3Linear;
+(void)setRendererUseP3Linear:(char)arg1 ;
+(long long)imageTileSize;
+(void)setImageTileSize:(long long)arg1 ;
+(long long)imageTileBorder;
+(void)setImageTileBorder:(long long)arg1 ;
+(char)imageSourceDisableRAW;
+(void)setImageSourceDisableRAW:(char)arg1 ;
+(char)imageSourceDisableCacheImmediately;
+(void)setImageSourceDisableCacheImmediately:(char)arg1 ;
+(long long)cacheNodeCacheSizeLimit;
+(void)setCacheNodeCacheSizeLimit:(long long)arg1 ;
+(long long)cacheNodeFilePermissions;
+(void)setCacheNodeFilePermissions:(long long)arg1 ;
+(double)cacheNodeImageCompression;
+(void)setCacheNodeImageCompression:(double)arg1 ;
+(char)isViewDebugEnabled;
+(void)setViewDebugEnabled:(char)arg1 ;
+(id)cacheNodeDirectoryURL;
+(char)renderVideoLive;
+(void)setRenderVideoLive:(char)arg1 ;
+(char)platformHasWideColor;
+(void)setPlatformHasWideColor:(char)arg1 ;
+(id)pipelineSourceURL;
+(void)setPipelineSourceURL:(id)arg1 ;
+(char)imageLayerDebug;
+(void)setImageLayerDebug:(char)arg1 ;
+(char)displayDisableDeepColor;
+(void)setDisplayDisableDeepColor:(char)arg1 ;
+(char)displayForceDeepColor;
+(void)setDisplayForceDeepColor:(char)arg1 ;
+(char)displayDisableColorMatching;
+(void)setDisplayDisableColorMatching:(char)arg1 ;
+(char)renderTransparencyOverBlack;
+(void)setRenderTransparencyOverBlack:(char)arg1 ;
+(char)renderTransparencyOpaque;
+(void)setRenderTransparencyOpaque:(char)arg1 ;
+(void)setUpCacheNodeDirectoryWithComponent:(id)arg1 ;
+(char)logPeakRenderCIUsuage;
+(void)setLogPeakRenderCIUsuage:(char)arg1 ;
+(char)tileAssemblyCABased;
+(void)setTileAssemblyCABased:(char)arg1 ;
+(char)runNeutrinoSynchronously;
+(void)setRunNeutrinoSynchronously:(char)arg1 ;
+(char)disableIOSurfacePortaitExport;
+(void)setDisableIOSurfacePortaitExport:(char)arg1 ;
+(char)enableHDRSupport;
+(void)setEnableHDRSupport:(char)arg1 ;
+(char)allAssetsCanUseHDRPipeline;
+(void)setAllAssetsCanUseHDRPipeline:(char)arg1 ;
+(double)HLGOpticalScale;
+(char)disablePacked10BitPixelFormats;
+(void)setDisablePacked10BitPixelFormats:(char)arg1 ;
+(unsigned long long)videoCompositorDebugMode;
+(void)setVideoCompositorDebugMode:(unsigned long long)arg1 ;
+(char)alwaysRequireHardwareVideoEncoder;
+(void)setAlwaysRequireHardwareVideoEncoder:(char)arg1 ;
+(char)disableMeteorGainMapGeneration;
+(void)setDisableMeteorGainMapGeneration:(char)arg1 ;
-(id)init;
-(void)reset;
-(void)setSetting:(id)arg1 forKey:(id)arg2 ;
-(id)settingForKey:(id)arg1 defaultValue:(/*^block*/id)arg2 ;
-(id)_settingForKey:(id)arg1 defaultValue:(/*^block*/id)arg2 ;
-(char)boolSettingForKey:(id)arg1 defaultValue:(/*^block*/id)arg2 ;
-(long long)integerSettingForKey:(id)arg1 defaultValue:(/*^block*/id)arg2 ;
-(double)doubleSettingForKey:(id)arg1 defaultValue:(/*^block*/id)arg2 ;
-(id)stringSettingForKey:(id)arg1 defaultValue:(/*^block*/id)arg2 ;
-(id)urlSettingForKey:(id)arg1 defaultValue:(/*^block*/id)arg2 ;
@end

