/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:36 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/CoreSuggestions.framework/Versions/A/CoreSuggestions
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <CoreSuggestions/CoreSuggestions-Structs.h>
#import <libobjc.A.dylib/NSCopying.h>
#import <libobjc.A.dylib/NSSecureCoding.h>

@class NSTimeZone, NSDate;

@interface SGSimpleTimeRange : NSObject <NSCopying, NSSecureCoding> {

	SGUnixTimestamp_ _start;
	SGUnixTimestamp_ _end;
	NSTimeZone* _startTimeZone;
	NSTimeZone* _endTimeZone;
	char _floating;
	long long _startUTCOffsetSeconds;
	long long _endUTCOffsetSeconds;

}

@property (nonatomic,readonly) SGUnixTimestamp_ start;                       //@synthesize start=_start - In the implementation block
@property (nonatomic,readonly) SGUnixTimestamp_ end;                         //@synthesize end=_end - In the implementation block
@property (nonatomic,readonly) NSDate * startDate; 
@property (nonatomic,readonly) NSDate * endDate; 
@property (nonatomic,readonly) long long startUTCOffsetSeconds;              //@synthesize startUTCOffsetSeconds=_startUTCOffsetSeconds - In the implementation block
@property (nonatomic,readonly) long long endUTCOffsetSeconds;                //@synthesize endUTCOffsetSeconds=_endUTCOffsetSeconds - In the implementation block
@property (getter=isFloating,nonatomic,readonly) char floating;              //@synthesize floating=_floating - In the implementation block
@property (nonatomic,readonly) NSTimeZone * startTimeZone; 
@property (nonatomic,readonly) NSTimeZone * endTimeZone; 
+(char)supportsSecureCoding;
+(SGUnixTimestamp_)fromFloatingTime:(SGUnixTimestamp_)arg1 ;
+(id)rangeWithStart:(SGUnixTimestamp_)arg1 end:(SGUnixTimestamp_)arg2 timeZone:(id)arg3 ;
+(SGUnixTimestamp_)toFloatingTime:(SGUnixTimestamp_)arg1 ;
+(SGUnixTimestamp_)toFloatingTime:(SGUnixTimestamp_)arg1 withDSTAmbiguityPreferences:(id)arg2 ;
+(id)dateFromGregorianComponents:(id)arg1 ;
+(char)isAllDayComponents:(id)arg1 ;
+(char)hasYearMonthDayComponents:(id)arg1 ;
+(id)rangeWithGregorianStartComponents:(id)arg1 endComponents:(id)arg2 ;
+(id)rangeWithStart:(SGUnixTimestamp_)arg1 startTimeZone:(id)arg2 end:(SGUnixTimestamp_)arg3 endTimeZone:(id)arg4 ;
+(id)rangeWithStartDate:(id)arg1 startTimeZone:(id)arg2 endDate:(id)arg3 endTimeZone:(id)arg4 ;
+(id)utcRangeWithStart:(SGUnixTimestamp_)arg1 end:(SGUnixTimestamp_)arg2 ;
+(id)rangeWithStart:(SGUnixTimestamp_)arg1 duration:(double)arg2 timeZone:(id)arg3 ;
+(id)utcRangeWithStart:(SGUnixTimestamp_)arg1 duration:(double)arg2 ;
+(id)floatingRangeWithUTCStartDate:(id)arg1 endDate:(id)arg2 ;
+(id)floatingRangeWithUTCStart:(SGUnixTimestamp_)arg1 end:(SGUnixTimestamp_)arg2 ;
+(id)floatingRangeWithLocalStartDate:(id)arg1 endDate:(id)arg2 ;
+(id)floatingRangeWithLocalStart:(SGUnixTimestamp_)arg1 end:(SGUnixTimestamp_)arg2 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(char)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(SGUnixTimestamp_)start;
-(NSDate *)endDate;
-(NSDate *)startDate;
-(SGUnixTimestamp_)end;
-(char)isFloating;
-(id)startDateComponents;
-(id)endDateComponents;
-(id)initUTCFloatingWithStart:(SGUnixTimestamp_)arg1 end:(SGUnixTimestamp_)arg2 ;
-(id)initWithStart:(SGUnixTimestamp_)arg1 startUTCOffsetSeconds:(long long)arg2 end:(SGUnixTimestamp_)arg3 endUTCOffsetSeconds:(long long)arg4 ;
-(id)absoluteRange;
-(id)stableStringRepresentation;
-(NSTimeZone *)startTimeZone;
-(NSTimeZone *)endTimeZone;
-(id)_componentsForDate:(id)arg1 timeZone:(id)arg2 ;
-(char)isValidAllDayRange;
-(char)startedMoreThan24HoursAgo;
-(void)applyToEKEvent:(id)arg1 isAllDay:(char)arg2 isFloating:(char)arg3 ;
-(char)isEqualToSimpleTimeRange:(id)arg1 ;
-(long long)startUTCOffsetSeconds;
-(long long)endUTCOffsetSeconds;
@end

