/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:00 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/FeedbackLogger.framework/Versions/A/FeedbackLogger
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_os_log;
#import <FeedbackLogger/FeedbackLogger-Structs.h>
@class NSString, NSObject, FLLoggingContext;

@interface FLSQLitePersistence : NSObject {

	AB _configured;
	NSString* _databasePath;
	sqlite3Ref _db;
	sqlite3_stmtRef _insertRecordsStatement;
	sqlite3_stmtRef _iteratePayloadStatement;
	NSObject*<OS_os_log> _log;
	FLLoggingContext* _context;
	NSString* _bundleIdentifier;
	unsigned long long _maxBatchPayloadInBytes;
	unsigned long long _maxAllowedDatabaseSizeInBytes;
	NSString* _currentBatchIdentifier;
	unsigned long long _currentBatchPayloadSize;

}

@property (nonatomic,copy,readonly) NSString * databasePath;                                //@synthesize databasePath=_databasePath - In the implementation block
@property (assign,nonatomic) sqlite3Ref db;                                                 //@synthesize db=_db - In the implementation block
@property (assign,nonatomic) sqlite3_stmtRef insertRecordsStatement;                        //@synthesize insertRecordsStatement=_insertRecordsStatement - In the implementation block
@property (assign,nonatomic) sqlite3_stmtRef iteratePayloadStatement;                       //@synthesize iteratePayloadStatement=_iteratePayloadStatement - In the implementation block
@property (nonatomic,retain) NSObject*<OS_os_log> log;                                      //@synthesize log=_log - In the implementation block
@property (nonatomic,retain) FLLoggingContext * context;                                    //@synthesize context=_context - In the implementation block
@property (nonatomic,copy,readonly) NSString * bundleIdentifier;                            //@synthesize bundleIdentifier=_bundleIdentifier - In the implementation block
@property (assign,nonatomic) AB configured;                                                 //@synthesize configured=_configured - In the implementation block
@property (assign,nonatomic) unsigned long long maxBatchPayloadInBytes;                     //@synthesize maxBatchPayloadInBytes=_maxBatchPayloadInBytes - In the implementation block
@property (assign,nonatomic) unsigned long long maxAllowedDatabaseSizeInBytes;              //@synthesize maxAllowedDatabaseSizeInBytes=_maxAllowedDatabaseSizeInBytes - In the implementation block
@property (nonatomic,copy) NSString * currentBatchIdentifier;                               //@synthesize currentBatchIdentifier=_currentBatchIdentifier - In the implementation block
@property (assign,nonatomic) unsigned long long currentBatchPayloadSize;                    //@synthesize currentBatchPayloadSize=_currentBatchPayloadSize - In the implementation block
+(id)batchStatusDescription:(int)arg1 ;
-(void)dealloc;
-(char)open;
-(NSString *)bundleIdentifier;
-(FLLoggingContext *)context;
-(void)setContext:(FLLoggingContext *)arg1 ;
-(sqlite3Ref)db;
-(void)setDb:(sqlite3Ref)arg1 ;
-(NSString *)databasePath;
-(NSObject*<OS_os_log>)log;
-(void)setLog:(NSObject*<OS_os_log>)arg1 ;
-(AB)configured;
-(void)setConfigured:(AB)arg1 ;
-(char)deleteDatabase;
-(char)createDatabase;
-(char)closeOpenBatches;
-(char)purgeBatch:(id)arg1 ;
-(char)persist:(id)arg1 ;
-(id)initWithPath:(id)arg1 application:(id)arg2 loggingContext:(id)arg3 ;
-(char)initializeConnectionForUseBy:(int)arg1 ;
-(char)tryPrepare:(const char*)arg1 preparedStatement:(inout sqlite3_stmt*)arg2 ;
-(id)_getBatchIdsHelper:(sqlite3_stmtRef)arg1 ;
-(char)_updateMetadataHelperForBatch:(id)arg1 query:(const char*)arg2 ;
-(char)_updateStatusHelperForBatch:(id)arg1 toStatus:(int)arg2 ;
-(char)getIntValueForPragma:(id)arg1 into:(inout int*)arg2 ;
-(void)setCurrentBatchIdentifier:(NSString *)arg1 ;
-(void)setCurrentBatchPayloadSize:(unsigned long long)arg1 ;
-(char)executeSQLStatement:(const char*)arg1 ;
-(char)executeSQLStatement:(const char*)arg1 usingTransaction:(char)arg2 ;
-(char)__purgeStatementHelper:(const char*)arg1 forBatchId:(id)arg2 ;
-(char)executeInTransactionMultipleSQLStatements:(id)arg1 ;
-(id)getBatchIdsWithStatus:(int)arg1 ;
-(id)getBatchIdsWithAllStatuses;
-(id)getPurgableBatchIds;
-(id)getRecordsRangeStart:(long long)arg1 end:(long long)arg2 ;
-(char)getBatchMetadata:(id)arg1 batchMetadata:(inout id*)arg2 ;
-(char)updateStatusForBatch:(id)arg1 toStatus:(int)arg2 ;
-(int)getDataVersion;
-(char)initializeNewBatch;
-(char)recoverOrphanedProcessingBatches;
-(char)markBatchesforPurge;
-(long long)doBatchesHousekeeping;
-(char)purgeAllBatches;
-(int)getSchemaVersion;
-(char)updateSchema;
-(unsigned long long)maxAllowedDatabaseSizeInBytes;
-(char)prepareSchema;
-(unsigned long long)getCurrentDatabaseSize;
-(char)setDatabaseSizeLimit;
-(char)prepareStatements;
-(char)tryRolloverBatchIfNecessary:(unsigned long long)arg1 ;
-(char)iteratePayloadForBatch:(id)arg1 codeblock:(/*^block*/id)arg2 ;
-(sqlite3_stmtRef)insertRecordsStatement;
-(void)setInsertRecordsStatement:(sqlite3_stmtRef)arg1 ;
-(sqlite3_stmtRef)iteratePayloadStatement;
-(void)setIteratePayloadStatement:(sqlite3_stmtRef)arg1 ;
-(unsigned long long)maxBatchPayloadInBytes;
-(void)setMaxBatchPayloadInBytes:(unsigned long long)arg1 ;
-(void)setMaxAllowedDatabaseSizeInBytes:(unsigned long long)arg1 ;
-(NSString *)currentBatchIdentifier;
-(unsigned long long)currentBatchPayloadSize;
@end

