/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:21 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/EmailDaemon.framework/Versions/A/EmailDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <EmailDaemon/EmailDaemon-Structs.h>
#import <libobjc.A.dylib/EFLoggable.h>
#import <libobjc.A.dylib/EFSignpostable.h>

@protocol OS_dispatch_queue;
@class EDPersistenceDatabase, EDPersistenceDatabaseJournalManager, EDPersistenceHookRegistry, NSObject, NSString;

@interface EDProtectedDatabasePersistence : NSObject <EFLoggable, EFSignpostable> {

	os_unfair_lock_s _initializationLock;
	os_unfair_lock_s _reconciliationLock;
	EDPersistenceDatabase* _database;
	char _isInitialized;
	char _isReconciling;
	EDPersistenceDatabaseJournalManager* _journalManager;
	EDPersistenceHookRegistry* _hookRegistry;
	NSObject*<OS_dispatch_queue> _reconciliationQueue;

}

@property (nonatomic,readonly) EDPersistenceDatabaseJournalManager * journalManager;                 //@synthesize journalManager=_journalManager - In the implementation block
@property (nonatomic,readonly) EDPersistenceHookRegistry * hookRegistry;                             //@synthesize hookRegistry=_hookRegistry - In the implementation block
@property (nonatomic,retain,readonly) NSObject*<OS_dispatch_queue> reconciliationQueue;              //@synthesize reconciliationQueue=_reconciliationQueue - In the implementation block
@property (assign,nonatomic) char isInitialized;                                                     //@synthesize isInitialized=_isInitialized - In the implementation block
@property (assign,nonatomic) char isReconciling;                                                     //@synthesize isReconciling=_isReconciling - In the implementation block
@property (nonatomic,readonly) char supportsJournaling; 
@property (nonatomic,readonly) char protectedDataAvailable; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (readonly) unsigned long long signpostID; 
+(id)log;
+(id)signpostLog;
+(id)protectedDatabaseName;
+(id)journalDatabaseName;
-(void)setDatabase:(id)arg1 ;
-(id)database;
-(unsigned long long)signpostID;
-(char)isInitialized;
-(EDPersistenceDatabaseJournalManager *)journalManager;
-(char)protectedDataAvailable;
-(EDPersistenceHookRegistry *)hookRegistry;
-(void)scheduleRecurringActivity;
-(void)setIsInitialized:(char)arg1 ;
-(void)attachProtectedOrJournalDatabaseToConnectionIfNecessary:(id)arg1 withSchema:(id)arg2 ;
-(void)detachProtectedOrJournalDatabaseFromConnectionIfNecessary:(id)arg1 ;
-(void)reconcileJournalsWithSchema:(id)arg1 completionBlock:(/*^block*/id)arg2 ;
-(id)initWithJournalManager:(id)arg1 hookRegistry:(id)arg2 ;
-(char)supportsJournaling;
-(char)_performOnDemandReconciliationForConnection:(id)arg1 withSchema:(id)arg2 ;
-(void)_ensureProtectedDatabaseOrJournalIsAttachedToConnection:(id)arg1 withSchema:(id)arg2 ;
-(void)_ensureJournalIsAttachedToConnection:(id)arg1 withSchema:(id)arg2 ;
-(char)_attachProtectedDatabaseToConnection:(id)arg1 withSchema:(id)arg2 error:(id*)arg3 ;
-(char)_isRecoverableError:(id)arg1 ;
-(void)_attachJournalDatabaseToConnection:(id)arg1 withSchema:(id)arg2 ;
-(void)_detachProtectedDatabaseFromConnection:(id)arg1 ;
-(void)_detachJournalDatabaseFromConnection:(id)arg1 ;
-(char)_initializeDatabase:(id)arg1 withConnection:(id)arg2 schema:(id)arg3 error:(id*)arg4 ;
-(char)_updateSqliteSequenceForDatabase:(id)arg1 schema:(id)arg2 withConnection:(id)arg3 error:(id*)arg4 ;
-(id)_allReferencingColumnsForTable:(id)arg1 ;
-(long long)_maxRowIDForColumn:(id)arg1 withConnection:(id)arg2 ;
-(char)isReconciling;
-(void)setIsReconciling:(char)arg1 ;
-(unsigned long long)_reconcileJournalsWithSchema:(id)arg1 connection:(id)arg2 ;
-(unsigned long long)_runReconciliationWithSchema:(id)arg1 connection:(id)arg2 ;
-(void)finishJournalReconciliation:(unsigned long long)arg1 ;
-(unsigned long long)_resultForConnection:(id)arg1 success:(char)arg2 error:(id)arg3 errorMessage:(id)arg4 ;
-(unsigned long long)_mergeSchema:(id)arg1 connection:(id)arg2 journaledRows:(unsigned long long*)arg3 newRows:(unsigned long long*)arg4 ;
-(char)_isJournalMalformedForSchema:(id)arg1 connection:(id)arg2 ;
-(unsigned long long)_mergeTable:(id)arg1 connection:(id)arg2 journaledRows:(unsigned long long*)arg3 newRows:(unsigned long long*)arg4 ;
-(unsigned long long)_executeStatementString:(id)arg1 onConnection:(id)arg2 errorMessage:(id)arg3 ;
-(unsigned long long)_deleteRowIDs:(id)arg1 fromJournal:(id)arg2 withConnection:(id)arg3 ;
-(void)addAdditionalCriteriaToCleanupActivity:(id)arg1 ;
-(id)_databaseIDsToDeleteForTable:(id)arg1 ;
-(void)_deleteDatabaseIDs:(id)arg1 fromTable:(id)arg2 ;
-(char)_removeExistingDatabaseIDs:(id)arg1 withColumn:(id)arg2 connection:(id)arg3 ;
-(id)initWithBasePath:(id)arg1 hookRegistry:(id)arg2 ;
-(unsigned long long)_executeUpdateStatement:(id)arg1 onConnection:(id)arg2 errorMessage:(id)arg3 ;
-(NSObject*<OS_dispatch_queue>)reconciliationQueue;
@end

