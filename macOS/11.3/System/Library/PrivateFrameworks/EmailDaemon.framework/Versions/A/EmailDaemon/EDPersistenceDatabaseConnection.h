/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:21 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/EmailDaemon.framework/Versions/A/EmailDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <EmailDaemon/EmailDaemon-Structs.h>
#import <libobjc.A.dylib/EFLoggable.h>

@protocol EDPersistenceDatabaseConnectionDelegate;
@class NSString, EDPersistenceDatabaseJournal, EFSQLConnection;

@interface EDPersistenceDatabaseConnection : NSObject <EFLoggable> {

	char _isWriter;
	id<EDPersistenceDatabaseConnectionDelegate> _delegate;
	NSString* _protectedDatabaseName;
	NSString* _journalDatabaseName;
	EDPersistenceDatabaseJournal* _journal;
	EFSQLConnection* _sqlConnection;
	NSString* _basePath;

}

@property (nonatomic,readonly) EFSQLConnection * sqlConnection;                    //@synthesize sqlConnection=_sqlConnection - In the implementation block
@property (nonatomic,readonly) NSString * basePath;                                //@synthesize basePath=_basePath - In the implementation block
@property (nonatomic,readonly) NSString * fullPath; 
@property (nonatomic,copy,readonly) NSString * protectedDatabasePath; 
@property (nonatomic,readonly) char isValid; 
@property (nonatomic,readonly) char protectedDatabaseAttached; 
@property (nonatomic,readonly) char journalDatabaseAttached; 
@property (nonatomic,readonly) sqlite3Ref sqlDB; 
@property (nonatomic,readonly) char isWriter; 
@property (nonatomic,readonly) long long lastInsertedDatabaseID; 
@property (nonatomic,readonly) long long transactionGeneration; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)log;
-(void)dealloc;
-(NSString *)description;
-(id)init;
-(char)isValid;
-(void)open;
-(void)close;
-(NSString *)basePath;
-(char)tableExists:(id)arg1 ;
-(NSString *)fullPath;
-(sqlite3Ref)sqlDB;
-(id)preparedStatementForQueryString:(id)arg1 ;
-(char)columnExists:(id)arg1 inTable:(id)arg2 type:(unsigned long long*)arg3 ;
-(char)executeStatementString:(id)arg1 errorMessage:(id)arg2 ;
-(void)handleError:(id)arg1 message:(id)arg2 ;
-(long long)lastInsertedDatabaseID;
-(long long)transactionGeneration;
-(char)executeInsertStatement:(id)arg1 rowsChanged:(unsigned long long*)arg2 ;
-(char)executeInsertStatement:(id)arg1 error:(id*)arg2 ;
-(char)executeUpdateStatement:(id)arg1 error:(id*)arg2 ;
-(char)executeSelectStatement:(id)arg1 withBlock:(/*^block*/id)arg2 error:(id*)arg3 ;
-(char)performWithOptions:(unsigned long long)arg1 transactionError:(id*)arg2 block:(/*^block*/id)arg3 ;
-(char)protectedDatabaseAttached;
-(void)setIsWriter:(char)arg1 ;
-(EFSQLConnection *)sqlConnection;
-(id)initWithBasePath:(id)arg1 databaseName:(id)arg2 isWriter:(char)arg3 delegate:(id)arg4 ;
-(char)isWriter;
-(void)handleSQLResult:(int)arg1 message:(id)arg2 ;
-(char)executeUpsertStatement:(id)arg1 error:(id*)arg2 ;
-(char)executeDeleteStatement:(id)arg1 error:(id*)arg2 ;
-(int)configureSQLConnection;
-(char)detachProtectedDatabase;
-(char)journalDatabaseAttached;
-(char)detachJournalDatabase;
-(long long)transactionTypeForWriting;
-(char)tableExists:(id)arg1 inDatabase:(id)arg2 ;
-(char)columnExists:(id)arg1 inTable:(id)arg2 database:(id)arg3 type:(unsigned long long*)arg4 ;
-(NSString *)protectedDatabasePath;
-(char)attachProtectedDatabaseWithName:(id)arg1 url:(id)arg2 error:(id*)arg3 ;
-(char)attachProtectedDatabaseWithName:(id)arg1 error:(id*)arg2 ;
-(char)attachJournalDatabase:(id)arg1 withName:(id)arg2 error:(id*)arg3 ;
-(id)initForInMemoryDatabaseIsWriter:(char)arg1 delegate:(id)arg2 ;
-(id)initWithSQLDB:(sqlite3Ref)arg1 isWriter:(char)arg2 delegate:(id)arg3 ;
-(char)executeUpdateStatement:(id)arg1 rowsChanged:(unsigned long long*)arg2 ;
-(char)executeUpsertStatement:(id)arg1 rowsChanged:(unsigned long long*)arg2 ;
-(char)executeDeleteStatement:(id)arg1 rowsChanged:(unsigned long long*)arg2 ;
-(void)clearLastInsertedDatabaseID;
-(char)checkForConnectionErrorWithMessage:(id)arg1 ;
-(char)databaseIsAttached:(id)arg1 ;
-(char)attachProtectedDatabaseWithName:(id)arg1 ;
-(char)attachJournalDatabase:(id)arg1 withName:(id)arg2 ;
@end

