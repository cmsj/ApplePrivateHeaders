/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:19 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/DiskManagement.framework/Versions/A/DiskManagement
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <DiskManagement/DiskManagement-Structs.h>
@interface DMAPFS : NSObject {

	id _instPriv;

}
-(int)convertFromHFS:(DADiskRef)arg1 dryRun:(char)arg2 options:(id)arg3 ;
-(int)institutionalRecoveryKeyBlobForVolume:(DMUDSPrivRec*)arg1 keychainFilePath:(id)arg2 keyBlob:(id*)arg3 ;
-(int)snapshotsForVolumeOnly:(DADiskRef)arg1 snapshots:(id*)arg2 ;
-(int)unlockEncryptedVolume:(DADiskRef)arg1 diskUser:(char)arg2 anyUser:(char)arg3 user:(id)arg4 passphrase:(const char*)arg5 passdata:(id)arg6 options:(id)arg7 ;
-(int)resetCryptoUserPassdataForVolume:(DADiskRef)arg1 recoveryUser:(id)arg2 userToReset:(id)arg3 options:(id)arg4 ;
-(int)setDataRecordForVolume:(DADiskRef)arg1 user:(id)arg2 data:(id)arg3 options:(id)arg4 ;
-(int)stateForLockedVolume:(DADiskRef)arg1 user:(id)arg2 rateLimitBackoff:(char*)arg3 backoffTime:(double*)arg4 rateLimitLockout:(char*)arg5 ;
-(int)cryptoMigrationTimeForVolume:(DADiskRef)arg1 timeRemaining:(double*)arg2 ;
-(int)rawDataRecordForVolume:(DADiskRef)arg1 user:(id)arg2 data:(id*)arg3 options:(id)arg4 ;
-(int)runWithPrebootMountedForVolume:(DADiskRef)arg1 blockToRun:(/*^block*/id)arg2 options:(id)arg3 ;
-(int)mountPointForSnapshot:(id)arg1 forVolume:(DADiskRef)arg2 mountPoint:(id*)arg3 ;
-(int)normalizedVolumeForSnapshotOrNotVolume:(DADiskRef)arg1 volume:(_DADisk*)arg2 snapshot:(char*)arg3 ;
-(int)containerForContainerUUID:(id)arg1 container:(_DADisk*)arg2 ;
-(int)capacityResizeMinimumForContainer:(DADiskRef)arg1 minimum:(id*)arg2 dpsMinimum:(id*)arg3 designatedPhysicalStore:(_DADisk*)arg4 ;
-(int)isRecoveryVolume:(DADiskRef)arg1 recoveryRole:(char*)arg2 ;
-(int)isVMVolume:(DADiskRef)arg1 vmRole:(char*)arg2 ;
-(int)isInstallerVolume:(DADiskRef)arg1 installerRole:(char*)arg2 ;
-(int)isBasebandVolume:(DADiskRef)arg1 basebandRole:(char*)arg2 ;
-(int)isUpdateVolume:(DADiskRef)arg1 updateRole:(char*)arg2 ;
-(int)isXartVolume:(DADiskRef)arg1 xartRole:(char*)arg2 ;
-(int)isHardwareVolume:(DADiskRef)arg1 hardwareRole:(char*)arg2 ;
-(int)isInternalVolume:(DADiskRef)arg1 internalRole:(char*)arg2 ;
-(int)isSidecarVolume:(DADiskRef)arg1 sidecarRole:(char*)arg2 ;
-(int)isEnterpriseDataVolume:(DADiskRef)arg1 enterpriseDataRole:(char*)arg2 ;
-(int)isIDiagsVolume:(DADiskRef)arg1 iDiagsRole:(char*)arg2 ;
-(void)dealloc;
-(id)init;
-(id)initWithManager:(id)arg1 ;
-(int)isFusionContainer:(DADiskRef)arg1 fusion:(char*)arg2 ;
-(int)containerForPhysicalStore:(DADiskRef)arg1 container:(_DADisk*)arg2 ;
-(int)volumesForContainer:(DADiskRef)arg1 volumes:(id*)arg2 ;
-(int)isNoBrowseRoleVolume:(DADiskRef)arg1 shouldNotBrowse:(char*)arg2 ;
-(int)containerForVolume:(DADiskRef)arg1 container:(_DADisk*)arg2 ;
-(int)physicalStoresForContainer:(DADiskRef)arg1 physicalStores:(id*)arg2 ;
-(int)deleteContainer:(DADiskRef)arg1 reformatToNewNames:(id)arg2 options:(id)arg3 ;
-(int)addVolumeToContainer:(DADiskRef)arg1 newFilesystem:(id)arg2 newName:(id)arg3 options:(id)arg4 ;
-(int)isEncryptedVolumeLocked:(DADiskRef)arg1 locked:(char*)arg2 ;
-(int)unlockEncryptedVolume:(DADiskRef)arg1 diskUser:(char)arg2 anyUser:(char)arg3 user:(id)arg4 options:(id)arg5 details:(id*)arg6 ;
-(int)deleteVolume:(DADiskRef)arg1 options:(id)arg2 ;
-(int)capacityInUseForVolume:(DADiskRef)arg1 used:(id*)arg2 ;
-(int)volumeForVolumeUUID:(id)arg1 volume:(_DADisk*)arg2 ;
-(int)isFileVaultEnabled:(DADiskRef)arg1 enabled:(char*)arg2 ;
-(int)updatePrebootForVolumeFire:(DADiskRef)arg1 completion:(/*^block*/id)arg2 options:(id)arg3 ;
-(int)updatePrebootForVolume:(DADiskRef)arg1 options:(id)arg2 ;
-(int)isCryptoMigratingForVolume:(DADiskRef)arg1 migrating:(char*)arg2 encrypting:(char*)arg3 ;
-(int)addCryptoUsersToVolume:(DADiskRef)arg1 user:(id)arg2 newUserRecords:(id)arg3 options:(id)arg4 ;
-(int)deleteCryptoUserFromVolume:(DADiskRef)arg1 user:(id)arg2 options:(id)arg3 ;
-(int)verifyCryptoUserPassdataForVolume:(DADiskRef)arg1 options:(id)arg2 success:(char*)arg3 ;
-(int)startMigrationToEncryptedVolume:(DADiskRef)arg1 user:(id)arg2 newUserRecords:(id)arg3 options:(id)arg4 ;
-(int)startMigrationToDecryptedVolume:(DADiskRef)arg1 options:(id)arg2 ;
-(int)cryptoMigrationProgressForVolume:(DADiskRef)arg1 percentComplete:(id*)arg2 ;
-(int)hasCryptoUserForVolume:(DADiskRef)arg1 user:(id)arg2 hasUser:(char*)arg3 ;
-(int)cryptoUserForMacOSUserForVolume:(DADiskRef)arg1 macOSUser:(id)arg2 apfsCryptoUser:(id*)arg3 options:(id)arg4 ;
-(int)cryptoUsersForVolume:(DADiskRef)arg1 users:(id*)arg2 ;
-(int)macOSUserForCryptoUserForVolume:(DADiskRef)arg1 cryptoUser:(id)arg2 macOSUserGUID:(id*)arg3 options:(id)arg4 ;
-(int)credentialRequirementsForVolume:(DADiskRef)arg1 details:(id*)arg2 ;
-(int)isEncryptedVolume:(DADiskRef)arg1 encrypted:(char*)arg2 ;
-(void)cancelCurrentOperation;
-(int)deleteSnapshotForVolume:(DADiskRef)arg1 uuid:(id)arg2 options:(id)arg3 ;
-(int)purgeableSnapshotsForVolume:(DADiskRef)arg1 snapshots:(id*)arg2 ;
-(int)designatedPhysicalStoreForContainer:(DADiskRef)arg1 designatedPhysicalStore:(_DADisk*)arg2 ;
-(int)resizeContainer:(DADiskRef)arg1 newSize:(id)arg2 newMapEntries:(id)arg3 options:(id)arg4 ;
-(int)containers:(id*)arg1 ;
-(int)containerSchemeDiskForContainer:(DADiskRef)arg1 schemeDisk:(_DADisk*)arg2 ;
-(int)capacityFreeForContainer:(DADiskRef)arg1 free:(id*)arg2 ;
-(int)eraseVolume:(DADiskRef)arg1 newFilesystem:(id)arg2 newName:(id)arg3 options:(id)arg4 ;
-(int)verifyMDMKeyForVolume:(DADiskRef)arg1 keydata:(id)arg2 options:(id)arg3 success:(char*)arg4 details:(id*)arg5 ;
-(int)cryptoUserTypeForVolume:(DADiskRef)arg1 user:(id)arg2 type:(unsigned char*)arg3 ;
-(int)volumeGroupForVolume:(DADiskRef)arg1 id:(id*)arg2 ;
-(int)disksForVolumeGroup:(id)arg1 volumeDisks:(id*)arg2 systemVolumeDisks:(id*)arg3 dataVolumeDisks:(id*)arg4 userVolumeDisks:(id*)arg5 container:(_DADisk*)arg6 ;
-(int)volumeUUIDForVolume:(DADiskRef)arg1 UUID:(id*)arg2 ;
-(int)isPrebootVolume:(DADiskRef)arg1 prebootRole:(char*)arg2 ;
-(int)mountedSnapshotsWithVolumePrefix:(DADiskRef)arg1 snapshots:(id*)arg2 ;
-(int)isBackupVolume:(DADiskRef)arg1 backupRole:(char*)arg2 ;
-(int)capacityCeilingForContainer:(DADiskRef)arg1 size:(id*)arg2 ;
-(int)rawCapacityInUseForVolume:(DADiskRef)arg1 used:(id*)arg2 ;
-(int)isDataVolume:(DADiskRef)arg1 dataRole:(char*)arg2 ;
-(int)isSystemVolume:(DADiskRef)arg1 systemRole:(char*)arg2 ;
-(int)inquiryCacheEnable:(char)arg1 ;
-(int)snapshotForMountPoint:(id)arg1 uuid:(id*)arg2 name:(id*)arg3 volume:(_DADisk*)arg4 container:(_DADisk*)arg5 ;
-(int)EFIDriverVersionForMacOSSystemVolume:(DADiskRef)arg1 version:(unsigned long long*)arg2 ;
-(int)isRawEncryptedVolume:(DADiskRef)arg1 encrypted:(char*)arg2 ;
-(int)getSealedState:(DADiskRef)arg1 sealedState:(id*)arg2 ;
-(int)EFIDriverVersionForContainer:(DADiskRef)arg1 version:(unsigned long long*)arg2 ;
-(int)createContainerFromDisks:(id)arg1 options:(id)arg2 ;
-(int)physicalStoreUUIDForPhysicalStore:(DADiskRef)arg1 UUID:(id*)arg2 ;
-(int)roleForVolume:(DADiskRef)arg1 roleKey:(id*)arg2 unlocalizedTechnicalName:(id*)arg3 localizedUserName:(id*)arg4 symbol:(id*)arg5 APFSFormat16:(unsigned short*)arg6 ;
-(int)capacityReserveForVolume:(DADiskRef)arg1 reserveOrNull:(id*)arg2 ;
-(int)capacityQuotaForVolume:(DADiskRef)arg1 quotaOrNull:(id*)arg2 ;
-(int)cryptoMigrationStateForVolume:(DADiskRef)arg1 type:(unsigned char*)arg2 state:(unsigned char*)arg3 pausedState:(unsigned char*)arg4 ;
-(int)containerUUIDForContainer:(DADiskRef)arg1 UUID:(id*)arg2 ;
-(int)isCryptoUserVolumeOwnerForVolume:(DADiskRef)arg1 user:(id)arg2 isOwner:(char*)arg3 ;
-(int)cryptoUserPassdataHintForVolume:(DADiskRef)arg1 user:(id)arg2 hintMessage:(id*)arg3 ;
-(int)snapshotsForVolume:(DADiskRef)arg1 snapshots:(id*)arg2 ;
-(int)volumeGroupsForContainer:(DADiskRef)arg1 volumeGroups:(id*)arg2 ;
-(int)isUserVolume:(DADiskRef)arg1 userRole:(char*)arg2 ;
-(int)convertFromHFSDryRun:(DADiskRef)arg1 options:(id)arg2 ;
-(int)convertFromHFS:(DADiskRef)arg1 options:(id)arg2 ;
-(int)deleteVolumeGroup:(id)arg1 options:(id)arg2 ;
-(int)setRoleForVolume:(DADiskRef)arg1 options:(id)arg2 ;
-(int)changeCryptoUserPassdataForVolume:(DADiskRef)arg1 user:(id)arg2 options:(id)arg3 ;
-(int)setCryptoUserPassdataHintForVolume:(DADiskRef)arg1 user:(id)arg2 hintMessage:(id)arg3 options:(id)arg4 ;
-(int)snapshotForName:(id)arg1 forVolume:(DADiskRef)arg2 uuid:(id*)arg3 ;
-(int)nameForSnapshot:(id)arg1 forVolume:(DADiskRef)arg2 name:(id*)arg3 ;
-(int)isDefragmentationEnabledForContainer:(DADiskRef)arg1 enabled:(char*)arg2 ;
-(int)isDefragmentationEnabledForVolume:(DADiskRef)arg1 enabled:(char*)arg2 ;
-(int)setDefragmentationForContainer:(DADiskRef)arg1 enable:(char)arg2 options:(id)arg3 ;
-(int)setDefragmentationForVolume:(DADiskRef)arg1 enable:(char)arg2 options:(id)arg3 ;
-(int)syncCryptoUserDataRecordsForVolumeGroupSystemToDataRoleVolumes:(DADiskRef)arg1 options:(id)arg2 ;
-(int)unlockEncryptedVolume:(DADiskRef)arg1 diskUser:(char)arg2 anyUser:(char)arg3 user:(id)arg4 passphrase:(const char*)arg5 passdata:(id)arg6 options:(id)arg7 details:(id*)arg8 ;
-(int)verifyCryptoUserPassdataForVolume:(DADiskRef)arg1 user:(id)arg2 passdata:(id)arg3 success:(char*)arg4 ;
-(int)isDiskSuitableForConversionFromHFS:(DADiskRef)arg1 suitable:(char*)arg2 why:(int*)arg3 options:(id)arg4 ;
-(int)prebootInfoForLockedOrUnlockedVolume:(DADiskRef)arg1 user:(id)arg2 info:(id*)arg3 options:(id)arg4 ;
-(int)dataRecordForVolume:(DADiskRef)arg1 user:(id)arg2 data:(id*)arg3 options:(id)arg4 ;
-(int)ensureRecoveryBooter:(DADiskRef)arg1 options:(id)arg2 ;
-(int)physicalStoreForPhysicalStoreUUID:(id)arg1 physicalStore:(_DADisk*)arg2 ;
-(int)resetCryptoUserPassdataForVolume:(DADiskRef)arg1 recoveryUser:(id)arg2 recoveryUserPassdata:(id)arg3 userToReset:(id)arg4 userNewPassdata:(id)arg5 options:(id)arg6 ;
-(int)addCryptoUsersToVolume:(DADiskRef)arg1 user:(id)arg2 passdata:(id)arg3 newUserRecords:(id)arg4 options:(id)arg5 ;
-(int)startMigrationToEncryptedVolume:(DADiskRef)arg1 user:(id)arg2 passdata:(id)arg3 newUserRecords:(id)arg4 options:(id)arg5 ;
-(int)unEnsureRecoveryBooter:(DADiskRef)arg1 targetSubject:(id)arg2 options:(id)arg3 ;
-(int)changeCryptoUserPassdataForVolume:(DADiskRef)arg1 user:(id)arg2 oldPassdata:(id)arg3 newPassdata:(id)arg4 options:(id)arg5 ;
@end

