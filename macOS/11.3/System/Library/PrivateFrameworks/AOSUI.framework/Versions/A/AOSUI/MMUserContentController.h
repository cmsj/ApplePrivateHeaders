/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:05 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/AOSUI.framework/Versions/A/AOSUI
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <AOSUI/AOSUI-Structs.h>
#import <WebKit/WKUserContentController.h>
#import <libobjc.A.dylib/WKScriptMessageHandler.h>

@class NSMutableDictionary, MMScriptFactory, MMScriptInterface, NSString;

@interface MMUserContentController : WKUserContentController <WKScriptMessageHandler> {

	os_unfair_lock_s _messageBlocksLock;
	NSMutableDictionary* _messageBlocks;
	MMScriptFactory* _factory;
	MMScriptInterface* _exportedInterface;
	id _exportedObject;

}

@property (nonatomic,retain) MMScriptFactory * factory;                          //@synthesize factory=_factory - In the implementation block
@property (nonatomic,retain) MMScriptInterface * exportedInterface;              //@synthesize exportedInterface=_exportedInterface - In the implementation block
@property (nonatomic,retain) id exportedObject;                                  //@synthesize exportedObject=_exportedObject - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id)init;
-(void)setExportedObject:(id)arg1 ;
-(void)setExportedInterface:(MMScriptInterface *)arg1 ;
-(id)exportedObject;
-(MMScriptInterface *)exportedInterface;
-(id)initWithFactory:(id)arg1 ;
-(MMScriptFactory *)factory;
-(void)userContentController:(id)arg1 didReceiveScriptMessage:(id)arg2 ;
-(void)setFactory:(MMScriptFactory *)arg1 ;
-(void)_setupContentForInterface:(id)arg1 ;
-(id)_allMessageBlockNames;
-(void)_removeAllContent;
-(void)_addEssentialContent;
-(void)_addContentForInvocation:(id)arg1 ;
-(id)_functionScriptForInvocation:(id)arg1 withName:(id)arg2 ;
-(void)_executeInvocation:(id)arg1 body:(id)arg2 resolver:(id)arg3 ;
-(void)_setMessageBlock:(/*^block*/id)arg1 forName:(id)arg2 ;
-(id)_freshInvocation:(id)arg1 ;
-(/*^block*/id)_messageBlockForName:(id)arg1 ;
-(void)_unresolveFunctionCallWithToken:(id)arg1 webView:(id)arg2 ;
-(void)_resolveFunctionCallWithToken:(id)arg1 arguments:(id)arg2 webView:(id)arg3 ;
@end

