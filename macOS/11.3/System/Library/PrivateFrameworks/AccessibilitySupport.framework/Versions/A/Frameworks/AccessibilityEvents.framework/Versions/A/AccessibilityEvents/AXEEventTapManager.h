/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:29 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/AccessibilitySupport.framework/Versions/A/Frameworks/AccessibilityEvents.framework/Versions/A/AccessibilityEvents
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <AccessibilityEvents/AccessibilityEvents-Structs.h>
#import <libobjc.A.dylib/AXEEventTapDelegate.h>

@class NSLock, NSArray, AXEEventTap, NSString;

@interface AXEEventTapManager : NSObject <AXEEventTapDelegate> {

	unsigned __tapPlacement;
	unsigned long long _location;
	unsigned long long __priority;
	NSLock* __listenerLock;
	NSArray* __passiveListeners;
	NSArray* __activeListeners;
	AXEEventTap* __passiveEventTap;
	AXEEventTap* __activeEventTap;

}

@property (nonatomic,readonly) unsigned _tapPlacement;                    //@synthesize _tapPlacement=__tapPlacement - In the implementation block
@property (nonatomic,readonly) unsigned long long _priority;              //@synthesize _priority=__priority - In the implementation block
@property (nonatomic,readonly) NSLock * _listenerLock;                    //@synthesize _listenerLock=__listenerLock - In the implementation block
@property (nonatomic,copy) NSArray * _passiveListeners;                   //@synthesize _passiveListeners=__passiveListeners - In the implementation block
@property (nonatomic,copy) NSArray * _activeListeners;                    //@synthesize _activeListeners=__activeListeners - In the implementation block
@property (nonatomic,retain) AXEEventTap * _passiveEventTap;              //@synthesize _passiveEventTap=__passiveEventTap - In the implementation block
@property (nonatomic,retain) AXEEventTap * _activeEventTap;               //@synthesize _activeEventTap=__activeEventTap - In the implementation block
@property (nonatomic,readonly) unsigned long long location;               //@synthesize location=_location - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)shared;
+(id)sharedAnnotatedSessionTapManager;
+(id)sharedSessionTapManager;
+(id)_createEventTapManagerAtLevel:(unsigned long long)arg1 ;
+(id)sharedHIDTapManager;
+(id)_cgPriorityStringForAXEPriority:(unsigned long long)arg1 ;
+(id)sharedTapManagerAtLevel:(unsigned long long)arg1 ;
+(id)sharedTapForLocation:(unsigned long long)arg1 ;
-(unsigned long long)location;
-(unsigned long long)_priority;
-(void)unregisterListenerForAllEvents:(id)arg1 ;
-(void)registerListener:(id)arg1 listenOnly:(char)arg2 forEventMask:(unsigned long long)arg3 ;
-(void)registerMouseEventListener:(id)arg1 listenOnly:(char)arg2 ;
-(void)unregisterMouseEventListener:(id)arg1 listenOnly:(char)arg2 ;
-(id)_initWithPlacement:(unsigned)arg1 location:(unsigned long long)arg2 priority:(unsigned long long)arg3 ;
-(NSLock *)_listenerLock;
-(NSArray *)_passiveListeners;
-(NSArray *)_activeListeners;
-(id)_findWrapperForListener:(void*)arg1 inListeners:(id)arg2 ;
-(void)_recreateEventTapAsNeededForListenerWrappers:(id)arg1 listenOnly:(char)arg2 ;
-(void)set_passiveListeners:(NSArray *)arg1 ;
-(void)set_activeListeners:(NSArray *)arg1 ;
-(void)_unregisterListener:(void*)arg1 listenOnly:(char)arg2 forEventMask:(unsigned long long)arg3 ;
-(void)_unregisterListenerForAllEvents:(void*)arg1 ;
-(unsigned)_tapPlacement;
-(AXEEventTap *)_passiveEventTap;
-(AXEEventTap *)_activeEventTap;
-(unsigned long long)_eventsOfInterestAcrossAllListeners:(id)arg1 ;
-(id)_createEventTapWithEventsOfInterest:(unsigned long long)arg1 listenOnly:(char)arg2 ;
-(void)set_passiveEventTap:(AXEEventTap *)arg1 ;
-(void)set_activeEventTap:(AXEEventTap *)arg1 ;
-(CGEventRef)eventTap:(id)arg1 handleEvent:(CGEventRef)arg2 type:(unsigned)arg3 withProxy:(CGEventTapProxyRef)arg4 ;
-(void)registerGestureEventListener:(id)arg1 listenOnly:(char)arg2 ;
-(void)registerKeyboardEventListener:(id)arg1 listenOnly:(char)arg2 ;
-(void)unregisterListener:(id)arg1 listenOnly:(char)arg2 forEventMask:(unsigned long long)arg3 ;
-(void)unregisterGestureEventListener:(id)arg1 listenOnly:(char)arg2 ;
-(void)unregisterKeyboardEventListener:(id)arg1 listenOnly:(char)arg2 ;
@end

