/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:46 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/Versions/A/CloudDocsDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/BRCLowDiskDelegate.h>

@protocol OS_dispatch_queue;
@class BRCAccountSession, br_pacer, STMFreeSpaceRequest, NSObject, NSString;

@interface BRCDiskSpaceReclaimer : NSObject <BRCLowDiskDelegate> {

	BRCAccountSession* _session;
	char _isClosed;
	char _computingPurgable;
	br_pacer* _purgePacer;
	STMFreeSpaceRequest* _purgeRequest;
	NSObject*<OS_dispatch_queue> _queue;

}

@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> queue;              //@synthesize queue=_queue - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(int)simpleUrgencyForCacheDeleteUrgency:(int)arg1 ;
+(int)urgencyForCacheDeleteUrgency:(int)arg1 ;
+(double)accessTimeDeltaForUrgency:(int)arg1 ;
+(double)onDiskAccessTimeDeltaForUrgency:(int)arg1 ;
-(void)close;
-(NSObject*<OS_dispatch_queue>)queue;
-(void)computePurgeableSpaceForAllUrgenciesWithReply:(/*^block*/id)arg1 ;
-(id)initWithAccountSession:(id)arg1 ;
-(long long)cachedPurgeableSpaceForUrgency:(int)arg1 ;
-(long long)purgeSpace:(long long)arg1 withUrgency:(int)arg2 ;
-(long long)periodicReclaimSpace;
-(id)accessTimestampForDocument:(id)arg1 ;
-(void)requestPurgeSpace;
-(id)descriptionForItem:(id)arg1 context:(id)arg2 ;
-(char)renameAndUnlinkInBackgroundItemAtRelpath:(id)arg1 ;
-(char)renameAndUnlinkInBackgroundItemAt:(int)arg1 path:(id)arg2 ;
-(char)documentWasCreated:(id)arg1 ;
-(char)documentWasUpdated:(id)arg1 diffs:(unsigned long long)arg2 ;
-(char)documentWasDeleted:(id)arg1 ;
-(void)didAccessDocument:(id)arg1 ;
-(long long)_purgeSpaceUnderQueue:(long long)arg1 withUrgency:(int)arg2 ;
-(void)lowDiskStatusChangedForDevice:(int)arg1 hasEnoughSpace:(char)arg2 ;
-(char)performOptimizeStorageWithTimeDelta:(double)arg1 onDiskAccessTimeDelta:(double)arg2 error:(id*)arg3 ;
-(char)overwriteDocumentAccessTime:(id)arg1 atime:(unsigned long long)arg2 ;
-(void)_requestPurgeSpace;
-(long long)_dbAutovacuumableSpaceInBytes:(id)arg1 ;
-(long long)_doIncrementalVacuum:(id)arg1 amount:(long long)arg2 ;
-(long long)_dbSizeInBytes:(id)arg1 ;
-(long long)_fullVacuumIfPossible:(id)arg1 ;
-(void)_asyncAutovacuumIfNeeds:(id)arg1 ;
-(void)_enumerateItemsForEvictSyncWithBlock:(/*^block*/id)arg1 withUrgency:(int)arg2 ;
-(long long)_vacuumDB:(id)arg1 amount:(long long)arg2 withUrgency:(int)arg3 ;
-(void)_updateNonPurgeableCachedSizeForDocument:(id)arg1 ;
-(char)documentUpdateEvictability:(id)arg1 ;
-(void)_updateNonPurgeableCachedSizeByAddingBytes:(long long)arg1 ;
-(void)_enumerateItemsForEvictSyncWithBlock:(/*^block*/id)arg1 withTimeDelta:(double)arg2 onDiskAccessTimeDelta:(double)arg3 ;
-(void)cachedPurgeableSpaceForAllUrgencies:(id*)arg1 nonPurgeableSpace:(id*)arg2 error:(id*)arg3 ;
-(char)documentWasAccessedRecently:(id)arg1 ;
@end

