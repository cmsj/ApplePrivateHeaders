/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:46 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/Versions/A/CloudDocsDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <CloudDocsDaemon/CloudDocsDaemon-Structs.h>
#import <libobjc.A.dylib/BRCCloudDocsAppsObserver.h>

@protocol OS_dispatch_source, OS_dispatch_queue, OS_dispatch_workloop;
@class NSMutableDictionary, BRCDeadlineScheduler, NSURL, NSObject, NSString, NSHashTable, BRCPQLConnection, BRCClientState, BRCServerPersistedState, NSMutableSet, BRCGlobalProgress, br_pacer, BRCAccountWaitOperation, NSNumber, BRCContainerScheduler, BRCApplyScheduler, BRCFairScheduler, BRCVolume, BRCFSReader, BRCFSUploader, BRCFSDownloader, BRCSyncUpScheduler, BRCFSWriter, BRCDownloadTrackers, BRCUserNotification, BRCNotificationManager, BRCInflightProgressTracker, BRCStageRegistry, BRCDiskSpaceReclaimer, BRCThrottle, BRCItemTransmogrifier, BRCAnalyticsReporter;

@interface BRCAccountSession : NSObject <BRCCloudDocsAppsObserver> {

	NSMutableDictionary* _syncContexts;
	BRCDeadlineScheduler* _defaultScheduler;
	NSURL* _dbURL;
	NSObject*<OS_dispatch_source> _dbWatcher;
	NSObject*<OS_dispatch_queue> _dbWatcherQueue;
	NSObject*<OS_dispatch_queue> _dbCorruptionQueue;
	NSObject*<OS_dispatch_workloop> _clientTruthWorkloop;
	NSObject*<OS_dispatch_workloop> _serverTruthWorkloop;
	NSObject*<OS_dispatch_workloop> _readOnlyWorkloop;
	int _cloudDocsFD;
	/*^block*/id _dbProfilingHook;
	NSString* _databaseID;
	NSHashTable* _miscOperations;
	BRCPQLConnection* _clientDB;
	BRCPQLConnection* _serverDB;
	BRCPQLConnection* _readOnlyDB;
	BRCPQLConnection* _expensiveReadOnlyDB;
	BRCClientState* _clientState;
	BRCServerPersistedState* _serverState;
	brc_mutex _zonesLock;
	NSMutableDictionary* _libraryRowIDsByMangledID;
	NSMutableDictionary* _appLibrariesByRowID;
	NSMutableDictionary* _serverZonesByZoneRowID;
	NSMutableDictionary* _sharedServerZonesByMangledID;
	NSMutableDictionary* _sharedClientZonesByMangledID;
	NSMutableDictionary* _privateServerZonesByID;
	NSMutableDictionary* _privateClientZonesByID;
	NSString* _accountID;
	NSMutableSet* _xpcClients;
	char _resumed;
	BRCGlobalProgress* _globalProgress;
	unsigned long long _lastDiskSpaceCheckTime;
	unsigned long long _availableDiskSpace;
	unsigned long long _totalDiskSpace;
	char _isGreedy;
	brc_mutex _zonesCreationLock;
	br_pacer* _reschedulePendingDiskItemsPacer;
	br_pacer* _updateDiskSpacePacer;
	char _accountIsReady;
	BRCAccountWaitOperation* _accountWaitOperation;
	char _isDBOpened;
	NSNumber* _isInCarry;
	NSMutableDictionary* _rootsByFolderType;
	NSMutableDictionary* _fsEventsMonitors;
	char _isCancelled;
	NSString* _appSupportDirPath;
	NSString* _cacheDirPath;
	NSString* _ubiquityTokenSalt;
	BRCContainerScheduler* _containerScheduler;
	BRCApplyScheduler* _applyScheduler;
	BRCFairScheduler* _fairClientDBScheduler;
	BRCVolume* _volume;
	BRCFSReader* _fsReader;
	BRCFSUploader* _fsUploader;
	BRCFSDownloader* _fsDownloader;
	BRCSyncUpScheduler* _syncUpScheduler;
	BRCFSWriter* _fsWriter;
	BRCDownloadTrackers* _downloadTrackers;
	BRCUserNotification* _userNotification;
	BRCNotificationManager* _notificationManager;
	BRCInflightProgressTracker* _inflightProgressTracker;
	BRCStageRegistry* _stageRegistry;
	BRCDiskSpaceReclaimer* _diskReclaimer;
	BRCThrottle* _appLibraryScanThrottle;
	BRCThrottle* _appLibraryResetThrottle;
	BRCThrottle* _sharedAppLibraryResetThrottle;
	BRCThrottle* _appLibraryAliasRemovalThrottle;
	BRCThrottle* _lostItemThrottle;
	BRCThrottle* _operationFailureThrottle;
	BRCThrottle* _syncClientZoneThrottle;
	BRCThrottle* _syncClientZoneErrorThrottle;
	NSObject*<OS_dispatch_queue> _resetQueue;
	BRCItemTransmogrifier* _itemTransmogrifier;
	BRCAnalyticsReporter* _analyticsReporter;

}

@property (nonatomic,readonly) BRCClientState * clientState; 
@property (nonatomic,readonly) BRCServerPersistedState * serverState; 
@property (nonatomic,readonly) unsigned long long databaseID; 
@property (nonatomic,readonly) BRCPQLConnection * clientDB; 
@property (nonatomic,readonly) BRCPQLConnection * readOnlyDB; 
@property (nonatomic,readonly) BRCPQLConnection * expensiveReadOnlyDB; 
@property (nonatomic,readonly) BRCPQLConnection * serverDB; 
@property (nonatomic,readonly) NSObject*<OS_dispatch_workloop> clientTruthWorkloop; 
@property (nonatomic,readonly) NSObject*<OS_dispatch_workloop> serverTruthWorkloop; 
@property (nonatomic,readonly) NSObject*<OS_dispatch_workloop> readOnlyWorkloop; 
@property (nonatomic,retain) NSString * appSupportDirPath;                                        //@synthesize appSupportDirPath=_appSupportDirPath - In the implementation block
@property (nonatomic,retain) NSString * cacheDirPath;                                             //@synthesize cacheDirPath=_cacheDirPath - In the implementation block
@property (nonatomic,readonly) NSString * accountID;                                              //@synthesize accountID=_accountID - In the implementation block
@property (nonatomic,readonly) NSString * ubiquityTokenSalt;                                      //@synthesize ubiquityTokenSalt=_ubiquityTokenSalt - In the implementation block
@property (nonatomic,readonly) BRCGlobalProgress * globalProgress;                                //@synthesize globalProgress=_globalProgress - In the implementation block
@property (nonatomic,readonly) BRCDeadlineScheduler * defaultScheduler;                           //@synthesize defaultScheduler=_defaultScheduler - In the implementation block
@property (nonatomic,readonly) BRCApplyScheduler * applyScheduler;                                //@synthesize applyScheduler=_applyScheduler - In the implementation block
@property (nonatomic,readonly) BRCContainerScheduler * containerScheduler;                        //@synthesize containerScheduler=_containerScheduler - In the implementation block
@property (nonatomic,readonly) BRCFairScheduler * fairClientDBScheduler;                          //@synthesize fairClientDBScheduler=_fairClientDBScheduler - In the implementation block
@property (nonatomic,readonly) BRCFSReader * fsReader;                                            //@synthesize fsReader=_fsReader - In the implementation block
@property (nonatomic,readonly) BRCFSUploader * fsUploader;                                        //@synthesize fsUploader=_fsUploader - In the implementation block
@property (nonatomic,readonly) BRCFSDownloader * fsDownloader;                                    //@synthesize fsDownloader=_fsDownloader - In the implementation block
@property (nonatomic,readonly) BRCSyncUpScheduler * syncUpScheduler;                              //@synthesize syncUpScheduler=_syncUpScheduler - In the implementation block
@property (nonatomic,readonly) BRCFSWriter * fsWriter;                                            //@synthesize fsWriter=_fsWriter - In the implementation block
@property (nonatomic,readonly) BRCVolume * volume;                                                //@synthesize volume=_volume - In the implementation block
@property (nonatomic,readonly) BRCDownloadTrackers * downloadTrackers;                            //@synthesize downloadTrackers=_downloadTrackers - In the implementation block
@property (nonatomic,readonly) BRCItemTransmogrifier * itemTransmogrifier;                        //@synthesize itemTransmogrifier=_itemTransmogrifier - In the implementation block
@property (nonatomic,readonly) BRCAnalyticsReporter * analyticsReporter;                          //@synthesize analyticsReporter=_analyticsReporter - In the implementation block
@property (nonatomic,readonly) BRCNotificationManager * notificationManager;                      //@synthesize notificationManager=_notificationManager - In the implementation block
@property (nonatomic,readonly) BRCInflightProgressTracker * inflightProgressTracker;              //@synthesize inflightProgressTracker=_inflightProgressTracker - In the implementation block
@property (nonatomic,readonly) BRCStageRegistry * stageRegistry;                                  //@synthesize stageRegistry=_stageRegistry - In the implementation block
@property (nonatomic,readonly) BRCDiskSpaceReclaimer * diskReclaimer;                             //@synthesize diskReclaimer=_diskReclaimer - In the implementation block
@property (nonatomic,readonly) BRCUserNotification * userNotification;                            //@synthesize userNotification=_userNotification - In the implementation block
@property (nonatomic,readonly) char isCancelled;                                                  //@synthesize isCancelled=_isCancelled - In the implementation block
@property (nonatomic,readonly) unsigned long long availableDiskSpace; 
@property (nonatomic,readonly) char isGreedy; 
@property (nonatomic,readonly) BRCAccountWaitOperation * accountWaitOperation; 
@property (nonatomic,readonly) char isSynchronizingDesktop; 
@property (nonatomic,readonly) char isSynchronizingDocuments; 
@property (nonatomic,readonly) char hasOptimizeStorageEnabled; 
@property (nonatomic,readonly) BRCThrottle * appLibraryScanThrottle;                              //@synthesize appLibraryScanThrottle=_appLibraryScanThrottle - In the implementation block
@property (nonatomic,readonly) BRCThrottle * appLibraryResetThrottle;                             //@synthesize appLibraryResetThrottle=_appLibraryResetThrottle - In the implementation block
@property (nonatomic,readonly) BRCThrottle * sharedAppLibraryResetThrottle;                       //@synthesize sharedAppLibraryResetThrottle=_sharedAppLibraryResetThrottle - In the implementation block
@property (nonatomic,readonly) BRCThrottle * appLibraryAliasRemovalThrottle;                      //@synthesize appLibraryAliasRemovalThrottle=_appLibraryAliasRemovalThrottle - In the implementation block
@property (nonatomic,readonly) BRCThrottle * lostItemThrottle;                                    //@synthesize lostItemThrottle=_lostItemThrottle - In the implementation block
@property (nonatomic,readonly) BRCThrottle * operationFailureThrottle;                            //@synthesize operationFailureThrottle=_operationFailureThrottle - In the implementation block
@property (nonatomic,readonly) BRCThrottle * syncClientZoneThrottle;                              //@synthesize syncClientZoneThrottle=_syncClientZoneThrottle - In the implementation block
@property (nonatomic,readonly) BRCThrottle * syncClientZoneErrorThrottle;                         //@synthesize syncClientZoneErrorThrottle=_syncClientZoneErrorThrottle - In the implementation block
@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> resetQueue;                           //@synthesize resetQueue=_resetQueue - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)nameComponentsForKey:(id)arg1 db:(id)arg2 ;
+(char)_openConnection:(id)arg1 databaseName:(id)arg2 baseURL:(id)arg3 readonly:(char)arg4 error:(id*)arg5 ;
+(char)_registerStaticDBFunctions:(id)arg1 error:(id*)arg2 ;
+(id)userIdentityForKey:(id)arg1 db:(id)arg2 ;
+(id)userIdentityForName:(id)arg1 db:(id)arg2 ;
+(void)_registerLastBootIfNeeded:(id)arg1 table:(id)arg2 cleanTelemetryIfNeeded:(char)arg3 ;
+(id)_classesForClientState;
+(char)openAndValidateDatabase:(id)arg1 serverTruth:(char)arg2 session:(id)arg3 baseURL:(id)arg4 skipBackupDetection:(char)arg5 error:(id*)arg6 ;
+(char)_openConnection:(id)arg1 serverTruth:(char)arg2 databaseName:(id)arg3 baseURL:(id)arg4 initialVersion:(unsigned*)arg5 lastCurrentVersion:(unsigned*)arg6 error:(id*)arg7 ;
+(char)_validateDatabase:(id)arg1 baseURL:(id)arg2 session:(id)arg3 serverTruth:(char)arg4 initialVersion:(unsigned)arg5 lastCurrentVersion:(unsigned)arg6 error:(id*)arg7 ;
+(char)_checkIntegrity:(id)arg1 serverTruth:(char)arg2 session:(id)arg3 skipBackupDetection:(char)arg4 error:(id*)arg5 ;
+(char)upgradeOfflineDB:(id)arg1 serverTruth:(char)arg2 session:(id)arg3 error:(id*)arg4 ;
+(id)sessionForBackingUpDatabasesAtURL:(id)arg1 ;
+(id)sessionForDumpingDatabasesAtURL:(id)arg1 ;
+(id)sessionForCheckingInconsistencies;
+(id)nameComponentsForName:(id)arg1 db:(id)arg2 ;
-(void)dealloc;
-(NSString *)description;
-(id)init;
-(void)close;
-(void)resume;
-(BRCVolume *)volume;
-(char)isCancelled;
-(char)openWithError:(id*)arg1 ;
-(void)userDefaultsChanged;
-(NSString *)accountID;
-(void)resetThrottles;
-(void)fetchUserRecordIDWithCompletionHandler:(/*^block*/id)arg1 ;
-(BRCAnalyticsReporter *)analyticsReporter;
-(BRCServerPersistedState *)serverState;
-(id)roots;
-(BRCClientState *)clientState;
-(void)unregisterClient:(id)arg1 ;
-(unsigned long long)databaseID;
-(void)addOfflineServerZone:(id)arg1 ;
-(void)addOfflineClientZone:(id)arg1 ;
-(void)addOfflineAppLibrary:(id)arg1 ;
-(id)sideCarSyncContext;
-(BRCPQLConnection *)serverDB;
-(char)saveServerZoneToDB:(id)arg1 ;
-(BRCPQLConnection *)clientDB;
-(BRCContainerScheduler *)containerScheduler;
-(id)itemsWithSideCarInFlightDiffsEnumerator;
-(BRCApplyScheduler *)applyScheduler;
-(id)resolvedOpenRelpathForPath:(id)arg1 mustExist:(char)arg2 allowResolveInPkg:(char)arg3 errcode:(int*)arg4 ;
-(id)globalItemByFileID:(unsigned long long)arg1 db:(id)arg2 ;
-(id)globalItemByDocumentID:(unsigned)arg1 db:(id)arg2 ;
-(id)pendingDownloadItemWithDocumentID:(unsigned)arg1 ;
-(BRCThrottle *)operationFailureThrottle;
-(NSObject*<OS_dispatch_workloop>)clientTruthWorkloop;
-(id)userKeyForName:(id)arg1 db:(id)arg2 ;
-(id)createUserKeyForName:(id)arg1 ;
-(id)getOrCreateSharedZones:(id)arg1 ;
-(BRCFSDownloader *)fsDownloader;
-(BRCFSUploader *)fsUploader;
-(BRCInflightProgressTracker *)inflightProgressTracker;
-(BRCGlobalProgress *)globalProgress;
-(id)itemByRowID:(unsigned long long)arg1 ;
-(id)serverAliasItemForSharedItem:(id)arg1 inZone:(id)arg2 ;
-(id)serverZoneByRowID:(id)arg1 ;
-(id)localAliasForSharedItem:(id)arg1 inZone:(id)arg2 ;
-(void)enumerateAppLibraries:(/*^block*/id)arg1 ;
-(unsigned long long)syncedFolderTypeForURL:(id)arg1 ;
-(id)newConnectionWithLabel:(id)arg1 readonly:(char)arg2 error:(id*)arg3 ;
-(NSObject*<OS_dispatch_workloop>)readOnlyWorkloop;
-(NSString *)appSupportDirPath;
-(void)dbBecameCorrupted;
-(void)setupDatabase;
-(NSObject*<OS_dispatch_workloop>)serverTruthWorkloop;
-(void)openForDumping;
-(id)newConnection:(id)arg1 ;
-(char)_registerDynamicDBFunctions:(id)arg1 error:(id*)arg2 ;
-(BRCNotificationManager *)notificationManager;
-(char)_openConnection:(id)arg1 databaseName:(id)arg2 readonly:(char)arg3 error:(id*)arg4 ;
-(char)_setupConnection:(id)arg1 readonly:(char)arg2 error:(id*)arg3 ;
-(id)appLibraryByID:(id)arg1 ;
-(char)_createAppLibrary:(id)arg1 ;
-(id)newAppLibraryFromPQLResultSet:(id)arg1 error:(id*)arg2 ;
-(id)newSharedClientZoneFromPQLResultSet:(id)arg1 error:(id*)arg2 ;
-(id)newSharedServerZoneFromPQLResultSet:(id)arg1 error:(id*)arg2 ;
-(id)newPrivateClientZoneFromPQLResultSet:(id)arg1 error:(id*)arg2 ;
-(id)newPrivateServerZoneFromPQLResultSet:(id)arg1 error:(id*)arg2 ;
-(id)newLocalItemFromPQLResultSet:(id)arg1 db:(id)arg2 error:(id*)arg3 ;
-(id)deviceKeyForName:(id)arg1 db:(id)arg2 ;
-(void)_setUserIdentity:(id)arg1 forName:(id)arg2 ;
-(id)_privateClientZonesEnumerator:(id)arg1 ;
-(char)saveClientZoneToDB:(id)arg1 ;
-(id)_sharedClientZonesEnumerator:(id)arg1 ;
-(char)_stepBackupDetector:(backup_detector)arg1 newState:(backup_detector*)arg2 error:(id*)arg3 ;
-(void)_clearNeedsUpgradeErrors:(id)arg1 brVersion:(id)arg2 ;
-(void)enumerateServerZones:(/*^block*/id)arg1 ;
-(char)saveAppLibraryToDB:(id)arg1 ;
-(BRCStageRegistry *)stageRegistry;
-(void)enumerateClientZones:(/*^block*/id)arg1 ;
-(char)openAndValidateDatabase:(id)arg1 serverTruth:(char)arg2 error:(id*)arg3 ;
-(void)_startWatcher;
-(char)_finishClientTruthConnectionSetupWithError:(id*)arg1 ;
-(char)_finishServerTruthConnectionSetupWithError:(id*)arg1 ;
-(void)enableDatabaseProfilingForDB:(id)arg1 ;
-(void)stopDBWatcher;
-(void)_dumpClientZoneBlockedState:(id)arg1 toContext:(id)arg2 ;
-(id)appLibraries;
-(id)_sharedServerZoneByName:(id)arg1 ownerName:(id)arg2 db:(id)arg3 ;
-(id)_privateServerZoneByName:(id)arg1 db:(id)arg2 ;
-(void)disableDatabaseProfilingForDB:(id)arg1 ;
-(id)clientZonesMatchingSearchString:(id)arg1 error:(id*)arg2 ;
-(char)_dumpClientZoneStatus:(id)arg1 toContext:(id)arg2 error:(id*)arg3 ;
-(id)_sharedServerZonesEnumerator:(id)arg1 ;
-(id)_privateServerZonesEnumerator:(id)arg1 ;
-(id)_appLibrariesEnumerator:(id)arg1 ;
-(char)_dumpClientZone:(id)arg1 toContext:(id)arg2 includeAllItems:(char)arg3 error:(id*)arg4 ;
-(void)dumpXPCClientsToContext:(id)arg1 ;
-(void)dumpMiscOperationsToContext:(id)arg1 ;
-(BRCPQLConnection *)readOnlyDB;
-(BRCPQLConnection *)expensiveReadOnlyDB;
-(char)_setupBackupDetector:(backup_detector*)arg1 error:(id*)arg2 ;
-(void)preventDatabaseFromBeingReused;
-(char)createServerZone:(id)arg1 ;
-(char)deleteServerZone:(id)arg1 ;
-(void)_enumerateAppLibraryRowIDs:(id)arg1 usingBlock:(/*^block*/id)arg2 ;
-(id)_reserveRowIDForLibrary:(id)arg1 ;
-(char)_deleteAppLibrary:(id)arg1 ;
-(char)_createPrivateAppLibrary:(id)arg1 ;
-(char)_createSharedAppLibrary:(id)arg1 ;
-(char)_createClientZone:(id)arg1 ;
-(char)_deleteClientZone:(id)arg1 ;
-(id)_privateClientZoneByName:(id)arg1 db:(id)arg2 ;
-(id)_privateClientZoneByID:(id)arg1 db:(id)arg2 ;
-(id)stagedItemsEnumerator;
-(id)foldersNeedingTransmogrifyEnumerator;
-(id)bouncedItemsEnumerator;
-(id)itemsNeedingIndexingEnumeratorFromNotifRank:(unsigned long long)arg1 batchSize:(unsigned long long)arg2 ;
-(id)createDeviceKeyForNameInServerDB:(id)arg1 ;
-(id)userIdentityForKey:(id)arg1 ;
-(void)learnOwnerIdentityForShare:(id)arg1 forceUpdate:(char)arg2 ;
-(id)userNameForKey:(id)arg1 db:(id)arg2 ;
-(char)openDBWithError:(id*)arg1 ;
-(void)closeDBs;
-(char)dumpStatusToFileHandle:(id)arg1 zoneName:(id)arg2 tracker:(id)arg3 error:(id*)arg4 ;
-(char)initializeOfflineDatabaseWhileUpgrading:(char)arg1 error:(id*)arg2 ;
-(char)dumpDatabaseToFileHandle:(id)arg1 zoneName:(id)arg2 includeAllItems:(char)arg3 tracker:(id)arg4 error:(id*)arg5 ;
-(char)dumpFileCoordinationInfoToFileHandle:(id)arg1 error:(id*)arg2 ;
-(char)backupDatabaseToURL:(id)arg1 error:(id*)arg2 ;
-(id)accountStatisticsWithDB:(id)arg1 ;
-(id)dirPathForSyncedFolderType:(unsigned long long)arg1 ;
-(id)initWithAccountID:(id)arg1 salt:(id)arg2 ;
-(void)destroyLocalDataWaitingForFilesToBeUnlinked:(char)arg1 completionBlock:(/*^block*/id)arg2 ;
-(BRCFSReader *)fsReader;
-(id)fsEventsMonitors;
-(void)destroyLocalDataWithPristineContainerIDs:(id)arg1 ;
-(void)enumerateSupportedFolderTypes:(/*^block*/id)arg1 ;
-(NSString *)ubiquityTokenSalt;
-(void)closeAndResetLocalState;
-(void)destroyLocalData;
-(char)applySyncPolicy:(long long)arg1 forSyncedFolderType:(unsigned long long)arg2 isInitialCreation:(char)arg3 error:(id*)arg4 ;
-(id)appLibraryByMangledID:(id)arg1 ;
-(id)clientZoneByMangledID:(id)arg1 ;
-(id)cloudDocsClientZone;
-(id)clientZones;
-(id)defaultSyncContext;
-(id)itemByItemGlobalID:(id)arg1 ;
-(id)zoneHealthSyncContext;
-(id)getOrCreateAppLibraryAndPrivateZonesIfNecessary:(id)arg1 ;
-(id)privateClientZoneByID:(id)arg1 ;
-(int)resolvePathAdditionalMetadata:(id)arg1 appLibrary:(id*)arg2 ;
-(BRCDeadlineScheduler *)defaultScheduler;
-(id)itemByItemGlobalID:(id)arg1 db:(id)arg2 ;
-(id)globalItemByDocumentID:(unsigned)arg1 ;
-(NSString *)cacheDirPath;
-(BRCDiskSpaceReclaimer *)diskReclaimer;
-(void)setAppSupportDirPath:(NSString *)arg1 ;
-(void)setCacheDirPath:(NSString *)arg1 ;
-(BRCFSWriter *)fsWriter;
-(id)fsEventsMonitorForAppLibraryID:(id)arg1 ;
-(char)hasOptimizeStorageEnabled;
-(void)enumerateSharedClientZones:(/*^block*/id)arg1 ;
-(void)recomputeAppSyncBlockStateForPrivateClientZone:(id)arg1 ;
-(char)isGreedy;
-(void)computeDocumentEvictableSizesForLowTime:(unsigned long long)arg1 medTime:(unsigned long long)arg2 highTime:(unsigned long long)arg3 lowSize:(unsigned long long)arg4 medSize:(unsigned long long)arg5 highSize:(unsigned long long)arg6 minRowID:(unsigned long long)arg7 minSize:(unsigned long long)arg8 batchSize:(unsigned long long)arg9 injection:(id)arg10 db:(id)arg11 reply:(/*^block*/id)arg12 ;
-(id)transferSyncContextForMangledID:(id)arg1 createIfNeeded:(char)arg2 ;
-(id)transferSyncContextForMangledID:(id)arg1 ;
-(id)itemIDByRowID:(unsigned long long)arg1 db:(id)arg2 ;
-(id)itemByRowID:(unsigned long long)arg1 db:(id)arg2 ;
-(char)createAppLibraryOnDisk:(id)arg1 createdRoot:(char*)arg2 createdDocuments:(char*)arg3 rootFileID:(unsigned long long*)arg4 ;
-(id)itemIDByRowID:(unsigned long long)arg1 ;
-(id)appLibraryByRowID:(id)arg1 ;
-(id)allSyncContexts;
-(unsigned long long)availableDiskSpace;
-(BRCDownloadTrackers *)downloadTrackers;
-(NSObject*<OS_dispatch_queue>)resetQueue;
-(BRCThrottle *)sharedAppLibraryResetThrottle;
-(BRCThrottle *)appLibraryResetThrottle;
-(BRCThrottle *)appLibraryAliasRemovalThrottle;
-(BRCSyncUpScheduler *)syncUpScheduler;
-(char)isSynchronizingDesktop;
-(char)isSynchronizingDocuments;
-(void)recreateDesktopSymlinksIfNecessary;
-(void)scheduleZoneMovesToCloudDocs:(id)arg1 ;
-(char)globalID:(id)arg1 isStrictChildOfGlobalID:(id)arg2 ;
-(id)serverAliasItemForSharedItem:(id)arg1 db:(id)arg2 ;
-(id)sharedClientZoneByMangledID:(id)arg1 ;
-(BRCFairScheduler *)fairClientDBScheduler;
-(void)enumeratePrivateClientZones:(/*^block*/id)arg1 ;
-(void)markAccountMigrationComplete;
-(void)setNeedsPCSMigration:(char)arg1 ;
-(BRCThrottle *)syncClientZoneThrottle;
-(BRCThrottle *)syncClientZoneErrorThrottle;
-(id)sharedMetadataSyncContext;
-(char)PCSMigrationComplete;
-(id)fetchAccountWaitOperationWithAccountReady:(char*)arg1 ;
-(char)shouldPerformPCSMigration;
-(BRCAccountWaitOperation *)accountWaitOperation;
-(id)currentUserRecordName;
-(id)getOrCreateAppLibraryAndPrivateZonesIfNecessary:(id)arg1 appLibraryExists:(char*)arg2 ;
-(id)serverZoneByName:(id)arg1 ownerName:(id)arg2 ;
-(id)metadataSyncContextForMangledID:(id)arg1 ;
-(id)privateServerZoneByID:(id)arg1 ;
-(void)performBlock:(/*^block*/id)arg1 whileRemovingPrivateClientZone:(id)arg2 ;
-(id)newServerItemFromPQLResultSet:(id)arg1 error:(id*)arg2 ;
-(id)sharedServerZoneRowIDsByOwnerNamePrefix:(id)arg1 ;
-(id)getOrReserveLibraryRowIDForLibrary:(id)arg1 ;
-(id)serverZoneByMangledID:(id)arg1 ;
-(id)fallbackAppLibraryForClientZone:(id)arg1 extension:(id)arg2 ;
-(char)hasRootForSyncedFolderType:(unsigned long long)arg1 ;
-(id)rootForSyncedFolderType:(unsigned long long)arg1 ;
-(void)_resolvePathInMobileDocsRoot:(id)arg1 appLibrary:(id*)arg2 ;
-(id)resolvedOpenRelpathForPath:(id)arg1 mustExist:(char)arg2 errcode:(int*)arg3 ;
-(id)_old_privateAppLibraryByZoneName:(id)arg1 db:(id)arg2 ;
-(id)_appLibraryEnumeratorForZoneRowID:(id)arg1 db:(id)arg2 ;
-(void)enumerateSideFaultsUnderParent:(id)arg1 db:(id)arg2 block:(/*^block*/id)arg3 ;
-(id)fsRootItemNameForSyncedFolderType:(unsigned long long)arg1 ;
-(void)addMiscOperation:(id)arg1 ;
-(id)_clientZonesMatchingSearchString:(id)arg1 ;
-(id)_appLibrariesMatchingSearchString:(id)arg1 ;
-(id)singleClientZoneMatchingSearchString:(id)arg1 error:(id*)arg2 ;
-(id)appLibrariesMatchingSearchString:(id)arg1 error:(id*)arg2 ;
-(id)singleAppLibraryMatchingSearchString:(id)arg1 error:(id*)arg2 ;
-(void)enumerateItemsWithShareIDUnderParent:(id)arg1 block:(/*^block*/id)arg2 ;
-(void)availableDiskSpaceDidChange;
-(id)globalItemByFileID:(unsigned long long)arg1 ;
-(void)enumeratePrivateServerZones:(/*^block*/id)arg1 ;
-(void)_setupSharedPackageExtensionsPlist;
-(void)_createAccountSupportPathIfNeeded:(id)arg1 protectParent:(char)arg2 ;
-(void)_setupThrottles;
-(id)createRootForSyncedFolderType:(unsigned long long)arg1 ;
-(void)setRoot:(id)arg1 forSyncedFolderType:(unsigned long long)arg2 ;
-(void)_enumerateAccountHandlerSupportedFolderTypes:(/*^block*/id)arg1 ;
-(id)createFSEventsMonitorForSyncedFolderType:(unsigned long long)arg1 ;
-(void)setFSEventsMonitor:(id)arg1 forSyncedFolderType:(unsigned long long)arg2 ;
-(char)_createAppLibraryRootsIfNeededWithError:(id*)arg1 ;
-(char)createAppLibrariesIfNeededWithError:(id*)arg1 ;
-(unsigned long long)availableDiskSpaceUsingCache:(char)arg1 schedulingPendingDiskItemsIfNeeded:(char)arg2 ;
-(char)_createAppLibraryRootIfNeededAtPath:(id)arg1 error:(id*)arg2 ;
-(void)_pcsChainAllItemsWithActivity:(id)arg1 ;
-(unsigned)_recoverAndReportBoosting;
-(BRCItemTransmogrifier *)itemTransmogrifier;
-(unsigned)_recoverAndReportMissingJobs;
-(void)_registerBackgroundXPCActivities;
-(void)closeXPCClientsSync;
-(id)_unloadClientZones;
-(char)_recursivelyPrepareFolderForLogOutAtURL:(id)arg1 pruneEmptyFolders:(char)arg2 pruneEmptyTopLevelFolder:(char)arg3 maxDepth:(unsigned long long)arg4 ;
-(void)destroyLocalDataWaitingForFilesToBeUnlinked:(char)arg1 pristineContainerIDs:(id)arg2 completionBlock:(/*^block*/id)arg3 ;
-(void)__registerServerZone:(id)arg1 clientZone:(id)arg2 appLibrary:(id)arg3 isShared:(char)arg4 ;
-(char)_shouldPrivateAppLibraryBeCZMMoved:(id)arg1 ;
-(id)__getOrCreateServerZone:(id)arg1 ;
-(id)__getOrCreateClientZone:(id)arg1 withServerZone:(id)arg2 alreadyExists:(char*)arg3 ;
-(id)__getOrCreateAppLibrary:(id)arg1 rowID:(id)arg2 createOnDisk:(char)arg3 alreadyExists:(char*)arg4 withClientZone:(id)arg5 createCZMMoved:(char)arg6 ;
-(id)_getOrCreateAppLibraryAndPrivateZonesIfNecessary:(id)arg1 creationFlags:(unsigned*)arg2 ;
-(void)destroyiCloudDesktopAppLibrary:(id)arg1 completion:(/*^block*/id)arg2 ;
-(char)hasFSEventsMonitorForSyncedFolderType:(unsigned long long)arg1 ;
-(void)enumerateFileTypesWithFilterBlock:(/*^block*/id)arg1 enumerationBlock:(/*^block*/id)arg2 ;
-(void)setOptimizeStorageEnabled:(char)arg1 ;
-(unsigned long long)accountSize;
-(void)startDownloadsForGreediness;
-(char)enableSyncforSyncedFolderType:(unsigned long long)arg1 isInitialCreation:(char)arg2 error:(id*)arg3 ;
-(char)disableSyncforSyncedFolderType:(unsigned long long)arg1 isInitialCreation:(char)arg2 error:(id*)arg3 ;
-(void)_loadClientZonesFromDisk;
-(char)getOrCreateiCloudDesktopAppLibraryForSyncedFolderType:(unsigned long long)arg1 isInitialCreation:(char)arg2 resumeFSEventsMonitor:(char*)arg3 appLibrary:(id*)arg4 error:(id*)arg5 ;
-(id)fsEventsMonitorForSyncedFolderType:(unsigned long long)arg1 ;
-(void)removeRootForSyncedFolderType:(unsigned long long)arg1 ;
-(void)removeFSEventsMonitorForSyncedFolderType:(unsigned long long)arg1 ;
-(void)destroyiCloudDesktopAppLibrary:(id)arg1 ;
-(id)mangledIDForSyncedFolderType:(unsigned long long)arg1 ;
-(id)getOrCreateAppLibrary:(id)arg1 withRowID:(id)arg2 onDisk:(char)arg3 withExistingClientZone:(id)arg4 ;
-(char)moveAndMergeFoldersOnDiskIfNeeded:(id)arg1 folderType:(unsigned long long)arg2 didMove:(char*)arg3 error:(id*)arg4 ;
-(char)_setRootPathXattrValue:(id)arg1 forRootPath:(id)arg2 error:(id*)arg3 ;
-(char)_getRootPathXattrValue:(id*)arg1 forRootPath:(id)arg2 error:(id*)arg3 ;
-(void)removeDesktopSymlink:(char)arg1 andDocumentsSymlink:(char)arg2 ;
-(void)_recreateSymlinkIfNecessaryForDocumentsPath:(id)arg1 folderName:(id)arg2 destinationPath:(id)arg3 ;
-(void)cloudDocsAppsListDidChange:(id)arg1 ;
-(char)registerClient:(id)arg1 ;
-(char)icloudAccountIsInCarry;
-(id)sharedServerZoneByMangledID:(id)arg1 ;
-(void)destroySharedClientZone:(id)arg1 ;
-(unsigned long long)availableDiskSpaceUsingCache:(char)arg1 ;
-(unsigned long long)computeTotalLiveDocumentSizeWithDb:(id)arg1 ;
-(void)computeTotalEvictableSizeWithAccessLowTimeDelta:(double)arg1 medTimeDelta:(double)arg2 highTimeDelta:(double)arg3 db:(id)arg4 reply:(/*^block*/id)arg5 ;
-(char)shouldPathBeDesktopSymlink:(id)arg1 ;
-(BRCUserNotification *)userNotification;
-(BRCThrottle *)appLibraryScanThrottle;
-(BRCThrottle *)lostItemThrottle;
-(id)serverAliasItemForSharedItem:(id)arg1 ;
-(id)_syncContextForContextIdentifier:(id)arg1 isShared:(char)arg2 createIfNeeded:(char)arg3 ;
-(id)serverAliasItemForSharedItem:(id)arg1 inZone:(id)arg2 db:(id)arg3 ;
-(id)_containerMetadataRecordsToSaveWithBatchSize:(unsigned long long)arg1 requestID:(unsigned long long)arg2 ;
@end

