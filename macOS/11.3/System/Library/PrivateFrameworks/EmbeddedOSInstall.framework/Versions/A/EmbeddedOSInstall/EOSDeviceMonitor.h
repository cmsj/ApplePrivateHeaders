/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:03 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/EmbeddedOSInstall.framework/Versions/A/EmbeddedOSInstall
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_semaphore, OS_dispatch_queue;
#import <EmbeddedOSInstall/EmbeddedOSInstall-Structs.h>
@class NSArray, NSObject, NSThread, EOSDevice, NSError;

@interface EOSDeviceMonitor : NSObject {

	char _invalidated;
	unsigned _locationID;
	long long _validDeviceModes;
	NSArray* _validDeviceTypes;
	double _connectionTimeout;
	double _disconnectionTimeout;
	NSObject*<OS_dispatch_semaphore> _deviceConnected;
	NSObject*<OS_dispatch_semaphore> _deviceDisconnected;
	NSObject*<OS_dispatch_semaphore> _stopDeviceNotificationsThread;
	NSThread* _deviceNotificationsThread;
	USBMuxListenerRef _muxListener;
	NSObject*<OS_dispatch_queue> _deviceQueue;
	NSObject*<OS_dispatch_queue> _eosNotificationsQueue;
	EOSDevice* _device;
	NSError* _error;

}

@property (retain) NSObject*<OS_dispatch_semaphore> deviceConnected;                            //@synthesize deviceConnected=_deviceConnected - In the implementation block
@property (retain) NSObject*<OS_dispatch_semaphore> deviceDisconnected;                         //@synthesize deviceDisconnected=_deviceDisconnected - In the implementation block
@property (retain) NSObject*<OS_dispatch_semaphore> stopDeviceNotificationsThread;              //@synthesize stopDeviceNotificationsThread=_stopDeviceNotificationsThread - In the implementation block
@property (retain) NSThread * deviceNotificationsThread;                                        //@synthesize deviceNotificationsThread=_deviceNotificationsThread - In the implementation block
@property (assign) USBMuxListenerRef muxListener;                                               //@synthesize muxListener=_muxListener - In the implementation block
@property (retain) NSObject*<OS_dispatch_queue> deviceQueue;                                    //@synthesize deviceQueue=_deviceQueue - In the implementation block
@property (retain) NSObject*<OS_dispatch_queue> eosNotificationsQueue;                          //@synthesize eosNotificationsQueue=_eosNotificationsQueue - In the implementation block
@property (retain) EOSDevice * device;                                                          //@synthesize device=_device - In the implementation block
@property (retain) NSError * error;                                                             //@synthesize error=_error - In the implementation block
@property (assign) char invalidated;                                                            //@synthesize invalidated=_invalidated - In the implementation block
@property (assign) long long validDeviceModes;                                                  //@synthesize validDeviceModes=_validDeviceModes - In the implementation block
@property (retain) NSArray * validDeviceTypes;                                                  //@synthesize validDeviceTypes=_validDeviceTypes - In the implementation block
@property (assign) unsigned locationID;                                                         //@synthesize locationID=_locationID - In the implementation block
@property (assign) double connectionTimeout;                                                    //@synthesize connectionTimeout=_connectionTimeout - In the implementation block
@property (assign) double disconnectionTimeout;                                                 //@synthesize disconnectionTimeout=_disconnectionTimeout - In the implementation block
-(id)init;
-(void)invalidate;
-(NSError *)error;
-(void)setError:(NSError *)arg1 ;
-(EOSDevice *)device;
-(void)setDevice:(EOSDevice *)arg1 ;
-(char)invalidated;
-(void)setInvalidated:(char)arg1 ;
-(unsigned)locationID;
-(void)setLocationID:(unsigned)arg1 ;
-(double)connectionTimeout;
-(void)setConnectionTimeout:(double)arg1 ;
-(NSObject*<OS_dispatch_queue>)deviceQueue;
-(NSArray *)validDeviceTypes;
-(void)setValidDeviceTypes:(NSArray *)arg1 ;
-(void)setDisconnectionTimeout:(double)arg1 ;
-(void)setValidDeviceModes:(long long)arg1 ;
-(id)waitForDeviceConnectionWithError:(id*)arg1 ;
-(char)waitForDeviceDisconnectionWithError:(id*)arg1 ;
-(void)_startDeviceNotificationsThread;
-(NSObject*<OS_dispatch_semaphore>)deviceConnected;
-(NSThread *)deviceNotificationsThread;
-(NSObject*<OS_dispatch_semaphore>)deviceDisconnected;
-(double)disconnectionTimeout;
-(void)_stopDeviceNotificationsThread;
-(void)setDeviceConnected:(NSObject*<OS_dispatch_semaphore>)arg1 ;
-(void)setDeviceDisconnected:(NSObject*<OS_dispatch_semaphore>)arg1 ;
-(void)setStopDeviceNotificationsThread:(NSObject*<OS_dispatch_semaphore>)arg1 ;
-(void)_startListeningToDeviceNotifications;
-(void)setDeviceNotificationsThread:(NSThread *)arg1 ;
-(long long)validDeviceModes;
-(void)setEosNotificationsQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(void)_deviceDidChange:(void*)arg1 mode:(long long)arg2 connected:(char)arg3 ;
-(NSObject*<OS_dispatch_queue>)eosNotificationsQueue;
-(NSObject*<OS_dispatch_semaphore>)stopDeviceNotificationsThread;
-(USBMuxListenerRef)muxListener;
-(void)setMuxListener:(USBMuxListenerRef)arg1 ;
-(void)setDeviceQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
@end

