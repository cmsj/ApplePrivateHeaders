/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:06 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/CoreCDPInternal.framework/Versions/A/CoreCDPInternal
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/CDPRemoteDeviceSecretValidatorProtocol.h>

@protocol CDPDDeviceSecretValidatorDelegate;
@class NSMutableDictionary, NSMutableSet, CDPContext, CDPDevice;

@interface CDPDDeviceSecretValidator : NSObject <CDPRemoteDeviceSecretValidatorProtocol> {

	char _isAttemptingRecovery;
	unsigned long long _failedAttempts;
	NSMutableDictionary* _failedSecrets;
	NSMutableSet* _failedRecoveryKeys;
	NSMutableSet* _failedSingleICSCs;
	NSMutableDictionary* _recoveryErrors;
	char _depletedRemainingAttempts;
	CDPContext* _context;
	CDPDevice* _currentDevice;
	char _isUsingMultipleICSC;
	unsigned long long supportedEscapeOfferMask;
	/*^block*/id _validSecretHandler;
	id<CDPDDeviceSecretValidatorDelegate> _delegate;

}

@property (assign,nonatomic) char isUsingMultipleICSC;                                           //@synthesize isUsingMultipleICSC=_isUsingMultipleICSC - In the implementation block
@property (nonatomic,copy) id validSecretHandler;                                                //@synthesize validSecretHandler=_validSecretHandler - In the implementation block
@property (assign,nonatomic,__weak) id<CDPDDeviceSecretValidatorDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
@property (assign,nonatomic) unsigned long long supportedEscapeOfferMask; 
-(id)init;
-(id<CDPDDeviceSecretValidatorDelegate>)delegate;
-(void)setDelegate:(id<CDPDDeviceSecretValidatorDelegate>)arg1 ;
-(id)initWithContext:(id)arg1 delegate:(id)arg2 ;
-(unsigned long long)supportedEscapeOfferMask;
-(void)cancelValidationWithError:(id)arg1 ;
-(void)validateSecret:(id)arg1 devices:(id)arg2 type:(unsigned long long)arg3 withCompletion:(/*^block*/id)arg4 ;
-(void)approveFromAnotherDeviceWithCompletion:(/*^block*/id)arg1 ;
-(void)cancelApproveFromAnotherDevice;
-(void)validateRecoveryKey:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(void)resetAccountCDPState;
-(void)supportedEscapeOfferMaskCompletion:(/*^block*/id)arg1 ;
-(void)setSupportedEscapeOfferMask:(unsigned long long)arg1 ;
-(void)setIsUsingMultipleICSC:(char)arg1 ;
-(void)setValidSecretHandler:(id)arg1 ;
-(char)isAttemptingRecovery;
-(id)validSecretHandler;
-(char)_isFailedSecret:(id)arg1 forDevice:(id)arg2 ;
-(void)_handleMultiCSCRecoveryResults:(id)arg1 clique:(id)arg2 type:(unsigned long long)arg3 secret:(id)arg4 device:(id)arg5 completion:(/*^block*/id)arg6 ;
-(void)_attemptToRecoverWithRecoveryKey:(id)arg1 completion:(/*^block*/id)arg2 ;
-(char)isUsingMultipleICSC;
-(id)_handleMultiCSCRecoveryFailureForDevice:(id)arg1 recoveryError:(id)arg2 secret:(id)arg3 ;
-(void)_handleRecoveryFailureForFinalDevice:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_attemptToRecoverDevice:(id)arg1 withSecret:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)_performSingleiCSCRecoveryWithSecret:(id)arg1 type:(unsigned long long)arg2 completion:(/*^block*/id)arg3 ;
-(void)_handleDelegateValidationError:(id)arg1 ;
-(char)_isInvalidICSCError:(id)arg1 ;
-(id)_failedSecretsForDevice:(id)arg1 ;
-(id)_failedSingleICSCs;
-(unsigned long long)failedAttempts;
@end

