/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:30 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/WebContentAnalysis.framework/Versions/A/WebContentAnalysis
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class WFWhitelistSiteBuffer, NSString;

@interface WFWhitelistUserPreferences : NSObject {

	WFWhitelistSiteBuffer* _filterWhitelist;
	WFWhitelistSiteBuffer* _filterBlacklist;
	WFWhitelistSiteBuffer* _webWhitelist;
	char _filterEnabled;
	char _whitelistEnabled;
	char _alwaysAllowHTTPS;
	NSString* _username;

}

@property (assign) char filterEnabled;                                     //@synthesize filterEnabled=_filterEnabled - In the implementation block
@property (assign) char whitelistEnabled;                                  //@synthesize whitelistEnabled=_whitelistEnabled - In the implementation block
@property (assign) char alwaysAllowHTTPS;                                  //@synthesize alwaysAllowHTTPS=_alwaysAllowHTTPS - In the implementation block
@property (retain) NSString * username;                                    //@synthesize username=_username - In the implementation block
@property (readonly) WFWhitelistSiteBuffer * filterWhitelist;              //@synthesize filterWhitelist=_filterWhitelist - In the implementation block
@property (readonly) WFWhitelistSiteBuffer * filterBlacklist;              //@synthesize filterBlacklist=_filterBlacklist - In the implementation block
@property (readonly) WFWhitelistSiteBuffer * webWhitelist;                 //@synthesize webWhitelist=_webWhitelist - In the implementation block
+(id)_arrayByConvertingLinesInStringsAtPath:(id)arg1 ;
+(id)_metasiteDomainNamesArray;
+(id)_sharedMetasiteDomainNamesDictionary;
+(id)_sharedMetasiteExceptionsDomainNamesArray;
+(id)_modificationDateForFileAtPath:(id)arg1 ;
+(id)_cachedWhitelistForPath:(id)arg1 username:(id)arg2 ;
+(char)_isURLMetasite:(id)arg1 ;
+(id)defaultWhitelistForUser:(id)arg1 ;
-(char)isURLAllowed:(id)arg1 reason:(id*)arg2 shouldFilter:(char*)arg3 foundOnList:(char*)arg4 ;
-(char)isURL:(id)arg1 onList:(id)arg2 ;
-(id)pronounceOnPageURLString:(id)arg1 shouldFilter:(char*)arg2 ;
-(char)isURLAllowed:(id)arg1 ;
-(void)setWhitelistEnabled:(char)arg1 ;
-(char)alwaysAllowHTTPS;
-(void)setAlwaysAllowHTTPS:(char)arg1 ;
-(WFWhitelistSiteBuffer *)filterWhitelist;
-(WFWhitelistSiteBuffer *)filterBlacklist;
-(WFWhitelistSiteBuffer *)webWhitelist;
-(void)dealloc;
-(id)description;
-(id)init;
-(char)whitelistEnabled;
-(NSString *)username;
-(void)setUsername:(NSString *)arg1 ;
-(id)initWithPreferences:(id)arg1 ;
-(void)setFilterEnabled:(char)arg1 ;
-(char)filterEnabled;
@end

