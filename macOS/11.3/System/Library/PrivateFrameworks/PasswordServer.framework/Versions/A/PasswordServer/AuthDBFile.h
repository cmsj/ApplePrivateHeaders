/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:32 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/PasswordServer.framework/Versions/A/PasswordServer
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <PasswordServer/PasswordServer-Structs.h>
@interface AuthDBFile : NSObject {

	_sFILE* mFreeListFile;
	unsigned long long mPWFileLen;
	PWFileHeader mPWFileHeader;
	unsigned char mPWFileValidated;
	char mPWFilePermission[10];
	CCRSACryptorRef rsaKey;
	BOOL mGotHeader;
	char* mDirPathStr;
	BOOL mReadOnlyFileSystem;
	unsigned mKerberosCacheLimit;
	char* mSearchBase;
	long long mPWHdrLastMod;
	ldapRef mLdap;
	char* mRealm;

}
-(void)dealloc;
-(id)init;
-(int)setHeader:(const PWFileHeader*)arg1 ;
-(id)free;
-(void)freeRSAKey;
-(void)rsaWait;
-(void)rsaSignal;
-(int)getHeader:(PWFileHeader*)arg1 cachedCopyOK:(char)arg2 ;
-(int)loadRSAKeys;
-(int)addRSAKeys:(unsigned)arg1 ;
-(int)addRSAKeys:(char*)arg1 publicKeyLen:(unsigned)arg2 privateKey:(char*)arg3 privateKeyLen:(unsigned)arg4 ;
-(int)getHeader:(PWFileHeader*)arg1 ;
-(int)setPassword:(PWFileEntry*)arg1 atSlot:(unsigned char)arg2 obfuscate:(char)arg3 setModDate:(char)arg4 ;
-(int)addPassword:(PWFileEntry*)arg1 atSlot:(unsigned char)arg2 obfuscate:(char)arg3 setModDate:(char)arg4 ;
-(int)setPasswordFast:(PWFileEntry*)arg1 atSlot:(unsigned char)arg2 ;
-(int)initPasswordRecord:(PWFileEntry*)arg1 obfuscate:(char)arg2 ;
-(int)getPasswordRec:(unsigned char*)arg1 putItHere:(PWFileEntry*)arg2 unObfuscate:(char)arg3 ;
-(int)getValidPasswordRec:(PWFileEntry*)arg1 fromSpillBucket:(char*)arg2 unObfuscate:(char)arg3 ;
-(int)freeSlot:(PWFileEntry*)arg1 deathCertificate:(char)arg2 ;
-(int)shouldTryLDAP;
-(int)getAccountIDFromLDAP:(const char*)arg1 slotID:(char*)arg2 ;
-(char*)getLDAPSearchBase;
-(int)createPasswordFile;
-(void)resetPasswordFileState;
-(void)pwWait;
-(void)pwSignal;
-(int)getRSAPublicKey:(char*)arg1 ;
-(int)decryptRSA:(char*)arg1 length:(int)arg2 result:(char*)arg3 ;
-(int)encryptRSA:(char*)arg1 length:(int)arg2 result:(char*)arg3 ;
-(int)isWeakAuthMethod:(const char*)arg1 ;
-(int)addWeakAuthMethod:(const char*)arg1 ;
-(int)removeWeakAuthMethod:(const char*)arg1 ;
-(int)expandDatabase:(unsigned)arg1 nextAvailableSlot:(unsigned char*)arg2 ;
-(int)addRSAKeys;
-(int)addPassword:(PWFileEntry*)arg1 obfuscate:(char)arg2 ;
-(int)addPassword:(PWFileEntry*)arg1 atSlot:(unsigned char)arg2 obfuscate:(char)arg3 ;
-(int)addPasswordFast:(PWFileEntry*)arg1 atSlot:(unsigned char)arg2 ;
-(int)newPasswordForUser:(const char*)arg1 password:(const char*)arg2 slotStr:(char*)arg3 slotRec:(PWFileEntry*)arg4 ;
-(int)getPasswordRec:(unsigned char*)arg1 putItHere:(PWFileEntry*)arg2 ;
-(int)getValidPasswordRec:(PWFileEntry*)arg1 ;
-(int)freeSlot:(PWFileEntry*)arg1 ;
-(int)setPassword:(PWFileEntry*)arg1 atSlot:(unsigned char)arg2 ;
-(void)addHashes:(const char*)arg1 addNT:(char)arg2 pwsRec:(PWFileEntry*)arg3 ;
-(int)getUserIDFromName:(const char*)arg1 anyUser:(char)arg2 maxBuffSize:(long long)arg3 pwsID:(char*)arg4 ;
-(int)getUserRecordFromPrincipal:(const char*)arg1 record:(PWFileEntry*)arg2 ;
-(char*)getDefaultRealm;
@end

