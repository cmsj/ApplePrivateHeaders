/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:03 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/NearField.framework/Versions/A/NearField
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <NearField/NFSession.h>
#import <libobjc.A.dylib/NFSecureElementManagerSessionCallbacks.h>
#import <libobjc.A.dylib/NFAppletCollection.h>

@protocol NFSecureElementManagerSessionDelegate;
@class NSMutableDictionary, NSString;

@interface NFSecureElementManagerSession : NFSession <NFSecureElementManagerSessionCallbacks, NFAppletCollection> {

	char _hasApplets;
	NSMutableDictionary* _appletsById;
	id<NFSecureElementManagerSessionDelegate> _delegate;

}

@property (__weak) id<NFSecureElementManagerSessionDelegate> delegate; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id)init;
-(id<NFSecureElementManagerSessionDelegate>)delegate;
-(void)setDelegate:(id<NFSecureElementManagerSessionDelegate>)arg1 ;
-(id)stateInformation;
-(id)appletWithIdentifier:(id)arg1 ;
-(id)felicaAppletState:(id)arg1 error:(id*)arg2 ;
-(id)transitAppletState:(id)arg1 error:(id*)arg2 ;
-(char)deleteAllApplets:(char)arg1 error:(id*)arg2 ;
-(char)getCryptogram:(id*)arg1 challengeResponse:(id*)arg2 error:(id*)arg3 ;
-(char)getCryptogram:(id*)arg1 challengeResponse:(id*)arg2 ;
-(unsigned)validateSEPairings:(id*)arg1 ;
-(id)allApplets;
-(char)deleteApplets:(id)arg1 queueServerConnection:(char)arg2 error:(id*)arg3 ;
-(id)signChallenge:(id)arg1 forAID:(id)arg2 sigInfo:(id*)arg3 error:(id*)arg4 ;
-(id)signChallenge:(id)arg1 useOSVersion:(char)arg2 signatureInfo:(id*)arg3 error:(id*)arg4 ;
-(id)signChallenge:(id)arg1 certs:(id*)arg2 error:(id*)arg3 ;
-(id)getSignedPlatformDataForSeid:(id)arg1 error:(id*)arg2 ;
-(id)performPeerPaymentEnrollment:(id)arg1 error:(id*)arg2 ;
-(void)_setApplets:(id)arg1 ;
-(void)didEndUnexpectedly;
-(id)stateInformationWithRedirectInfo:(id)arg1 error:(id*)arg2 ;
-(id)signChallenge:(id)arg1 forAID:(id)arg2 certs:(id*)arg3 error:(id*)arg4 ;
-(id)_appletsById;
-(char)deleteAllApplets:(char)arg1 ;
-(char)addExpressApplet:(id)arg1 type:(unsigned char)arg2 authorization:(id)arg3 expressInfo:(id)arg4 error:(id*)arg5 ;
-(char)removeExpressApplet:(id)arg1 type:(unsigned char)arg2 restoreAuthorization:(char)arg3 error:(id*)arg4 ;
-(char)setExpressModesEnabled:(char)arg1 error:(id*)arg2 ;
-(char)setExpressConfig:(id)arg1 restoreAuthorization:(char)arg2 error:(id*)arg3 ;
-(char)restoreAuthorizationForAllAppletsExcept:(id)arg1 error:(id*)arg2 ;
-(char)disableAuthorizationForApplets:(id)arg1 andKey:(id)arg2 authorization:(id)arg3 error:(id*)arg4 ;
-(char)disableAuthorizationForApplet:(id)arg1 andKey:(id)arg2 authorization:(id)arg3 error:(id*)arg4 ;
-(long long)getAndResetLPEMCounter:(id*)arg1 ;
-(char)expressModesEnabledWithError:(id*)arg1 ;
-(id)expressAppletIdentifiersWithError:(id*)arg1 ;
-(char)didExitRestrictedMode:(id)arg1 error:(id*)arg2 ;
-(id)transceive:(id)arg1 forSEID:(id)arg2 error:(id*)arg3 ;
-(char)refreshSecureElement:(id)arg1 error:(id*)arg2 ;
-(id)getAttackCounterLogForSEID:(id)arg1 error:(id*)arg2 ;
-(id)dumpDomain:(unsigned char)arg1 forSEID:(id)arg2 error:(id*)arg3 ;
-(id)stateInformationWithError:(id*)arg1 ;
-(id)signChallenge:(id)arg1 certs:(id*)arg2 ;
-(id)signChallenge:(id)arg1 useOSVersion:(char)arg2 signatureInfo:(id*)arg3 ;
-(id)signChallenge:(id)arg1 forAID:(id)arg2 certs:(id*)arg3 ;
-(char)deleteApplets:(id)arg1 queueServerConnection:(char)arg2 ;
-(char)addExpressApplet:(id)arg1 type:(unsigned char)arg2 authorization:(id)arg3 ;
-(char)addExpressApplet:(id)arg1 type:(unsigned char)arg2 authorization:(id)arg3 error:(id*)arg4 ;
-(char)addExpressKeyID:(id)arg1 forApplet:(id)arg2 type:(unsigned char)arg3 authorization:(id)arg4 expressInfo:(id)arg5 error:(id*)arg6 ;
-(char)removeExpressApplet:(id)arg1 type:(unsigned char)arg2 ;
-(char)removeExpressApplet:(id)arg1 type:(unsigned char)arg2 error:(id*)arg3 ;
-(char)removeExpressApplet:(id)arg1 type:(unsigned char)arg2 restoreAuthorization:(char)arg3 ;
-(char)removeExpressKeyID:(id)arg1 forApplet:(id)arg2 restoreAuthorization:(char)arg3 error:(id*)arg4 ;
-(char)setExpressModesEnabled:(char)arg1 ;
-(id)checkExpressAppletCompatibility:(id)arg1 error:(id*)arg2 ;
-(char)setExpressConfig:(id)arg1 error:(id*)arg2 ;
-(id)getExpressConfigWithError:(id*)arg1 ;
-(char)restoreAuthorizationForAllAppletsExcept:(id)arg1 ;
-(char)restoreAuthorizarionForKeys:(id)arg1 onApplet:(id)arg2 error:(id*)arg3 ;
-(char)disableAuthorizationForApplet:(id)arg1 authorization:(id)arg2 ;
-(char)disableAuthorizationForApplet:(id)arg1 authorization:(id)arg2 error:(id*)arg3 ;
-(char)disableAuthorizationForApplet:(id)arg1 andKeys:(id)arg2 authorization:(id)arg3 error:(id*)arg4 ;
-(char)disableAuthorizationForApplets:(id)arg1 authorization:(id)arg2 error:(id*)arg3 ;
-(id)felicaAppletState:(id)arg1 ;
-(char)expressModesEnabled;
-(id)expressAppletIdentifiers;
-(void)didExitRestrictedMode:(id)arg1 ;
-(id)transceive:(id)arg1 forSEID:(id)arg2 ;
-(id)transceiveMultiple:(id)arg1 forSEID:(id)arg2 error:(id*)arg3 ;
-(unsigned)runScript:(id)arg1 forSEID:(id)arg2 results:(id*)arg3 lastStatus:(unsigned long long*)arg4 ;
-(unsigned)runScript:(id)arg1 parameters:(id)arg2 outputResults:(id*)arg3 ;
-(char)refreshSecureElement:(id)arg1 ;
-(id)getAttackCounterLogForSEID:(id)arg1 ;
-(id)dumpDomain:(unsigned char)arg1 forSEID:(id)arg2 ;
-(char)powerCycleSEID:(id)arg1 error:(id*)arg2 ;
-(id)getOSUpdateLog;
@end

