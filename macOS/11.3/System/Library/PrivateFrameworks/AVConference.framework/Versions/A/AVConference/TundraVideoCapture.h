/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:12 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/AVConference.framework/Versions/A/AVConference
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <AVConference/AVConference-Structs.h>
#import <AVConference/VCVideoCapture.h>
#import <libobjc.A.dylib/VCVideoSource.h>

@protocol OS_dispatch_queue, OS_dispatch_semaphore;
@class NSObject, NSString;

@interface TundraVideoCapture : VCVideoCapture <VCVideoSource> {

	OpaqueCMIOGraphRef _graph;
	SCD_Struct_Tu147* _videoStore;
	unsigned _selectedCameraID;
	OpaqueCMClockRef _clockForDevice;
	VCVideoSourceToken _sourceToken;
	char _quit;
	char _frameAvailable;
	char _capturing;
	char _previewing;
	OpaqueFigThreadRef _tidFrame;
	int _lastRequestedWidth;
	int _lastRequestedHeight;
	int _lastRequestedFrameRate;
	int _conferenceFrameRate;
	char _enableLocalRecording;
	int _sensorFrameRate;
	int _frameCounterForDrop;
	int _frameCounterForRate;
	int _frameCounterDiscard;
	double _referenceTimestamp;
	double _lastPreviewFrameTime;
	double _lastCaptureFrameTime;
	NSObject*<OS_dispatch_queue> _captureSessionQueue;
	opaque_pthread_mutex_t _xLiveSource;
	opaqueCMBufferQueueRef _previewQueue;
	int _frameCount;
	NSObject*<OS_dispatch_semaphore> _frameAvailableSemaphore;
	CVPixelBufferPoolRef _captureBufferPool;
	OpaqueVTPixelTransferSessionRef _captureTransferSession;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)dealloc;
-(int)setFrameRate:(int)arg1 ;
-(int)stop:(char)arg1 ;
-(int)startPreview;
-(int)setCamera:(unsigned)arg1 ;
-(char)isPreviewRunning;
-(int)startCaptureWithWidth:(int)arg1 height:(int)arg2 frameRate:(int)arg3 ;
-(int)setWidth:(int)arg1 height:(int)arg2 frameRate:(int)arg3 ;
-(int)copyColorInfo:(const _CFDictionary*)arg1 ;
-(int)configureCaptureWithToken:(VCVideoSourceToken)arg1 ;
-(char)isFrontCamera;
-(int)frameCount:(char)arg1 ;
-(int)frameBecameAvailableCount:(int*)arg1 figBufferQueueEmptyCount:(int*)arg2 figBufferQueueErrorCount:(int*)arg3 ;
-(char)cameraSupportsFormatWidth:(int)arg1 height:(int)arg2 ;
-(void)updateSensorFramerate;
-(int)processFrame;
-(void)resizeCameraBufferToCaptureSize:(_CVBuffer*)arg1 ;
-(int)_startPreview;
-(int)_startCaptureWithWidth:(int)arg1 height:(int)arg2 frameRate:(int)arg3 ;
-(int)setUpDVCamera;
-(char)cameraSupportsFastFormatSwitching;
-(int)getCamera:(unsigned*)arg1 ;
-(id)initWithCaptureServer:(id)arg1 width:(int)arg2 height:(int)arg3 frameRate:(int)arg4 videoSourceToken:(VCVideoSourceToken)arg5 error:(int*)arg6 ;
-(void)videoDataBecameReady:(opaqueCMSampleBufferRef)arg1 ;
-(void)frameProc;
-(int)setCameraWithUID:(id)arg1 ;
@end

