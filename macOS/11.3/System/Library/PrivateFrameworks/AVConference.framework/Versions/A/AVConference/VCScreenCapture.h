/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:12 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/AVConference.framework/Versions/A/AVConference
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <AVConference/AVConference-Structs.h>
#import <AVConference/VCVideoCapture.h>
#import <libobjc.A.dylib/VCVideoSource.h>

@class NSDictionary, NSString;

@interface VCScreenCapture : VCVideoCapture <VCVideoSource> {

	id _weakCapture;
	NSDictionary* _options;
	OpaqueFigVirtualDisplaySessionRef _session;
	OpaqueVTImageRotationSessionRef _rotationSession;
	CVPixelBufferPoolRef _rotationBufferPool;
	CVPixelBufferPoolRef _resizeBufferPool;
	OpaqueVTPixelTransferSessionRef _resizeTransferSession;
	char _shouldResizeInitialized;
	char _shouldResize;
	char _forceMirroring;
	char _enableClearScreen;
	int _resolutionScaling;
	opaque_pthread_mutex_t _screenCaptureLock;
	char _isClearScreenThreadRunning;
	opaque_pthread_t* _clearScreenProc;
	opaque_pthread_mutex_t _clearScreenLock;
	opaque_pthread_cond_t _clearScreenChanged;
	char _shouldClearScreen;
	opaqueCMSampleBufferRef _blackFrame;
	opaqueCMSampleBufferRef _previousCompleteFrame;
	CGRect _previousCompleteFrameSourceRect;
	CGRect _previousCompleteFrameDestinationRect;
	unsigned _previousCompleteFrameTransform;
	char _isPreviousCompleteFrameBlack;
	SCD_Struct_VC87 _previousFrameTime;
	char _shouldValidateFrameTimingAfterIdle;
	char _isPreviewing;
	char _isCapturing;
	int _captureWidth;
	int _captureHeight;
	int _captureFramerate;
	int _frameCount;
	char _enableIdleFrameTimeAdjustments;

}

@property (readonly) char isClearScreenThreadRunning;               //@synthesize isClearScreenThreadRunning=_isClearScreenThreadRunning - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)dealloc;
-(int)setFrameRate:(int)arg1 ;
-(int)stop:(char)arg1 ;
-(int)startPreview;
-(char)isPreviewRunning;
-(int)_startCapture;
-(int)startCaptureWithWidth:(int)arg1 height:(int)arg2 frameRate:(int)arg3 ;
-(int)setWidth:(int)arg1 height:(int)arg2 frameRate:(int)arg3 ;
-(int)copyColorInfo:(const _CFDictionary*)arg1 ;
-(int)configureCaptureWithToken:(VCVideoSourceToken)arg1 ;
-(char)isFrontCamera;
-(int)frameCount:(char)arg1 ;
-(int)frameBecameAvailableCount:(int*)arg1 figBufferQueueEmptyCount:(int*)arg2 figBufferQueueErrorCount:(int*)arg3 ;
-(char)cameraSupportsFormatWidth:(int)arg1 height:(int)arg2 ;
-(void)capturedScreen:(opaqueCMSampleBufferRef)arg1 sourceRect:(CGRect)arg2 desRect:(CGRect)arg3 transform:(unsigned)arg4 isIdleFrame:(char)arg5 ;
-(double)shiftSampleBufferPresentationTime:(opaqueCMSampleBufferRef)arg1 frameTime:(SCD_Struct_VC87)arg2 timeOffset:(SCD_Struct_VC87)arg3 ;
-(void)validateFrameTime:(SCD_Struct_VC87)arg1 interArrivalTime:(double)arg2 isIdle:(CFBooleanRef)arg3 shouldDropFrame:(char*)arg4 shouldAddSignpost:(char*)arg5 ;
-(int)performIdleTimeAdjustments:(opaqueCMSampleBufferRef)arg1 frameTime:(SCD_Struct_VC87*)arg2 isIdle:(CFBooleanRef)arg3 shouldDropFrame:(char*)arg4 shouldAddSignpost:(char*)arg5 ;
-(void)startClearScreenProc;
-(void)callbackWithEventString:(id)arg1 ;
-(void)stopClearScreenProc;
-(void)shouldClearScreen:(char)arg1 ;
-(void)processAndSendIdleBlackFrame;
-(id)initWithCaptureServer:(id)arg1 sourceConfig:(id)arg2 ;
-(void)setPauseCapture:(char)arg1 ;
-(char)isClearScreenThreadRunning;
@end

