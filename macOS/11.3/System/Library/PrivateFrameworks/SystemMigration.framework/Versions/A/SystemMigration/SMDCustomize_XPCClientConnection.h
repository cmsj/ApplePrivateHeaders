/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:38 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/SystemMigration.framework/Versions/A/SystemMigration
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <SystemMigration/SMDXPCClientConnection.h>
#import <libobjc.A.dylib/SMDPCustomizeProtocol.h>
#import <libobjc.A.dylib/SMPathsPreliminaryUserSizeCallback.h>
#import <libobjc.A.dylib/SMPathsPreliminaryPathGroupSizeCallback.h>
#import <libobjc.A.dylib/SMPathsProgressInfoDelegateProtocol.h>
#import <libobjc.A.dylib/SMWindowsAnalyzerPreliminaryComponentSizeCallback.h>
#import <libobjc.A.dylib/SMWindowsAnalyzerPreliminaryCustomPathSizeCallback.h>

@class SMPaths, SMWindowsAnalyzer;

@interface SMDCustomize_XPCClientConnection : SMDXPCClientConnection <SMDPCustomizeProtocol, SMPathsPreliminaryUserSizeCallback, SMPathsPreliminaryPathGroupSizeCallback, SMPathsProgressInfoDelegateProtocol, SMWindowsAnalyzerPreliminaryComponentSizeCallback, SMWindowsAnalyzerPreliminaryCustomPathSizeCallback> {

	SMPaths* _pather;
	SMWindowsAnalyzer* _windowsAnalyzer;

}

@property (retain) SMPaths * pather;                                 //@synthesize pather=_pather - In the implementation block
@property (retain) SMWindowsAnalyzer * windowsAnalyzer;              //@synthesize windowsAnalyzer=_windowsAnalyzer - In the implementation block
+(id)daemonProtocolInterface;
+(id)daemonProtocolInterfaceInstance;
-(void)submitMigrationRequest:(id)arg1 ;
-(void)preliminarySize:(unsigned long long)arg1 forComponent:(id)arg2 ;
-(void)preliminarySizeForCustomPaths:(unsigned long long)arg1 type:(unsigned long long)arg2 user:(id)arg3 ;
-(void)preliminarySize:(unsigned long long)arg1 andCount:(unsigned long long)arg2 forPathGroup:(unsigned long long)arg3 ;
-(SMWindowsAnalyzer *)windowsAnalyzer;
-(void)setWindowsAnalyzer:(SMWindowsAnalyzer *)arg1 ;
-(void)pathingProgressFormatKey:(id)arg1 arguments:(id)arg2 ;
-(void)sizeAllUsersForSystem:(id)arg1 includingVaultUsers:(char)arg2 ;
-(void)initiateCustomizationOfSystem:(id)arg1 ;
-(void)sizeForPathGroup:(unsigned long long)arg1 onSourceSystem:(id)arg2 andDestinationSystem:(id)arg3 reply:(/*^block*/id)arg4 ;
-(void)sizeForComponent:(id)arg1 onSourceSystem:(id)arg2 andDestinationSystem:(id)arg3 reply:(/*^block*/id)arg4 ;
-(void)sizeForCustomPathType:(unsigned long long)arg1 user:(id)arg2 onSourceSystem:(id)arg3 andDestinationSystem:(id)arg4 reply:(/*^block*/id)arg5 ;
-(void)informationForBundlesAtPaths:(id)arg1 onSourceSystem:(id)arg2 andDestinationSystem:(id)arg3 reply:(/*^block*/id)arg4 ;
-(void)hasCustomPathsForSourceSystem:(id)arg1 andDestinationSystem:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)cancelSizingForSystemID:(id)arg1 ;
-(SMPaths *)pather;
-(void)setPather:(SMPaths *)arg1 ;
-(void)preliminarySize:(unsigned long long)arg1 forUserHome:(id)arg2 ;
@end

