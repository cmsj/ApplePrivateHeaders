/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:53 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/BiometricKit.framework/Versions/A/BiometricKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <BiometricKit/BiometricKitDelegateXpcProtocol.h>

@protocol BKDeviceDelegate, OS_dispatch_queue;
@class BiometricKitXPCClient, NSObject, BKDeviceDescriptor, NSString;

@interface BKDevice : NSObject <BiometricKitDelegateXpcProtocol> {

	BiometricKitXPCClient* _xpcClient;
	id<BKDeviceDelegate> _delegate;
	NSObject*<OS_dispatch_queue> _queue;
	BKDeviceDescriptor* _descriptor;

}

@property (nonatomic,retain) BKDeviceDescriptor * descriptor;                   //@synthesize descriptor=_descriptor - In the implementation block
@property (assign,nonatomic,__weak) id<BKDeviceDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> queue;                //@synthesize queue=_queue - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)deviceWithDescriptor:(id)arg1 error:(id*)arg2 ;
+(char)deviceAvailableWithError:(id*)arg1 ;
+(char)lockoutState:(long long*)arg1 fromDeviceLockoutState:(long long)arg2 error:(id*)arg3 ;
+(char)extendedLockoutState:(long long*)arg1 fromDeviceLockoutState:(long long)arg2 error:(id*)arg3 ;
+(char)biometryAvailabilityInfo:(long long*)arg1 fromDeviceInfo:(long long)arg2 error:(id*)arg3 ;
-(void)dealloc;
-(id<BKDeviceDelegate>)delegate;
-(void)setDelegate:(id<BKDeviceDelegate>)arg1 ;
-(id)dispatchQueue;
-(BKDeviceDescriptor *)descriptor;
-(NSObject*<OS_dispatch_queue>)queue;
-(void)setDescriptor:(BKDeviceDescriptor *)arg1 ;
-(void)setQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(char)isDelegate;
-(id)connectedAccessoriesWithError:(id*)arg1 ;
-(id)accessoriesWithError:(id*)arg1 ;
-(void)enrollResult:(id)arg1 client:(unsigned long long)arg2 ;
-(void)enrollUpdate:(id)arg1 client:(unsigned long long)arg2 ;
-(void)enrollFeedback:(id)arg1 client:(unsigned long long)arg2 ;
-(void)matchResult:(id)arg1 details:(id)arg2 client:(unsigned long long)arg3 ;
-(void)statusMessage:(unsigned)arg1 client:(unsigned long long)arg2 ;
-(void)statusMessage:(unsigned)arg1 details:(id)arg2 client:(unsigned long long)arg3 ;
-(void)homeButtonPressed:(unsigned long long)arg1 ;
-(void)touchIDButtonPressed:(char)arg1 client:(unsigned long long)arg2 ;
-(void)templateUpdate:(id)arg1 details:(id)arg2 client:(unsigned long long)arg3 ;
-(void)taskResumeStatus:(int)arg1 client:(unsigned long long)arg2 ;
-(id)createEnrollOperationWithError:(id*)arg1 ;
-(id)createMatchOperationWithError:(id*)arg1 ;
-(id)createPresenceDetectOperationWithError:(id*)arg1 ;
-(id)protectedConfigurationForUser:(unsigned)arg1 error:(id*)arg2 ;
-(id)effectiveProtectedConfigurationForUser:(unsigned)arg1 error:(id*)arg2 ;
-(id)systemProtectedConfigurationWithError:(id*)arg1 ;
-(char)setProtectedConfiguration:(id)arg1 forUser:(unsigned)arg2 credentialSet:(id)arg3 error:(id*)arg4 ;
-(char)setSystemProtectedConfiguration:(id)arg1 credentialSet:(id)arg2 error:(id*)arg3 ;
-(char)bioLockoutState:(long long*)arg1 forUser:(unsigned)arg2 error:(id*)arg3 ;
-(char)extendedBioLockoutState:(long long*)arg1 forUser:(unsigned)arg2 error:(id*)arg3 ;
-(char)expressModeState:(long long*)arg1 forUser:(unsigned)arg2 error:(id*)arg3 ;
-(id)identitiesDatabaseUUIDForUser:(unsigned)arg1 error:(id*)arg2 ;
-(id)identitiesDatabaseHashForUser:(unsigned)arg1 error:(id*)arg2 ;
-(char)dropAllUnlockTokensWithError:(id*)arg1 ;
-(char)forceBioLockoutForAllUsersWithError:(id*)arg1 ;
-(char)forceBioLockoutForUser:(unsigned)arg1 error:(id*)arg2 ;
-(char)forceBioLockoutIfLockedForUser:(unsigned)arg1 error:(id*)arg2 ;
-(id)identityForUUID:(id)arg1 error:(id*)arg2 ;
-(char)updateIdentity:(id)arg1 error:(id*)arg2 ;
-(char)removeIdentity:(id)arg1 error:(id*)arg2 ;
-(char)removeAllIdentitiesForUser:(unsigned)arg1 error:(id*)arg2 ;
-(id)identitiesWithError:(id*)arg1 ;
-(id)identitiesForUser:(unsigned)arg1 error:(id*)arg2 ;
-(id)maxIdentityCountWithError:(id*)arg1 ;
-(id)freeIdentityCountForUser:(unsigned)arg1 error:(id*)arg2 ;
-(char)biometryAvailability:(long long*)arg1 forUser:(unsigned)arg2 error:(id*)arg3 ;
-(id)lastMatchEventWithError:(id*)arg1 ;
-(id)accessoryGroupsWithError:(id*)arg1 ;
-(id)identitiesForUser:(unsigned)arg1 accessoryGroup:(id)arg2 error:(id*)arg3 ;
-(id)freeIdentityCountForUser:(unsigned)arg1 accessoryGroup:(id)arg2 error:(id*)arg3 ;
@end

