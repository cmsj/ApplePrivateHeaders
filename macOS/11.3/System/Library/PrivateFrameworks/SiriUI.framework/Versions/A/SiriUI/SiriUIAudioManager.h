/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:32 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/SiriUI.framework/Versions/A/SiriUI
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSTimer;

@interface SiriUIAudioManager : NSObject {

	long long _lastSiriEvent;
	char _isAcousticIDRecording;
	char _isAudioPaused;
	char _switchedBluetoothDeviceToSCO;
	char _isSiriUIVisible;
	unsigned _bluetoothOutputDevice;
	float _savedBluetoothOutputVolume;
	unsigned _savedBluetoothOutputVolumeDevice;
	NSTimer* _bluetoothAudioResumeTimer;
	NSTimer* _audioUnduckTimer;

}

@property (assign) char isAudioPaused;                                               //@synthesize isAudioPaused=_isAudioPaused - In the implementation block
@property (retain) NSTimer * bluetoothAudioResumeTimer;                              //@synthesize bluetoothAudioResumeTimer=_bluetoothAudioResumeTimer - In the implementation block
@property (retain) NSTimer * audioUnduckTimer;                                       //@synthesize audioUnduckTimer=_audioUnduckTimer - In the implementation block
@property (assign,nonatomic) char switchedBluetoothDeviceToSCO;                      //@synthesize switchedBluetoothDeviceToSCO=_switchedBluetoothDeviceToSCO - In the implementation block
@property (assign,nonatomic) unsigned bluetoothOutputDevice;                         //@synthesize bluetoothOutputDevice=_bluetoothOutputDevice - In the implementation block
@property (assign,nonatomic) float savedBluetoothOutputVolume;                       //@synthesize savedBluetoothOutputVolume=_savedBluetoothOutputVolume - In the implementation block
@property (assign,nonatomic) unsigned savedBluetoothOutputVolumeDevice;              //@synthesize savedBluetoothOutputVolumeDevice=_savedBluetoothOutputVolumeDevice - In the implementation block
@property (assign) long long lastSiriEvent; 
@property (assign) char isSiriUIVisible;                                             //@synthesize isSiriUIVisible=_isSiriUIVisible - In the implementation block
@property (assign) char isAcousticIDRecording;                                       //@synthesize isAcousticIDRecording=_isAcousticIDRecording - In the implementation block
+(id)sharedManager;
+(unsigned)currentBluetoothOutputDevice;
+(char)isDoAPSupportedForBluetoothAudioDevice:(unsigned)arg1 ;
+(char)isMediaPaused;
+(char)isAudioDucked;
+(char)isFanDuckingEnabled;
-(void)dealloc;
-(id)init;
-(char)isAudioPaused;
-(void)siriIdleAndQuietNotificationFired;
-(void)siriThinkingNotificationFired;
-(void)siriListeningNotificationFired;
-(void)siriSuccessNotificationFired;
-(void)siriStoppedListeningFired;
-(void)siriUIAppeared;
-(void)siriUIDisappeared;
-(void)siriStartedSpeakingNotificationFired;
-(void)siriStoppedSpeakingNotificationFired;
-(void)bluetoothAudioDidChangeNotification:(id)arg1 ;
-(void)endAudioManagementSession;
-(unsigned)bluetoothOutputDevice;
-(char)setBluetoothAudioFormat:(unsigned)arg1 forDevice:(unsigned)arg2 ;
-(void)setBluetoothOutputDevice:(unsigned)arg1 ;
-(void)setSwitchedBluetoothDeviceToSCO:(char)arg1 ;
-(void)setIsAudioPaused:(char)arg1 ;
-(NSTimer *)bluetoothAudioResumeTimer;
-(NSTimer *)audioUnduckTimer;
-(char)switchedBluetoothDeviceToSCO;
-(void)resumeAudioWithBluetoothTimer;
-(void)resumeAudio;
-(void)setBluetoothAudioResumeTimer:(NSTimer *)arg1 ;
-(void)setLastSiriEvent:(long long)arg1 ;
-(void)setIsSiriUIVisible:(char)arg1 ;
-(long long)lastSiriEvent;
-(void)siriEventWillChangeToEvent:(long long)arg1 ;
-(void)handleSiriStartedListeningEvent;
-(void)handleSiriStoppedListeningEvent;
-(void)handleSiriStartedSpeakingEvent;
-(char)isAcousticIDRecording;
-(char)isSiriUIVisible;
-(void)beginAudioManagementSession;
-(void)unduckAudioFromTimer;
-(void)setAudioUnduckTimer:(NSTimer *)arg1 ;
-(void)restoreBluetoothVolumeOutputForDevice:(unsigned)arg1 ;
-(void)stashBluetoothVolumeForOutputDevice:(unsigned)arg1 ;
-(void)setSavedBluetoothOutputVolumeDevice:(unsigned)arg1 ;
-(void)setSavedBluetoothOutputVolume:(float)arg1 ;
-(float)savedBluetoothOutputVolume;
-(unsigned)savedBluetoothOutputVolumeDevice;
-(void)prepareBluetoothForSiriSessionAudioRecording;
-(void)setIsAcousticIDRecording:(char)arg1 ;
@end

