/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:08 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/IMFoundation.framework/Versions/A/IMFoundation
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSProtocolChecker, NSString, NSArray;

@interface IMLocalObject : NSObject {

	id _internal;

}

@property (assign,nonatomic) id target; 
@property (nonatomic,readonly) NSProtocolChecker * protocolChecker; 
@property (nonatomic,readonly) NSString * portName; 
@property (nonatomic,retain) NSString * processName; 
@property (nonatomic,readonly) NSObject*<OS_xpc_object> connection; 
@property (nonatomic,readonly) char isValid; 
@property (nonatomic,readonly) char wasInterrupted; 
@property (nonatomic,retain) NSArray * whitelistedClasses; 
+(void)initialize;
+(void)_registerIMLocalObject:(id)arg1 ;
+(void)_unregisterIMLocalObject:(id)arg1 ;
+(id)_imLocalObjectQueue;
+(void)_setExceptionHandlingDisabled:(char)arg1 ;
+(id)_registeredIMLocalObjectForPort:(unsigned)arg1 ;
-(void)dealloc;
-(id)description;
-(void)invalidate;
-(char)isValid;
-(NSObject*<OS_xpc_object>)connection;
-(void)setTarget:(id)arg1 ;
-(id)target;
-(NSString *)portName;
-(NSString *)processName;
-(void)setProcessName:(NSString *)arg1 ;
-(id)initWithTarget:(id)arg1 protocol:(id)arg2 ;
-(void)terminated;
-(NSProtocolChecker *)protocolChecker;
-(void)_portDidBecomeInvalid;
-(void)_portInterrupted;
-(NSArray *)whitelistedClasses;
-(void)_enqueueInvocationWithSync:(id)arg1 xpcMessage:(id)arg2 submitToComponentQueue:(char)arg3 ;
-(void)_enqueueInvocation:(id)arg1 ;
-(id)_currentMessageContext;
-(id)initWithTarget:(id)arg1 portName:(id)arg2 protocol:(id)arg3 ;
-(id)initWithTarget:(id)arg1 connection:(id)arg2 protocol:(id)arg3 forceSecureCoding:(char)arg4 ;
-(id)initWithTarget:(id)arg1 connection:(id)arg2 protocol:(id)arg3 forceSecureCoding:(char)arg4 offMainThread:(char)arg5 ;
-(void)_handleNewInvocations;
-(void)_clearPort:(char)arg1 signalRunLoopIfNeeded:(char)arg2 ;
-(void)_clearPort:(char)arg1 ;
-(char)isValidSelector:(SEL)arg1 ;
-(char)_handleInvocation:(id)arg1 processingComponentQueue:(char)arg2 ;
-(char)_handleInvocation:(id)arg1 ;
-(id)_peekInvocation;
-(void)_popInvocation;
-(char)handleInvocation:(id)arg1 ;
-(void)_noteNewInvocation:(char)arg1 ;
-(void)_enqueueInvocation:(id)arg1 xpcMessage:(id)arg2 ;
-(void)_enqueueInvocation:(id)arg1 xpcMessage:(id)arg2 submitToComponentQueue:(char)arg3 isSync:(char)arg4 ;
-(void)_enqueueInvocationWithPriority:(id)arg1 xpcMessage:(id)arg2 priority:(int)arg3 ;
-(void)_enqueueInvocationWithSync:(id)arg1 xpcMessage:(id)arg2 ;
-(id)initWithTarget:(id)arg1 connection:(id)arg2 protocol:(id)arg3 ;
-(char)wasInterrupted;
-(void)_systemShutdown:(id)arg1 ;
-(void)setPortName:(NSString *)arg1 ;
-(void)_enqueueInvocationWithPriority:(id)arg1 priority:(int)arg2 ;
-(void)_enqueueInvocationWithSync:(id)arg1 ;
-(char)isSameConnection:(id)arg1 ;
-(void)setWhitelistedClasses:(NSArray *)arg1 ;
@end

