/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:52 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/SafariShared.framework/Versions/A/SafariShared
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/WBSTabOrderPreferenceProviding.h>

@protocol WBSTabOrderProvider, WBSTabOrderPreferenceProviding;
@class NSMutableDictionary, NSString;

@interface WBSTabOrderManager : NSObject <WBSTabOrderPreferenceProviding> {

	NSMutableDictionary* _simplifiedIdentifierMap;
	long long _nextSimplifiedIdentifier;
	id<WBSTabOrderProvider> _tabOrderProvider;
	id<WBSTabOrderPreferenceProviding> _preferenceProvider;

}

@property (__weak) id<WBSTabOrderPreferenceProviding> preferenceProvider;                          //@synthesize preferenceProvider=_preferenceProvider - In the implementation block
@property (assign,nonatomic,__weak) id<WBSTabOrderProvider> tabOrderProvider;                      //@synthesize tabOrderProvider=_tabOrderProvider - In the implementation block
@property (nonatomic,readonly) id<WBSOrderedTab> tabToSelectBeforeClosingSelectedTab; 
@property (nonatomic,readonly) unsigned long long newTabPosition; 
@property (nonatomic,readonly) char newTabPositionAppliesToSpawnedTabs; 
@property (nonatomic,readonly) char newBlankTabPositionAppliesToAllBlankTabs; 
@property (nonatomic,readonly) char suppressRelatingNewBlankTabs; 
@property (nonatomic,readonly) double minimumDelayForRelatingNewBlankTab; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id)init;
-(id)tabInsertionHintForPosition:(unsigned long long)arg1 ;
-(id)_tabInsertionHintForPosition:(unsigned long long)arg1 isBlankTab:(char)arg2 ;
-(id<WBSTabOrderProvider>)tabOrderProvider;
-(id)_insertionHintWithTabToInsertAfter:(id)arg1 relation:(unsigned long long)arg2 ;
-(id)_tabInsertionHintForNewTabAfterTab:(id)arg1 relation:(unsigned long long)arg2 ;
-(unsigned long long)_indexOfTabToInsertNewTabAfter;
-(unsigned long long)_relationConsideringUserPreferenceForRelation:(unsigned long long)arg1 isBlankTab:(char)arg2 ;
-(id)_insertionHintWithIndexOfTabToInsertAfter:(unsigned long long)arg1 relation:(unsigned long long)arg2 ;
-(unsigned long long)_indexOfLastRelatedTab;
-(char)_tab:(id)arg1 isRelatedOrEqualToTab:(id)arg2 ;
-(id)tabInsertionHintForNewBlankTab;
-(unsigned long long)_userPreferredNewBlankTabPositionInCurrentContext:(char)arg1 ;
-(id)_tabInsertionHintForNewBlankTabWithRecommendedPosition:(unsigned long long)arg1 ;
-(double)minimumDelayForRelatingNewBlankTab;
-(id)tabInsertionHintForSpawnedTab;
-(unsigned long long)_userPreferredNewSpawnedTabPosition;
-(char)newBlankTabPositionAppliesToAllBlankTabs;
-(unsigned long long)newTabPosition;
-(char)_newTabPositionPreferenceAppliesToSwawnedTabs;
-(char)newTabPositionAppliesToSpawnedTabs;
-(id)_nextNonClosedTabAdjacentToIndex:(unsigned long long)arg1 inAscendingOrder:(char)arg2 ;
-(char)tab:(id)arg1 isInSameSetAsTab:(id)arg2 ;
-(char)suppressRelatingNewBlankTabs;
-(id)tabToInsertNewTabAfterForPosition:(unsigned long long)arg1 ;
-(id)tabInsertionHintForDuplicateOfTab:(id)arg1 ;
-(id)tabToInsertNewBlankTabAfter;
-(id)tabInsertionHintForNewBlankTabInCurrentContext;
-(id)tabToInsertSpawnedTabAfter;
-(id<WBSOrderedTab>)tabToSelectBeforeClosingSelectedTab;
-(id)simplifiedIdentifierForDisplayInTabTitle:(id)arg1 ;
-(void)setTabOrderProvider:(id<WBSTabOrderProvider>)arg1 ;
-(id<WBSTabOrderPreferenceProviding>)preferenceProvider;
-(void)setPreferenceProvider:(id<WBSTabOrderPreferenceProviding>)arg1 ;
@end

