/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:08 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/SoftwareUpdate.framework/Versions/A/SoftwareUpdate
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <SoftwareUpdate/SoftwareUpdate-Structs.h>
#import <libobjc.A.dylib/SUUpdateService.h>
#import <libobjc.A.dylib/NSXPCListenerDelegate.h>

@protocol OS_dispatch_queue, OS_dispatch_source;
@class NSXPCListener, NSMutableArray, SUProduct, NSMutableSet, SUPowerAssertionManager, NSMutableDictionary, NSObject, NSString;

@interface SUUpdateServiceDaemon : NSObject <SUUpdateService, NSXPCListenerDelegate> {

	NSXPCListener* _listener;
	NSMutableArray* _clients;
	NSMutableArray* _availableUpdates;
	SUProduct* _adoptedManualProduct;
	NSMutableSet* _approvedStashingTokens;
	SUPowerAssertionManager* _powerAssertionManager;
	long long _didAutoInstallNotifyCount;
	NSMutableArray* _didAutoInstallNotifyStrings;
	NSMutableArray* _additionalPostLogoutInstallRequests;
	NSMutableDictionary* _productsInstalledAfterPostLogoutInstallDictionary;
	NSMutableDictionary* _additionalPackageDigestsByURL;
	NSObject*<OS_dispatch_queue> _serviceQueue;
	NSObject*<OS_dispatch_queue> _updateInfoQueue;
	NSObject*<OS_dispatch_queue> _clientNotifyQueue;
	NSObject*<OS_dispatch_queue> _backgroundActivityQueue;
	NSObject*<OS_dispatch_queue> _saveStateQueue;
	long long _retriesForBackgroundActivity;
	char _postLogoutInstallWillHaveFLO;
	char _saveStateScheduled;
	NSObject*<OS_dispatch_source> _suspendWatchdogTimer;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)sharedUpdateServiceDaemon;
-(void)clearCatalogAndNotifyWithReply:(/*^block*/id)arg1 ;
-(void)preferenceObjectForKey:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)setPreferenceObject:(id)arg1 forKey:(id)arg2 reply:(/*^block*/id)arg3 ;
-(void)setIASUCatalogWithValue:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)dataForNVRAMKey:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)migratePreferencesWithReply:(/*^block*/id)arg1 ;
-(char)_unarchiveStateFrom:(id)arg1 ;
-(void)_refreshLocalUpdateObjects:(id)arg1 afterScan:(char)arg2 joinUpdateInfoQueue:(char)arg3 ;
-(void)_saveCurrentStateNoDelay:(char)arg1 ;
-(void)_installStateDidChangeForKeys:(id)arg1 ;
-(void)_runBackgroundActionsOnCurrentQueueIfAppropriate:(char*)arg1 shouldSkipScanning:(char)arg2 ;
-(void)_scheduleTransientBackgroundActionWithDelay:(long long)arg1 grace:(long long)arg2 ;
-(void)installStatus:(id)arg1 didChangeExternallyForProductKey:(id)arg2 ;
-(void)_setProductsForPostLogoutInstallResultsNotification:(id)arg1 nowIsLater:(char)arg2 ;
-(void)_doTheCredsStashEnablingFLO:(char)arg1 reply:(/*^block*/id)arg2 ;
-(void)purgeManualProductState;
-(void)performDownloadAndStageWithProductKeys:(id)arg1 downloadOnly:(char)arg2 stageOnly:(char)arg3 reply:(/*^block*/id)arg4 ;
-(id)_addAdditionalPostLogoutInstallRequests:(id)arg1 ;
-(id)_takeAllValidAdditionalPostLogoutInstallRequests;
-(void)authChallengeWasReceived:(id)arg1 handled:(char*)arg2 ;
-(void)_updateProductForPostLogoutInstallResultsNotification:(id)arg1 withStatus:(id)arg2 ;
-(void)popScanBlockingClient;
-(void)endTransactions;
-(void)authorizeForUpdatingWithExternalFormData:(id)arg1 additionalTransactions:(unsigned long long)arg2 reply:(/*^block*/id)arg3 ;
-(void)authorizeForManagingDaemonWithExternalFormData:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)fetchMajorOSInfoForProductKey:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)currentDevKeyModeWithReply:(/*^block*/id)arg1 ;
-(void)updateProductsForProductKeys:(id)arg1 withReply:(/*^block*/id)arg2 ;
-(void)installedUpdateJournalPrunedAndSortedWithReply:(/*^block*/id)arg1 ;
-(void)catalogInformationWithReply:(/*^block*/id)arg1 ;
-(void)progressForRefreshOfAvailableUpdatesWithReply:(/*^block*/id)arg1 ;
-(void)refreshAvailableUpdatesForCurrentConfigurationLimitedToProductTypes:(id)arg1 distributionEnvironment:(id)arg2 distributionEvalutionMetainfo:(id)arg3 installedPrinters:(id)arg4 mdmInitiated:(char)arg5 preferredLocalizations:(id)arg6 replyWhenDone:(/*^block*/id)arg7 ;
-(void)overrideDeferralForProductKeys:(id)arg1 replyWhenDone:(/*^block*/id)arg2 ;
-(void)startInstallingAdminUpdates:(id)arg1 replyWhenDone:(/*^block*/id)arg2 ;
-(void)adoptManualProductArchiveByReadingFromFileHandle:(id)arg1 archiveName:(id)arg2 displayName:(id)arg3 displayVersion:(id)arg4 allowDevSigning:(char)arg5 replyWithResult:(/*^block*/id)arg6 ;
-(void)setAutomaticallyInstallLater:(char)arg1 forProductKeys:(id)arg2 replyWhenDone:(/*^block*/id)arg3 ;
-(void)stashLoginCredentialsEnablingFLO:(char)arg1 reply:(/*^block*/id)arg2 ;
-(void)stashURLCredential:(id)arg1 ;
-(void)configureProgressPhasesWithFinishBlock:(/*^block*/id)arg1 ;
-(void)registerRequestsToInstallAfterPostLogoutUpdates:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)takeRequestsToInstallAfterPostLogoutUpdatesWithReply:(/*^block*/id)arg1 ;
-(void)statusForUpdateWithProductKey:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)conditionsMetForNonUserInitiatedUpdatesWithReply:(/*^block*/id)arg1 ;
-(void)suspendBackgroundTasksTemporarily:(char)arg1 desiredDuration:(long long)arg2 reply:(/*^block*/id)arg3 ;
-(void)getInstallHistoryWithReply:(/*^block*/id)arg1 ;
-(void)bridgeOSUpdateIsPreparedWithReply:(/*^block*/id)arg1 ;
-(void)productsInActiveForegroundTransactions:(/*^block*/id)arg1 ;
-(void)dumpArchiveState;
-(void)startStagingUpdatesForProductKey:(id)arg1 usingForeground:(char)arg2 replyWhenDone:(/*^block*/id)arg3 ;
-(void)startUpdatesForProductKeys:(id)arg1 usingClientAuthorization:(AuthorizationOpaqueRefRef)arg2 holdingBoostDuringInstall:(char)arg3 usingForeground:(char)arg4 clientBlocksRestart:(char)arg5 packageScriptUserID:(unsigned)arg6 sendingStatusUpdates:(char)arg7 replyWhenDone:(/*^block*/id)arg8 ;
-(void)clearInvalidationForIdentifier:(id)arg1 version:(id)arg2 forReason:(int)arg3 ;
-(void)dealloc;
-(id)init;
-(char)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2 ;
-(id)_archivedState;
-(void)preventFurtherScansWhileConnected:(/*^block*/id)arg1 ;
-(void)productKeysToInstallAfterLogoutWithReply:(/*^block*/id)arg1 ;
-(void)availableUpdatesOfType:(long long)arg1 withState:(long long)arg2 filteredByState:(unsigned long long)arg3 filterDeferred:(char)arg4 filterDuplicates:(char)arg5 reply:(/*^block*/id)arg6 ;
-(void)combinedStatusForUpdatesWithProductKeys:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)configureProgressPhasesEnablingFLO:(id)arg1 finishBlock:(/*^block*/id)arg2 ;
-(void)calculateDiskSpaceRequiredForUpdatesWithProductKeys:(id)arg1 downloadingOnly:(char)arg2 invokeCacheDelete:(char)arg3 reply:(/*^block*/id)arg4 ;
-(void)startRootModeUpdatesForProductKeys:(id)arg1 clientBlocksRestart:(char)arg2 replyWhenDone:(/*^block*/id)arg3 ;
-(void)commitLoginCredentialsDisablingFLO:(char)arg1 hasArmedBaseSystemUpdates:(char)arg2 finishBlock:(/*^block*/id)arg3 ;
-(void)rebootForPostLogoutUpdatesAfterSuccess:(char)arg1 nightInstall:(char)arg2 shouldShutDown:(char)arg3 reply:(/*^block*/id)arg4 ;
-(void)startListeningForConnections;
-(id)_currentClients;
-(void)takeInstallNotificationsOfType:(id)arg1 withReply:(/*^block*/id)arg2 ;
-(void)productKeysToAutomaticallyInstallLaterWithReply:(/*^block*/id)arg1 ;
-(void)adminDeferredAvailableUpdatesWithReply:(/*^block*/id)arg1 ;
-(void)fetchMajorOSInfoForProductKey:(id)arg1 getIcon:(char)arg2 reply:(/*^block*/id)arg3 ;
-(void)preparationRequiredForProductKeys:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)refreshAvailableUpdatesForCurrentConfigurationLimitedToProductKeys:(id)arg1 distributionEnvironment:(id)arg2 distributionEvalutionMetainfo:(id)arg3 installedPrinters:(id)arg4 mdmInitiated:(char)arg5 preferredLocalizations:(id)arg6 replyWhenDone:(/*^block*/id)arg7 ;
-(void)registerToInstallAfterLogoutForProductKeys:(id)arg1 nowIsLater:(char)arg2 restartNow:(char)arg3 shouldStashCredentials:(char)arg4 reply:(/*^block*/id)arg5 ;
-(void)installedUpdateJournalWithReply:(/*^block*/id)arg1 ;
-(void)catalogAndScanInformationWithReply:(/*^block*/id)arg1 ;
-(void)schedulePeriodicActionsWithBackgroundActionCompletion:(/*^block*/id)arg1 ;
-(void)buildTagCacheIfNecessaryWithReply:(/*^block*/id)arg1 ;
-(void)performBaseSystemInstallCleanupTasks:(/*^block*/id)arg1 ;
-(void)startUpdatesForProductKeys:(id)arg1 inForeground:(char)arg2 clientBlocksRestart:(char)arg3 replyWhenDone:(/*^block*/id)arg4 ;
-(void)markRampedUpdatesAsSeenWithReply:(/*^block*/id)arg1 ;
-(void)refreshAvailableUpdates:(char)arg1 preferredLocalizations:(id)arg2 limitedToProductTypes:(id)arg3 replyWhenDone:(/*^block*/id)arg4 ;
-(void)evaluateProducts:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)setProductProperties:(id)arg1 forProductKeys:(id)arg2 replyWhenDone:(/*^block*/id)arg3 ;
-(void)cancelUpdatesForProductKeys:(id)arg1 reply:(/*^block*/id)arg2 ;
-(void)startDownloadingForProductKeys:(id)arg1 replyWhenDone:(/*^block*/id)arg2 ;
-(void)stashAndCommitFDEKeyReplyingWithResult:(/*^block*/id)arg1 ;
-(void)dumpServiceDebugInfo;
-(void)resetServiceWithReply:(/*^block*/id)arg1 ;
-(void)consumeUUIDForToken:(id)arg1 replyWithResult:(/*^block*/id)arg2 ;
@end

