/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:08 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/AudioResourceArbitration.framework/Versions/A/AudioResourceArbitration
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <AudioResourceArbitration/AudioResourceArbitration-Structs.h>
#import <AudioResourceArbitration/aura_ConfigurationChangeRequest.h>

@interface aura_AutomaticConfigurationChangeRequest : aura_ConfigurationChangeRequest {

	optional<bool> _prioritizeSpeakerOverReceiver;
	optional<bool> _excludeWirelessPorts;
	optional<bool> _screenDarkPolicyEnabled;
	optional<bool> _voiceProcessingEnabled;
	optional<aura::CameraDirection> _cameraDirection;
	optional<aura::HapticStreamingMode> _hapticStreamingMode;
	optional<applesauce::CF::StringRef>* _category;
	optional<applesauce::CF::StringRef>* _mode;
	optional<aura_IOTopology *> _supplementalIOTopology;
	optional<aura_ConfigurationHints *> _hints;
	optional<std::__1::map<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy, std::__1::owner_less<std::__1::weak_ptr<aura::VirtualPort>>, std::__1::allocator<std::__1::pair<const std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>>>>* _virtualPortRoutingPolicies;
	optional<std::__1::map<aura::PortType, aura::PortTypeRoutingPolicy, std::__1::less<aura::PortType>, std::__1::allocator<std::__1::pair<const aura::PortType, aura::PortTypeRoutingPolicy>>>>* _virtualPortTypeRoutingPolicies;
	optional<std::__1::vector<std::__1::weak_ptr<aura::VirtualPort>, std::__1::allocator<std::__1::weak_ptr<aura::VirtualPort>>>>* _routableVirtualPorts;
	optional<std::__1::vector<std::__1::weak_ptr<aura::VirtualPort>, std::__1::allocator<std::__1::weak_ptr<aura::VirtualPort>>>>* _unroutableVirtualPorts;
	optional<std::__1::tuple<std::__1::weak_ptr<aura::VirtualPort>, bool>>* _turnByTurnPortPreference;
	optional<std::__1::tuple<std::__1::weak_ptr<aura::Box>, bool>>* _boxAcquisitionPreferences;
	optional<aura::InitiationTriggerSpecification>* _initiationTrigger;

}

@property (assign,nonatomic) optional<applesauce::CF::StringRef>* category;                                                        //@synthesize category=_category - In the implementation block
@property (assign,nonatomic) optional<applesauce::CF::StringRef>* mode;                                                            //@synthesize mode=_mode - In the implementation block
@property (assign,nonatomic) optional<std::__1::map<std::__1::weak_ptr<aura::VirtualPort> virtualPortRoutingPolicies;              //@synthesize virtualPortRoutingPolicies=_virtualPortRoutingPolicies - In the implementation block
@property (assign,nonatomic) optional<std::__1::map<aura::PortType virtualPortTypeRoutingPolicies;                                 //@synthesize virtualPortTypeRoutingPolicies=_virtualPortTypeRoutingPolicies - In the implementation block
@property (assign,nonatomic) optional<std::__1::vector<std::__1::weak_ptr<aura::VirtualPort> routableVirtualPorts;                 //@synthesize routableVirtualPorts=_routableVirtualPorts - In the implementation block
@property (assign,nonatomic) optional<std::__1::vector<std::__1::weak_ptr<aura::VirtualPort> unroutableVirtualPorts;               //@synthesize unroutableVirtualPorts=_unroutableVirtualPorts - In the implementation block
@property (assign,nonatomic) optional<bool> prioritizeSpeakerOverReceiver;                                                         //@synthesize prioritizeSpeakerOverReceiver=_prioritizeSpeakerOverReceiver - In the implementation block
@property (assign,nonatomic) optional<bool> excludeWirelessPorts;                                                                  //@synthesize excludeWirelessPorts=_excludeWirelessPorts - In the implementation block
@property (assign,nonatomic) optional<aura_IOTopology *> supplementalIOTopology;                                                   //@synthesize supplementalIOTopology=_supplementalIOTopology - In the implementation block
@property (assign,nonatomic) optional<bool> screenDarkPolicyEnabled;                                                               //@synthesize screenDarkPolicyEnabled=_screenDarkPolicyEnabled - In the implementation block
@property (assign,nonatomic) optional<aura::InitiationTriggerSpecification>* initiationTrigger;                                    //@synthesize initiationTrigger=_initiationTrigger - In the implementation block
@property (assign,nonatomic) optional<aura::CameraDirection> cameraDirection;                                                      //@synthesize cameraDirection=_cameraDirection - In the implementation block
@property (assign,nonatomic) optional<std::__1::tuple<std::__1::weak_ptr<aura::VirtualPort> turnByTurnPortPreference;              //@synthesize turnByTurnPortPreference=_turnByTurnPortPreference - In the implementation block
@property (assign,nonatomic) optional<aura_ConfigurationHints *> hints;                                                            //@synthesize hints=_hints - In the implementation block
@property (assign,nonatomic) optional<std::__1::tuple<std::__1::weak_ptr<aura::Box> boxAcquisitionPreferences;                     //@synthesize boxAcquisitionPreferences=_boxAcquisitionPreferences - In the implementation block
@property (assign,nonatomic) optional<aura::HapticStreamingMode> hapticStreamingMode;                                              //@synthesize hapticStreamingMode=_hapticStreamingMode - In the implementation block
@property (assign,nonatomic) optional<bool> voiceProcessingEnabled;                                                                //@synthesize voiceProcessingEnabled=_voiceProcessingEnabled - In the implementation block
+(id)automaticConfigurationChangeRequestWithSessionToken:(unsigned)arg1 priority:(unsigned)arg2 ;
-(id)copyWithZone:(NSZone*)arg1 ;
-(char)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(id)description;
-(void)setMode:(optional<applesauce::CF::StringRef>*)arg1 ;
-(optional<applesauce::CF::StringRef>*)category;
-(void)setCategory:(optional<applesauce::CF::StringRef>*)arg1 ;
-(optional<applesauce::CF::StringRef>*)mode;
-(optional<aura::InitiationTriggerSpecification>*)initiationTrigger;
-(void)setInitiationTrigger:(optional<aura::InitiationTriggerSpecification>*)arg1 ;
-(optional<aura_ConfigurationHints *>)hints;
-(optional<std::__1::map<std::__1::weak_ptr<aura::VirtualPort>)virtualPortRoutingPolicies;
-(optional<std::__1::map<aura::PortType)virtualPortTypeRoutingPolicies;
-(optional<std::__1::vector<std::__1::weak_ptr<aura::VirtualPort>)routableVirtualPorts;
-(optional<std::__1::vector<std::__1::weak_ptr<aura::VirtualPort>)unroutableVirtualPorts;
-(optional<bool>)prioritizeSpeakerOverReceiver;
-(optional<bool>)excludeWirelessPorts;
-(optional<aura_IOTopology *>)supplementalIOTopology;
-(optional<bool>)screenDarkPolicyEnabled;
-(optional<aura::CameraDirection>)cameraDirection;
-(optional<std::__1::tuple<std::__1::weak_ptr<aura::VirtualPort>)turnByTurnPortPreference;
-(optional<std::__1::tuple<std::__1::weak_ptr<aura::Box>)boxAcquisitionPreferences;
-(optional<aura::HapticStreamingMode>)hapticStreamingMode;
-(id)initWithSessionToken:(unsigned)arg1 priority:(unsigned)arg2 ;
-(void)setVirtualPortRoutingPolicies:(optional<std::__1::map<std::__1::weak_ptr<aura::VirtualPort>)arg1 ;
-(void)setVirtualPortTypeRoutingPolicies:(optional<std::__1::map<aura::PortType)arg1 ;
-(void)setRoutableVirtualPorts:(optional<std::__1::vector<std::__1::weak_ptr<aura::VirtualPort>)arg1 ;
-(void)setUnroutableVirtualPorts:(optional<std::__1::vector<std::__1::weak_ptr<aura::VirtualPort>)arg1 ;
-(void)setPrioritizeSpeakerOverReceiver:(optional<bool>)arg1 ;
-(void)setExcludeWirelessPorts:(optional<bool>)arg1 ;
-(void)setSupplementalIOTopology:(optional<aura_IOTopology *>)arg1 ;
-(void)setScreenDarkPolicyEnabled:(optional<bool>)arg1 ;
-(void)setCameraDirection:(optional<aura::CameraDirection>)arg1 ;
-(void)setTurnByTurnPortPreference:(optional<std::__1::tuple<std::__1::weak_ptr<aura::VirtualPort>)arg1 ;
-(void)setHints:(optional<aura_ConfigurationHints *>)arg1 ;
-(void)setBoxAcquisitionPreferences:(optional<std::__1::tuple<std::__1::weak_ptr<aura::Box>)arg1 ;
-(void)setHapticStreamingMode:(optional<aura::HapticStreamingMode>)arg1 ;
-(optional<bool>)voiceProcessingEnabled;
-(void)setVoiceProcessingEnabled:(optional<bool>)arg1 ;
@end

