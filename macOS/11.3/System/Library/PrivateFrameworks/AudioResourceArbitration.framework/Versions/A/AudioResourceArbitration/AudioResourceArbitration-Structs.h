/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:08 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/AudioResourceArbitration.framework/Versions/A/AudioResourceArbitration
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct _NSZone* NSZoneRef;

typedef struct ObjectRef<const __CFString *> {
	__CFString mCFObject;
} ObjectRef<const __CFString *>;

typedef struct StringRef {
	ObjectRef<const __CFString *> mObject;
} StringRef;

typedef struct optional<applesauce::CF::StringRef> {
	/*function pointer*/void* ;
	char __null_state_;
	StringRef) __val_;
	BOOL __engaged_;
} optional<applesauce::CF::StringRef>;

typedef struct _compressed_pair<aura_AggregateSubdevice *__strong *, std::__1::allocator<aura_AggregateSubdevice *>> {
	id __value_;
} compressed_pair<aura_AggregateSubdevice *__strong *, std::__1::allocator<aura_AggregateSubdevice *>>;

typedef struct vector<aura_AggregateSubdevice *, std::__1::allocator<aura_AggregateSubdevice *>> {
	id __begin_;
	id __end_;
	compressed_pair<aura_AggregateSubdevice *__strong *, std::__1::allocator<aura_AggregateSubdevice *>> __end_cap_;
} vector<aura_AggregateSubdevice *, std::__1::allocator<aura_AggregateSubdevice *>>;

typedef struct _compressed_pair<dspd::DeviceDescription *, std::__1::allocator<dspd::DeviceDescription>> {
	DeviceDescription __value_;
} compressed_pair<dspd::DeviceDescription *, std::__1::allocator<dspd::DeviceDescription>>;

typedef struct vector<dspd::DeviceDescription, std::__1::allocator<dspd::DeviceDescription>> {
	DeviceDescription __begin_;
	DeviceDescription __end_;
	compressed_pair<dspd::DeviceDescription *, std::__1::allocator<dspd::DeviceDescription>> __end_cap_;
} vector<dspd::DeviceDescription, std::__1::allocator<dspd::DeviceDescription>>;

typedef struct _compressed_pair<dspd::IOControllerDescription *, std::__1::allocator<dspd::IOControllerDescription>> {
	IOControllerDescription __value_;
} compressed_pair<dspd::IOControllerDescription *, std::__1::allocator<dspd::IOControllerDescription>>;

typedef struct vector<dspd::IOControllerDescription, std::__1::allocator<dspd::IOControllerDescription>> {
	IOControllerDescription __begin_;
	IOControllerDescription __end_;
	compressed_pair<dspd::IOControllerDescription *, std::__1::allocator<dspd::IOControllerDescription>> __end_cap_;
} vector<dspd::IOControllerDescription, std::__1::allocator<dspd::IOControllerDescription>>;

typedef struct _compressed_pair<dspd::PortDescription *, std::__1::allocator<dspd::PortDescription>> {
	PortDescription __value_;
} compressed_pair<dspd::PortDescription *, std::__1::allocator<dspd::PortDescription>>;

typedef struct vector<dspd::PortDescription, std::__1::allocator<dspd::PortDescription>> {
	PortDescription __begin_;
	PortDescription __end_;
	compressed_pair<dspd::PortDescription *, std::__1::allocator<dspd::PortDescription>> __end_cap_;
} vector<dspd::PortDescription, std::__1::allocator<dspd::PortDescription>>;

typedef struct _compressed_pair<dspd::StreamDescription *, std::__1::allocator<dspd::StreamDescription>> {
	StreamDescription __value_;
} compressed_pair<dspd::StreamDescription *, std::__1::allocator<dspd::StreamDescription>>;

typedef struct vector<dspd::StreamDescription, std::__1::allocator<dspd::StreamDescription>> {
	StreamDescription __begin_;
	StreamDescription __end_;
	compressed_pair<dspd::StreamDescription *, std::__1::allocator<dspd::StreamDescription>> __end_cap_;
} vector<dspd::StreamDescription, std::__1::allocator<dspd::StreamDescription>>;

typedef struct optional<AVAudioSessionActivationAccessibilityPreference> {
	/*function pointer*/void* ;
	char __null_state_;
	Q) __val_;
	BOOL __engaged_;
} optional<AVAudioSessionActivationAccessibilityPreference>;

typedef struct optional<AVAudioSessionActivationCallDirection> {
	/*function pointer*/void* ;
	char __null_state_;
	Q) __val_;
	BOOL __engaged_;
} optional<AVAudioSessionActivationCallDirection>;

typedef struct InitiationTriggerSpecification {
	unsigned mTrigger;
	optional<applesauce::CF::StringRef> mInitiatingUID;
	optional<AVAudioSessionActivationAccessibilityPreference> mAccessibilityPreference;
	optional<AVAudioSessionActivationCallDirection> mCallDirection;
} InitiationTriggerSpecification;

typedef struct optional<aura::InitiationTriggerSpecification> {
	/*function pointer*/void* ;
	char __null_state_;
	InitiationTriggerSpecification) __val_;
	BOOL __engaged_;
} optional<aura::InitiationTriggerSpecification>;

typedef const struct vector<id<dspd_ConfigurationChangeRequest>, std::__1::allocator<id<dspd_ConfigurationChangeRequest>>>* vector<id<dspd_ConfigurationChangeRequest>, std::__1::allocator<id<dspd_ConfigurationChangeRequest>>>Ref;

typedef struct expected<void, std::__1::error_code>* expected<void, std::__1::error_code>Ref;

typedef struct expected<std::__1::vector<dspd::PublicFormatMap, std::__1::allocator<dspd::PublicFormatMap>>, std::__1::error_code>* expected<std::__1::vector<dspd::PublicFormatMap, std::__1::allocator<dspd::PublicFormatMap>>, std::__1::error_code>Ref;

typedef struct expected<dspd::VolumeCapabilites, std::__1::error_code>* expected<dspd::VolumeCapabilites, std::__1::error_code>Ref;

typedef struct expected<float, std::__1::error_code>* expected<float, std::__1::error_code>Ref;

typedef struct vector<dspd::VolumeUpdateResult, std::__1::allocator<dspd::VolumeUpdateResult>>* vector<dspd::VolumeUpdateResult, std::__1::allocator<dspd::VolumeUpdateResult>>Ref;

typedef struct type {
	unsigned char __lx[32];
} type;

typedef struct _value_func<caulk::expected<dspd::SimulateResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)> {
	type __buf_;
	__base<caulk::expected<dspd::SimulateResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)> __f_;
} value_func<caulk::expected<dspd::SimulateResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)>;

typedef struct function<caulk::expected<dspd::SimulateResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)> {
	value_func<caulk::expected<dspd::SimulateResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)> __f_;
} function<caulk::expected<dspd::SimulateResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)>;

typedef struct _value_func<caulk::expected<dspd::AdaptResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)> {
	type __buf_;
	__base<caulk::expected<dspd::AdaptResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)> __f_;
} value_func<caulk::expected<dspd::AdaptResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)>;

typedef struct function<caulk::expected<dspd::AdaptResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)> {
	value_func<caulk::expected<dspd::AdaptResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)> __f_;
} function<caulk::expected<dspd::AdaptResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)>;

typedef struct _value_func<caulk::expected<dspd::NegotiateResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)> {
	type __buf_;
	__base<caulk::expected<dspd::NegotiateResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)> __f_;
} value_func<caulk::expected<dspd::NegotiateResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)>;

typedef struct function<caulk::expected<dspd::NegotiateResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)> {
	value_func<caulk::expected<dspd::NegotiateResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)> __f_;
} function<caulk::expected<dspd::NegotiateResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)>;

typedef struct DSPDelegateDouble_Data {
	function<caulk::expected<dspd::NegotiateResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)> negotiateHandler_;
	function<caulk::expected<dspd::AdaptResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)> adaptHandler_;
	function<caulk::expected<dspd::SimulateResponse, std::__1::error_code> (id<dspd_ConfigurationChangeRequest>)> simulateHandler_;
} DSPDelegateDouble_Data;

typedef struct shared_ptr<caulk::reactor<aura::adm::GraphVolume *>> {
	const eactor<aura::adm::GraphVolume *> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<caulk::reactor<aura::adm::GraphVolume *>>;

typedef struct _compressed_pair<applesauce::CF::StringRef *, std::__1::allocator<applesauce::CF::StringRef>> {
	StringRef __value_;
} compressed_pair<applesauce::CF::StringRef *, std::__1::allocator<applesauce::CF::StringRef>>;

typedef struct vector<applesauce::CF::StringRef, std::__1::allocator<applesauce::CF::StringRef>> {
	StringRef __begin_;
	StringRef __end_;
	compressed_pair<applesauce::CF::StringRef *, std::__1::allocator<applesauce::CF::StringRef>> __end_cap_;
} vector<applesauce::CF::StringRef, std::__1::allocator<applesauce::CF::StringRef>>;

typedef struct _compressed_pair<AMCP::Address *, std::__1::allocator<AMCP::Address>> {
	Address __value_;
} compressed_pair<AMCP::Address *, std::__1::allocator<AMCP::Address>>;

typedef struct vector<AMCP::Address, std::__1::allocator<AMCP::Address>> {
	Address __begin_;
	Address __end_;
	compressed_pair<AMCP::Address *, std::__1::allocator<AMCP::Address>> __end_cap_;
} vector<AMCP::Address, std::__1::allocator<AMCP::Address>>;

typedef struct _compressed_pair<aura::ObjectReference *, std::__1::allocator<aura::ObjectReference>> {
	ObjectReference __value_;
} compressed_pair<aura::ObjectReference *, std::__1::allocator<aura::ObjectReference>>;

typedef struct vector<aura::ObjectReference, std::__1::allocator<aura::ObjectReference>> {
	ObjectReference __begin_;
	ObjectReference __end_;
	compressed_pair<aura::ObjectReference *, std::__1::allocator<aura::ObjectReference>> __end_cap_;
} vector<aura::ObjectReference, std::__1::allocator<aura::ObjectReference>>;

typedef struct _compressed_pair<aura_ChangedObject *__strong *, std::__1::allocator<aura_ChangedObject *>> {
	id __value_;
} compressed_pair<aura_ChangedObject *__strong *, std::__1::allocator<aura_ChangedObject *>>;

typedef struct vector<aura_ChangedObject *, std::__1::allocator<aura_ChangedObject *>> {
	id __begin_;
	id __end_;
	compressed_pair<aura_ChangedObject *__strong *, std::__1::allocator<aura_ChangedObject *>> __end_cap_;
} vector<aura_ChangedObject *, std::__1::allocator<aura_ChangedObject *>>;

typedef struct weak_ptr<aura::Object> {
	Object __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<aura::Object>;

typedef struct ObjectReference {
	weak_ptr<aura::Object> mReference;
	unsigned long long mObjectID;
	unsigned mClassID;
} ObjectReference;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, aura_ConfigurationChangeRecord *>, std::__1::less<unsigned int>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, aura_ConfigurationChangeRecord *>, std::__1::less<unsigned int>, true>>;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, aura_ConfigurationChangeRecord *>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, aura_ConfigurationChangeRecord *>, void *>>>;

typedef struct _tree<std::__1::__value_type<unsigned int, aura_ConfigurationChangeRecord *>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, aura_ConfigurationChangeRecord *>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, aura_ConfigurationChangeRecord *>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, aura_ConfigurationChangeRecord *>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, aura_ConfigurationChangeRecord *>, std::__1::less<unsigned int>, true>> __pair3_;
} tree<std::__1::__value_type<unsigned int, aura_ConfigurationChangeRecord *>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, aura_ConfigurationChangeRecord *>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, aura_ConfigurationChangeRecord *>>>;

typedef struct map<unsigned int, aura_ConfigurationChangeRecord *, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, aura_ConfigurationChangeRecord *>>> {
	tree<std::__1::__value_type<unsigned int, aura_ConfigurationChangeRecord *>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, aura_ConfigurationChangeRecord *>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, aura_ConfigurationChangeRecord *>>> __tree_;
} map<unsigned int, aura_ConfigurationChangeRecord *, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, aura_ConfigurationChangeRecord *>>>;

typedef struct AudioStreamBasicDescription {
	double mSampleRate;
	unsigned mFormatID;
	unsigned mFormatFlags;
	unsigned mBytesPerPacket;
	unsigned mFramesPerPacket;
	unsigned mBytesPerFrame;
	unsigned mChannelsPerFrame;
	unsigned mBitsPerChannel;
	unsigned mReserved;
} AudioStreamBasicDescription;

typedef struct bitset<32> {
	unsigned long long __first_;
} bitset<32>;

typedef struct _compressed_pair<AudioChannelDescription *, std::__1::allocator<AudioChannelDescription>> {
	AudioChannelDescription __value_;
} compressed_pair<AudioChannelDescription *, std::__1::allocator<AudioChannelDescription>>;

typedef struct vector<AudioChannelDescription, std::__1::allocator<AudioChannelDescription>> {
	AudioChannelDescription __begin_;
	AudioChannelDescription __end_;
	compressed_pair<AudioChannelDescription *, std::__1::allocator<AudioChannelDescription>> __end_cap_;
} vector<AudioChannelDescription, std::__1::allocator<AudioChannelDescription>>;

typedef struct optional<std::__1::vector<AudioChannelDescription, std::__1::allocator<AudioChannelDescription>>> {
	/*function pointer*/void* ;
	char __null_state_;
	vector<AudioChannelDescription, std::__1::allocator<AudioChannelDescription>>) __val_;
	BOOL __engaged_;
} optional<std::__1::vector<AudioChannelDescription, std::__1::allocator<AudioChannelDescription>>>;

typedef struct optional<std::__1::bitset<32>> {
	/*function pointer*/void* ;
	char __null_state_;
	bitset<32>) __val_;
	BOOL __engaged_;
} optional<std::__1::bitset<32>>;

typedef struct ChannelLayout {
	unsigned mLayoutTag;
	optional<std::__1::bitset<32>> mBitmap;
	optional<std::__1::vector<AudioChannelDescription, std::__1::allocator<AudioChannelDescription>>> mChannelDescriptions;
} ChannelLayout;

typedef struct AudioFormat {
	AudioStreamBasicDescription mASBD;
	ChannelLayout mLayout;
} AudioFormat;

typedef struct optional<aura::AudioFormat> {
	/*function pointer*/void* ;
	char __null_state_;
	AudioFormat) __val_;
	BOOL __engaged_;
} optional<aura::AudioFormat>;

typedef struct _compressed_pair<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>> *, std::__1::allocator<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>>> {
	tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>> __value_;
} compressed_pair<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>> *, std::__1::allocator<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>>>;

typedef struct vector<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>, std::__1::allocator<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>>> {
	tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>> __begin_;
	tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>> __end_;
	compressed_pair<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>> *, std::__1::allocator<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>>> __end_cap_;
} vector<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>, std::__1::allocator<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>>>;

typedef struct _compressed_pair<std::__1::weak_ptr<aura::VirtualPort> *, std::__1::allocator<std::__1::weak_ptr<aura::VirtualPort>>> {
	weak_ptr<aura::VirtualPort> __value_;
} compressed_pair<std::__1::weak_ptr<aura::VirtualPort> *, std::__1::allocator<std::__1::weak_ptr<aura::VirtualPort>>>;

typedef struct vector<std::__1::weak_ptr<aura::VirtualPort>, std::__1::allocator<std::__1::weak_ptr<aura::VirtualPort>>> {
	weak_ptr<aura::VirtualPort> __begin_;
	weak_ptr<aura::VirtualPort> __end_;
	compressed_pair<std::__1::weak_ptr<aura::VirtualPort> *, std::__1::allocator<std::__1::weak_ptr<aura::VirtualPort>>> __end_cap_;
} vector<std::__1::weak_ptr<aura::VirtualPort>, std::__1::allocator<std::__1::weak_ptr<aura::VirtualPort>>>;

typedef struct _compressed_pair<std::__1::tuple<double, double> *, std::__1::allocator<std::__1::tuple<double, double>>> {
	tuple<double, double> __value_;
} compressed_pair<std::__1::tuple<double, double> *, std::__1::allocator<std::__1::tuple<double, double>>>;

typedef struct vector<std::__1::tuple<double, double>, std::__1::allocator<std::__1::tuple<double, double>>> {
	tuple<double, double> __begin_;
	tuple<double, double> __end_;
	compressed_pair<std::__1::tuple<double, double> *, std::__1::allocator<std::__1::tuple<double, double>>> __end_cap_;
} vector<std::__1::tuple<double, double>, std::__1::allocator<std::__1::tuple<double, double>>>;

typedef struct _compressed_pair<aura_SimulatedIOStream *__strong *, std::__1::allocator<aura_SimulatedIOStream *>> {
	id __value_;
} compressed_pair<aura_SimulatedIOStream *__strong *, std::__1::allocator<aura_SimulatedIOStream *>>;

typedef struct vector<aura_SimulatedIOStream *, std::__1::allocator<aura_SimulatedIOStream *>> {
	id __begin_;
	id __end_;
	compressed_pair<aura_SimulatedIOStream *__strong *, std::__1::allocator<aura_SimulatedIOStream *>> __end_cap_;
} vector<aura_SimulatedIOStream *, std::__1::allocator<aura_SimulatedIOStream *>>;

typedef struct _compressed_pair<aura_SimulatedIOController *__strong *, std::__1::allocator<aura_SimulatedIOController *>> {
	id __value_;
} compressed_pair<aura_SimulatedIOController *__strong *, std::__1::allocator<aura_SimulatedIOController *>>;

typedef struct vector<aura_SimulatedIOController *, std::__1::allocator<aura_SimulatedIOController *>> {
	id __begin_;
	id __end_;
	compressed_pair<aura_SimulatedIOController *__strong *, std::__1::allocator<aura_SimulatedIOController *>> __end_cap_;
} vector<aura_SimulatedIOController *, std::__1::allocator<aura_SimulatedIOController *>>;

typedef struct _compressed_pair<std::__1::tuple<std::__1::weak_ptr<aura::IOController>, aura_SimulatedIOController *> *, std::__1::allocator<std::__1::tuple<std::__1::weak_ptr<aura::IOController>, aura_SimulatedIOController *>>> {
	tuple<std::__1::weak_ptr<aura::IOController>, aura_SimulatedIOController *> __value_;
} compressed_pair<std::__1::tuple<std::__1::weak_ptr<aura::IOController>, aura_SimulatedIOController *> *, std::__1::allocator<std::__1::tuple<std::__1::weak_ptr<aura::IOController>, aura_SimulatedIOController *>>>;

typedef struct vector<std::__1::tuple<std::__1::weak_ptr<aura::IOController>, aura_SimulatedIOController *>, std::__1::allocator<std::__1::tuple<std::__1::weak_ptr<aura::IOController>, aura_SimulatedIOController *>>> {
	tuple<std::__1::weak_ptr<aura::IOController>, aura_SimulatedIOController *> __begin_;
	tuple<std::__1::weak_ptr<aura::IOController>, aura_SimulatedIOController *> __end_;
	compressed_pair<std::__1::tuple<std::__1::weak_ptr<aura::IOController>, aura_SimulatedIOController *> *, std::__1::allocator<std::__1::tuple<std::__1::weak_ptr<aura::IOController>, aura_SimulatedIOController *>>> __end_cap_;
} vector<std::__1::tuple<std::__1::weak_ptr<aura::IOController>, aura_SimulatedIOController *>, std::__1::allocator<std::__1::tuple<std::__1::weak_ptr<aura::IOController>, aura_SimulatedIOController *>>>;

typedef struct _compressed_pair<std::__1::weak_ptr<aura::IOController> *, std::__1::allocator<std::__1::weak_ptr<aura::IOController>>> {
	weak_ptr<aura::IOController> __value_;
} compressed_pair<std::__1::weak_ptr<aura::IOController> *, std::__1::allocator<std::__1::weak_ptr<aura::IOController>>>;

typedef struct vector<std::__1::weak_ptr<aura::IOController>, std::__1::allocator<std::__1::weak_ptr<aura::IOController>>> {
	weak_ptr<aura::IOController> __begin_;
	weak_ptr<aura::IOController> __end_;
	compressed_pair<std::__1::weak_ptr<aura::IOController> *, std::__1::allocator<std::__1::weak_ptr<aura::IOController>>> __end_cap_;
} vector<std::__1::weak_ptr<aura::IOController>, std::__1::allocator<std::__1::weak_ptr<aura::IOController>>>;

typedef struct _compressed_pair<unsigned long, std::__1::less<std::__1::tuple<unsigned int, unsigned int>>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::less<std::__1::tuple<unsigned int, unsigned int>>>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::tuple<unsigned int, unsigned int>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::tuple<unsigned int, unsigned int>, void *>>>;

typedef struct _tree<std::__1::tuple<unsigned int, unsigned int>, std::__1::less<std::__1::tuple<unsigned int, unsigned int>>, std::__1::allocator<std::__1::tuple<unsigned int, unsigned int>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::tuple<unsigned int, unsigned int>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::less<std::__1::tuple<unsigned int, unsigned int>>> __pair3_;
} tree<std::__1::tuple<unsigned int, unsigned int>, std::__1::less<std::__1::tuple<unsigned int, unsigned int>>, std::__1::allocator<std::__1::tuple<unsigned int, unsigned int>>>;

typedef struct set<std::__1::tuple<unsigned int, unsigned int>, std::__1::less<std::__1::tuple<unsigned int, unsigned int>>, std::__1::allocator<std::__1::tuple<unsigned int, unsigned int>>> {
	tree<std::__1::tuple<unsigned int, unsigned int>, std::__1::less<std::__1::tuple<unsigned int, unsigned int>>, std::__1::allocator<std::__1::tuple<unsigned int, unsigned int>>> __tree_;
} set<std::__1::tuple<unsigned int, unsigned int>, std::__1::less<std::__1::tuple<unsigned int, unsigned int>>, std::__1::allocator<std::__1::tuple<unsigned int, unsigned int>>>;

typedef struct optional<std::__1::set<std::__1::tuple<unsigned int, unsigned int>, std::__1::less<std::__1::tuple<unsigned int, unsigned int>>, std::__1::allocator<std::__1::tuple<unsigned int, unsigned int>>>> {
	/*function pointer*/void* ;
	char __null_state_;
	set<std::__1::tuple<unsigned int, unsigned int>, std::__1::less<std::__1::tuple<unsigned int, unsigned int>>, std::__1::allocator<std::__1::tuple<unsigned int, unsigned int>>>) __val_;
	BOOL __engaged_;
} optional<std::__1::set<std::__1::tuple<unsigned int, unsigned int>, std::__1::less<std::__1::tuple<unsigned int, unsigned int>>, std::__1::allocator<std::__1::tuple<unsigned int, unsigned int>>>>;

typedef struct _compressed_pair<aura_IOTopologyIOStreamMapping *__strong *, std::__1::allocator<aura_IOTopologyIOStreamMapping *>> {
	id __value_;
} compressed_pair<aura_IOTopologyIOStreamMapping *__strong *, std::__1::allocator<aura_IOTopologyIOStreamMapping *>>;

typedef struct vector<aura_IOTopologyIOStreamMapping *, std::__1::allocator<aura_IOTopologyIOStreamMapping *>> {
	id __begin_;
	id __end_;
	compressed_pair<aura_IOTopologyIOStreamMapping *__strong *, std::__1::allocator<aura_IOTopologyIOStreamMapping *>> __end_cap_;
} vector<aura_IOTopologyIOStreamMapping *, std::__1::allocator<aura_IOTopologyIOStreamMapping *>>;

typedef struct optional<aura::ChannelLayout> {
	/*function pointer*/void* ;
	char __null_state_;
	ChannelLayout) __val_;
	BOOL __engaged_;
} optional<aura::ChannelLayout>;

typedef struct _compressed_pair<aura_IOTopologyIOStream *__strong *, std::__1::allocator<aura_IOTopologyIOStream *>> {
	id __value_;
} compressed_pair<aura_IOTopologyIOStream *__strong *, std::__1::allocator<aura_IOTopologyIOStream *>>;

typedef struct vector<aura_IOTopologyIOStream *, std::__1::allocator<aura_IOTopologyIOStream *>> {
	id __begin_;
	id __end_;
	compressed_pair<aura_IOTopologyIOStream *__strong *, std::__1::allocator<aura_IOTopologyIOStream *>> __end_cap_;
} vector<aura_IOTopologyIOStream *, std::__1::allocator<aura_IOTopologyIOStream *>>;

typedef struct weak_ptr<aura::VirtualPort> {
	VirtualPort __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<aura::VirtualPort>;

typedef struct weak_ptr<aura::Stream> {
	Stream __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<aura::Stream>;

typedef struct optional<unsigned int> {
	/*function pointer*/void* ;
	char __null_state_;
	I) __val_;
	BOOL __engaged_;
} optional<unsigned int>;

typedef struct weak_ptr<aura::Device> {
	Device __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<aura::Device>;

typedef struct optional<double> {
	/*function pointer*/void* ;
	char __null_state_;
	d) __val_;
	BOOL __engaged_;
} optional<double>;

typedef struct _compressed_pair<aura_StreamHints *__strong *, std::__1::allocator<aura_StreamHints *>> {
	id __value_;
} compressed_pair<aura_StreamHints *__strong *, std::__1::allocator<aura_StreamHints *>>;

typedef struct vector<aura_StreamHints *, std::__1::allocator<aura_StreamHints *>> {
	id __begin_;
	id __end_;
	compressed_pair<aura_StreamHints *__strong *, std::__1::allocator<aura_StreamHints *>> __end_cap_;
} vector<aura_StreamHints *, std::__1::allocator<aura_StreamHints *>>;

typedef struct optional<std::__1::vector<aura_StreamHints *, std::__1::allocator<aura_StreamHints *>>> {
	/*function pointer*/void* ;
	char __null_state_;
	vector<aura_StreamHints *, std::__1::allocator<aura_StreamHints *>>) __val_;
	BOOL __engaged_;
} optional<std::__1::vector<aura_StreamHints *, std::__1::allocator<aura_StreamHints *>>>;

typedef struct optional<AVAudioDSPFlavor> {
	/*function pointer*/void* ;
	char __null_state_;
	I) __val_;
	BOOL __engaged_;
} optional<AVAudioDSPFlavor>;

typedef struct weak_ptr<aura::Clock> {
	Clock __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<aura::Clock>;

typedef struct optional<std::__1::weak_ptr<aura::Clock>> {
	/*function pointer*/void* ;
	char __null_state_;
	weak_ptr<aura::Clock>) __val_;
	BOOL __engaged_;
} optional<std::__1::weak_ptr<aura::Clock>>;

typedef struct _compressed_pair<aura_IOStreamHints *__strong *, std::__1::allocator<aura_IOStreamHints *>> {
	id __value_;
} compressed_pair<aura_IOStreamHints *__strong *, std::__1::allocator<aura_IOStreamHints *>>;

typedef struct vector<aura_IOStreamHints *, std::__1::allocator<aura_IOStreamHints *>> {
	id __begin_;
	id __end_;
	compressed_pair<aura_IOStreamHints *__strong *, std::__1::allocator<aura_IOStreamHints *>> __end_cap_;
} vector<aura_IOStreamHints *, std::__1::allocator<aura_IOStreamHints *>>;

typedef struct optional<std::__1::vector<aura_IOStreamHints *, std::__1::allocator<aura_IOStreamHints *>>> {
	/*function pointer*/void* ;
	char __null_state_;
	vector<aura_IOStreamHints *, std::__1::allocator<aura_IOStreamHints *>>) __val_;
	BOOL __engaged_;
} optional<std::__1::vector<aura_IOStreamHints *, std::__1::allocator<aura_IOStreamHints *>>>;

typedef struct _compressed_pair<aura_VirtualPortHints *__strong *, std::__1::allocator<aura_VirtualPortHints *>> {
	id __value_;
} compressed_pair<aura_VirtualPortHints *__strong *, std::__1::allocator<aura_VirtualPortHints *>>;

typedef struct vector<aura_VirtualPortHints *, std::__1::allocator<aura_VirtualPortHints *>> {
	id __begin_;
	id __end_;
	compressed_pair<aura_VirtualPortHints *__strong *, std::__1::allocator<aura_VirtualPortHints *>> __end_cap_;
} vector<aura_VirtualPortHints *, std::__1::allocator<aura_VirtualPortHints *>>;

typedef struct _compressed_pair<aura_DeviceHints *__strong *, std::__1::allocator<aura_DeviceHints *>> {
	id __value_;
} compressed_pair<aura_DeviceHints *__strong *, std::__1::allocator<aura_DeviceHints *>>;

typedef struct vector<aura_DeviceHints *, std::__1::allocator<aura_DeviceHints *>> {
	id __begin_;
	id __end_;
	compressed_pair<aura_DeviceHints *__strong *, std::__1::allocator<aura_DeviceHints *>> __end_cap_;
} vector<aura_DeviceHints *, std::__1::allocator<aura_DeviceHints *>>;

typedef struct _compressed_pair<aura_IOControllerHints *__strong *, std::__1::allocator<aura_IOControllerHints *>> {
	id __value_;
} compressed_pair<aura_IOControllerHints *__strong *, std::__1::allocator<aura_IOControllerHints *>>;

typedef struct vector<aura_IOControllerHints *, std::__1::allocator<aura_IOControllerHints *>> {
	id __begin_;
	id __end_;
	compressed_pair<aura_IOControllerHints *__strong *, std::__1::allocator<aura_IOControllerHints *>> __end_cap_;
} vector<aura_IOControllerHints *, std::__1::allocator<aura_IOControllerHints *>>;

typedef struct optional<bool> {
	/*function pointer*/void* ;
	char __null_state_;
	B) __val_;
	BOOL __engaged_;
} optional<bool>;

typedef struct optional<aura::CameraDirection> {
	/*function pointer*/void* ;
	char __null_state_;
	I) __val_;
	BOOL __engaged_;
} optional<aura::CameraDirection>;

typedef struct optional<aura::HapticStreamingMode> {
	/*function pointer*/void* ;
	char __null_state_;
	I) __val_;
	BOOL __engaged_;
} optional<aura::HapticStreamingMode>;

typedef struct optional<aura_IOTopology *> {
	/*function pointer*/void* ;
	char __null_state_;
	id __val_;
	) aura_IOTopology;
	BOOL __engaged_;
} optional<aura_IOTopology *>;

typedef struct optional<aura_ConfigurationHints *> {
	/*function pointer*/void* ;
	char __null_state_;
	id __val_;
	) aura_ConfigurationHints;
	BOOL __engaged_;
} optional<aura_ConfigurationHints *>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::weak_ptr<aura::VirtualPort>, std::__1::__value_type<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>, std::__1::owner_less<std::__1::weak_ptr<aura::VirtualPort>>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::weak_ptr<aura::VirtualPort>, std::__1::__value_type<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>, std::__1::owner_less<std::__1::weak_ptr<aura::VirtualPort>>, true>>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>, void *>>>;

typedef struct _tree<std::__1::__value_type<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>, std::__1::__map_value_compare<std::__1::weak_ptr<aura::VirtualPort>, std::__1::__value_type<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>, std::__1::owner_less<std::__1::weak_ptr<aura::VirtualPort>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::weak_ptr<aura::VirtualPort>, std::__1::__value_type<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>, std::__1::owner_less<std::__1::weak_ptr<aura::VirtualPort>>, true>> __pair3_;
} tree<std::__1::__value_type<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>, std::__1::__map_value_compare<std::__1::weak_ptr<aura::VirtualPort>, std::__1::__value_type<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>, std::__1::owner_less<std::__1::weak_ptr<aura::VirtualPort>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>>>;

typedef struct map<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy, std::__1::owner_less<std::__1::weak_ptr<aura::VirtualPort>>, std::__1::allocator<std::__1::pair<const std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>>> {
	tree<std::__1::__value_type<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>, std::__1::__map_value_compare<std::__1::weak_ptr<aura::VirtualPort>, std::__1::__value_type<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>, std::__1::owner_less<std::__1::weak_ptr<aura::VirtualPort>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>>> __tree_;
} map<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy, std::__1::owner_less<std::__1::weak_ptr<aura::VirtualPort>>, std::__1::allocator<std::__1::pair<const std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>>>;

typedef struct optional<std::__1::map<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy, std::__1::owner_less<std::__1::weak_ptr<aura::VirtualPort>>, std::__1::allocator<std::__1::pair<const std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>>>> {
	/*function pointer*/void* ;
	char __null_state_;
	map<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy, std::__1::owner_less<std::__1::weak_ptr<aura::VirtualPort>>, std::__1::allocator<std::__1::pair<const std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>>>) __val_;
	BOOL __engaged_;
} optional<std::__1::map<std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy, std::__1::owner_less<std::__1::weak_ptr<aura::VirtualPort>>, std::__1::allocator<std::__1::pair<const std::__1::weak_ptr<aura::VirtualPort>, aura::PortRoutingPolicy>>>>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<aura::PortType, std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>, std::__1::less<aura::PortType>, true>> {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<aura::PortType, std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>, std::__1::less<aura::PortType>, true>>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>, void *>>> {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>, void *>>>;

typedef struct _tree<std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>, std::__1::__map_value_compare<aura::PortType, std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>, std::__1::less<aura::PortType>, true>, std::__1::allocator<std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>>> {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>, void *>>> __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<aura::PortType, std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>, std::__1::less<aura::PortType>, true>> __pair3_;
} tree<std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>, std::__1::__map_value_compare<aura::PortType, std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>, std::__1::less<aura::PortType>, true>, std::__1::allocator<std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>>>;

typedef struct map<aura::PortType, aura::PortTypeRoutingPolicy, std::__1::less<aura::PortType>, std::__1::allocator<std::__1::pair<const aura::PortType, aura::PortTypeRoutingPolicy>>> {
	tree<std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>, std::__1::__map_value_compare<aura::PortType, std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>, std::__1::less<aura::PortType>, true>, std::__1::allocator<std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>>> __tree_;
} map<aura::PortType, aura::PortTypeRoutingPolicy, std::__1::less<aura::PortType>, std::__1::allocator<std::__1::pair<const aura::PortType, aura::PortTypeRoutingPolicy>>>;

typedef struct optional<std::__1::map<aura::PortType, aura::PortTypeRoutingPolicy, std::__1::less<aura::PortType>, std::__1::allocator<std::__1::pair<const aura::PortType, aura::PortTypeRoutingPolicy>>>> {
	/*function pointer*/void* ;
	char __null_state_;
	map<aura::PortType, aura::PortTypeRoutingPolicy, std::__1::less<aura::PortType>, std::__1::allocator<std::__1::pair<const aura::PortType, aura::PortTypeRoutingPolicy>>>) __val_;
	BOOL __engaged_;
} optional<std::__1::map<aura::PortType, aura::PortTypeRoutingPolicy, std::__1::less<aura::PortType>, std::__1::allocator<std::__1::pair<const aura::PortType, aura::PortTypeRoutingPolicy>>>>;

typedef struct optional<std::__1::vector<std::__1::weak_ptr<aura::VirtualPort>, std::__1::allocator<std::__1::weak_ptr<aura::VirtualPort>>>> {
	/*function pointer*/void* ;
	char __null_state_;
	vector<std::__1::weak_ptr<aura::VirtualPort>, std::__1::allocator<std::__1::weak_ptr<aura::VirtualPort>>>) __val_;
	BOOL __engaged_;
} optional<std::__1::vector<std::__1::weak_ptr<aura::VirtualPort>, std::__1::allocator<std::__1::weak_ptr<aura::VirtualPort>>>>;

typedef struct _tuple_impl<std::__1::__tuple_indices<0, 1>, std::__1::weak_ptr<aura::VirtualPort>, bool> {
	weak_ptr<aura::VirtualPort> __value_;
	BOOL __value_;
} tuple_impl<std::__1::__tuple_indices<0, 1>, std::__1::weak_ptr<aura::VirtualPort>, bool>;

typedef struct tuple<std::__1::weak_ptr<aura::VirtualPort>, bool> {
	tuple_impl<std::__1::__tuple_indices<0, 1>, std::__1::weak_ptr<aura::VirtualPort>, bool> __base_;
} tuple<std::__1::weak_ptr<aura::VirtualPort>, bool>;

typedef struct optional<std::__1::tuple<std::__1::weak_ptr<aura::VirtualPort>, bool>> {
	/*function pointer*/void* ;
	char __null_state_;
	tuple<std::__1::weak_ptr<aura::VirtualPort>, bool>) __val_;
	BOOL __engaged_;
} optional<std::__1::tuple<std::__1::weak_ptr<aura::VirtualPort>, bool>>;

typedef struct weak_ptr<aura::Box> {
	Box __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<aura::Box>;

typedef struct _tuple_impl<std::__1::__tuple_indices<0, 1>, std::__1::weak_ptr<aura::Box>, bool> {
	weak_ptr<aura::Box> __value_;
	BOOL __value_;
} tuple_impl<std::__1::__tuple_indices<0, 1>, std::__1::weak_ptr<aura::Box>, bool>;

typedef struct tuple<std::__1::weak_ptr<aura::Box>, bool> {
	tuple_impl<std::__1::__tuple_indices<0, 1>, std::__1::weak_ptr<aura::Box>, bool> __base_;
} tuple<std::__1::weak_ptr<aura::Box>, bool>;

typedef struct optional<std::__1::tuple<std::__1::weak_ptr<aura::Box>, bool>> {
	/*function pointer*/void* ;
	char __null_state_;
	tuple<std::__1::weak_ptr<aura::Box>, bool>) __val_;
	BOOL __engaged_;
} optional<std::__1::tuple<std::__1::weak_ptr<aura::Box>, bool>>;

typedef struct optional<std::__1::weak_ptr<aura::VirtualPort>> {
	/*function pointer*/void* ;
	char __null_state_;
	weak_ptr<aura::VirtualPort>) __val_;
	BOOL __engaged_;
} optional<std::__1::weak_ptr<aura::VirtualPort>>;

