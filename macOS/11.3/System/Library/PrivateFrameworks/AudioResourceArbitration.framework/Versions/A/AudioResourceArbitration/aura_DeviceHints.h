/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:08 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/AudioResourceArbitration.framework/Versions/A/AudioResourceArbitration
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <AudioResourceArbitration/AudioResourceArbitration-Structs.h>
#import <libobjc.A.dylib/NSCopying.h>

@interface aura_DeviceHints : NSObject <NSCopying> {

	optional<unsigned int> _dataSource;
	weak_ptr<aura::Device>* _device;
	optional<double> _sampleRate;
	optional<std::__1::vector<aura_StreamHints *, std::__1::allocator<aura_StreamHints *>>>* _inputStreamHints;
	optional<std::__1::vector<aura_StreamHints *, std::__1::allocator<aura_StreamHints *>>>* _outputStreamHints;

}

@property (assign,nonatomic) weak_ptr<aura::Device>* device;                                              //@synthesize device=_device - In the implementation block
@property (assign,nonatomic) optional<double> sampleRate;                                                 //@synthesize sampleRate=_sampleRate - In the implementation block
@property (assign,nonatomic) optional<unsigned int> dataSource;                                           //@synthesize dataSource=_dataSource - In the implementation block
@property (assign,nonatomic) optional<std::__1::vector<aura_StreamHints * inputStreamHints;               //@synthesize inputStreamHints=_inputStreamHints - In the implementation block
@property (assign,nonatomic) optional<std::__1::vector<aura_StreamHints * outputStreamHints;              //@synthesize outputStreamHints=_outputStreamHints - In the implementation block
-(id)copyWithZone:(NSZone*)arg1 ;
-(char)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(weak_ptr<aura::Device>*)device;
-(optional<double>)sampleRate;
-(optional<unsigned int>)dataSource;
-(void)setDataSource:(optional<unsigned int>)arg1 ;
-(void)setDevice:(weak_ptr<aura::Device>*)arg1 ;
-(void)setSampleRate:(optional<double>)arg1 ;
-(optional<std::__1::vector<aura_StreamHints *)inputStreamHints;
-(void)setInputStreamHints:(optional<std::__1::vector<aura_StreamHints *)arg1 ;
-(optional<std::__1::vector<aura_StreamHints *)outputStreamHints;
-(void)setOutputStreamHints:(optional<std::__1::vector<aura_StreamHints *)arg1 ;
@end

