/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:37 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/RTCReporting.framework/Versions/A/RTCReporting
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <RTCReporting/RTCReportingDeallocNotifierDelegate.h>

@protocol OS_dispatch_queue, OS_dispatch_source;
@class NSObject, NSXPCConnection, NSMutableDictionary, NSArray, RTCReportingDeallocNotifier;

@interface RTCReporting : NSObject <RTCReportingDeallocNotifierDelegate> {

	NSObject*<OS_dispatch_queue> _reportingQueue;
	NSObject*<OS_dispatch_queue> _reportingPeriodicTasksQueue;
	/*^block*/id _loggingBlock;
	NSXPCConnection* _connection;
	NSObject*<OS_dispatch_source> _timer;
	int _counter;
	NSMutableDictionary* _periodicServiceDict;
	NSArray* _enabledBackendNames;
	NSArray* _whitelistedEvents;
	NSArray* _blacklistedEvents;
	RTCReportingDeallocNotifier* _strongDeallocNotifier;
	id _weakDeallocNotifier;
	id _weakMessageSentDelegate;

}

@property (assign,nonatomic) id<RTCReportingMessageSentNotifier> messageSentDelegate; 
@property (nonatomic,copy) id messageLoggingBlock;                                                 //@synthesize loggingBlock=_loggingBlock - In the implementation block
+(void)regeneratePersistentIdentifierForDNU:(char)arg1 ;
+(id)getPersistentIdentifierForDNU:(char)arg1 ;
+(id)createEphemeralSessionWithSessionInfo:(id)arg1 userInfo:(id)arg2 error:(id*)arg3 ;
+(char)closeEphemeralSessiontWithSessionId:(id)arg1 ;
+(char)sendOneMessageWithSessionInfo:(id)arg1 userInfo:(id)arg2 category:(unsigned short)arg3 type:(unsigned short)arg4 payload:(id)arg5 error:(id*)arg6 ;
+(id)newHierarchyTokenFromParentToken:(id)arg1 ;
+(id)newSecureHierarchyTokenFromParentToken:(id)arg1 ;
-(id)retain;
-(oneway void)release;
-(void)dealloc;
-(char)sendMessageWithCategory:(unsigned short)arg1 type:(unsigned short)arg2 payload:(id)arg3 error:(id*)arg4 ;
-(void)startConfigurationWithCompletionHandler:(/*^block*/id)arg1 ;
-(char)flushMessages;
-(id)initWithSessionInfo:(id)arg1 userInfo:(id)arg2 frameworksToCheck:(id)arg3 ;
-(void)flushMessagesWithCompletion:(/*^block*/id)arg1 ;
-(void)updateSharedDataWithDictionary:(id)arg1 ;
-(void)updateSharedDataForKey:(id)arg1 value:(id)arg2 ;
-(char)setDigestKey:(id)arg1 algorithm:(int)arg2 ;
-(id)initWithSessionInfo:(id)arg1 userInfo:(id)arg2 frameworksToCheck:(id)arg3 aggregationBlock:(/*^block*/id)arg4 ;
-(void)finishSession;
-(id<RTCReportingMessageSentNotifier>)messageSentDelegate;
-(char)sendMessageWithDictionary:(id)arg1 error:(id*)arg2 ;
-(void)notifyMessageWasSent:(id)arg1 ;
-(char)isWhitelistedEvent:(unsigned short)arg1 ;
-(char)isBlacklistedEvent:(unsigned short)arg1 ;
-(void)aboutToDealloc;
-(void)setMessageSentDelegate:(id<RTCReportingMessageSentNotifier>)arg1 ;
-(void)fetchReportingStatesWithUserInfo:(id)arg1 fetchComplete:(/*^block*/id)arg2 ;
-(void)setMessageLoggingBlock:(id)arg1 ;
-(id)messageLoggingBlock;
-(void)_myPeriodicTask:(unsigned short)arg1 type:(unsigned short)arg2 intervalMultiplier:(int)arg3 updateTimeout:(unsigned long long)arg4 ;
-(void)startLogTimerWithInterval:(int)arg1 reportingMultiplier:(int)arg2 category:(unsigned short)arg3 type:(unsigned short)arg4 ;
-(void)stopLogTimer;
-(char)registerPeriodicTaskForModule:(unsigned)arg1 needToUpdate:(char)arg2 needToReport:(char)arg3 serviceBlock:(/*^block*/id)arg4 ;
-(char)unregisterPeriodTaskForModule:(unsigned)arg1 ;
-(char)serverSupportsFileUpload;
-(char)uploadFileWithURL:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(char)uploadDataArray:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
@end

