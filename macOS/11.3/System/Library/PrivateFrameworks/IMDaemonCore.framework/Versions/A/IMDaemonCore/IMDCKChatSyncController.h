/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:10 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/IMDaemonCore.framework/Versions/A/IMDaemonCore
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <IMDaemonCore/IMDCKAbstractSyncController.h>

@protocol OS_dispatch_queue, IMDCKSyncTokenStore, OS_xpc_object;
@class CKServerChangeToken, NSObject, IMDChatRegistry, IMDRecordZoneManager, IMDCKChatSyncCKOperationFactory, CKRecord;

@interface IMDCKChatSyncController : IMDCKAbstractSyncController {

	char _fetchedChatsDuringLastSync;
	CKServerChangeToken* _latestSyncToken;
	NSObject*<OS_dispatch_queue> _ckQueue;
	IMDChatRegistry* _chatRegistry;
	IMDRecordZoneManager* _recordZoneManager;
	id<IMDCKSyncTokenStore> _syncTokenStore;
	IMDCKChatSyncCKOperationFactory* _CKOperationFactory;
	CKRecord* _lockRecord;
	CKRecord* _manateeLockRecord;
	CKRecord* _stingRayLockRecord;
	NSObject*<OS_xpc_object> _activity;

}

@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> ckQueue;                            //@synthesize ckQueue=_ckQueue - In the implementation block
@property (nonatomic,retain) IMDChatRegistry * chatRegistry;                                    //@synthesize chatRegistry=_chatRegistry - In the implementation block
@property (nonatomic,retain) IMDRecordZoneManager * recordZoneManager;                          //@synthesize recordZoneManager=_recordZoneManager - In the implementation block
@property (nonatomic,retain) id<IMDCKSyncTokenStore> syncTokenStore;                            //@synthesize syncTokenStore=_syncTokenStore - In the implementation block
@property (nonatomic,retain) CKServerChangeToken * latestSyncToken;                             //@synthesize latestSyncToken=_latestSyncToken - In the implementation block
@property (nonatomic,retain) IMDCKChatSyncCKOperationFactory * CKOperationFactory;              //@synthesize CKOperationFactory=_CKOperationFactory - In the implementation block
@property (nonatomic,retain) CKRecord * lockRecord;                                             //@synthesize lockRecord=_lockRecord - In the implementation block
@property (nonatomic,retain) CKRecord * manateeLockRecord;                                      //@synthesize manateeLockRecord=_manateeLockRecord - In the implementation block
@property (nonatomic,retain) CKRecord * stingRayLockRecord;                                     //@synthesize stingRayLockRecord=_stingRayLockRecord - In the implementation block
@property (assign) NSObject*<OS_xpc_object> activity;                                           //@synthesize activity=_activity - In the implementation block
@property (assign,nonatomic) char fetchedChatsDuringLastSync;                                   //@synthesize fetchedChatsDuringLastSync=_fetchedChatsDuringLastSync - In the implementation block
+(id)sharedInstance;
-(void)dealloc;
-(id)init;
-(NSObject*<OS_xpc_object>)activity;
-(void)setActivity:(NSObject*<OS_xpc_object>)arg1 ;
-(void)_scheduleOperation:(id)arg1 ;
-(long long)syncControllerRecordType;
-(void)deleteChatZone;
-(IMDChatRegistry *)chatRegistry;
-(void)anyChatExistsOnServerWithCompletion:(/*^block*/id)arg1 ;
-(NSObject*<OS_dispatch_queue>)ckQueue;
-(IMDRecordZoneManager *)recordZoneManager;
-(void)setRecordZoneManager:(IMDRecordZoneManager *)arg1 ;
-(void)setChatRegistry:(IMDChatRegistry *)arg1 ;
-(id)initWithSyncTokenStore:(id)arg1 ;
-(void)clearLocalSyncState:(unsigned long long)arg1 ;
-(id)_recordKeyManagerSharedInstance;
-(IMDCKChatSyncCKOperationFactory *)CKOperationFactory;
-(void)_processRecordDeletion:(id)arg1 ;
-(void)_processModifyRecordCompletion:(id)arg1 deletedRecordIDs:(id)arg2 error:(id)arg3 completionBlock:(/*^block*/id)arg4 ;
-(id<IMDCKSyncTokenStore>)syncTokenStore;
-(void)setCKOperationFactory:(IMDCKChatSyncCKOperationFactory *)arg1 ;
-(void)setSyncTokenStore:(id<IMDCKSyncTokenStore>)arg1 ;
-(id)_changeTokenKey;
-(void)setLatestSyncToken:(CKServerChangeToken *)arg1 ;
-(CKServerChangeToken *)latestSyncToken;
-(void)_migrateServerChangeToken;
-(CKRecord *)stingRayLockRecord;
-(CKRecord *)manateeLockRecord;
-(void)setStingRayLockRecord:(CKRecord *)arg1 ;
-(void)setManateeLockRecord:(CKRecord *)arg1 ;
-(id)_randomSalt;
-(void)setLockRecord:(id)arg1 isUsingStingRay:(char)arg2 ;
-(void)_updateChatUsingCKRecord:(id)arg1 ;
-(void)_markChatAsDefferedForSyncingUsingRecord:(id)arg1 ;
-(void)_resolveChatConflictUsingCKRecord:(id)arg1 localGUID:(id)arg2 ;
-(void)_processModifyPerRecordCallBack:(id)arg1 error:(id)arg2 isUsingStingRay:(char)arg3 recordIDtoGUIDmap:(id)arg4 ;
-(unsigned long long)_numberOfChatsToWrite;
-(id)_copyChatsToUploadWithLimit:(unsigned long long)arg1 ;
-(void)_logGreenTeaLogsForChats:(id)arg1 ;
-(id)_newckRecordsFromChats:(id)arg1 ;
-(id)lockRecordForStingRay:(char)arg1 ;
-(id)_generateLockRecord;
-(void)_writeDirtyChatsToCloudKitWithCompletion:(/*^block*/id)arg1 isUsingStingRay:(char)arg2 ;
-(char)_shouldResyncChatsForError:(id)arg1 ;
-(void)_writeCKRecordsToChatZone:(id)arg1 isUsingStingRay:(char)arg2 withCompletion:(/*^block*/id)arg3 ;
-(id)_chatZoneID;
-(unsigned long long)_numberOfChatsToFetch;
-(void)setFetchedChatsDuringLastSync:(char)arg1 ;
-(void)deleteChatSyncToken;
-(void)_kickOffWriteOnCKQueueWithCompletion:(/*^block*/id)arg1 isUsingStingRay:(char)arg2 ;
-(char)_chatZoneCreated;
-(void)_kickOffWriteIfNeededForSyncType:(long long)arg1 completion:(/*^block*/id)arg2 isUsingStingRay:(char)arg3 ;
-(void)_clearStingRaySyncToken;
-(id)_fetchChatRecordOperation;
-(void)_processRecordChanged:(id)arg1 isUsingStingRay:(char)arg2 ;
-(void)_processRecordZoneChangeTokenUpdated:(id)arg1 zoneID:(id)arg2 clienChangeToken:(id)arg3 ;
-(void)_processRecordZoneFetchCompletion:(id)arg1 zoneID:(id)arg2 clientChangeTokenData:(id)arg3 moreComing:(char)arg4 error:(id)arg5 ;
-(void)_processFetchRecordChangesCompleted:(id)arg1 completion:(/*^block*/id)arg2 isUsingStingRay:(char)arg3 syncType:(long long)arg4 ;
-(void)_anyChatExistsOnServerWithResultsLimit:(int)arg1 changeToken:(id)arg2 completion:(/*^block*/id)arg3 ;
-(char)_shouldMarkAllChatsAsNeedingSync;
-(void)_hasMarkedAllChatsAsNeedingSync;
-(void)__syncChatsWithCloudKit:(long long)arg1 attemptCount:(unsigned long long)arg2 withCompletion:(/*^block*/id)arg3 ;
-(char)_eligibleForTruthZone;
-(void)_syncChatsWithCloudKitWithCompletionType:(long long)arg1 syncChatsCompletionBlock:(/*^block*/id)arg2 ;
-(void)_needsToMarkAllChatsAsNeedingSync;
-(id)_copyRecordIDsToDelete;
-(void)_handleChatDeletionCompletionForRecordIDs:(id)arg1 error:(id)arg2 ;
-(char)_lockRecordHadConflict:(id)arg1 ;
-(void)syncChatsWithType:(long long)arg1 withActivity:(id)arg2 withCompletion:(/*^block*/id)arg3 ;
-(void)syncPendingDeletionWithCompletion:(/*^block*/id)arg1 ;
-(char)fetchedChatsDuringLastSync;
-(CKRecord *)lockRecord;
-(void)setLockRecord:(CKRecord *)arg1 ;
@end

