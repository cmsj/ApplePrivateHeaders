/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:11 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/StorageKit.framework/Versions/A/StorageKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class NSArray, NSObject, NSString, NSImage, SKFilesystem;

@interface SKDisk : NSObject {

	NSArray* _sortedChildren;
	NSObject* _daDiskRef;
	char _isValid;
	char _canBeDeleted;
	char _isDiskImage;
	char _isSystemRAMDisk;
	char _isInternal;
	char _isAESHardwareDisk;
	char _isSolidState;
	char _isWholeDisk;
	char _isPhysicalDisk;
	char _isWritable;
	char _supportsJournaling;
	char _isJournaled;
	char _isEjectable;
	char _isNetwork;
	char _isLocked;
	char _isOpticalDisc;
	char _canSupportRecoveryPartition;
	char _supportsRepair;
	char _supportsVerify;
	char _ownersEnabled;
	char _isCaseSensitive;
	char _partitionMapIsIncorrectlySized;
	char _apfsConvertible;
	char _isMacOSBootableSystem;
	char _isOSInternal;
	int _smartStatus;
	NSString* _type;
	NSString* _filesystemType;
	NSImage* _diskIcon;
	NSString* _volumeName;
	NSString* _volumeUUID;
	NSString* _mountPoint;
	unsigned long long _freeSpace;
	unsigned long long _purgeableSpace;
	unsigned long long _availableSpace;
	unsigned long long _minimumDiskSize;
	unsigned long long _maximumDiskSize;
	unsigned long long _totalSpace;
	NSString* _diskIdentifier;
	NSString* _protocol;
	NSString* _mediaName;
	unsigned long long _unformattedSize;
	unsigned long long _childCount;
	unsigned long long _startLocation;
	SKFilesystem* _filesystem;
	NSString* _role;

}

@property (retain) NSString * role;                                  //@synthesize role=_role - In the implementation block
@property (retain) NSString * type;                                  //@synthesize type=_type - In the implementation block
@property (retain) NSString * filesystemType;                        //@synthesize filesystemType=_filesystemType - In the implementation block
@property (assign) char isValid;                                     //@synthesize isValid=_isValid - In the implementation block
@property (retain) NSImage * diskIcon;                               //@synthesize diskIcon=_diskIcon - In the implementation block
@property (retain) NSString * volumeName;                            //@synthesize volumeName=_volumeName - In the implementation block
@property (retain) NSString * volumeUUID;                            //@synthesize volumeUUID=_volumeUUID - In the implementation block
@property (retain) NSString * mountPoint;                            //@synthesize mountPoint=_mountPoint - In the implementation block
@property (assign) unsigned long long freeSpace;                     //@synthesize freeSpace=_freeSpace - In the implementation block
@property (assign) unsigned long long purgeableSpace;                //@synthesize purgeableSpace=_purgeableSpace - In the implementation block
@property (assign) unsigned long long availableSpace;                //@synthesize availableSpace=_availableSpace - In the implementation block
@property (assign) unsigned long long totalSpace;                    //@synthesize totalSpace=_totalSpace - In the implementation block
@property (assign) unsigned long long minimumDiskSize;               //@synthesize minimumDiskSize=_minimumDiskSize - In the implementation block
@property (assign) unsigned long long maximumDiskSize;               //@synthesize maximumDiskSize=_maximumDiskSize - In the implementation block
@property (assign) char canBeDeleted;                                //@synthesize canBeDeleted=_canBeDeleted - In the implementation block
@property (retain) NSString * diskIdentifier;                        //@synthesize diskIdentifier=_diskIdentifier - In the implementation block
@property (retain) NSString * protocol;                              //@synthesize protocol=_protocol - In the implementation block
@property (assign) char isDiskImage;                                 //@synthesize isDiskImage=_isDiskImage - In the implementation block
@property (assign) char isSystemRAMDisk;                             //@synthesize isSystemRAMDisk=_isSystemRAMDisk - In the implementation block
@property (assign) char isInternal;                                  //@synthesize isInternal=_isInternal - In the implementation block
@property (assign) char isAESHardwareDisk;                           //@synthesize isAESHardwareDisk=_isAESHardwareDisk - In the implementation block
@property (assign) char isSolidState;                                //@synthesize isSolidState=_isSolidState - In the implementation block
@property (assign) char isWholeDisk;                                 //@synthesize isWholeDisk=_isWholeDisk - In the implementation block
@property (assign) char isPhysicalDisk;                              //@synthesize isPhysicalDisk=_isPhysicalDisk - In the implementation block
@property (assign) char isWritable;                                  //@synthesize isWritable=_isWritable - In the implementation block
@property (assign) char isLocked;                                    //@synthesize isLocked=_isLocked - In the implementation block
@property (assign) char isOpticalDisc;                               //@synthesize isOpticalDisc=_isOpticalDisc - In the implementation block
@property (assign) char canSupportRecoveryPartition;                 //@synthesize canSupportRecoveryPartition=_canSupportRecoveryPartition - In the implementation block
@property (assign) char supportsRepair;                              //@synthesize supportsRepair=_supportsRepair - In the implementation block
@property (assign) char supportsVerify;                              //@synthesize supportsVerify=_supportsVerify - In the implementation block
@property (assign) char ownersEnabled;                               //@synthesize ownersEnabled=_ownersEnabled - In the implementation block
@property (assign) char isCaseSensitive;                             //@synthesize isCaseSensitive=_isCaseSensitive - In the implementation block
@property (retain) NSString * mediaName;                             //@synthesize mediaName=_mediaName - In the implementation block
@property (assign) char supportsJournaling;                          //@synthesize supportsJournaling=_supportsJournaling - In the implementation block
@property (assign) char isJournaled;                                 //@synthesize isJournaled=_isJournaled - In the implementation block
@property (assign) unsigned long long unformattedSize;               //@synthesize unformattedSize=_unformattedSize - In the implementation block
@property (assign) unsigned long long childCount;                    //@synthesize childCount=_childCount - In the implementation block
@property (assign) char isEjectable;                                 //@synthesize isEjectable=_isEjectable - In the implementation block
@property (assign) char isNetwork;                                   //@synthesize isNetwork=_isNetwork - In the implementation block
@property (assign) unsigned long long startLocation;                 //@synthesize startLocation=_startLocation - In the implementation block
@property (assign) int smartStatus;                                  //@synthesize smartStatus=_smartStatus - In the implementation block
@property (retain) SKFilesystem * filesystem;                        //@synthesize filesystem=_filesystem - In the implementation block
@property (assign) char partitionMapIsIncorrectlySized;              //@synthesize partitionMapIsIncorrectlySized=_partitionMapIsIncorrectlySized - In the implementation block
@property (assign) char apfsConvertible;                             //@synthesize apfsConvertible=_apfsConvertible - In the implementation block
@property (assign) char isMacOSBootableSystem;                       //@synthesize isMacOSBootableSystem=_isMacOSBootableSystem - In the implementation block
@property (assign) char isOSInternal;                                //@synthesize isOSInternal=_isOSInternal - In the implementation block
@property (readonly) NSString * contentDiskIdentifier; 
-(void)setIsNetwork:(char)arg1 ;
-(char)matchesDictionary:(id)arg1 ;
-(char)apfsConvertible;
-(char)isMacOSBootableSystem;
-(char)isWindowsSystem;
-(id)_DAVolumeUUIDForDisk:(id)arg1 ;
-(char)eraseToFilesystem:(id)arg1 name:(id)arg2 partitionMap:(id)arg3 password:(id)arg4 passwordHint:(id)arg5 handlingProgress:(/*^block*/id)arg6 withCompletionBlock:(/*^block*/id)arg7 ;
-(id)_DAVolumeUUIDForDiskIdentifier:(id)arg1 ;
-(void)expireCache;
-(char)setBootOnceAndPersonalizeWithCompletionBlock:(/*^block*/id)arg1 ;
-(char)setBootAndPersonalizeWithCompletionBlock:(/*^block*/id)arg1 ;
-(char)blessAndPersonalizeWithCompletionBlock:(/*^block*/id)arg1 ;
-(char)blessWithOptions:(id)arg1 completionBlock:(/*^block*/id)arg2 ;
-(char)canBeErasedToRole:(id)arg1 ;
-(char)eraseHandlingProgress:(/*^block*/id)arg1 withCompletionHandler:(/*^block*/id)arg2 ;
-(char)eraseToFilesystem:(id)arg1 name:(id)arg2 password:(id)arg3 handlingProgress:(/*^block*/id)arg4 withCompletionBlock:(/*^block*/id)arg5 ;
-(char)eraseToFilesystem:(id)arg1 name:(id)arg2 partitionMap:(id)arg3 password:(id)arg4 handlingProgress:(/*^block*/id)arg5 withCompletionBlock:(/*^block*/id)arg6 ;
-(char)eraseToFileSystemType:(id)arg1 name:(id)arg2 caseSensitive:(char)arg3 password:(id)arg4 handlingProgress:(/*^block*/id)arg5 withCompletionBlock:(/*^block*/id)arg6 ;
-(char)repairUserHomeForUser:(long long)arg1 withProgressHandler:(/*^block*/id)arg2 withCompletionBlock:(/*^block*/id)arg3 ;
-(char)splitToSize:(unsigned long long)arg1 newDiskRole:(id)arg2 name:(id)arg3 caseSensitive:(char)arg4 password:(id)arg5 handlingProgress:(/*^block*/id)arg6 withCompletionBlock:(/*^block*/id)arg7 ;
-(char)convertToCoreStorage:(char)arg1 handlingProgress:(/*^block*/id)arg2 withCompletionBlock:(/*^block*/id)arg3 ;
-(char)ensureRecovery:(id)arg1 chunkkList:(id)arg2 handlingProgress:(/*^block*/id)arg3 withCompletionBlock:(/*^block*/id)arg4 ;
-(void)getRecoverySystemInfo:(/*^block*/id)arg1 ;
-(char)blockRestoreFromDisk:(id)arg1 handlingProgress:(/*^block*/id)arg2 withCompletionBlock:(/*^block*/id)arg3 ;
-(char)blockRestoreFromDiskImageFileURL:(id)arg1 handlingProgress:(/*^block*/id)arg2 withCompletionBlock:(/*^block*/id)arg3 ;
-(char)dryRunConvertToAPFSWithProgress:(/*^block*/id)arg1 andCompletionHandler:(/*^block*/id)arg2 ;
-(unsigned long long)minimumDiskSize;
-(unsigned long long)maximumDiskSize;
-(void)dealloc;
-(char)isEqual:(id)arg1 ;
-(unsigned long long)hash;
-(id)description;
-(void)setType:(NSString *)arg1 ;
-(char)isValid;
-(NSString *)type;
-(id)initWithDictionary:(id)arg1 ;
-(NSString *)role;
-(NSString *)protocol;
-(id)dictionaryRepresentation;
-(unsigned long long)childCount;
-(id)children;
-(void)setProtocol:(NSString *)arg1 ;
-(char)isLocked;
-(void)setIsValid:(char)arg1 ;
-(unsigned long long)availableSpace;
-(void)setAvailableSpace:(unsigned long long)arg1 ;
-(void)setRole:(NSString *)arg1 ;
-(void)setChildCount:(unsigned long long)arg1 ;
-(char)isInternal;
-(char)isCaseSensitive;
-(unsigned long long)startLocation;
-(char)isWritable;
-(NSString *)diskIdentifier;
-(char)isEjectable;
-(NSString *)volumeUUID;
-(void)updateWithDictionary:(id)arg1 ;
-(NSString *)mediaName;
-(void)setMediaName:(NSString *)arg1 ;
-(NSString *)mountPoint;
-(NSString *)volumeName;
-(char)isJournaled;
-(unsigned long long)freeSpace;
-(void)setIsWritable:(char)arg1 ;
-(void)setIsLocked:(char)arg1 ;
-(void)setIsInternal:(char)arg1 ;
-(void)setStartLocation:(unsigned long long)arg1 ;
-(unsigned long long)purgeableSpace;
-(NSString *)filesystemType;
-(char)mountWithOptions:(id)arg1 withCompletionBlock:(/*^block*/id)arg2 ;
-(char)unmountWithCompletionBlock:(/*^block*/id)arg1 ;
-(char)repairESPAndRecreateIfNecessary:(char)arg1 progressHandler:(/*^block*/id)arg2 completionBlock:(/*^block*/id)arg3 ;
-(char)canBeDeleted;
-(void)setVolumeUUID:(NSString *)arg1 ;
-(char)supportsJournaling;
-(char)setBootOnceWithCompletionBlock:(/*^block*/id)arg1 ;
-(SKFilesystem *)filesystem;
-(void)setVolumeName:(NSString *)arg1 ;
-(NSImage *)diskIcon;
-(void)setMountPoint:(NSString *)arg1 ;
-(void)setFilesystemType:(NSString *)arg1 ;
-(void)setFreeSpace:(unsigned long long)arg1 ;
-(char)extendedInfoForDiskWithCallback:(/*^block*/id)arg1 ;
-(char)enablePermissionsWithCompletionBlock:(/*^block*/id)arg1 ;
-(unsigned long long)totalSpace;
-(char)mountWithCompletionBlock:(/*^block*/id)arg1 ;
-(char)isDiskImage;
-(char)unmountWithOptions:(id)arg1 completionBlock:(/*^block*/id)arg2 ;
-(char)convertToAPFSWithPreboot:(id)arg1 andProgress:(/*^block*/id)arg2 andCompletionHandler:(/*^block*/id)arg3 ;
-(char)isSolidState;
-(char)ejectWithCompletionBlock:(/*^block*/id)arg1 ;
-(char)isSystemRAMDisk;
-(char)canSupportRecoveryPartition;
-(char)repairWithOptions:(id)arg1 progressHandler:(/*^block*/id)arg2 withCompletionBlock:(/*^block*/id)arg3 ;
-(char)verifyWithProgressHandler:(/*^block*/id)arg1 withCompletionBlock:(/*^block*/id)arg2 ;
-(char)rename:(id)arg1 withCompletionBlock:(/*^block*/id)arg2 ;
-(void)expireCacheWithCompletionBlock:(/*^block*/id)arg1 ;
-(char)ensureRecovery:(id)arg1 chunkkList:(id)arg2 diagnostics:(id)arg3 handlingProgress:(/*^block*/id)arg4 withCompletionBlock:(/*^block*/id)arg5 ;
-(char)setBootWithCompletionBlock:(/*^block*/id)arg1 ;
-(char)mountWithOptionsDictionary:(id)arg1 withCompletionBlock:(/*^block*/id)arg2 ;
-(char)blessWithCompletionBlock:(/*^block*/id)arg1 ;
-(char)unEnsureRecoveryWithProgressHandler:(/*^block*/id)arg1 withCompletionBlock:(/*^block*/id)arg2 ;
-(char)enableJournalingWithCompletionBlock:(/*^block*/id)arg1 ;
-(char)convertDiskToFDEWithUsers:(id)arg1 recoveryKey:(id)arg2 handlingProgress:(/*^block*/id)arg3 withCompletionBlock:(/*^block*/id)arg4 ;
-(char)isWholeDisk;
-(char)isPhysicalDisk;
-(char)ownersEnabled;
-(NSString *)contentDiskIdentifier;
-(int)smartStatus;
-(void)setIsDiskImage:(char)arg1 ;
-(char)isOpticalDisc;
-(char)partitionMapIsIncorrectlySized;
-(char)fixIncorrectlySizedPartitionMapWithCompletionHandler:(/*^block*/id)arg1 ;
-(char)resizeToSize:(unsigned long long)arg1 handlingProgress:(/*^block*/id)arg2 withCompletionHandler:(/*^block*/id)arg3 ;
-(char)supportsRepair;
-(char)repairWithProgressHandler:(/*^block*/id)arg1 withCompletionBlock:(/*^block*/id)arg2 ;
-(char)canResize;
-(unsigned long long)unformattedSize;
-(void)setFilesystem:(SKFilesystem *)arg1 ;
-(char)removeDiskHandlingProgress:(/*^block*/id)arg1 withCompletionHandler:(/*^block*/id)arg2 ;
-(char)splitToSize:(unsigned long long)arg1 newDiskType:(id)arg2 name:(id)arg3 caseSensitive:(char)arg4 password:(id)arg5 handlingProgress:(/*^block*/id)arg6 withCompletionBlock:(/*^block*/id)arg7 ;
-(char)eraseToFilesystem:(id)arg1 name:(id)arg2 password:(id)arg3 passwordHint:(id)arg4 handlingProgress:(/*^block*/id)arg5 withCompletionBlock:(/*^block*/id)arg6 ;
-(char)eraseToFileSystemType:(id)arg1 partitionMap:(id)arg2 name:(id)arg3 caseSensitive:(char)arg4 password:(id)arg5 handlingProgress:(/*^block*/id)arg6 withCompletionBlock:(/*^block*/id)arg7 ;
-(void)setIsJournaled:(char)arg1 ;
-(void)setIsPhysicalDisk:(char)arg1 ;
-(char)eraseToFileSystemType:(id)arg1 name:(id)arg2 caseSensitive:(char)arg3 password:(id)arg4 passwordHint:(id)arg5 handlingProgress:(/*^block*/id)arg6 withCompletionBlock:(/*^block*/id)arg7 ;
-(char)eraseToFileSystemType:(id)arg1 partitionMap:(id)arg2 name:(id)arg3 caseSensitive:(char)arg4 password:(id)arg5 passwordHint:(id)arg6 handlingProgress:(/*^block*/id)arg7 withCompletionBlock:(/*^block*/id)arg8 ;
-(char)secureEraseWithLevel:(int)arg1 handlingProgress:(/*^block*/id)arg2 withCompletionBlock:(/*^block*/id)arg3 ;
-(char)isAESHardwareDisk;
-(char)convertToAPFSWithProgress:(/*^block*/id)arg1 andCompletionHandler:(/*^block*/id)arg2 ;
-(char)blockRestoreFromDisk:(id)arg1 volumeUUID:(id)arg2 creatingNewVolume:(char)arg3 handlingProgress:(/*^block*/id)arg4 withCompletionBlock:(/*^block*/id)arg5 ;
-(char)blockRestoreFromDiskImageFileURL:(id)arg1 volumeUUID:(id)arg2 creatingNewVolume:(char)arg3 handlingProgress:(/*^block*/id)arg4 withCompletionBlock:(/*^block*/id)arg5 ;
-(char)supportsVerify;
-(char)canBoot;
-(id)supportedFilesystems;
-(char)isOSInternal;
-(char)setDiskIcon:(id)arg1 withCompletionBlock:(/*^block*/id)arg2 ;
-(char)isNetwork;
-(void)setIsSolidState:(char)arg1 ;
-(void)setIsEjectable:(char)arg1 ;
-(void)setDiskIdentifier:(NSString *)arg1 ;
-(void)setTotalSpace:(unsigned long long)arg1 ;
-(void)setPurgeableSpace:(unsigned long long)arg1 ;
-(void)setIsMacOSBootableSystem:(char)arg1 ;
-(id)minimalDictionaryRepresentation;
-(void)setSupportsVerify:(char)arg1 ;
-(void)setSupportsRepair:(char)arg1 ;
-(void)setSupportsJournaling:(char)arg1 ;
-(void)setIsCaseSensitive:(char)arg1 ;
-(void)setApfsConvertible:(char)arg1 ;
-(void)setDiskIcon:(NSImage *)arg1 ;
-(void)setCanSupportRecoveryPartition:(char)arg1 ;
-(void)setMaximumDiskSize:(unsigned long long)arg1 ;
-(void)setMinimumDiskSize:(unsigned long long)arg1 ;
-(void)setIsOpticalDisc:(char)arg1 ;
-(void)setIsWholeDisk:(char)arg1 ;
-(void)setIsOSInternal:(char)arg1 ;
-(void)setUnformattedSize:(unsigned long long)arg1 ;
-(void)setIsSystemRAMDisk:(char)arg1 ;
-(void)setIsAESHardwareDisk:(char)arg1 ;
-(void)setCanBeDeleted:(char)arg1 ;
-(void)setOwnersEnabled:(char)arg1 ;
-(void)setSmartStatus:(int)arg1 ;
-(void)setPartitionMapIsIncorrectlySized:(char)arg1 ;
-(id)dictionaryRepresentationIncludingIcon;
@end

