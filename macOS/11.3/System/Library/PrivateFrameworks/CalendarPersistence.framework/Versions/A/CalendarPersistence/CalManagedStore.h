/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:37 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/CalendarPersistence.framework/Versions/A/CalendarPersistence
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@interface CalManagedStore : NSObject
+(id)masterForTruthFile:(id)arg1 occurrenceDate:(id*)arg2 inContext:(id)arg3 ;
+(id)managedCalendarItemsMatchingSearchElement:(id)arg1 calendars:(id)arg2 inManagedObjectContext:(id)arg3 ;
+(id)entitiesFromManagedCalendarItems:(id)arg1 ;
+(char)restorePersistentStoreInPSC:(id)arg1 inBatches:(char)arg2 options:(unsigned long long)arg3 error:(id*)arg4 ;
+(void)_unquarantineFileIfNecessary:(id)arg1 ;
+(id)contextWithPSC:(id)arg1 ;
+(void)_deleteCalendarAtPath:(id)arg1 ;
+(id)restorePublicationWithDictionary:(id)arg1 inManagedObjectContext:(id)arg2 ;
+(id)restoreSubscriptionInfoWithDictionary:(id)arg1 inManagedObjectContext:(id)arg2 ;
+(id)restoreDefaultAlarmSetAtPath:(id)arg1 inManagedObjectContext:(id)arg2 ;
+(id)_batchedPaths:(id)arg1 batchSize:(unsigned)arg2 ;
+(void)_throwContextSaveExceptionWithError:(id)arg1 ;
+(void)_notifyOnImportTotalCalendars:(long long)arg1 completedCalendars:(long long)arg2 partialCalendarTotalItems:(long long)arg3 completedItems:(long long)arg4 ;
+(id)restoreCalendarAtPath:(id)arg1 calendarKeysForDupeDeletion:(id)arg2 inGroup:(id)arg3 inManagedObjectContext:(id)arg4 inBatches:(char)arg5 ;
+(id)restoreCalendarAtPath:(id)arg1 calendarKeysForDupeDeletion:(id)arg2 inGroup:(id)arg3 progress:(unsigned long long*)arg4 total:(unsigned long long)arg5 inManagedObjectContext:(id)arg6 inBatches:(char)arg7 ;
+(char)restorePersistentStoreInPSC:(id)arg1 inBatches:(char)arg2 error:(id*)arg3 ;
+(id)restoreCalDAVPrincipalAtPath:(id)arg1 accounts:(id)arg2 progress:(unsigned long long*)arg3 total:(unsigned long long)arg4 inManagedObjectContext:(id)arg5 inBatches:(char)arg6 ;
+(id)restoreExchangePrincipalAtPath:(id)arg1 accounts:(id)arg2 progress:(unsigned long long*)arg3 total:(unsigned long long)arg4 inManagedObjectContext:(id)arg5 ;
+(id)restoreIMAPAtPath:(id)arg1 progress:(unsigned long long*)arg2 total:(unsigned long long)arg3 inManagedObjectContext:(id)arg4 ;
+(id)calendarChangesFile;
+(unsigned long long)_enabledWeightForAccount:(id)arg1 ;
+(char)hasTruthFiles;
+(char)restorePersistentStoreInPSC:(id)arg1 error:(id*)arg2 ;
+(id)_predicateHelperForStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 exceptUID:(id)arg4 forReminders:(char)arg5 useTravelTime:(char)arg6 ;
+(id)_nonRecurringPredicateFloating:(char)arg1 useTravelTime:(char)arg2 forReminders:(char)arg3 ;
+(id)_recurringPredicateFloating:(char)arg1 useTravelTime:(char)arg2 forReminders:(char)arg3 ;
+(id)predicateForStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 exceptUID:(id)arg4 useTravelTime:(char)arg5 ;
+(id)fetchEntitiesWithPrefetchedAlarmsForEntityName:(id)arg1 withPredicate:(id)arg2 inCalendars:(id)arg3 inManagedObjectContext:(id)arg4 ;
+(id)predicateForImportantDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 exceptUID:(id)arg4 ;
+(id)predicateForDefaultAlarmSetsWithRelativeTriggersLargerThan:(long long)arg1 ;
+(id)eventsBetweenStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 exceptUID:(id)arg4 excludeDetached:(char)arg5 includeTravelTime:(char)arg6 inManagedObjectContext:(id)arg7 ;
+(id)tasksWithDueDateBetweenStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 inManagedObjectContext:(id)arg4 ;
+(id)predicateForAlarmsWithAbsoluteTriggerInRange:(id)arg1 endDate:(id)arg2 orRelativeTriggerLargerThan:(long long)arg3 includingLocationBased:(char)arg4 ;
+(id)fetchEntitiesWithPrefetchedAlarmsForEntityName:(id)arg1 inCalendars:(id)arg2 inManagedObjectContext:(id)arg3 ;
+(id)eventsWithAlarmsBetweenStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 includeLocationBased:(char)arg4 inManagedObjectContext:(id)arg5 ;
+(id)tasksWithAlarmsBetweenStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 includeLocationBased:(char)arg4 inManagedObjectContext:(id)arg5 ;
+(id)alarmsWithTriggersBetweenStartDate:(id)arg1 endDate:(id)arg2 calendars:(id)arg3 includeLocationBased:(char)arg4 inManagedObjectContext:(id)arg5 ;
+(id)masterForTruthFile:(id)arg1 occurrenceCALDate:(id*)arg2 inContext:(id)arg3 ;
+(id)_masterForICSFile:(id)arg1 occurrenceCALDate:(id*)arg2 inContext:(id)arg3 checkCalendarPath:(char)arg4 ;
+(id)masterForICSFile:(id)arg1 occurrenceCALDate:(id*)arg2 inContext:(id)arg3 ;
@end

