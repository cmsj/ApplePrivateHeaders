/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:37 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/CalendarPersistence.framework/Versions/A/CalendarPersistence
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <CalendarPersistence/CalManagedRemoteCalendar.h>
#import <CalendarPersistence/CalAccountLikeObject.h>

@class NSString, NSTimeZone, NSSet, NSURL;

@interface CalManagedCalDAVCalendar : CalManagedRemoteCalendar <CalAccountLikeObject> {

	char _keepRemindersOnSplit;
	char _keepEventsOnSplit;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (retain) NSString * calendarPath; 
@property (retain) NSString * cTag; 
@property (retain) NSString * syncToken; 
@property (assign) char isRenameable; 
@property (assign) char isColorEditable; 
@property (assign) char isAffectingAvailability; 
@property (retain) NSTimeZone * timeZone; 
@property (retain) NSString * pushKey; 
@property (assign) char canBePublished; 
@property (retain) NSString * ownerPrincipalPath; 
@property (retain) NSString * ownerDisplayName; 
@property (retain) NSSet * ownerAddresses; 
@property (readonly) NSURL * ownerAddress; 
@property (assign) char isFamilyCalendar; 
@property (assign) char needsSplit; 
@property (assign) char keepEventsOnSplit;                          //@synthesize keepEventsOnSplit=_keepEventsOnSplit - In the implementation block
@property (assign) char keepRemindersOnSplit;                       //@synthesize keepRemindersOnSplit=_keepRemindersOnSplit - In the implementation block
+(id)entityName;
+(void)enableChangeRequestNotifications;
+(id)calendarSourceWithFallbackToCoreDataForCalendarUID:(id)arg1 usingContext:(id)arg2 ;
-(id)type;
-(void)setTimeZone:(NSTimeZone *)arg1 ;
-(NSTimeZone *)timeZone;
-(id)relativePath;
-(char)isShareable;
-(char)isShared;
-(id)properties;
-(void)setOrder:(int)arg1 ;
-(id)objectIdentifier;
-(void)willRefresh:(char)arg1 ;
-(char)validateForInsert:(id*)arg1 ;
-(char)validateForUpdate:(id*)arg1 ;
-(char)isFamilyCalendar;
-(void)setIsFamilyCalendar:(char)arg1 ;
-(char)supportsSharing;
-(char)isAffectingAvailability;
-(void)setIsRenameable:(char)arg1 ;
-(char)isRenameable;
-(void)setIsAffectingAvailability:(char)arg1 ;
-(void)setSyncToken:(NSString *)arg1 ;
-(id)defaultOrganizerAddressForNewItems;
-(id)defaultOrganizerEmailForNewItems;
-(id)defaultOrganizerPhoneNumberForNewItems;
-(char)isDefaultSchedulingCalendar;
-(void)applyReasonableDefaultsForNewCalendarInGroup:(id)arg1 ;
-(id)sharingStatusString;
-(char)dualTypeCollectionAbleToBeSplit;
-(void)setKeepEventsOnSplit:(char)arg1 ;
-(void)setKeepRemindersOnSplit:(char)arg1 ;
-(char)isColorEditable;
-(char)allowsScheduling;
-(id)serverPath;
-(id)sharedOwnerName;
-(id)sharedOwnerAddress;
-(id)sharedOwnerAddresses;
-(id)defaultOrganizerNameForNewItems;
-(id)defaultOrganizerEncodedLikenessDataForNewItems;
-(char)defaultOrganizerIsMeForNewItems;
-(void)setIsColorEditable:(char)arg1 ;
-(char)eligibleForDefaultSchedulingCalendar;
-(char)isOwnerMe;
-(id)calendarSource;
-(char)isOwnerAddress:(id)arg1 ;
-(NSURL *)ownerAddress;
-(char)isMigrateable;
-(void)setCTag:(NSString *)arg1 ;
-(char)validateForWrite:(id*)arg1 ;
-(char)keepSyncRecordLocal;
-(char)isCalDAVPublished;
-(id)subscriptionOrPublishURL;
-(id)ownerAddressStrings;
-(id)_ownerAddressesAsDicts;
-(void)clearETags;
-(void)_setDefaultSchedulingCalendarToSelf;
-(id)_ownerEmailAddresses;
-(char)isSharedToMe;
-(char)isSharedByMe;
-(char)supportsCalDAVPublish;
-(id)calendarPathAppendSlashIfNeeded;
-(id)nodesInNamespace;
-(void)clearCalendarTags;
-(char)keepEventsOnSplit;
-(char)keepRemindersOnSplit;
-(id)_addressForOwnerWithNoMailFallback;
-(void)processForType:(int)arg1 inManagedObjectContext:(id)arg2 ;
-(void)processInsertedCalDAVCalendarInManagedObjectContext:(id)arg1 ;
-(void)processDeletedCalDAVCalendarInManagedObjectContext:(id)arg1 ;
-(void)processUpdatedCalDAVCalendarInManagedObjectContext:(id)arg1 ;
-(void)insertChangeCalendarColorRequestInManagedObjectContext:(id)arg1 ;
-(void)insertChangeCalendarOrderRequestInManagedObjectContext:(id)arg1 ;
-(void)insertRenameCalendarRequestInManagedObjectContext:(id)arg1 ;
-(void)insertChangeCalendarDescriptionRequestInManagedObjectContext:(id)arg1 ;
-(void)insertChangeFreeBusyCalendarRequestInManagedObjectContext:(id)arg1 ;
-(void)insertChangeCalendarTimeZoneRequestInManagedObjectContext:(id)arg1 ;
-(void)insertChangeCalendarPublishStateInManagedObjectContext:(id)arg1 ;
-(void)insertChangeCalendarAlarmsInManagedObjectContext:(id)arg1 ;
-(void)insertSplitDualTypeRequestInManagedObjectContext:(id)arg1 ;
-(void)migrateETags:(id)arg1 ;
-(char)insertAffectsSession;
-(char)insertAffectsPush;
-(char)insertAffectsDock;
-(char)deleteAffectsSession;
-(char)deleteAffectsPush;
-(char)deleteAffectsDock;
-(char)changesAffectDock:(id)arg1 ;
-(char)changesAffectPush:(id)arg1 ;
-(char)changesAffectRefresh:(id)arg1 ;
-(char)changesAffectSession:(id)arg1 ;
-(char)changeAffectsAlarms:(id)arg1 ;
@end

