/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:37 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/CalendarPersistence.framework/Versions/A/CalendarPersistence
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <CalendarPersistence/CALPropertyMultiValue.h>

@class CALTimeRange, NSMutableDictionary, NSMutableArray, CALDate;

@interface CoreRecurrenceRule : CALPropertyMultiValue {

	CALTimeRange* _range;
	NSMutableDictionary* _ruleCachedEndDates;
	NSMutableArray* _cachedDates;
	CALTimeRange* _cachedTimeRange;
	CALDate* _cachedStartDate;

}
+(id)recurrenceRuleFromICSString:(id)arg1 ;
+(int)daysTypeForDayArray:(id)arg1 ;
+(id)andDaysOfWeekString:(id)arg1 ;
+(id)weekDayPositionAsString:(long long)arg1 ;
+(id)orDaysOfWeekString:(id)arg1 ;
+(id)dayOfMonthAsString:(long long)arg1 ;
+(id)recurrenceWithStr:(const char*)arg1 withGlobalTz:(id)arg2 ;
+(id)daysOfWeek;
+(id)numberedWeekDayString:(id)arg1 ;
+(id)customDayCombinationDescription:(id)arg1 ;
+(id)logHandleFor36215635;
-(id)description;
-(id)init;
-(long long)count;
-(id)range;
-(id)setRange:(id)arg1 ;
-(id)setCount:(long long)arg1 ;
-(int)interval;
-(id)setInterval:(int)arg1 ;
-(void)setProperty:(id)arg1 withValue:(id)arg2 ;
-(char)isInfinite;
-(id)invalidateCache;
-(id)propertyForName:(id)arg1 ;
-(char)hasProperty:(id)arg1 ;
-(id)untilDate;
-(id)byDay;
-(id)byMonthDay;
-(id)byMonth;
-(unsigned long long)weekStart;
-(id)setWeekStart:(unsigned long long)arg1 ;
-(id)initWithRecurrenceRule:(id)arg1 ;
-(void)removeProperty:(id)arg1 ;
-(char)isEqualToPropertyValue:(id)arg1 ;
-(id)occurrencesOnTimeRange:(id)arg1 withRecurrenceStart:(id)arg2 ;
-(char)hasByParameter;
-(id)setUntilDate:(id)arg1 ;
-(id)setByMonth:(id)arg1 ;
-(id)setByMonthDay:(id)arg1 ;
-(id)humanReadableDescriptionForStartDate:(id)arg1 ;
-(id)bySetpos;
-(id)setByDay:(id)arg1 ;
-(id)setByYearDay:(id)arg1 ;
-(int)lastSpecifiedRulePartOrder;
-(char)_isUniversallyFastPathIneligible;
-(id)realEndDateOnTimeRange:(id)arg1 withRecurrenceStart:(id)arg2 ;
-(id)generateByMonthOnTimeRange:(id)arg1 withRecurrenceStart:(id)arg2 ;
-(id)generateByDayOnTimeRange:(id)arg1 withRecurrenceStart:(id)arg2 ;
-(id)applyRulePart:(SEL)arg1 onArray:(id)arg2 withRecurrenceStart:(id)arg3 ;
-(id)generateByMonthDayOnTimeRange:(id)arg1 withRecurrenceStart:(id)arg2 ;
-(id)byWeekno;
-(id)generateByWeeknoOnTimeRange:(id)arg1 withRecurrenceStart:(id)arg2 ;
-(id)generatePeriodicByDayOnTimeRange:(id)arg1 withRecurrenceStart:(id)arg2 ;
-(id)generateTimeRulePartOnArray:(id)arg1 withRecurrenceStart:(id)arg2 ;
-(id)filterBySetpos:(id)arg1 ;
-(id)filterOccurrences:(id)arg1 inTimeRange:(id)arg2 excludingEndDate:(char)arg3 ;
-(void)addRecStartDateIfNeeded:(id)arg1 withTimeRange:(id)arg2 withRecurrenceStart:(id)arg3 ;
-(void)appendICSStringToString:(id)arg1 ;
-(char)fastPathEligible;
-(unsigned long long)_recurrenceUnitsToJumpBetween:(id)arg1 rangeStart:(id)arg2 inCalendar:(id)arg3 ;
-(id)_fastPathDeltaComponentsWithCount:(unsigned long long)arg1 ;
-(id)realOccurrencesOnTimeRange:(id)arg1 withRecurrenceStart:(id)arg2 alwaysIncludeStartDate:(char)arg3 ;
-(char)isEqualToRule:(id)arg1 consideringStartDate:(id)arg2 ;
-(char)ruleMatchesDate:(id)arg1 ;
-(id)proposedRuleForMovingFrom:(id)arg1 to:(id)arg2 changes:(id)arg3 ;
-(id)acceptableMoveToTimeRangeForDate:(id)arg1 ;
-(char)hasWeekStart;
-(long long)numberOfDaysUntilPreviousOccurrenceOfDay:(long long)arg1 beforeDate:(id)arg2 ;
-(id)byYearDay;
-(id)generateByYearDayOnTimeRange:(id)arg1 withRecurrenceStart:(id)arg2 ;
-(id)cachedEndDates;
-(id)computeAndCacheEndDateOnTimeRange:(id)arg1 withRecurrenceStart:(id)arg2 ;
-(char)isTimeRangeCached:(id)arg1 withRecurrenceStart:(id)arg2 ;
-(id)addDatesOnTimeRange:(id)arg1 withRecurrenceStart:(id)arg2 alwaysIncludeStartDate:(char)arg3 ;
-(id)cachedDatesOnTimeRange:(id)arg1 ;
-(id)occurrencesOnTimeRange:(id)arg1 withRecurrenceStart:(id)arg2 alwaysIncludeStartDate:(char)arg3 ;
-(id)week:(long long)arg1 forYear:(long long)arg2 withTimeZone:(id)arg3 ;
-(long long)numberOfDaysUntilNextOccurrenceOfDay:(long long)arg1 afterDate:(id)arg2 ;
-(void)addPeriodicDay:(unsigned long long)arg1 toArray:(id)arg2 withTimeRange:(id)arg3 ;
-(id)generatePositionalByDayOnTimeRange:(id)arg1 withRecurrenceStart:(id)arg2 ;
-(id)byHour;
-(id)byMinute;
-(id)bySecond;
-(id)generateSimpleTimeRuleOnTimeRange:(id)arg1 withRecurrenceStart:(id)arg2 ;
-(id)generateByHourOnTimeRange:(id)arg1 withRecurrenceStart:(id)arg2 ;
-(id)generateByMinuteOnTimeRange:(id)arg1 withRecurrenceStart:(id)arg2 ;
-(id)generateBySecondOnTimeRange:(id)arg1 withRecurrenceStart:(id)arg2 ;
-(id)cachedEndDateOnTimeRange:(id)arg1 withRecurrenceStart:(id)arg2 ;
-(id)ICSStringForCALDay:(unsigned long long)arg1 ;
-(void)appendCALWeekDayNumber:(id)arg1 toString:(id)arg2 ;
-(void)appendICSStringForCALDate:(id)arg1 toString:(id)arg2 ;
-(void)appendCommaDelimitedNumbers:(id)arg1 toString:(id)arg2 ;
-(void)appendCommaDelimitedCALWeekDayNumbers:(id)arg1 toString:(id)arg2 ;
-(id)setBySecond:(id)arg1 ;
-(id)setByMinute:(id)arg1 ;
-(id)setByHour:(id)arg1 ;
-(id)setByWeekno:(id)arg1 ;
-(id)setBySetpos:(id)arg1 ;
-(char)_canJumpRecurrenceUnits;
-(char)_shouldExcludeDate:(id)arg1 inCalendar:(id)arg2 ;
-(id)cachedEndDateForRecurrenceStart:(id)arg1 ;
-(id)numberOfOccurrences:(long long)arg1 withRecurrenceStart:(id)arg2 ;
-(id)setInfinite;
-(id)ICSString;
-(id)expandFastPathDatesInCalendar:(id)arg1 recurrenceStart:(id)arg2 expansionRange:(id)arg3 ;
-(id)setCachedTimeRange:(id)arg1 ;
-(id)setCachedStartDate:(id)arg1 ;
-(id)addCachedDates:(id)arg1 ;
-(id)setCachedDates:(id)arg1 ;
@end

