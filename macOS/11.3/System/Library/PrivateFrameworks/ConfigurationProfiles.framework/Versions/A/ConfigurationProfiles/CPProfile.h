/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:35 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/ConfigurationProfiles.framework/Versions/A/ConfigurationProfiles
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <ConfigurationProfiles/ConfigurationProfiles-Structs.h>
#import <libobjc.A.dylib/NSSecureCoding.h>

@class NSString, NSDate, NSMutableDictionary, NSArray, NSDictionary;

@interface CPProfile : NSObject <NSSecureCoding> {

	NSString* name;
	NSString* organization;
	NSString* configurationDescription;
	NSString* profileIdentifier;
	NSString* profileUUID;
	unsigned long long profileVersion;
	NSString* profileType;
	char removaldisallowed;
	NSDate* installationDate;
	NSString* assignedUserName;
	NSString* assignedUserGUID;
	NSMutableDictionary* internalData;
	NSArray* configurationItems;
	char verificationStateCalculated;
	int verificationState;
	unsigned long long indexOfFailedVerificationSigner;
	NSString* signerName;
	AuthorizationOpaqueRefRef authorizationRef;

}

@property (retain,readonly) NSString * name; 
@property (retain,readonly) NSString * organization; 
@property (retain,readonly) NSString * configurationDescription; 
@property (retain) NSDate * installationDate; 
@property (retain,readonly) NSString * profileUUID; 
@property (retain,readonly) NSString * profileIdentifier; 
@property (readonly) char containsComputerItems; 
@property (readonly) unsigned long long profileVersion; 
@property (readonly) char removaldisallowed; 
@property (retain,readonly) NSString * profileType; 
@property (retain,readonly) NSString * profileScope; 
@property (readonly) long long targetDeviceType; 
@property (retain,readonly) NSDictionary * consentText; 
@property (readonly) char requiresAdministratorAuthorizationToInstall; 
@property (readonly) int verificationState; 
@property (readonly) char verificationStateCalculated; 
@property (retain,readonly) NSString * signerName; 
@property (retain) NSMutableDictionary * internalData; 
@property (retain,readonly) NSArray * configurationItems; 
@property (nonatomic,readonly) char wasEncrypted; 
@property (nonatomic,readonly) char payloadIsExpired; 
@property (nonatomic,readonly) NSDate * payloadExpirationDate; 
@property (nonatomic,readonly) NSDate * effectiveRemovalDate; 
@property (retain) NSString * assignedUserName; 
@property (retain) NSString * assignedUserGUID; 
@property (assign,nonatomic) AuthorizationOpaqueRefRef authorizationRef; 
+(char)supportsSecureCoding;
+(id)decodeProfileData:(id)arg1 returningError:(id*)arg2 ;
+(id)buildCertificateListFromSigners:(id)arg1 firstCertData:(id)arg2 ;
+(int)calculateVerificationStateForCertificatesInfo:(id)arg1 indexOfFailedSigner:(unsigned long long*)arg2 ;
+(id)profileFromArchivedData:(id)arg1 ;
-(void)dealloc;
-(NSString *)name;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(char)hidden;
-(int)verificationState;
-(void)setFrom:(id)arg1 ;
-(NSString *)organization;
-(id)initWithData:(id)arg1 error:(id*)arg2 ;
-(int)accessBitFlagsForProfile;
-(char)profileHasVPNPayload;
-(char)profileHas8021XPayload;
-(char)profileHasAccountsPayload;
-(NSArray *)configurationItems;
-(id)getTrustedAppsForPayloadKeychainItem:(id)arg1 ;
-(void)setUserData:(id)arg1 forKey:(id)arg2 ;
-(NSString *)profileUUID;
-(NSString *)profileIdentifier;
-(NSString *)profileType;
-(id)dictionaryForArchiver;
-(void)setFromArchiverDictionary:(id)arg1 ;
-(id)configurationProfileMutableDictionary;
-(void)setInternalData:(NSMutableDictionary *)arg1 ;
-(void)setAssignedUserName:(NSString *)arg1 ;
-(void)setAssignedUserGUID:(NSString *)arg1 ;
-(void)setInstallationDate:(NSDate *)arg1 ;
-(char)validateKeys;
-(char)_initFromDict:(id)arg1 error:(id*)arg2 ;
-(void)setAuthorizationRef:(AuthorizationOpaqueRefRef)arg1 ;
-(id)userDataForKey:(id)arg1 ;
-(NSDate *)installationDate;
-(NSString *)assignedUserName;
-(NSString *)profileScope;
-(NSDate *)payloadExpirationDate;
-(id)signerCertificatesInfo;
-(char)priv_ShouldBeHidden;
-(char)containsComputerItems;
-(char)requiresAdministratorAuthorizationToInstall;
-(void)removeUserData:(id)arg1 forKey:(id)arg2 ;
-(id)configurationProfileDictionary;
-(id)initForProvisioningProfile:(id)arg1 ;
-(id)initWithConfigurationProfileDictionary:(id)arg1 error:(id*)arg2 ;
-(AuthorizationOpaqueRefRef)authorizationRef;
-(void)setAuthorizationFromData:(id)arg1 ;
-(char)wasEncrypted;
-(char)installedByMDM;
-(char)installedFromOD;
-(char)installedFromDEP;
-(char)installFinished;
-(char)isSystemProfile;
-(char)payloadIsExpired;
-(char)payloadDisabled:(id)arg1 ;
-(long long)targetDeviceType;
-(NSDictionary *)consentText;
-(NSDate *)effectiveRemovalDate;
-(id)signerCertificates:(id)arg1 ;
-(char)haveRemovalPassword;
-(char)removalPasswordMatches:(id)arg1 ;
-(char)adminRemovalDisallowed;
-(id)firstInvalidSignerCertificateData;
-(NSString *)signerName;
-(NSMutableDictionary *)internalData;
-(char)isOTAProfile;
-(char)isFinalOTAProfile;
-(void)priv_SetConfigurationItems:(id)arg1 ;
-(id)archivedData;
-(id)certificateReferencesFromPayload:(id)arg1 ;
-(id)identityCertificateReferencesFromPayload:(id)arg1 ;
-(id)identityPrivateKeyReferencesFromPayload:(id)arg1 ;
-(NSString *)configurationDescription;
-(char)removaldisallowed;
-(unsigned long long)profileVersion;
-(char)verificationStateCalculated;
-(NSString *)assignedUserGUID;
-(id)getAccountInfoForAccountType:(id)arg1 payloadID:(id)arg2 ;
-(id)createAccountInfoDict:(id)arg1 accountInfo:(id)arg2 ;
-(char)addUserAccountData:(id)arg1 payloadID:(id)arg2 forAccount:(id)arg3 forUser:(id)arg4 error:(id*)arg5 ;
-(char)removeUserAccountPayloadData:(id)arg1 forAccount:(id)arg2 forUser:(id)arg3 ;
-(id)readUserAccountPayloadData:(id)arg1 forAccount:(id)arg2 userGUID:(id)arg3 ;
-(char)accountExistsInUserHome:(id)arg1 payloadID:(id)arg2 userGUID:(id)arg3 ;
-(char)addAccountInfo:(id)arg1 payloadID:(id)arg2 accountType:(id)arg3 ;
-(char)removeAccountInfo:(id)arg1 payloadID:(id)arg2 accountType:(id)arg3 ;
-(id)getAccountInfoForAccountTypes:(id)arg1 payloadID:(id)arg2 ;
-(char)accountExistsInUserHomeForAccountTypes:(id)arg1 payloadID:(id)arg2 userGUID:(id)arg3 ;
-(id)prefsFileLocationFromGUID:(id)arg1 ;
-(id)readUserAccountArrayData:(id)arg1 forUser:(id)arg2 ;
-(char)writeUserAccountArrayData:(id)arg1 forAccount:(id)arg2 forUser:(id)arg3 error:(id*)arg4 ;
-(char)userInfoFromGUID:(id)arg1 outUserName:(id*)arg2 outUserUID:(unsigned*)arg3 ;
-(id)pathToUserAccountsFile:(id)arg1 ;
@end

