/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:08 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/CoreBrightness.framework/Versions/A/CoreBrightness
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <CoreBrightness/CoreBrightness-Structs.h>
#import <CoreBrightness/CBDisplayModule.h>
#import <libobjc.A.dylib/CBHIDServiceProtocol.h>

@protocol SLSBrightnessControl, OS_os_log, OS_dispatch_source, CBSliderMapping;
@class NSObject, NSMutableDictionary, CBRampManager, CBDynamicSlider, CBEDR, CBNVRAM, NSMutableArray, CBThermalBrightnessCap, NSString;

@interface CBDisplayModuleSKL : CBDisplayModule <CBHIDServiceProtocol> {

	id<SLSBrightnessControl> _brightnessControlProxy;
	NSObject*<OS_os_log> _logHandle;
	NSObject*<OS_dispatch_source> _delayedBrightnessCommitTimer;
	NSMutableDictionary* _properties;
	float _minNits;
	float _midNits;
	float _maxNits;
	float _maxNitsEDR;
	float _nitsSDRScaled;
	float _nitsSDR;
	float _factor;
	float _minLinearBrightness;
	float _maxLinearBrightness;
	float _nitsCap;
	unsigned long long _chargerState;
	char _chargerStateDimmingEnabled;
	char _snappingEnabled;
	float _snappingSDRBrightnessLimit;
	float _snappingLuxThreshold;
	char _brightnessUpdatesDisabled;
	char _builtIn;
	char _running;
	char _supportsSDRBrightness;
	char _supportsEDR;
	float _SDRRefBrightness;
	CBRampManager* _rampManager;
	CBDynamicSlider* _dynamicSlider;
	CBEDR* _edr;
	float _appliedHeadroom;
	float _requestedHeadroom;
	float _lux;
	CBNVRAM* _nvram;
	unsigned long long _displayState;
	unsigned long long _displayStatePending;
	id<CBSliderMapping> _slider;
	NSMutableArray* _ALSServices;
	char _autoBrightnessState;
	char _autoBrightnessReady;
	NSObject*<OS_dispatch_source> _displayOnTimer;
	CBThermalBrightnessCap* _thermalMitigation;
	SCD_Struct_CB8* _pcc;

}

@property (nonatomic,readonly) unsigned long long displayID; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)dealloc;
-(BOOL)setProperty:(id)arg1 forKey:(id)arg2 ;
-(void)start;
-(void)stop;
-(unsigned long long)displayID;
-(void)sendNotificationForKey:(id)arg1 withValue:(id)arg2 ;
-(id)copyPropertyInternalForKey:(id)arg1 ;
-(BOOL)setPropertyInternal:(id)arg1 forKey:(id)arg2 ;
-(id)copyPropertyInternalForKey:(id)arg1 withParameter:(id)arg2 ;
-(void)sendDisplayBrightnessStateNotificationWithReason:(id)arg1 ;
-(void)commitUserBrightness:(id)arg1 ;
-(id)copyPropertyForKey:(id)arg1 ;
-(id)copyPropertyForKey:(id)arg1 withParameter:(id)arg2 ;
-(void)handleNotificationForKey:(id)arg1 withProperty:(id)arg2 ;
-(void)updateAutoBrightnessState:(char)arg1 ;
-(char)getAggregatedLux:(float*)arg1 ;
-(float)getLinearBrightness;
-(BOOL)handleHIDEvent:(IOHIDEventRef)arg1 from:(IOHIDServiceClientRef)arg2 ;
-(BOOL)addHIDServiceClient:(IOHIDServiceClientRef)arg1 ;
-(BOOL)removeHIDServiceClient:(IOHIDServiceClientRef)arg1 ;
-(void)processCapabilities;
-(float)getMaxNitsEDR;
-(void)initialiseDisplayConfiguration;
-(void)configurePCCDefaults;
-(void)configureSkyLightTimetouts;
-(void)initialiseSDR;
-(void)initialiseEDR;
-(char)supportsEDR;
-(char)supportsSDRBrightness;
-(char)rampNitsCap:(float)arg1 ;
-(void)updateBrightnessState;
-(void)rampManagerUpdateHandling;
-(char)retrieveVBLTime:(unsigned long long*)arg1 andDelta:(unsigned long long*)arg2 ;
-(void)updateDynamicSliderScaler:(float)arg1 ;
-(char)powerStateTransitionOngoing;
-(unsigned long long)powerStateTransitionSignalType;
-(void)completeDisplayStateChange;
-(float)getUserBrightnessForNits:(float)arg1 ;
-(char)updateUserBrightness:(float)arg1 commit:(char)arg2 ;
-(char)updateSDRBrightness:(float)arg1 ;
-(void)autoBrightnessReady;
-(void)storeBrightnessLevel;
-(float)luminanceToPerceptual:(float)arg1 ;
-(float)perceptualToLuminance:(float)arg1 ;
-(float)getNitsForLinearBrightness:(float)arg1 ;
-(char)requestSDRBrightnessTransitionStop;
-(void)rampSDRBrightness:(float)arg1 withLength:(float)arg2 properties:(id)arg3 ;
-(char)requestSDRBrightnessTransition:(float)arg1 ;
-(void)rampDynamicSlider:(float)arg1 withLength:(float)arg2 ;
-(char)requestDynamicSliderImmediate:(float)arg1 ;
-(char)requestDynamicSliderTransitionStop;
-(void)rampEDRHedroom:(float)arg1 withLength:(float)arg2 ;
-(char)requestEDRHeadroomImmediate:(float)arg1 ;
-(void)updateContrastEnhancerState:(unsigned long long)arg1 ;
-(char)requestEDRHeadroomTransitionStop;
-(void)rampFactor:(float)arg1 withLength:(float)arg2 ;
-(char)requestFactorImmediate:(float)arg1 ;
-(char)requestFactorTransitionStop;
-(void)evaluateSnapping;
-(void)reevaluateDynamicSliderStateImmediate;
-(void)cancelDisplayOnTimer;
-(char)requestFactorTransition:(float)arg1 withLength:(float)arg2 ;
-(void)displayOnTimerTimeout;
-(void)updateDynamicSliderAutoBrightness;
-(void)setupDisplayOnTimer;
-(void)requestDisplayTurnON;
-(void)requestDisplayTurnOFF;
-(void)requestDisplayDim;
-(unsigned long long)getDeviceID;
-(float)getLinearBrightnessForNits:(float)arg1 ;
-(char)displaySetBrightnessSmooth:(float)arg1 continuous:(char)arg2 ;
-(void)updateSDRNits:(float)arg1 ;
-(void)updateDynamicSliderChargerState;
-(float)getUserBrightnessSloperExtended;
-(char)requestEDRHeadroomTransition:(float)arg1 withLength:(float)arg2 ;
-(char)handleDisplayPowerStateUpdate:(id)arg1 ;
-(char)handleChargerStateChange:(id)arg1 ;
-(float)getIncrement;
-(float)getDynamicSliderAdjustedSDRNits;
-(id)newDisplayInfo;
-(char)supportsDynamicSlider;
-(id)newStatusInfo;
-(float)getNitsForUserBrightness:(float)arg1 ;
-(float)getDynamicSliderAdjustedNits:(float)arg1 ;
-(float)getMaxNitsAdjusted;
-(char)displayBrightnessUpdate;
-(float)getUserBrightness;
-(void)updateDynamicSliderAmbient;
-(void)updateEDRAmbient;
-(void)reevaluateDynamicSliderState;
-(char)requestDynamicSliderTransition:(float)arg1 withLength:(float)arg2 ;
-(char)addHIDALSService:(id)arg1 ;
-(void)updateAmbient;
-(id)initWithBrightnessControl:(id)arg1 andQueue:(id)arg2 ;
-(char)requestSDRBrightnessTransition:(float)arg1 withLength:(float)arg2 properties:(id)arg3 ;
-(char)getSDRBrightnessTarget:(float*)arg1 ;
-(float)getSDRBrightnessCurrent;
-(float)getSDRNitsCapped;
-(float)getPerceptualBrightness;
@end

