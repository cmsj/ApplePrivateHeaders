/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:34 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/AudioSession.framework/libSessionXPCServer.dylib
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class MXSessionManager, NSXPCConnection;

typedef struct _compressed_pair<std::__1::promise<void> *, std::__1::default_delete<std::__1::promise<void>>> {
	promise<void> __value_;
} compressed_pair<std::__1::promise<void> *, std::__1::default_delete<std::__1::promise<void>>>;

typedef struct unique_ptr<std::__1::promise<void>, std::__1::default_delete<std::__1::promise<void>>> {
	compressed_pair<std::__1::promise<void> *, std::__1::default_delete<std::__1::promise<void>>> __ptr_;
} unique_ptr<std::__1::promise<void>, std::__1::default_delete<std::__1::promise<void>>>;

typedef struct ProcessToken {
	unsigned mValue;
} ProcessToken;

typedef struct _long {
	unsigned long long __cap_;
	unsigned long long __size_;
	char* __data_;
} long;

typedef struct _short {
	/*function pointer*/void* ;
	unsigned char __size_;
	c) __lx;
	char __data_[23];
} short;

typedef struct _raw {
	unsigned long long __words[3];
} raw;

typedef struct _rep {
	/*function pointer*/void* ;
	long __l;
	short __s;
	const aw) __r;
} rep;

typedef struct _compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
	const ep __value_;
} compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>>;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
	compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> __r_;
} basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>;

typedef struct ClientProcess_MockState {
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> mName;
	BOOL mHasSessionProxyingEntitlement;
	BOOL mHasTelephonyEntitlement;
	BOOL mHasAssertionsToStartPlayback;
} ClientProcess_MockState;

typedef struct _tuple_impl<std::__1::__tuple_indices<0, 1>, mx::ProcessToken, mx::ClientProcess_MockState> {
	ProcessToken __value_;
	ClientProcess_MockState __value_;
} tuple_impl<std::__1::__tuple_indices<0, 1>, mx::ProcessToken, mx::ClientProcess_MockState>;

typedef struct tuple<mx::ProcessToken, mx::ClientProcess_MockState> {
	tuple_impl<std::__1::__tuple_indices<0, 1>, mx::ProcessToken, mx::ClientProcess_MockState> __base_;
} tuple<mx::ProcessToken, mx::ClientProcess_MockState>;

typedef struct optional<std::__1::tuple<mx::ProcessToken, mx::ClientProcess_MockState>> {
	/*function pointer*/void* ;
	char __null_state_;
	tuple<mx::ProcessToken, mx::ClientProcess_MockState>) __val_;
	BOOL __engaged_;
} optional<std::__1::tuple<mx::ProcessToken, mx::ClientProcess_MockState>>;

typedef struct shared_ptr<caulk::reactor<mx::IProcessManager *>> {
	const eactor<mx::IProcessManager *> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<caulk::reactor<mx::IProcessManager *>>;

typedef struct shared_ptr<aura::ResourceArbitrator> {
	ResourceArbitrator __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<aura::ResourceArbitrator>;

typedef struct shared_ptr<caulk::reactor<as::server::IHardwareManager *>> {
	const eactor<as::server::IHardwareManager *> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<caulk::reactor<as::server::IHardwareManager *>>;

typedef struct shared_ptr<caulk::reactor<as::server::ISessionManager *>> {
	const eactor<as::server::ISessionManager *> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<caulk::reactor<as::server::ISessionManager *>>;

typedef struct World {
	shared_ptr<caulk::reactor<as::server::ISessionManager *>> mSessionManagerReactor;
	shared_ptr<caulk::reactor<as::server::IHardwareManager *>> mHardwareManagerReactor;
	shared_ptr<aura::ResourceArbitrator> mAURA;
	MXSessionManager* mMXSessionManager;
	shared_ptr<caulk::reactor<mx::IProcessManager *>> mProcessManagerReactor;
} World;

typedef struct type {
	unsigned char __lx[32];
} type;

typedef struct _value_func<void ()> {
	type __buf_;
	__base<void ()> __f_;
} value_func<void ()>;

typedef struct function<void ()> {
	value_func<void ()> __f_;
} function<void ()>;

typedef struct reply_watchdog_factory {
	BOOL mDebugging;
	int mDefaultTimeoutMS;
	function<void ()> mTimeoutHandler;
} reply_watchdog_factory;

typedef struct ProcessInfo {
	ProcessToken token;
	NSXPCConnection* xpcConnection;
} ProcessInfo;

