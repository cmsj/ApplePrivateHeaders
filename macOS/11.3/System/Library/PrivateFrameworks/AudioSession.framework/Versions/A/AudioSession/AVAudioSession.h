/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:51:08 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/AudioSession.framework/Versions/A/AudioSession
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <AudioSession/AudioSession-Structs.h>
#import <libobjc.A.dylib/AVAudioHardwareControlling.h>

@class CAReporter, NSString, NSArray, AVAudioSessionRouteDescription, AVAudioSessionDataSourceDescription, NSDictionary, AVAudioSessionPortDescription;

@interface AVAudioSession : NSObject <AVAudioHardwareControlling> {

	void* _impl;
	BOOL mCategoryEverSet;
	BOOL mSessionEverActivated;
	CAReporter* reporter;

}

@property (readonly) char isPrimary; 
@property (nonatomic,readonly) unsigned hardwareControlToken; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (getter=isOtherAudioPlaying,readonly) char otherAudioPlaying; 
@property (readonly) char secondaryAudioShouldBeSilencedHint; 
@property (readonly) float outputVolume; 
@property (readonly) unsigned long long promptStyle; 
@property (readonly) NSArray * availableInputs; 
@property (readonly) AVAudioSessionRouteDescription * currentRoute; 
@property (readonly) unsigned long long preferredRouteSharingPolicy; 
@property (assign) char canBeNowPlayingApp; 
@property (readonly) double preferredSampleRate; 
@property (readonly) double preferredIOBufferDuration; 
@property (readonly) long long preferredInputNumberOfChannels; 
@property (readonly) long long preferredOutputNumberOfChannels; 
@property (readonly) long long preferredInputOrientation; 
@property (readonly) long long inputOrientation; 
@property (readonly) long long maximumInputNumberOfChannels; 
@property (readonly) long long maximumOutputNumberOfChannels; 
@property (readonly) float inputGain; 
@property (getter=isInputGainSettable,readonly) char inputGainSettable; 
@property (getter=isInputAvailable,readonly) char inputAvailable; 
@property (readonly) NSArray * inputDataSources; 
@property (readonly) AVAudioSessionDataSourceDescription * inputDataSource; 
@property (readonly) NSArray * outputDataSources; 
@property (readonly) AVAudioSessionDataSourceDescription * outputDataSource; 
@property (readonly) double sampleRate; 
@property (readonly) long long inputNumberOfChannels; 
@property (readonly) long long outputNumberOfChannels; 
@property (readonly) double inputLatency; 
@property (readonly) double outputLatency; 
@property (readonly) double IOBufferDuration; 
@property (readonly) NSArray * audioFormats; 
@property (readonly) long long audioFormat; 
@property (readonly) char isDolbyDigitalEncoderAvailable; 
@property (readonly) char isDolbyAtmosAvailable; 
@property (readonly) char isEarpieceActiveNoiseCancelationEnabled; 
@property (readonly) char isPiPAvailable; 
@property (readonly) char forceSoundCheck; 
@property (readonly) char usingLongFormAudio; 
@property (readonly) char requiresNoAudioResources; 
@property (readonly) char allowMixableAudioWhileRecording; 
@property (readonly) char participatesInNowPlayingAppPolicy; 
@property (readonly) char eligibleForBTSmartRoutingConsideration; 
@property (readonly) char prefersNoMicrophoneUsageIndicator; 
@property (readonly) char participatesInMutePriority; 
@property (readonly) char recordingFromRemoteInput; 
@property (assign) char allowAllBuiltInDataSources; 
@property (getter=isHardwareFormatFixedToMultiChannel,readonly) char hardwareFormatFixedToMultiChannel; 
@property (nonatomic,readonly) char prefersNoInterruptionsByRingtonesAndAlerts; 
@property (readonly) char prefersNoDucking; 
@property (readonly) char participatesInVolumePolicy; 
@property (readonly) char prefersToVibeWhenVibrationsAreDisabled; 
@property (readonly) NSArray * activeSessionDisplayIDs; 
@property (readonly) double inputSafetyOffset; 
@property (readonly) double outputSafetyOffset; 
@property (readonly) unsigned long long preferredIOBufferFrameSize; 
@property (readonly) unsigned long long IOBufferFrameSize; 
@property (readonly) unsigned opaqueSessionID; 
@property (readonly) unsigned long long sessionType; 
@property (readonly) double speechDetectionDeviceSampleRate; 
@property (readonly) long long interruptionPriority; 
@property (readonly) char lastActivationStoppedNowPlayingApp; 
@property (readonly) long long reporterID; 
@property (readonly) NSString * routingContextUID; 
@property (readonly) NSDictionary * pickedRoute; 
@property (getter=isVoiceProcessingRoutingEnabled,readonly) char voiceProcessingRoutingEnabled; 
@property (getter=prefersMultichannelAudio,readonly) char prefersMultichannelAudio; 
@property (assign) id<AVAudioSessionDelegate> delegate; 
@property (readonly) char inputIsAvailable; 
@property (readonly) double currentHardwareSampleRate; 
@property (readonly) long long currentHardwareInputNumberOfChannels; 
@property (readonly) long long currentHardwareOutputNumberOfChannels; 
@property (readonly) double preferredHardwareSampleRate; 
@property (nonatomic,retain) CAReporter * reporter; 
@property (nonatomic,readonly) NSArray * availableCategories; 
@property (readonly) NSString * category; 
@property (readonly) unsigned long long categoryOptions; 
@property (readonly) unsigned long long routeSharingPolicy; 
@property (readonly) NSArray * availableModes; 
@property (readonly) NSString * mode; 
@property (readonly) char allowHapticsAndSystemSoundsDuringRecording; 
@property (readonly) unsigned long long recordPermission; 
@property (readonly) AVAudioSessionPortDescription * preferredInput; 
@property (nonatomic,readonly) char prefersNoInterruptionsFromSystemAlerts; 
+(id)sharedInstance;
+(id)auxiliarySessionWithName:(id)arg1 ;
+(id)auxiliarySession;
+(id)primarySession;
+(char)categoryEnablesInput:(id)arg1 ;
-(id)retain;
-(oneway void)release;
-(unsigned long long)retainCount;
-(id)autorelease;
-(void)dealloc;
-(id)init;
-(id<AVAudioSessionDelegate>)delegate;
-(void)setDelegate:(id<AVAudioSessionDelegate>)arg1 ;
-(NSString *)category;
-(NSString *)mode;
-(double)sampleRate;
-(char)setCategory:(id)arg1 error:(id*)arg2 ;
-(NSArray *)availableModes;
-(CAReporter *)reporter;
-(unsigned long long)sessionType;
-(char)isPrimary;
-(double)inputLatency;
-(double)outputLatency;
-(id)initWithName:(id)arg1 manager:(id)arg2 proxying:(unsigned)arg3 sessionType:(unsigned long long)arg4 ;
-(char)isInputAvailable;
-(NSArray *)availableCategories;
-(id)initAuxiliarySessionWithName:(id)arg1 ;
-(id)initForMacOS;
-(sync_guard<AVAudioSessionImpl, caulk::mach::unfair_lock>*)privateGetGuardOfImplementation;
-(char)setActive:(char)arg1 error:(id*)arg2 ;
-(char)setMode:(id)arg1 error:(id*)arg2 ;
-(char)setRouteSharingPolicy:(unsigned long long)arg1 error:(id*)arg2 ;
-(unsigned long long)routeSharingPolicy;
-(unsigned long long)categoryOptions;
-(char)setCategory:(id)arg1 withOptions:(unsigned long long)arg2 error:(id*)arg3 ;
-(char)setCategory:(id)arg1 mode:(id)arg2 options:(unsigned long long)arg3 error:(id*)arg4 ;
-(char)setCategory:(id)arg1 mode:(id)arg2 routeSharingPolicy:(unsigned long long)arg3 options:(unsigned long long)arg4 error:(id*)arg5 ;
-(unsigned long long)recordPermission;
-(void)requestRecordPermission:(/*^block*/id)arg1 ;
-(char)overrideOutputAudioPort:(unsigned long long)arg1 error:(id*)arg2 ;
-(char)setPreferredInput:(id)arg1 error:(id*)arg2 ;
-(AVAudioSessionPortDescription *)preferredInput;
-(char)setAllowHapticsAndSystemSoundsDuringRecording:(char)arg1 error:(id*)arg2 ;
-(char)allowHapticsAndSystemSoundsDuringRecording;
-(char)prefersNoInterruptionsFromSystemAlerts;
-(char)setPrefersNoInterruptionsFromSystemAlerts:(char)arg1 error:(id*)arg2 ;
-(void)setReporter:(CAReporter *)arg1 ;
-(char)setActive:(char)arg1 withOptions:(unsigned long long)arg2 error:(id*)arg3 ;
-(char)canActivate:(id*)arg1 ;
-(void)setActivationState:(char)arg1 ;
-(void)addAggregateDeviceObserver;
-(void)activateWithOptions:(unsigned long long)arg1 completionHandler:(/*^block*/id)arg2 ;
-(char)isOtherAudioPlaying;
-(char)secondaryAudioShouldBeSilencedHint;
-(float)outputVolume;
-(unsigned long long)promptStyle;
-(id)createAVAudioSessionPortsFromAggDeviceForScope:(unsigned)arg1 ;
-(id)getUpdatedCurrentRoute;
-(NSArray *)availableInputs;
-(AVAudioSessionRouteDescription *)currentRoute;
-(char)setAggregatedIOPreference:(unsigned long long)arg1 error:(id*)arg2 ;
-(void)registerForFakeInterruptionNotifications;
-(void)sendActiveDeviceMessage:(char)arg1 ;
-(unsigned short)determineServiceType;
-(char)hasPhoneCallBehaviour;
-(id)buildRouteJSON;
-(void)updateDeviceStreamDescriptions:(BOOL)arg1 ;
-(void)handleAppStatePauseFinal:(id)arg1 ;
-(void)handleAppStateResumeFinal:(id)arg1 ;
-(void)handleRouteChange;
-(long long)inputNumberOfChannels;
-(long long)outputNumberOfChannels;
-(id)getChannels:(unsigned)arg1 scope:(unsigned)arg2 portName:(id)arg3 portID:(id)arg4 ;
-(unsigned)getATDefaultDeviceAggregateID;
-(id)getPortDescriptionForDevice:(unsigned)arg1 scope:(unsigned)arg2 ;
-(id)getATDefaultDeviceAggregate;
-(void)handleServiceRestart;
-(void)handleDefaultInputChange:(char)arg1 ;
-(unsigned long long)preferredRouteSharingPolicy;
-(char)canBeNowPlayingApp;
-(void)setCanBeNowPlayingApp:(char)arg1 ;
-(char)isOutputAvailable;
-(long long)inputOrientation;
-(long long)preferredInputOrientation;
-(char)setPreferredInputOrientation:(long long)arg1 error:(id*)arg2 ;
-(double)preferredSampleRate;
-(char)setPreferredSampleRate:(double)arg1 error:(id*)arg2 ;
-(char)setPreferredIOBufferDuration:(double)arg1 error:(id*)arg2 ;
-(double)preferredIOBufferDuration;
-(double)IOBufferDuration;
-(char)setPreferredInputNumberOfChannels:(long long)arg1 error:(id*)arg2 ;
-(long long)preferredInputNumberOfChannels;
-(char)setPreferredOutputNumberOfChannels:(long long)arg1 error:(id*)arg2 ;
-(long long)preferredOutputNumberOfChannels;
-(long long)maximumInputNumberOfChannels;
-(long long)maximumOutputNumberOfChannels;
-(char)isInputGainSettable;
-(char)setInputGain:(float)arg1 error:(id*)arg2 ;
-(float)inputGain;
-(NSArray *)inputDataSources;
-(AVAudioSessionDataSourceDescription *)inputDataSource;
-(char)setInputDataSource:(id)arg1 error:(id*)arg2 ;
-(NSArray *)outputDataSources;
-(AVAudioSessionDataSourceDescription *)outputDataSource;
-(char)setOutputDataSource:(id)arg1 error:(id*)arg2 ;
-(char)checkPrimarySessionImplicitActivation:(char)arg1 ;
-(NSString *)routingContextUID;
-(unsigned)opaqueSessionID;
-(NSArray *)audioFormats;
-(long long)audioFormat;
-(char)isDolbyDigitalEncoderAvailable;
-(char)isDolbyAtmosAvailable;
-(char)isEarpieceActiveNoiseCancelationEnabled;
-(char)isPiPAvailable;
-(char)forceSoundCheck;
-(char)setForceSoundCheck:(char)arg1 error:(id*)arg2 ;
-(char)recordingFromRemoteInput;
-(char)setRecordingFromRemoteInput:(char)arg1 error:(id*)arg2 ;
-(char)allowAllBuiltInDataSources;
-(void)setAllowAllBuiltInDataSources:(char)arg1 ;
-(char)isHardwareFormatFixedToMultiChannel;
-(char)setDefaultChatMode:(id)arg1 error:(id*)arg2 ;
-(char)setActivationContext:(id)arg1 error:(id*)arg2 ;
-(char)clearInputPreferences:(id*)arg1 ;
-(double)inputSafetyOffset;
-(double)outputSafetyOffset;
-(char)setPreferredIOBufferFrameSize:(unsigned long long)arg1 error:(id*)arg2 ;
-(unsigned long long)preferredIOBufferFrameSize;
-(unsigned long long)IOBufferFrameSize;
-(char)silenceOutput:(unsigned long long)arg1 error:(id*)arg2 ;
-(char)setInterruptionPriority:(long long)arg1 error:(id*)arg2 ;
-(long long)interruptionPriority;
-(char)lastActivationStoppedNowPlayingApp;
-(char)setReporterID:(long long)arg1 error:(id*)arg2 ;
-(long long)reporterID;
-(char)selectIndependentRoutingContext:(id*)arg1 ;
-(char)setVoiceProcessingRoutingEnabled:(BOOL)arg1 error:(id*)arg2 ;
-(char)isVoiceProcessingRoutingEnabled;
-(char)setActive:(char)arg1 withFlags:(long long)arg2 error:(id*)arg3 ;
-(char)inputIsAvailable;
-(double)currentHardwareSampleRate;
-(long long)currentHardwareInputNumberOfChannels;
-(long long)currentHardwareOutputNumberOfChannels;
-(char)setPreferredHardwareSampleRate:(double)arg1 error:(id*)arg2 ;
-(double)preferredHardwareSampleRate;
@end

