/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:17 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/SampleAnalysis.framework/Versions/A/SampleAnalysis
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <SampleAnalysis/SampleAnalysis-Structs.h>
#import <libobjc.A.dylib/NSSecureCoding.h>

@class NSMutableDictionary, NSMutableArray, SATimestamp, SAWSUpdateDataStore, SABinaryLocator, NSMutableSet, NSString, SAMountStatusTracker, SAFrame, SATask, SATimeRange, NSArray, SASharedCache, NSDictionary;

@interface SASampleStore : NSObject <NSSecureCoding> {

	NSMutableDictionary* _tasksByUniquePid;
	NSMutableDictionary* _tasksByPid;
	NSMutableArray* _sampleTimestamps;
	unsigned long long _numSamples;
	SATimestamp* _startTime;
	SATimestamp* _endTime;
	NSMutableArray* _hidEvents;
	NSMutableArray* _fanSpeeds;
	NSMutableArray* _kernelCaches;
	NSMutableArray* _sharedCaches;
	SAWSUpdateDataStore* _wsDataStore;
	SABinaryLocator* _binaryLocator;
	NSMutableSet* _pidsToTrack;
	int _targetProcessId;
	unsigned long long _targetThreadId;
	mach_timebase_info _machTimebase;
	CSArchitecture _arch;
	unsigned _threadPolicyVersion;
	unsigned long long _previousSampleTimestamp;
	unsigned _previousStackshotBufferSize;
	char _sampleOnlyMainThreads;
	char _nextSampleIsFirstSamplingAllThreads;
	char _stackshotsOnlyIncludeSpecificProcesses;
	char _nextSampleIsFirstSamplingAllProcesses;
	char _haveKPerfSched;
	double _sampleIntervalLimit;
	NSMutableArray* _namesToUseDsymForUUID;
	NSMutableArray* _idsToUseDsymForUUID;
	char _bulkSymbolicationFailed;
	unsigned long long _numMicrostackshotsSkippedDueToMissingLoadInfos;
	unsigned long long _targetHIDEventMachAbs;
	NSMutableDictionary* _processAddressTranslations;
	char _attemptedResampling;
	char _keepMicrostackshotsWithoutLoadInfo;
	char _sanitizePaths;
	char _omitSensitiveStrings;
	char _shouldGatherKextStat;
	unsigned _workQueueSoftThreadLimit;
	unsigned _workQueueHardThreadLimit;
	unsigned _numActiveCPUs;
	unsigned long long _dataSource;
	unsigned long long _dataStyle;
	double _attemptedSamplingInterval;
	NSString* _reason;
	double _lastWakeTime;
	SAMountStatusTracker* _mountStatusTracker;
	SAFrame* _cpuSignalHandlerStackLeafKernelFrame;
	unsigned long long _dataGatheringOptions;
	SATimestamp* _timeWhenTransitionedToSamplingAllThreads;
	SATimestamp* _timeWhenTransitionedToSamplingAllProcesses;
	NSString* _kextStat;
	NSString* _kernelVersion;
	NSString* _osProductName;
	NSString* _osProductVersion;
	NSString* _osBuildVersion;
	NSString* _hardwareModel;
	NSString* _bootArgs;
	unsigned long long _targetHIDEventEndMachAbs;
	SATask* _targetProcess;
	NSString* _customOutput;
	double _cpuUsed;
	double _cpuDuration;
	double _cpuLimit;
	double _cpuLimitDuration;
	unsigned long long _numWakeups;
	double _wakeupsDuration;
	unsigned long long _numWakeupsLimit;
	double _wakeupsLimitDuration;
	unsigned long long _bytesWritten;
	double _writeDuration;
	unsigned long long _bytesWrittenLimit;
	double _writeLimitDuration;
	NSString* _event;
	NSString* _eventNote;
	SATimeRange* _eventTimeRange;
	NSString* _signature;
	NSString* _actionTaken;
	double _extraDuration;
	NSString* _durationNote;
	NSString* _stepsNote;
	double _reportTimeThreshold;
	NSArray* _previousSAVersions;
	SASharedCache* _mostRecentNativeSharedCache;

}

@property (assign) char keepStateBetweenSampleIndexes; 
@property (assign) double kPerfPETSampleIntervalLimit; 
@property (assign) char haveKPerfSched; 
@property (readonly) unsigned long long dataSource; 
@property (readonly) unsigned long long dataStyle; 
@property (assign) double attemptedSamplingInterval;                                        //@synthesize attemptedSamplingInterval=_attemptedSamplingInterval - In the implementation block
@property (readonly) NSDictionary * tasksByUniquePid;                                       //@synthesize tasksByUniquePid=_tasksByUniquePid - In the implementation block
@property (readonly) NSDictionary * tasksByPid;                                             //@synthesize tasksByPid=_tasksByPid - In the implementation block
@property (readonly) NSArray * sampleTimestamps;                                            //@synthesize sampleTimestamps=_sampleTimestamps - In the implementation block
@property (readonly) unsigned long long numSamples; 
@property (readonly) SATimestamp * startTime; 
@property (readonly) SATimestamp * endTime; 
@property (readonly) mach_timebase_info machTimebase; 
@property (copy) NSString * reason;                                                         //@synthesize reason=_reason - In the implementation block
@property (readonly) double lastWakeTime;                                                   //@synthesize lastWakeTime=_lastWakeTime - In the implementation block
@property (readonly) NSArray * kernelCaches;                                                //@synthesize kernelCaches=_kernelCaches - In the implementation block
@property (readonly) NSArray * sharedCaches;                                                //@synthesize sharedCaches=_sharedCaches - In the implementation block
@property (readonly) SAMountStatusTracker * mountStatusTracker;                             //@synthesize mountStatusTracker=_mountStatusTracker - In the implementation block
@property (readonly) NSArray * hidEvents;                                                   //@synthesize hidEvents=_hidEvents - In the implementation block
@property (assign) char keepMicrostackshotsWithoutLoadInfo;                                 //@synthesize keepMicrostackshotsWithoutLoadInfo=_keepMicrostackshotsWithoutLoadInfo - In the implementation block
@property (readonly) SAFrame * cpuSignalHandlerStackLeafKernelFrame;                        //@synthesize cpuSignalHandlerStackLeafKernelFrame=_cpuSignalHandlerStackLeafKernelFrame - In the implementation block
@property (assign) unsigned long long dataGatheringOptions;                                 //@synthesize dataGatheringOptions=_dataGatheringOptions - In the implementation block
@property (assign) char sampleOnlyMainThreads; 
@property (readonly) SATimestamp * timeWhenTransitionedToSamplingAllThreads;                //@synthesize timeWhenTransitionedToSamplingAllThreads=_timeWhenTransitionedToSamplingAllThreads - In the implementation block
@property (assign) char stackshotsOnlyIncludeSpecificProcesses; 
@property (readonly) SATimestamp * timeWhenTransitionedToSamplingAllProcesses;              //@synthesize timeWhenTransitionedToSamplingAllProcesses=_timeWhenTransitionedToSamplingAllProcesses - In the implementation block
@property (assign) char sanitizePaths;                                                      //@synthesize sanitizePaths=_sanitizePaths - In the implementation block
@property (assign) char omitSensitiveStrings;                                               //@synthesize omitSensitiveStrings=_omitSensitiveStrings - In the implementation block
@property (assign) char shouldGatherKextStat;                                               //@synthesize shouldGatherKextStat=_shouldGatherKextStat - In the implementation block
@property (copy,readonly) NSString * kextStat;                                              //@synthesize kextStat=_kextStat - In the implementation block
@property (readonly) NSString * kernelVersion;                                              //@synthesize kernelVersion=_kernelVersion - In the implementation block
@property (copy) NSString * osProductName;                                                  //@synthesize osProductName=_osProductName - In the implementation block
@property (copy) NSString * osProductVersion;                                               //@synthesize osProductVersion=_osProductVersion - In the implementation block
@property (copy) NSString * osBuildVersion;                                                 //@synthesize osBuildVersion=_osBuildVersion - In the implementation block
@property (copy) NSString * machineArchitecture; 
@property (readonly) unsigned workQueueSoftThreadLimit;                                     //@synthesize workQueueSoftThreadLimit=_workQueueSoftThreadLimit - In the implementation block
@property (readonly) unsigned workQueueHardThreadLimit;                                     //@synthesize workQueueHardThreadLimit=_workQueueHardThreadLimit - In the implementation block
@property (copy) NSString * hardwareModel;                                                  //@synthesize hardwareModel=_hardwareModel - In the implementation block
@property (assign) unsigned numActiveCPUs;                                                  //@synthesize numActiveCPUs=_numActiveCPUs - In the implementation block
@property (copy) NSString * bootArgs;                                                       //@synthesize bootArgs=_bootArgs - In the implementation block
@property (assign) int targetProcessId; 
@property (assign) unsigned long long targetThreadId; 
@property (assign) unsigned long long targetHIDEventMachAbs; 
@property (assign) unsigned long long targetHIDEventEndMachAbs;                             //@synthesize targetHIDEventEndMachAbs=_targetHIDEventEndMachAbs - In the implementation block
@property (readonly) SATask * targetProcess;                                                //@synthesize targetProcess=_targetProcess - In the implementation block
@property (copy) NSString * customOutput;                                                   //@synthesize customOutput=_customOutput - In the implementation block
@property (assign) double cpuUsed;                                                          //@synthesize cpuUsed=_cpuUsed - In the implementation block
@property (assign) double cpuDuration;                                                      //@synthesize cpuDuration=_cpuDuration - In the implementation block
@property (assign) double cpuLimit;                                                         //@synthesize cpuLimit=_cpuLimit - In the implementation block
@property (assign) double cpuLimitDuration;                                                 //@synthesize cpuLimitDuration=_cpuLimitDuration - In the implementation block
@property (assign) unsigned long long numWakeups;                                           //@synthesize numWakeups=_numWakeups - In the implementation block
@property (assign) double wakeupsDuration;                                                  //@synthesize wakeupsDuration=_wakeupsDuration - In the implementation block
@property (assign) unsigned long long numWakeupsLimit;                                      //@synthesize numWakeupsLimit=_numWakeupsLimit - In the implementation block
@property (assign) double wakeupsLimitDuration;                                             //@synthesize wakeupsLimitDuration=_wakeupsLimitDuration - In the implementation block
@property (assign) unsigned long long bytesWritten;                                         //@synthesize bytesWritten=_bytesWritten - In the implementation block
@property (assign) double writeDuration;                                                    //@synthesize writeDuration=_writeDuration - In the implementation block
@property (assign) unsigned long long bytesWrittenLimit;                                    //@synthesize bytesWrittenLimit=_bytesWrittenLimit - In the implementation block
@property (assign) double writeLimitDuration;                                               //@synthesize writeLimitDuration=_writeLimitDuration - In the implementation block
@property (copy) NSString * event;                                                          //@synthesize event=_event - In the implementation block
@property (copy) NSString * eventNote;                                                      //@synthesize eventNote=_eventNote - In the implementation block
@property (copy) SATimeRange * eventTimeRange;                                              //@synthesize eventTimeRange=_eventTimeRange - In the implementation block
@property (copy) NSString * signature;                                                      //@synthesize signature=_signature - In the implementation block
@property (copy) NSString * actionTaken;                                                    //@synthesize actionTaken=_actionTaken - In the implementation block
@property (assign) double extraDuration;                                                    //@synthesize extraDuration=_extraDuration - In the implementation block
@property (copy) NSString * durationNote;                                                   //@synthesize durationNote=_durationNote - In the implementation block
@property (copy) NSString * stepsNote;                                                      //@synthesize stepsNote=_stepsNote - In the implementation block
@property (assign) double reportTimeThreshold;                                              //@synthesize reportTimeThreshold=_reportTimeThreshold - In the implementation block
@property (readonly) NSString * targetProcessName; 
@property (readonly) NSString * targetProcessAbsolutePath; 
@property (readonly) NSString * targetProcessBundleName; 
@property (readonly) NSString * targetProcessBundleVersion; 
@property (readonly) NSString * targetProcessBundleShortVersion; 
@property (readonly) NSString * targetProcessBundleBuildVersion; 
@property (readonly) NSString * targetProcessBundleProjectName; 
@property (readonly) NSString * targetProcessBundleSourceVersion; 
@property (readonly) NSString * targetProcessBundleProductBuildVersion; 
@property (readonly) NSString * targetProcessBundleId; 
@property (readonly) NSString * targetProcessCommerceAppID; 
@property (readonly) NSString * targetProcessCommerceExternalID; 
@property (readonly) NSString * targetProcessVendorID; 
+(char)supportsSecureCoding;
+(char)canOpenFileAsKTraceFile:(const char*)arg1 errorOut:(id*)arg2 ;
+(id)sampleStoreForSpindumpFile:(const char*)arg1 ;
-(unsigned long long)dataStyle;
-(void)enumerateTasks:(/*^block*/id)arg1 ;
-(unsigned long long)addKCDataStackshot:(id)arg1 returningTimestamp:(id*)arg2 ;
-(char)keepMicrostackshotsWithoutLoadInfo;
-(char)haveKPerfSched;
-(void)setHaveKPerfSched:(char)arg1 ;
-(double)kPerfPETSampleIntervalLimit;
-(id)fanSpeedClosestToTimestamp:(id)arg1 ;
-(NSString *)targetProcessBundleBuildVersion;
-(NSString *)targetProcessBundleProjectName;
-(NSString *)targetProcessBundleSourceVersion;
-(NSString *)targetProcessBundleProductBuildVersion;
-(NSString *)targetProcessCommerceExternalID;
-(NSString *)targetProcessVendorID;
-(char)stackshotsOnlyIncludeSpecificProcesses;
-(void)addProcessInfoFromTailspin:(id)arg1 ;
-(int)addMicrostackshotsFromFile:(id)arg1 ofTypes:(unsigned)arg2 inTimeRangeStart:(double)arg3 end:(double)arg4 onlyPid:(int)arg5 onlyTid:(unsigned long long)arg6 ;
-(char)findCpuSignalHandlerStackLeafKernelFrame;
-(NSString *)machineArchitecture;
-(void)setMachineArchitecture:(NSString *)arg1 ;
-(mach_timebase_info)machTimebase;
-(id)callTreeForTask:(id)arg1 options:(id)arg2 ;
-(id)callTreeForThreadsInTask:(id)arg1 options:(id)arg2 ;
-(id)callTreeForDispatchQueue:(id)arg1 andThread:(id)arg2 inTask:(id)arg3 options:(id)arg4 ;
-(id)callTreeForThread:(id)arg1 inTask:(id)arg2 options:(id)arg3 ;
-(id)callTreeForExecutable:(id)arg1 options:(id)arg2 ;
-(NSDictionary *)tasksByUniquePid;
-(NSArray *)hidEvents;
-(NSArray *)kernelCaches;
-(NSArray *)sharedCaches;
-(SAMountStatusTracker *)mountStatusTracker;
-(void)setKeepMicrostackshotsWithoutLoadInfo:(char)arg1 ;
-(SAFrame *)cpuSignalHandlerStackLeafKernelFrame;
-(SATimestamp *)timeWhenTransitionedToSamplingAllThreads;
-(SATimestamp *)timeWhenTransitionedToSamplingAllProcesses;
-(char)shouldGatherKextStat;
-(NSString *)kextStat;
-(NSString *)kernelVersion;
-(unsigned)workQueueSoftThreadLimit;
-(unsigned)workQueueHardThreadLimit;
-(unsigned)numActiveCPUs;
-(void)setNumActiveCPUs:(unsigned)arg1 ;
-(double)cpuUsed;
-(double)cpuDuration;
-(double)cpuLimit;
-(double)cpuLimitDuration;
-(unsigned long long)numWakeups;
-(double)wakeupsDuration;
-(unsigned long long)numWakeupsLimit;
-(double)wakeupsLimitDuration;
-(unsigned long long)bytesWrittenLimit;
-(double)writeLimitDuration;
-(NSString *)actionTaken;
-(char)keepStateBetweenSampleIndexes;
-(void)setKeepStateBetweenSampleIndexes:(char)arg1 ;
-(id)tidToPidDict;
-(id)tidsForPid:(int)arg1 ;
-(id)idleThreadSet;
-(id)binaryFormat;
-(void)dealloc;
-(id)init;
-(char)isEmpty;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(NSString *)reason;
-(SATimestamp *)startTime;
-(NSString *)event;
-(NSString *)signature;
-(unsigned long long)dataSource;
-(void)setReason:(NSString *)arg1 ;
-(void)setSignature:(NSString *)arg1 ;
-(void)setEvent:(NSString *)arg1 ;
-(SATimestamp *)endTime;
-(NSString *)bootArgs;
-(NSString *)hardwareModel;
-(void)setHardwareModel:(NSString *)arg1 ;
-(unsigned long long)numSamples;
-(void)symbolicate;
-(unsigned long long)bytesWritten;
-(double)writeDuration;
-(void)setBytesWritten:(unsigned long long)arg1 ;
-(void)setBootArgs:(NSString *)arg1 ;
-(NSString *)osProductName;
-(double)lastWakeTime;
-(NSString *)osBuildVersion;
-(id)initForFileParsing;
-(unsigned long long)dataGatheringOptions;
-(void)setDataGatheringOptions:(unsigned long long)arg1 ;
-(unsigned long long)addKCDataStackshots:(id)arg1 createSeparateSamplePerStackshot:(char)arg2 ;
-(void)setSanitizePaths:(char)arg1 ;
-(void)setOsProductName:(NSString *)arg1 ;
-(void)setOsBuildVersion:(NSString *)arg1 ;
-(void)setOsProductVersion:(NSString *)arg1 ;
-(void)setTargetProcessId:(int)arg1 ;
-(void)postprocess;
-(void)setTargetThreadId:(unsigned long long)arg1 ;
-(NSString *)targetProcessAbsolutePath;
-(SATask *)targetProcess;
-(void)setTargetHIDEventMachAbs:(unsigned long long)arg1 ;
-(void)setTargetHIDEventEndMachAbs:(unsigned long long)arg1 ;
-(void)setShouldGatherKextStat:(char)arg1 ;
-(void)useDsymForUUIDFor:(id)arg1 ;
-(NSString *)targetProcessBundleName;
-(NSString *)targetProcessBundleShortVersion;
-(NSString *)targetProcessBundleVersion;
-(NSString *)targetProcessName;
-(void)setEventNote:(NSString *)arg1 ;
-(void)setEventTimeRange:(SATimeRange *)arg1 ;
-(void)setExtraDuration:(double)arg1 ;
-(void)setDurationNote:(NSString *)arg1 ;
-(void)setStepsNote:(NSString *)arg1 ;
-(void)setCustomOutput:(NSString *)arg1 ;
-(char)saveBinaryFormatToStream:(_sFILE*)arg1 ;
-(int)targetProcessId;
-(unsigned long long)targetThreadId;
-(unsigned long long)targetHIDEventMachAbs;
-(unsigned long long)targetHIDEventEndMachAbs;
-(NSString *)eventNote;
-(double)extraDuration;
-(NSString *)durationNote;
-(NSString *)stepsNote;
-(char)sanitizePaths;
-(char)omitSensitiveStrings;
-(void)setOmitSensitiveStrings:(char)arg1 ;
-(NSString *)customOutput;
-(SATimeRange *)eventTimeRange;
-(double)reportTimeThreshold;
-(void)setReportTimeThreshold:(double)arg1 ;
-(unsigned long long)indexOfFirstSampleOnOrAfterTimestamp:(id)arg1 ;
-(unsigned long long)indexOfLastSampleOnOrBeforeTimestamp:(id)arg1 ;
-(void)setAttemptedSamplingInterval:(double)arg1 ;
-(char)setTargetProcessWithHint:(id)arg1 ;
-(id)initForLiveSampling;
-(void)setKPerfPETSampleIntervalLimit:(double)arg1 ;
-(char)parseKTraceFile:(const char*)arg1 warningsOut:(id)arg2 errorOut:(id*)arg3 ;
-(double)attemptedSamplingInterval;
-(NSArray *)sampleTimestamps;
-(char)parseStackshotsFromKTraceFile:(const char*)arg1 warningsOut:(id)arg2 errorOut:(id*)arg3 ;
-(NSDictionary *)tasksByPid;
-(void)addAuxiliaryData:(id)arg1 ;
-(void)setCpuUsed:(double)arg1 ;
-(void)setCpuLimit:(double)arg1 ;
-(void)setCpuDuration:(double)arg1 ;
-(void)setCpuLimitDuration:(double)arg1 ;
-(void)setNumWakeups:(unsigned long long)arg1 ;
-(void)setNumWakeupsLimit:(unsigned long long)arg1 ;
-(void)setWakeupsDuration:(double)arg1 ;
-(void)setWakeupsLimitDuration:(double)arg1 ;
-(void)setBytesWrittenLimit:(unsigned long long)arg1 ;
-(void)setWriteDuration:(double)arg1 ;
-(void)setWriteLimitDuration:(double)arg1 ;
-(void)setActionTaken:(NSString *)arg1 ;
-(NSString *)targetProcessBundleId;
-(NSString *)targetProcessCommerceAppID;
-(long long)addMicrostackshotsFromData:(id)arg1 ofTypes:(unsigned)arg2 inTimeRangeStart:(double)arg3 end:(double)arg4 onlyPid:(int)arg5 onlyTid:(unsigned long long)arg6 ;
-(void)gatherMachineArchitecture;
-(void)setStackshotsOnlyIncludeSpecificProcesses:(char)arg1 ;
-(char)sampleOnlyMainThreads;
-(void)setSampleOnlyMainThreads:(char)arg1 ;
-(void)startingSamplingLiveSystem;
-(char)cacheLoadInfoForProcess:(int)arg1 ;
-(void)finishedSamplingLiveSystem;
-(NSString *)osProductVersion;
-(unsigned long long)addKCDataStackshot:(id)arg1 ;
@end

