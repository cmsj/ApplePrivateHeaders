/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, April 28, 2021 at 2:52:28 PM British Summer Time
* Operating System: Version 11.3 (Build 20E232)
* Image Source: /System/Library/PrivateFrameworks/SafariSharedUI.framework/Versions/A/SafariSharedUI
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <SafariSharedUI/SafariSharedUI-Structs.h>
#import <libobjc.A.dylib/WBSExtensionResourceVerifier.h>

@protocol WBSExtensionsControllerDelegate, OS_dispatch_queue;
@class NSMutableDictionary, NSMutableSet, NSMutableArray, NSString, NSObject, NSTimer, NSPointerArray, NSArray, CoreAnalyticsExtensionsStatistics, NSDictionary;

@interface WBSExtensionsController : NSObject <WBSExtensionResourceVerifier> {

	id<WBSExtensionsControllerDelegate> _delegate;
	id _extensionMatchingContext;
	NSMutableDictionary* _extensionUniqueIdentifierToExtensionDataMap;
	NSMutableDictionary* _extensionIdentifierToStateMap;
	NSMutableDictionary* _extensionIdentifierToBaseURIMap;
	NSMutableDictionary* _baseURIHostToExtensionIdentifier;
	char _loadingEnabledExtensionsAtStartup;
	NSMutableSet* _enabledExtensions;
	NSMutableArray* _extensions;
	NSMutableSet* _replacedExtensions;
	NSMutableSet* _blockedExtensions;
	NSString* _crashReporterMessage;
	NSObject*<OS_dispatch_queue> _appBundleValidationQueue;
	char _allowUnsignedExtensions;
	NSTimer* _deleteStateForRemovedExtensionsTimer;
	NSPointerArray* _observers;
	NSArray* _allDiscoveredExtensions;
	char _extensionsEnabled;

}

@property (nonatomic,copy,readonly) NSString * crashReporterMessage; 
@property (assign,nonatomic) char allowUnsignedExtensions; 
@property (nonatomic,readonly) CoreAnalyticsExtensionsStatistics * extensionStatisticsReport; 
@property (assign,nonatomic,__weak) id<WBSExtensionsControllerDelegate> delegate;                          //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,copy,readonly) NSMutableArray * extensions;                                           //@synthesize extensions=_extensions - In the implementation block
@property (nonatomic,copy,readonly) NSArray * enabledExtensions; 
@property (nonatomic,readonly) char hasAnyEnabledExtensions; 
@property (nonatomic,readonly) char loadingEnabledExtensionsAtStartup;                                     //@synthesize loadingEnabledExtensionsAtStartup=_loadingEnabledExtensionsAtStartup - In the implementation block
@property (nonatomic,copy,readonly) NSDictionary * extensionIdentifierToBaseURIMap; 
@property (nonatomic,readonly) char extensionsEnabled;                                                     //@synthesize extensionsEnabled=_extensionsEnabled - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)webExtensionsController;
+(char)safari_extensionsEnabled;
+(id)extensionURLToLoadFromPersistentStateURL:(id)arg1 ;
+(id)persistentStateURLForExtensionURL:(id)arg1 ;
+(id)_extensionsCrashReporterMessage;
+(id)_extensionPointIdentifier;
+(id)_composedIdentifierForStateOfExtensionWithBundleIdentifier:(id)arg1 developerIdentifier:(id)arg2 ;
+(id)extensionIdentifierToBaseURIMapBundleParameterKey;
+(id)extensionsCrashReporterMessageBundleParameterKey;
+(id)_extensionStateEnabledDateKey;
+(id)_urlForExtensionSettings;
+(id)extensionURLScheme;
+(Class)_extensionDataClass;
+(char)_initializeExtensionData:(id)arg1 forExtension:(id)arg2 ;
+(id)_skipLoadingEnabledExtensionsAtLaunchPreferenceKey;
+(id)_bundleIdentifierFromComposedIdentifier:(id)arg1 ;
+(id)_extensionFromComposedIdentifier:(id)arg1 ;
-(void)extensionBlocklistDidChange;
-(NSString *)crashReporterMessage;
-(void)safari_disableUnsignedExtensionsIfNecessary;
-(void)safari_updateExtensionsCrashReporterMessage;
-(void)safari_updateExtensionStateIfPermissionsIncreased:(id)arg1 ;
-(id)safari_computeCodeSigningDictionaryOnDiskForExtension:(id)arg1 attemptRetryOnFailure:(char)arg2 ;
-(char)safari_isExtensionBlockedByBlocklist:(id)arg1 developerIdentifier:(id)arg2 ;
-(void)safari_replaceExtensionsObsoletedByExtension:(id)arg1 developerIdentifier:(id)arg2 ;
-(void)safari_validateContainingAppOfExtensionIfNecessary:(id)arg1 attemptRetryOnFailure:(char)arg2 ;
-(void)safari_showNewExtensionBannerIfNecessaryForExtensions:(id)arg1 ;
-(id)_persistentStateURLForExtensionURL:(id)arg1 ;
-(id)_extensionURLToLoadFromPersistentStateURL:(id)arg1 ;
-(void)_replaceLegacyExtensionsWithAppExtension:(id)arg1 andDeveloperIdentifier:(id)arg2 ;
-(void)_replaceAppExtensionsWithWebExtension:(id)arg1 developerIdentifier:(id)arg2 ;
-(char)_shouldDisableExtensionIfAdditionalPermissionsAreRequired:(id)arg1 previousExtensionState:(id)arg2 ;
-(char)allowUnsignedExtensions;
-(void)retryExtensionValidation:(id)arg1 ;
-(void)setAllowUnsignedExtensions:(char)arg1 ;
-(void)canToggleAllowUnsignedExtensions:(/*^block*/id)arg1 ;
-(CoreAnalyticsExtensionsStatistics *)extensionStatisticsReport;
-(void)_markExtensionAsReplaced:(id)arg1 ;
-(void)dealloc;
-(id)init;
-(id<WBSExtensionsControllerDelegate>)delegate;
-(void)setDelegate:(id<WBSExtensionsControllerDelegate>)arg1 ;
-(void)addObserver:(id)arg1 ;
-(void)removeObserver:(id)arg1 ;
-(NSMutableArray *)extensions;
-(void)_extensionsWereGloballyDisabled;
-(void)_extensionsWereGloballyEnabled;
-(void)_beginExtensionDiscovery;
-(char)extensionIsEnabled:(id)arg1 ;
-(void)setExtension:(id)arg1 isEnabled:(char)arg2 ;
-(void)loadEnabledExtensions;
-(void)findExtensions;
-(NSDictionary *)extensionIdentifierToBaseURIMap;
-(id)extensionWithUUID:(id)arg1 ;
-(id)extensionDataForExtension:(id)arg1 ;
-(id)composedIdentifierForExtensionStateForExtension:(id)arg1 ;
-(void)disableUnsignedExtensionsIfNecessary;
-(char)extensionsEnabled;
-(void)_updateExtensionsCrashReporterMessage;
-(void)_updateExtensionStateIfPermissionsIncreased:(id)arg1 ;
-(id)_computeCodeSigningDictionaryOnDiskForExtension:(id)arg1 attemptRetryOnFailure:(char)arg2 ;
-(id)_developerIdentifierForExtension:(id)arg1 ;
-(char)_isExtensionBlockedByBlocklist:(id)arg1 developerIdentifier:(id)arg2 ;
-(void)_replaceExtensionsObsoletedByExtension:(id)arg1 developerIdentifier:(id)arg2 ;
-(void)_validateContainingAppOfExtensionIfNecessary:(id)arg1 attemptRetryOnFailure:(char)arg2 ;
-(void)_showNewExtensionBannerIfNecessaryForExtensions:(id)arg1 ;
-(id)_versionNumberForExtension:(id)arg1 ;
-(id)_displayVersionForExtension:(id)arg1 ;
-(id)_displayNameForExtension:(id)arg1 ;
-(id)_updatedExtensionStateForCurrentPermissions:(id)arg1 previousExtensionState:(id)arg2 ;
-(void)_setExtensionIdentifierToStateMap:(id)arg1 forExtensionWithComposedIdentifier:(id)arg2 ;
-(void)_disableAndBlockExtension:(id)arg1 ;
-(void)unloadExtensionIfNecessary:(id)arg1 ;
-(void)_blockExtension:(id)arg1 ;
-(char)_canAccessExtensionsDataInStorage;
-(void)_deferAccessToExtensionsDataInStorageDuringLoad:(char)arg1 ;
-(void)_writeExtensionsStateToStorage;
-(void)_validateAndLoadExtensionIfNecessary:(id)arg1 attemptRetryOnFailure:(char)arg2 isExtensionNewlyInstalled:(char*)arg3 ;
-(char)hasAnyEnabledExtensions;
-(NSArray *)enabledExtensions;
-(void)resetExtensionsState;
-(void)loadSuitableDiscoveredExtensions;
-(id)extensionWithComposedIdentifier:(id)arg1 ;
-(id)readExtensionsStateFromStorage;
-(id)extensionWithBaseURIHost:(id)arg1 ;
-(char)validateAndReadResourceWithExtensionURL:(id)arg1 inExtension:(id)arg2 codeRef:(SecCodeRef)arg3 outResourceData:(id*)arg4 ;
-(char)validateResourceWithFileURL:(id)arg1 resourceData:(id)arg2 inExtension:(id)arg3 codeRef:(SecCodeRef)arg4 ;
-(void)setExtension:(id)arg1 isEnabled:(char)arg2 skipSavingToStorage:(char)arg3 ;
-(void)_connectToExtensionForValidation:(id)arg1 untrustedCodeSigningDictionary:(id)arg2 attemptRetryOnFailure:(char)arg3 ;
-(void)_unloadPreviouslyEnabledExtension:(id)arg1 ;
-(void)_loadEnabledExtension:(id)arg1 ;
-(char)_extensionShouldBeAutomaticallyEnabled:(id)arg1 ;
-(id)_generateBaseURIForExtension:(id)arg1 ;
-(void)_enableExtension:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(id)_extensionStateForExtension:(id)arg1 ;
-(void)_setExtensionState:(id)arg1 forExtension:(id)arg2 ;
-(void)_updateExtensionStateIfThisVersionOfSafariIsNotSupported:(id)arg1 ;
-(char)_extensionShouldBeEnabled:(id)arg1 ;
-(void)_deleteStorageForExtensionWithComposedIdentifier:(id)arg1 ;
-(void)_deleteStateForExtensionWithComposedIdentifier:(id)arg1 ;
-(char)validateAndReadResourceWithExtensionURL:(id)arg1 outResourceData:(id*)arg2 ;
-(char)webViewHasOpenPorts:(id)arg1 ;
-(void)verifyExtensionResourceAtExtensionURL:(id)arg1 fileURL:(id)arg2 ;
-(void)_loadExtensions:(id)arg1 ;
-(void)_updateExtensionStateAfterExtensionWasRemovedWithComposedIdentifier:(id)arg1 ;
-(void)_deleteStateForRemovedExtensionsSoon;
-(void)_removeSafariExtensionDataForExtension:(id)arg1 ;
-(void)_updateExtensionStateAfterExtensionWasAddedWithComposedIdentifier:(id)arg1 ;
-(char)hasAnyEnabledExtensionsInStorage;
-(void)_addExtensionToBaseURIMap:(id)arg1 withResourceURL:(id)arg2 ;
-(void)_saveExtensionsStateToStorage;
-(void)_deleteStateForRemovedExtensionsAfterDelay:(double)arg1 ;
-(void)_deleteStateForRemovedExtensionsTimerFired:(id)arg1 ;
-(void)_deleteStateForRemovedExtensions;
-(char)validateAndReadResourceWithExtensionURL:(id)arg1 inExtension:(id)arg2 outResourceData:(id*)arg3 ;
-(char)loadingEnabledExtensionsAtStartup;
@end

